Implementation smell,Namespace,Class,File,Method,Description
Long Method,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has 106 lines of code.
Long Method,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pGetSerieValues,The method has 139 lines of code.
Long Method,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The method has 165 lines of code.
Long Method,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The method has 237 lines of code.
Long Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getLineAux,The method has 109 lines of code.
Long Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,launch,The method has 131 lines of code.
Long Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The method has 180 lines of code.
Long Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,evalFunctions,The method has 122 lines of code.
Long Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,addFieldToNewPage,The method has 115 lines of code.
Long Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetData,The method has 126 lines of code.
Complex Method,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,Cyclomatic complexity of the method is 21
Complex Method,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getPaperSizeFromSizeName,Cyclomatic complexity of the method is 12
Complex Method,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,Cyclomatic complexity of the method is 21
Complex Method,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pGetExt,Cyclomatic complexity of the method is 12
Complex Method,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pGetSerieValues,Cyclomatic complexity of the method is 35
Complex Method,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,Cyclomatic complexity of the method is 12
Complex Method,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,initVariable,Cyclomatic complexity of the method is 31
Complex Method,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalGroupFunctions,Cyclomatic complexity of the method is 22
Complex Method,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultFunction,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalFunctionInt,Cyclomatic complexity of the method is 57
Complex Method,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pResultFunctionInt,Cyclomatic complexity of the method is 36
Complex Method,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,Cyclomatic complexity of the method is 14
Complex Method,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,Cyclomatic complexity of the method is 48
Complex Method,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalNumberToString,Cyclomatic complexity of the method is 10
Complex Method,CSReportDll,cReportConnect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportConnect.cs,getSqlParameters,Cyclomatic complexity of the method is 22
Complex Method,CSReportDll,cReportControl,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControl.cs,load,Cyclomatic complexity of the method is 16
Complex Method,CSReportDll,cReportControl,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControl.cs,save,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReportError,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportError.cs,errGetDescript,Cyclomatic complexity of the method is 37
Complex Method,CSReportDll,cReportPage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportPage.cs,load,Cyclomatic complexity of the method is 10
Complex Method,CSReportDll,cReportPage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportPage.cs,saveForWeb,Cyclomatic complexity of the method is 16
Complex Method,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,Cyclomatic complexity of the method is 9
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,moveGroup,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getLineType,Cyclomatic complexity of the method is 10
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getLine,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetLineWork,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetLineAuxPrintHeader,Cyclomatic complexity of the method is 18
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pEvalGroupChange,Cyclomatic complexity of the method is 20
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGroupChangedAux,Cyclomatic complexity of the method is 9
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getLineAux,Cyclomatic complexity of the method is 31
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,launch,Cyclomatic complexity of the method is 28
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,save,Cyclomatic complexity of the method is 16
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,saveData,Cyclomatic complexity of the method is 9
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getValue,Cyclomatic complexity of the method is 23
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initControls,Cyclomatic complexity of the method is 9
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pInitCtrls,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupTotal,Cyclomatic complexity of the method is 27
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupMax,Cyclomatic complexity of the method is 32
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupMin,Cyclomatic complexity of the method is 32
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupAverage,Cyclomatic complexity of the method is 27
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupCount,Cyclomatic complexity of the method is 25
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,Cyclomatic complexity of the method is 59
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,evalFunctions,Cyclomatic complexity of the method is 32
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetGroupFormulaHF,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,compileReport,Cyclomatic complexity of the method is 12
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetIndexGroupInFormulaGroups,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pIsGroupFormula,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,addFieldToNewPage,Cyclomatic complexity of the method is 35
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,createPageSetting,Cyclomatic complexity of the method is 16
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetData,Cyclomatic complexity of the method is 20
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,nLoad,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,resumeDBAccessMissing,Cyclomatic complexity of the method is 8
Complex Method,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetIndexColInGroupFormulasAux,Cyclomatic complexity of the method is 8
Long Parameter List,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,showPrintDialog,The method has 9 parameters.
Long Parameter List,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getcPrint,The method has 7 parameters.
Long Parameter List,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getDefaultPrinter,The method has 7 parameters.
Long Parameter List,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pGetSerieValues,The method has 5 parameters.
Long Parameter List,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pGetSerieValuesAux,The method has 7 parameters.
Long Parameter List,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetData,The method has 5 parameters.
Long Statement,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The length of the statement  "			Bitmap unsafeBitmap = new Bitmap (gdiBitmap.bmWidth' gdiBitmap.bmHeight' -stride' PixelFormat.Format24bppRgb' new IntPtr (ptr + 24 + stride * (gdiBitmap.bmHeight - 1))); " is 169.
Long Statement,CSReportDll,cParameter,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cParameter.cs,load,The length of the statement  "	m_columnType = cDatabaseGlobals.getDataTypeFromAdo (xDoc.getNodeProperty (nodeObj' "TypeColumn").getValueInt (eTypes.eInteger)); " is 128.
Long Statement,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getcPrint,The length of the statement  "	int paperSize = getPaperSizeFromSizeName (cPrintWMI.getPrinterConfigInfoValueFromWMI ("PaperSize"' printerConfigInfo' "A4") as string); " is 135.
Long Statement,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getDefaultPrinter,The length of the statement  "	paperSize = getPaperSizeFromSizeName (cPrintWMI.getPrinterConfigInfoValueFromWMI ("PaperSize"' printerConfigInfo' "A4") as string); " is 131.
Long Statement,CSReportDll,cPrinter,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrinter.cs,showDialog,The length of the statement  "	if (cPrintAPI.showPrintDialog (m_deviceName' m_driverName' m_port' paperSize' orientation' fromPage' toPage' m_copies' paperBin)) { " is 131.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pGetParameter,The length of the statement  "		throw new ReportArgumentMissingException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRMISSINGPARAM' paramIndex.ToString ()' function)); " is 150.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The length of the statement  "	m_formula.setTextC ((tc.Substring (0' r)).ToString () + C_KEYFUNCINT + cReportGlobals.format (m_formula.getFormulasInt ().count ()' "000") + tc.Substring (q)); " is 159.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The length of the statement  "		throw new ReportNotDefinedFunctionException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRINDEFINEDFUNCTION' name)); " is 130.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultSumTime,The length of the statement  "		return cReportGlobals.format (st.getHour ()' "00") + ":" + cReportGlobals.format (st.getMinute ()' "00") + ":" + cReportGlobals.format (st.getSecond ()' "00"); " is 159.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultGetVar,The length of the statement  "		throw new ReportArgumentMissingException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRMISSINGPARAM' varName' "_getVar()")); " is 138.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultGetParam,The length of the statement  "		throw new ReportArgumentMissingException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRMISSINGPARAM' paramName' "_getParameter()")); " is 146.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The length of the statement  "			text = text.Replace (C_MACRO_CTRL + collCtrlsToReplace [i] + C_MACRO_CTRL' m_report.getValue (ctrlValue.getName ()' false).ToString ()); " is 136.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalAverage,The length of the statement  "	w_item.setValue ((double)w_item.getValue () + pGetNumber (m_report.getValue (fint.getParameters ().item (0).getValue ()' true))); " is 129.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalSum,The length of the statement  "	w_item.setValue (Convert.ToDouble (w_item.getValue ()) + pGetNumber (m_report.getValue (fint.getParameters ().item (0).getValue ()' true))); " is 140.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalSetVar,The length of the statement  "		throw new ReportArgumentMissingException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRMISSINGPARAM' varName' "_setVar")); " is 136.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalAddToVar,The length of the statement  "		throw new ReportArgumentMissingException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRMISSINGPARAM' varName' "_evalAddToVar")); " is 142.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalSumTime,The length of the statement  "	pSumTimes ((cStructTime)w_item.getValue ()' DateTime.Parse (m_report.getValue (fint.getParameters ().item (0).getValue ()' true).ToString ())); " is 143.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalGroupTotal,The length of the statement  "		w_item.setValue (m_report.getGroupTotal (int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXCOL).getValue ())' int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).getValue ()))); " is 210.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalGroupMax,The length of the statement  "		w_item.setValue (m_report.getGroupMax (int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXCOL).getValue ())' int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).getValue ()))); " is 208.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalGroupMin,The length of the statement  "		w_item.setValue (m_report.getGroupMin (int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXCOL).getValue ())' int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).getValue ()))); " is 208.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalGroupAverage,The length of the statement  "		w_item.setValue (m_report.getGroupAverage (int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXCOL).getValue ())' int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).getValue ()))); " is 212.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalGroupPercent,The length of the statement  "		w_item.setValue (m_report.getGroupTotal (int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXCOL).getValue ())' int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).getValue ()))); " is 210.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalGroupCount,The length of the statement  "		w_item.setValue (m_report.getGroupCount (int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXCOL).getValue ())' int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).getValue ()))); " is 210.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalGroupLineNumber,The length of the statement  "	w_item.setValue (m_report.getGroupLineNumber (int.Parse (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).getValue ()))); " is 132.
Long Statement,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckParameters,The length of the statement  "			throw new ReportArgumentMissingException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRMISSINGPARAM' i.ToString ()' name)); " is 137.
Long Statement,CSReportDll,cReportConnect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportConnect.cs,getSqlParameters,The length of the statement  "			cWindow.msgWarning ("This data type is not codified " + param.getColumnType () + ". Parameter: " + param.getName () + ". Function: sqlParameters."); " is 148.
Long Statement,CSReportDll,cReportControl,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControl.cs,load,The length of the statement  "		if (m_label.getAspect ().getFormat () == "" && m_field.getFieldType () == (int)CSDataBase.csAdoDataType.adDBTimeStamp) { " is 120.
Long Statement,CSReportDll,cReportError,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportError.cs,errGetDescript,The length of the statement  "		s = "The cReport launch metodh must be called with an instance of oLaunchInfo class or the cReport init method must be called before calling launch."; " is 150.
Long Statement,CSReportDll,cReportError,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportError.cs,errGetDescript,The length of the statement  "		s = "The variable $1 was not found in the variables collection. The variables must be declared with DeclareVar before being used by SetVar or GetVar."; " is 151.
Long Statement,CSReportDll,cReportError,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportError.cs,errGetDescript,The length of the statement  "		s = "The parameter $1 was not found in the parameters collection. The parameters must be present in the main recordset."; " is 121.
Long Statement,CSReportDll,cReportError,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportError.cs,errGetDescript,The length of the statement  "		s = "The printer is not defined. This could happens if your system does not have any printer or default printer is not defined."; " is 129.
Long Statement,CSReportDll,cReportError,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportError.cs,errGetDescript,The length of the statement  "	s = s + "\n\nSection  : " + gDebugSection + "\nSec. Line: " + gDebugSectionLine + "\nControl  : " + gDebugControl + "\n"; " is 121.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	const string C_GROUP_FUNCTION_DESCRIPT = "It function calculates its value before processing the group." + "\r\nWhen CSReport found this function it iterates through the " + "main recordset to the last row in the group and calculates " + "the $1  of the values in the column refered by the " + "column_name parameter."; " is 319.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	const string C_GROUP_INDEX = "group_index: index of the group" + "\r\nWhen group_index is equal to -1 the index of the group section in which the control is contained will be used." + "\r\nWhen group_index is equal to 0 the $1 of the column of every row in the main recordset will be returned." + "\r\nWhen group_index is greater than zero the $1 of the column of every row in the main recordset contained in the group which index is equal to index_group will be returned."; " is 474.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	const string C_GROUP_FUNCTION_DESCRIPT2 = "It function calculates its value before processing the group." + "\r\nWhen CSReport found this function it iterates through the " + "main recordset to the last row in the group and calculates " + "the $1."; " is 249.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	const string C_GROUP_INDEX2 = "group_index: index of the group" + "\r\nWhen group_index is equal to -1 the index of the group section in which the control is contained will be used." + "\r\nWhen group_index is equal to 0 the $1 will be evaluated using every row in the main recordset." + "\r\nWhen group_index is greater than zero the $1 will be evaluated using every row contained in the group which index is equal to index_group.\r\n"; " is 437.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns a double after applying an aritmetical operation to ther first two arguments.\r\n\r\nSyntax: _calc(control_1' control_2' value' operator)\n1 addition' 2 substraction' 3 multiplication' 4 division' 5 power"); " is 233.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns an int with the amount of rows in the main recordset of the report.\r\n\r\nSyntax: _count()"); " is 120.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_COMPARE_DESCRIPT + "\r\n\r\nSyntax: _isEqual(control_name' value)\r\n" + C_CONTROL_NAME_DESCRIPT + "\r\n" + C_VALUE_TO_COMPARE_DESCRIPT); " is 153.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_COMPARE_DESCRIPT + "\r\n\r\nSyntax: _isNotEqual(control_name' value)\r\n" + C_CONTROL_NAME_DESCRIPT + "\r\n" + C_VALUE_TO_COMPARE_DESCRIPT); " is 156.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_COMPARE_DESCRIPT + "\r\n\r\nSyntax: _isGreaterThan(control_name' value)\r\n" + C_CONTROL_NAME_DESCRIPT + "\r\n" + C_VALUE_TO_COMPARE_DESCRIPT); " is 159.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_COMPARE_DESCRIPT + "\r\n\r\nSyntax: _isLowerThan(control_name' value)\r\n" + C_CONTROL_NAME_DESCRIPT + "\r\n" + C_VALUE_TO_COMPARE_DESCRIPT); " is 157.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns a boolean value after searching a constant value in a column of the main recordset.\r\n\r\nSyntax: _isInRS(column_name'\"value\")\ncolumn_name: the name of a column in the main recordset\nvalue: an string to be searched (it must be surrounded by double quotes)."); " is 290.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_GROUP_FUNCTION_DESCRIPT.Replace ("$1"' "summatory") + "\r\n\r\nSyntax: _groupTotal(column_name' group_index)" + "\r\n\r\n" + C_COLUMN_NAME + "\r\n" + C_GROUP_INDEX.Replace ("$1"' "summatory")); " is 209.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_GROUP_FUNCTION_DESCRIPT.Replace ("$1"' "maximum value") + "\r\n\r\nSyntax: _groupTotal(column_name' group_index)" + "\r\n\r\n" + C_COLUMN_NAME + "\r\n" + C_GROUP_INDEX.Replace ("$1"' "maximum value")); " is 217.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_GROUP_FUNCTION_DESCRIPT.Replace ("$1"' "minimum value") + "\r\n\r\nSyntax: _groupTotal(column_name' group_index)" + "\r\n\r\n" + C_COLUMN_NAME + "\r\n" + C_GROUP_INDEX.Replace ("$1"' "minimum value")); " is 217.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_GROUP_FUNCTION_DESCRIPT.Replace ("$1"' "average value") + "\r\n\r\nSyntax: _groupAverage(column_name' group_index)" + "\r\n\r\n" + C_COLUMN_NAME + "\r\n" + C_GROUP_INDEX.Replace ("$1"' "average value")); " is 219.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_GROUP_FUNCTION_DESCRIPT2.Replace ("$1"' "percent value column_name2 represents in the summatory of column_name1") + "\r\n\r\nSyntax: _groupTotal(column_name1' column_name2' group_index)" + "\r\n\r\n" + C_COLUMN_NAME + "\r\n" + C_COLUMN_NAME + "\r\nNote: usually column_name1 and column_name2 have the same value because it is used to get the perecentage a value in a set represents." + "\r\n" + C_GROUP_INDEX2.Replace ("$1"' "percent value")); " is 459.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_GROUP_FUNCTION_DESCRIPT2.Replace ("$1"' "amunt of lines in the group") + "\r\n\r\nSyntax: _groupCount(column_name' group_index)" + "\r\n\r\n" + C_COLUMN_NAME + "\r\n" + C_GROUP_INDEX2.Replace ("$1"' "amunt of lines")); " is 234.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns the line number in a Group' if when Group is zero it returns the line number in the report." + "\r\n\r\nSyntax: _GroupLineNumber(group_index)" + "\r\n\r\ngroup_index: Group's index" + "\r\nWhen group_index is -1 the group's index where the control is contained will be used." + "\r\nWhen group_index is 0 the line number in the report will be returned." + "\r\nWhen group_index is > 0 the line number in the group will be returned."); " is 460.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip (C_GROUP_FUNCTION_DESCRIPT2.Replace ("$1"' "line number of the current line in the group.") + "\r\n\r\nSyntax: _groupLineNumber(group_index)" + "\r\n" + C_GROUP_INDEX2.Replace ("$1"' "line number of the current line in the group")); " is 245.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns a double with the maximun value in a column.\r\n\r\nSyntax: _max(control_name)\r\n" + C_CONTROL_NAME_DESCRIPT); " is 137.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns a double with the minimu valie in a column.\r\n\r\nSyntax: _min(control_name)\r\n" + C_CONTROL_NAME_DESCRIPT); " is 136.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns the number expressed in words.\r\n\r\nSyntax: _numberToString(control_name'nLanguage)\r\n" + C_CONTROL_NAME_DESCRIPT + "\n" + C_LANGUAGE_DESCRIPT); " is 173.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns a the value of a parameter from the main connection\r\n\r\nSyntax: _getParam(parameter_name)"); " is 121.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns a value from a column of a row in an additional recordset. " + "\r\n\r\nThe rows of the additional recordset are filtered comparing the value " + "of the column refered by the parameter filter of " + "the current row in the main recordset with the values of the column " + "refered by filter_column_name_add_ds in the additional recordset." + "\r\n\r\nSyntax: (ds means Data Source): " + "_getDataFromRSAd(ds_name' ds_index' column_name' filter)" + "\r\n\r\nds_name: name of the additioanl connection" + "\r\nds_index: index of the recordset in the additioanl connection" + "\r\ncolumn_name: name of the column in the additional recordset which contains the value to return" + "\r\nfilter: an strng containing the relation between one or more columns of the main recordset and the additional recordset" + "\r\n\texample of filter:" + "\r\n\t\tpr_id=pr_id (tipical primary key to foreign key relation)" + "\r\n\t\tpr_id=pr_id|fv_id=fv_id (a two column relation is separated by pipes)" + "\r\n\t\tas_id=as_id_factura (the names of the columns can be differents)"); " is 1088.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns a value from a column of a row in the main recordset. " + "The rows are filtered comparing the value " + "of the column refered by the parameter filter_column_name1 of " + "the current row with the values of the column " + "refered by filter_column_name2." + "\r\n\r\nSyntax: getDataFromRS (column_name' filter_column_name1' filter_column_name2)" + "\r\n\r\ncolumn_name: name of the column which contains the value to return" + "\r\nfilter_column_name1: name of the column in the current record" + "\r\nfilter_column_name2: name of the column in used to filter values"); " is 596.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns the value of the control refered by the control_name parameter surrounded by double quotes" + "\r\n\r\nSyntax: _getString(control_name)\r\n" + C_CONTROL_NAME_DESCRIPT); " is 194.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns the value of the variable refered by the variable_name parameter" + "\r\n\r\nSyntax: _getVar(variable_name)"); " is 136.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns a double with the average value of a column" + "\r\n\r\nSyntax: _average(control_name)\r\n" + C_CONTROL_NAME_DESCRIPT); " is 145.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It adds the value of the parameter value to a user variable refered by the parameter variable_name" + "\r\n\r\nSyntax: _addToVar(variable_name' value)"); " is 168.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns the amount of hours' minutes and seconds from a column which contains hours and minutes in the format hh:nn" + "\r\n\r\nSyntax: _sumTime(control_name' show_seconds)\r\n" + C_CONTROL_NAME_DESCRIPT); " is 223.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns an int with the length of a control's value\r\n\r\nSyntax: _length(control_name)\r\n\r\n" + C_CONTROL_NAME_DESCRIPT); " is 143.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It replace every occurrence of a control name in the text property of another control. " + "\r\n\r\nThis is the only function which is used in the text property of a control. " + "the syntax is very weird because you don't call this function using its name " + "but you put in the text property of a control the name of other control " + "surrounded by two ats (@@control_name@@)\r\n\r\nSyntax: @@control_name@@\r\n\r\n" + C_CONTROL_NAME_DESCRIPT); " is 463.
Long Statement,CSReportDll,cReportFormulaTypes,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulaTypes.cs,initialize,The length of the statement  "	fi.setDecrip ("It returns an string with the value of the control refered by the control_name parameter" + "\r\n\r\nSyntax: _value(control_name)\r\n\r\n" + C_CONTROL_NAME_DESCRIPT); " is 181.
Long Statement,CSReportDll,cReportGroup,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroup.cs,load,The length of the statement  "	m_comparisonType = (csRptGrpComparisonType)xDoc.getNodeProperty (nodeObj' "ComparisonType").getValueInt (eTypes.eInteger); " is 122.
Long Statement,CSReportDll,cReportGroup,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroup.cs,fixName,The length of the statement  "	if (m_name.Length == 0 || cUtil.subString (m_name.ToLower ()' 0' 5) == "group" || cUtil.subString (m_name.ToLower ()' 0' 5) == "grupo" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gh_" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gf_" || cUtil.subString (m_name.ToLower ()' 0' 2) == "g_") { " is 298.
Long Statement,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,pSetName,The length of the statement  "	if (sectionName.Length == 0 || cUtil.subString (sectionName' 0' 5) == "group" || cUtil.subString (sectionName' 0' 5) == "grupo" || cUtil.subString (sectionName' 0' 3) == "gh_" || cUtil.subString (sectionName' 0' 3) == "gf_" || cUtil.subString (sectionName' 0' 2) == "g_") { " is 273.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,putCodeInClass,The length of the statement  "		return "Public Class util\r\n" + "Implements CSReportScript.cIReportScriptType\r\n" + code + "\r\n" + "Public Function RunScript(globals As CSReportScript.cReportCompilerGlobals) As String Implements CSReportScript.cIReportScriptType.RunScript\r\n" + "  dim value__ = " + getFunctionCall (code' formula) + "\r\n" // TODO: remove debug info " is 339.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,putCodeInClass,The length of the statement  "                     + "  Dim var__\r\nFor Each var__ In globals\r\n System.Console.WriteLine(var__.ToString() + \" : \" + globals.getVar(var__).getValue().ToString())\r\nNext\r\n"" is 159.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,putCodeInClass,The length of the statement  "		+ "  Select Case Microsoft.VisualBasic.Information.VarType(value__)\r\n" + "    Case 11\r\n" + "      RunScript = System.Convert.ToInt32(value__)\r\n" + "    Case 7\r\n" + "      RunScript = String.Format(\"{0:MM/dd/yyyy}\"' value__)\r\n" + "    Case Else\r\n" + "      RunScript = value__\r\n" + "  End Select\r\n" + "End Function\r\n" + "Function Now()\r\n" + "  Now = Microsoft.VisualBasic.Now\r\n" + "End Function\r\n" + "Function FormatDateTime(aDate' format) As String\r\n" + "    FormatDateTime = Microsoft.VisualBasic.Strings.FormatDateTime(aDate' format)\r\n" + "End Function\r\n" + "End Class"; " is 604.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The length of the statement  "	// This class implements the 'CodeDomProvider' class as its base. All of the current .Net languages (at least Microsoft ones) " is 125.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The length of the statement  "	// come with thier own implemtation' thus you can allow the user to use the language of thier choice (though i recommend that " is 125.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The length of the statement  "	// Saves us from deleting the Dll when we are done with it' though you could set this to false and save start-up time by next time by not having to re-compile " is 158.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The length of the statement  "	// And set any others you want' there a quite a few' take some time to look through them all and decide which fit your application best! " is 136.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The length of the statement  "	// Add any references you want the users to be able to access' be warned that giving them access to some classes can allow " is 122.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The length of the statement  "	// harmful code to be written and executed. I recommend that you write your own Class library that is the only reference it allows " is 130.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The length of the statement  "	// (though things like "System.Xml.dll" can be useful' just need to provide a way users can read a file to pass in to it) " is 121.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The length of the statement  "	// Just to avoid bloatin this example to much' we will just add THIS program to its references' that way we don't need another " is 126.
Long Statement,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The length of the statement  "	// project to store the interfaces that both this class and the other uses. Just remember' this will expose ALL public classes to " is 129.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetLineAuxGroupFooter,The length of the statement  "	// TODO: Use of ByRef founded Private Function pGetLineAuxGroupFooter(ByRef Fields As cReportPageFields) As csRptGetLineResult " is 126.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetLineAuxGroupHeader,The length of the statement  "	// TODO: Use of ByRef founded Private Function pGetLineAuxGroupHeader(ByVal bGetNewPage As Boolean' ByRef Fields As cReportPageFields) As csRptGetLineResult " is 156.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetLineAuxDetail,The length of the statement  "	// TODO: Use of ByRef founded Private Function pGetLineAuxDetail(ByRef Fields As cReportPageFields) As csRptGetLineResult " is 121.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getLineAux,The length of the statement  "						field.setValue (cReportGlobals.format (m_compiler.resultFunction (ctrl.getFormulaValue ())' ctrl.getLabel ().getAspect ().getFormat ())); " is 137.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,launch,The length of the statement  "		throw new ReportException (csRptErrors.ERROR_WHEN_RUNNING_REPORT' C_MODULE' "Error when running report.\n\n" + "Info: " + ex.Message + "\n" + "Source: " + ex.Source + "\n" + "Stack trace: " + ex.StackTrace + "\n" + "Description: " + ex.ToString ()); " is 249.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,save,The length of the statement  "	// TODO: Use of ByRef founded Public Function Save(ByRef CommDialog As Object' Optional ByVal WithDialog As Boolean = True) As Boolean " is 134.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,saveData,The length of the statement  "	// TODO: Use of ByRef founded Public Function SaveData(ByRef CommDialog As Object' Optional ByVal WithDialog As Boolean = True) As Boolean " is 138.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,saveDataForWeb,The length of the statement  "	// TODO: Use of ByRef founded Private Function SaveDataForWeb(ByRef Page As cReportPage' ByVal DataName As String' ByVal DataPath As String) As Boolean " is 151.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getValue,The length of the statement  "		throw new ReportException (csRptErrors.CONTROL_NOT_FOUND' C_MODULE' cReportError.errGetDescript (csRptErrors.CONTROL_NOT_FOUND' controlName)); " is 142.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initControls,The length of the statement  "		if (ctrl.getControlType () == csRptControlType.CSRPTCTFIELD || ctrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) { " is 123.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pInitCtrls,The length of the statement  "		throw new ReportException (csRptErrors.FIELD_NOT_FOUND' C_MODULE' cReportError.errGetDescript (csRptErrors.FIELD_NOT_FOUND' ctrl.getName ()' fieldName)); " is 153.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetChartImage,The length of the statement  "	// TODO: Use of ByRef founded Private Function pGetChartImage(ByVal IndexRows As Long' ByVal IndexField As Long' ByVal IndexRow As Long' ByRef ctrl As cReportControl) As Long " is 174.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The length of the statement  "	// TODO: Use of ByRef founded Private Function InitGroups(ByRef rs As ADODB.Recordset' ByVal MainDataSource As String) As Boolean " is 129.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The length of the statement  "			throw new ReportException (csRptErrors.GROUP_NOT_FOUND_IN_MAIN_RS' C_MODULE' cReportError.errGetDescript (csRptErrors.GROUP_NOT_FOUND' w_item.getName ()' w_item.getFieldName ())); " is 179.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The length of the statement  "				throw new ReportException (csRptErrors.GROUP_NOT_FOUND_IN_MAIN_RS' C_MODULE' cReportError.errGetDescript (csRptErrors.GROUP_NOT_FOUND' w_item.getName ()' w_item.getFieldName ())); " is 179.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,evalFunctions,The length of the statement  "				if (formula.getWhenEval () == whenEval && (idxGroup == formula.getIdxGroup () || formula.getIdxGroup2 () == idxGroup)) { " is 120.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,evalFunctions,The length of the statement  "				if (formula.getWhenEval () == whenEval && (idxGroup == formula.getIdxGroup () || formula.getIdxGroup2 () == idxGroup)) { " is 120.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetGroupsInCtrlFormulaHideAux,The length of the statement  "	// TODO: Use of ByRef founded Private Sub pSetGroupsInCtrlFormulaHideAux(ByRef Scls As cReportSectionLines' ByVal IdxGrop As Integer) " is 133.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetGroupFormulaHF,The length of the statement  "	// TODO: Use of ByRef founded Private Sub pSetGroupFormulaHF(ByRef Sections As cReportSections' ByVal IdxGrop As Integer) " is 121.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetIndexGroupInFormulaGroups,The length of the statement  "	// TODO: Use of ByRef founded Private Function pSetIndexGroupInFormulaGroups(ByRef Sections As cReportSections) As Boolean " is 122.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,The length of the statement  "	// TODO: Use of ByRef founded Private Function pSetFormulaIndexGroup(ByRef Formula As cReportFormula' ByRef Sec As cReportSection) As Boolean " is 141.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,addFieldToNewPage,The length of the statement  "	// TODO: Use of ByRef founded Private Sub AddFieldToNewPage(ByRef Sections As cReportSections' ByRef Page As cReportPage' ByVal Where As Long) " is 142.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,addFieldToNewPage,The length of the statement  "							field.setValue (cReportGlobals.format (m_compiler.resultFunction (ctrl.getFormulaValue ())' ctrl.getLabel ().getAspect ().getFormat ())); " is 137.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetData,The length of the statement  "			cWindow.msgWarning ("The connection settings were not defined." + "Both the LaunchInfo and the Connect object have their " + "strConnect property empty. Whitout this connection string " + "it will be imposible to open the connection to the database."' "CSReportEditor"); " is 270.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,resumeDBAccessMissing,The length of the statement  "	// TODO: Use of ByRef founded Private Function ResumeDBAccessMissing(ByVal StrConnect As String' ByVal SaveInReport As Boolean' ByRef cn As cDataBase) As Boolean " is 161.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,resumeDBAccessMissing,The length of the statement  "		if (!file.open (m_pathDefault + Path.DirectorySeparatorChar + file' CSKernelClient.eFileMode.eRead' false' false' eFileAccess.eShared' true' true)) { " is 149.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,debugGroupKeys,The length of the statement  "		keys [i] = "H: " + h.getKey () + " " + h.getKeyPaint () + " " + h.getName () + " " + h.getIndex () + " " + h.getRealIndex (); " is 125.
Long Statement,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,debugGroupKeys,The length of the statement  "		keys [groupCount + i] = "F: " + f.getKey () + " " + h.getKeyPaint () + " " + f.getName () + " " + f.getIndex () + " " + f.getRealIndex (); " is 138.
Complex Conditional,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pGetSerieValues,The conditional expression  "(value > v [i].value || v [i].idx == -1) && value <= v [i - 1].value && j != v [i - 1].idx"  is complex.
Complex Conditional,CSReportDll,cReportGroup,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroup.cs,fixName,The conditional expression  "m_name.Length == 0 || cUtil.subString (m_name.ToLower ()' 0' 5) == "group" || cUtil.subString (m_name.ToLower ()' 0' 5) == "grupo" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gh_" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gf_" || cUtil.subString (m_name.ToLower ()' 0' 2) == "g_""  is complex.
Complex Conditional,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,pSetName,The conditional expression  "sectionName.Length == 0 || cUtil.subString (sectionName' 0' 5) == "group" || cUtil.subString (sectionName' 0' 5) == "grupo" || cUtil.subString (sectionName' 0' 3) == "gh_" || cUtil.subString (sectionName' 0' 3) == "gf_" || cUtil.subString (sectionName' 0' 2) == "g_""  is complex.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportAspect,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportAspect.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pKillFile,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportChartSerie,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChartSerie.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportChartSerie,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChartSerie.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportChartSerie,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChartSerie.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportControl,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControl.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportControl,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControl.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportControl,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControl.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportControl,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControl.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportControl,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControl.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportControl,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControl.cs,load,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportControls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControls.cs,clear,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportControls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControls.cs,remove,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportControls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportControls.cs,remove,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportFormulas,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportFormulas.cs,add2,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,clear,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,remove,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,remove,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportSectionLines,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSectionLines.cs,clear,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportSectionLines,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSectionLines.cs,remove,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportSectionLines,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSectionLines.cs,remove,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportSections,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSections.cs,clear,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportSections,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSections.cs,remove,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReportSections,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSections.cs,remove,The method has an empty catch block.
Empty Catch Block,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetImage,The method has an empty catch block.
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,getIntFromByteArray,The following statement contains a magic number: Array.Copy (bytes' index' intInBytes' 0' 4);  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,getShortFromByteArray,The following statement contains a magic number: Array.Copy (bytes' index' int16InBytes' 0' 2);  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: gdiBitmap.bmWidth = getIntFromByteArray (bytes' 4);  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: gdiBitmap.bmHeight = getIntFromByteArray (bytes' 8);  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: gdiBitmap.bmWidthBytes = getIntFromByteArray (bytes' 12);  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: gdiBitmap.bmPlanes = getShortFromByteArray (bytes' 16);  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: gdiBitmap.bmBitsPixel = getShortFromByteArray (bytes' 18);  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: gdiBitmap.bmBits = getIntFromByteArray (bytes' 20);  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: unsafe {  	fixed (byte* ptr = bytes) {  		int stride = gdiBitmap.bmWidth * 3;  		//  		// the new Bitmap(new Bitmap is to get a new copy of the bitmap)  		//  		// first we create a bitmap from the bytes array but this array will be garbage collected in the future  		// so we make a deep copy and then refresh the unsafe bitmap  		//  		Bitmap unsafeBitmap = new Bitmap (gdiBitmap.bmWidth' gdiBitmap.bmHeight' -stride' PixelFormat.Format24bppRgb' new IntPtr (ptr + 24 + stride * (gdiBitmap.bmHeight - 1)));  		Bitmap safeBitmap = new Bitmap (unsafeBitmap);  		unsafeBitmap.Dispose ();  		return safeBitmap;  	}  }  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: unsafe {  	fixed (byte* ptr = bytes) {  		int stride = gdiBitmap.bmWidth * 3;  		//  		// the new Bitmap(new Bitmap is to get a new copy of the bitmap)  		//  		// first we create a bitmap from the bytes array but this array will be garbage collected in the future  		// so we make a deep copy and then refresh the unsafe bitmap  		//  		Bitmap unsafeBitmap = new Bitmap (gdiBitmap.bmWidth' gdiBitmap.bmHeight' -stride' PixelFormat.Format24bppRgb' new IntPtr (ptr + 24 + stride * (gdiBitmap.bmHeight - 1)));  		Bitmap safeBitmap = new Bitmap (unsafeBitmap);  		unsafeBitmap.Dispose ();  		return safeBitmap;  	}  }  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: fixed (byte* ptr = bytes) {  	int stride = gdiBitmap.bmWidth * 3;  	//  	// the new Bitmap(new Bitmap is to get a new copy of the bitmap)  	//  	// first we create a bitmap from the bytes array but this array will be garbage collected in the future  	// so we make a deep copy and then refresh the unsafe bitmap  	//  	Bitmap unsafeBitmap = new Bitmap (gdiBitmap.bmWidth' gdiBitmap.bmHeight' -stride' PixelFormat.Format24bppRgb' new IntPtr (ptr + 24 + stride * (gdiBitmap.bmHeight - 1)));  	Bitmap safeBitmap = new Bitmap (unsafeBitmap);  	unsafeBitmap.Dispose ();  	return safeBitmap;  }  
Magic Number,CSReportDll,cImage,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cImage.cs,deSerialiseBitmap,The following statement contains a magic number: fixed (byte* ptr = bytes) {  	int stride = gdiBitmap.bmWidth * 3;  	//  	// the new Bitmap(new Bitmap is to get a new copy of the bitmap)  	//  	// first we create a bitmap from the bytes array but this array will be garbage collected in the future  	// so we make a deep copy and then refresh the unsafe bitmap  	//  	Bitmap unsafeBitmap = new Bitmap (gdiBitmap.bmWidth' gdiBitmap.bmHeight' -stride' PixelFormat.Format24bppRgb' new IntPtr (ptr + 24 + stride * (gdiBitmap.bmHeight - 1)));  	Bitmap safeBitmap = new Bitmap (unsafeBitmap);  	unsafeBitmap.Dispose ();  	return safeBitmap;  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getDefaultPrinter,The following statement contains a magic number: width = cUtil.valAsInt (cPrintWMI.getPrinterConfigInfoValueFromWMI ("PaperWidth"' printerConfigInfo' 210));  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getDefaultPrinter,The following statement contains a magic number: height = cUtil.valAsInt (cPrintWMI.getPrinterConfigInfoValueFromWMI ("PaperLength"' printerConfigInfo' 297));  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getDefaultPrinter,The following statement contains a magic number: if (width == 0 || height == 0 || paperSize == 99) {  	if (paperSize == 99/*UNKNOWN*/)  		paperSize = 1;  	/*LETTER*/getSizeFromPaperSize ((csReportPaperType)paperSize' orientation' out width' out height);  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getDefaultPrinter,The following statement contains a magic number: if (width == 0 || height == 0 || paperSize == 99) {  	if (paperSize == 99/*UNKNOWN*/)  		paperSize = 1;  	/*LETTER*/getSizeFromPaperSize ((csReportPaperType)paperSize' orientation' out width' out height);  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getDefaultPrinter,The following statement contains a magic number: if (paperSize == 99/*UNKNOWN*/)  	paperSize = 1;  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: switch (paperSize) {  case csReportPaperType.CSRPTPAPERTYPELETTER:  	height = 279;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPELEGAL:  	height = 356;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPEA4:  	height = 297;  	width = 210;  	break;  case csReportPaperType.CSRPTPAPERTYPEA3:  	height = 420;  	width = 297;  	break;  default:  	height = 0;  	width = 0;  	break;  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: switch (paperSize) {  case csReportPaperType.CSRPTPAPERTYPELETTER:  	height = 279;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPELEGAL:  	height = 356;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPEA4:  	height = 297;  	width = 210;  	break;  case csReportPaperType.CSRPTPAPERTYPEA3:  	height = 420;  	width = 297;  	break;  default:  	height = 0;  	width = 0;  	break;  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: switch (paperSize) {  case csReportPaperType.CSRPTPAPERTYPELETTER:  	height = 279;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPELEGAL:  	height = 356;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPEA4:  	height = 297;  	width = 210;  	break;  case csReportPaperType.CSRPTPAPERTYPEA3:  	height = 420;  	width = 297;  	break;  default:  	height = 0;  	width = 0;  	break;  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: switch (paperSize) {  case csReportPaperType.CSRPTPAPERTYPELETTER:  	height = 279;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPELEGAL:  	height = 356;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPEA4:  	height = 297;  	width = 210;  	break;  case csReportPaperType.CSRPTPAPERTYPEA3:  	height = 420;  	width = 297;  	break;  default:  	height = 0;  	width = 0;  	break;  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: switch (paperSize) {  case csReportPaperType.CSRPTPAPERTYPELETTER:  	height = 279;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPELEGAL:  	height = 356;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPEA4:  	height = 297;  	width = 210;  	break;  case csReportPaperType.CSRPTPAPERTYPEA3:  	height = 420;  	width = 297;  	break;  default:  	height = 0;  	width = 0;  	break;  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: switch (paperSize) {  case csReportPaperType.CSRPTPAPERTYPELETTER:  	height = 279;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPELEGAL:  	height = 356;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPEA4:  	height = 297;  	width = 210;  	break;  case csReportPaperType.CSRPTPAPERTYPEA3:  	height = 420;  	width = 297;  	break;  default:  	height = 0;  	width = 0;  	break;  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: switch (paperSize) {  case csReportPaperType.CSRPTPAPERTYPELETTER:  	height = 279;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPELEGAL:  	height = 356;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPEA4:  	height = 297;  	width = 210;  	break;  case csReportPaperType.CSRPTPAPERTYPEA3:  	height = 420;  	width = 297;  	break;  default:  	height = 0;  	width = 0;  	break;  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: switch (paperSize) {  case csReportPaperType.CSRPTPAPERTYPELETTER:  	height = 279;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPELEGAL:  	height = 356;  	width = 216;  	break;  case csReportPaperType.CSRPTPAPERTYPEA4:  	height = 297;  	width = 210;  	break;  case csReportPaperType.CSRPTPAPERTYPEA3:  	height = 420;  	width = 297;  	break;  default:  	height = 0;  	width = 0;  	break;  }  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: height = 279;  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: width = 216;  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: height = 356;  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: width = 216;  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: height = 297;  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: width = 210;  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: height = 420;  
Magic Number,CSReportDll,cPrintAPI,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cPrintAPI.cs,getSizeFromPaperSize,The following statement contains a magic number: width = 297;  
Magic Number,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,The following statement contains a magic number: if (m_top == 0) {  	m_top = 50;  }  
Magic Number,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,The following statement contains a magic number: m_top = 50;  
Magic Number,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,The following statement contains a magic number: for (int _i = 0; _i < m_series.count (); _i++) {  	serie = m_series.item (_i);  	// At the time we only support two series  	//  	idxSerie = idxSerie + 1;  	if (idxSerie > 2) {  		return;  	}  	pGetSerieValues (rows' values' serie.getValueIndex ()' serie.getLabelIndex ()' m_chartType == csRptChartType.PIE);  	for (i = 0; i < values.Length; i++) {  		if (values [i].idx != -1) {  			if (idxSerie == 1) {  				cWebChartItem w_add = chart.getItems ().add (null);  				w_add.setPrimaryValue (values [i].value);  				w_add.setPrimaryLabel (cReportGlobals.format (values [i].label' strFormat));  				w_add.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  				w_add.setAlternateValue (0);  			}  			else if (idxSerie == 2) {  				cWebChartItem w_item = chart.getItems ().item (i);  				w_item.setAlternateValue (values [i].value);  				w_item.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  				w_item.setAltLabel (cReportGlobals.format (values [i].label' strFormat));  			}  		}  	}  	if ((values.Length > m_top - 1) && m_chartType == csRptChartType.PIE) {  		cWebChartItem w_item = chart.getItems ().item (chart.getItems ().count () - 1);  		w_item.setPrimaryLabel ("Otros");  		w_item.setPieLabel ("Otros");  	}  }  
Magic Number,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,The following statement contains a magic number: for (int _i = 0; _i < m_series.count (); _i++) {  	serie = m_series.item (_i);  	// At the time we only support two series  	//  	idxSerie = idxSerie + 1;  	if (idxSerie > 2) {  		return;  	}  	pGetSerieValues (rows' values' serie.getValueIndex ()' serie.getLabelIndex ()' m_chartType == csRptChartType.PIE);  	for (i = 0; i < values.Length; i++) {  		if (values [i].idx != -1) {  			if (idxSerie == 1) {  				cWebChartItem w_add = chart.getItems ().add (null);  				w_add.setPrimaryValue (values [i].value);  				w_add.setPrimaryLabel (cReportGlobals.format (values [i].label' strFormat));  				w_add.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  				w_add.setAlternateValue (0);  			}  			else if (idxSerie == 2) {  				cWebChartItem w_item = chart.getItems ().item (i);  				w_item.setAlternateValue (values [i].value);  				w_item.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  				w_item.setAltLabel (cReportGlobals.format (values [i].label' strFormat));  			}  		}  	}  	if ((values.Length > m_top - 1) && m_chartType == csRptChartType.PIE) {  		cWebChartItem w_item = chart.getItems ().item (chart.getItems ().count () - 1);  		w_item.setPrimaryLabel ("Otros");  		w_item.setPieLabel ("Otros");  	}  }  
Magic Number,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,The following statement contains a magic number: if (idxSerie > 2) {  	return;  }  
Magic Number,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,The following statement contains a magic number: for (i = 0; i < values.Length; i++) {  	if (values [i].idx != -1) {  		if (idxSerie == 1) {  			cWebChartItem w_add = chart.getItems ().add (null);  			w_add.setPrimaryValue (values [i].value);  			w_add.setPrimaryLabel (cReportGlobals.format (values [i].label' strFormat));  			w_add.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  			w_add.setAlternateValue (0);  		}  		else if (idxSerie == 2) {  			cWebChartItem w_item = chart.getItems ().item (i);  			w_item.setAlternateValue (values [i].value);  			w_item.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  			w_item.setAltLabel (cReportGlobals.format (values [i].label' strFormat));  		}  	}  }  
Magic Number,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,The following statement contains a magic number: if (values [i].idx != -1) {  	if (idxSerie == 1) {  		cWebChartItem w_add = chart.getItems ().add (null);  		w_add.setPrimaryValue (values [i].value);  		w_add.setPrimaryLabel (cReportGlobals.format (values [i].label' strFormat));  		w_add.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  		w_add.setAlternateValue (0);  	}  	else if (idxSerie == 2) {  		cWebChartItem w_item = chart.getItems ().item (i);  		w_item.setAlternateValue (values [i].value);  		w_item.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  		w_item.setAltLabel (cReportGlobals.format (values [i].label' strFormat));  	}  }  
Magic Number,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,The following statement contains a magic number: if (idxSerie == 1) {  	cWebChartItem w_add = chart.getItems ().add (null);  	w_add.setPrimaryValue (values [i].value);  	w_add.setPrimaryLabel (cReportGlobals.format (values [i].label' strFormat));  	w_add.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  	w_add.setAlternateValue (0);  }  else if (idxSerie == 2) {  	cWebChartItem w_item = chart.getItems ().item (i);  	w_item.setAlternateValue (values [i].value);  	w_item.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  	w_item.setAltLabel (cReportGlobals.format (values [i].label' strFormat));  }  
Magic Number,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pFill,The following statement contains a magic number: if (idxSerie == 2) {  	cWebChartItem w_item = chart.getItems ().item (i);  	w_item.setAlternateValue (values [i].value);  	w_item.setPieLabel (cReportGlobals.format (values [i].label' strFormat));  	w_item.setAltLabel (cReportGlobals.format (values [i].label' strFormat));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalFunction,The following statement contains a magic number: if (formula.getFormulasInt ().count () > 0) {  	if (G.isNumeric (codeC)) {  		pEvalSyntax (""' codeC' false' formula);  	}  	else {  		if (cUtil.subString (codeC.Trim ()' 0' 8).ToLower () == "function") {  			pEvalSyntax (""' codeC' false' formula);  		}  	}  }  else {  	pEvalSyntax (""' codeC' false' formula);  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalFunction,The following statement contains a magic number: if (G.isNumeric (codeC)) {  	pEvalSyntax (""' codeC' false' formula);  }  else {  	if (cUtil.subString (codeC.Trim ()' 0' 8).ToLower () == "function") {  		pEvalSyntax (""' codeC' false' formula);  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalFunction,The following statement contains a magic number: if (cUtil.subString (codeC.Trim ()' 0' 8).ToLower () == "function") {  	pEvalSyntax (""' codeC' false' formula);  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (functionName.Length > 0) {  	return pCheckInternalFunction (functionName' code);  }  else if (code.Length == 0) {  	return "";  }  else if (code == "\"\"") {  	return "";  }  else if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (functionName.Length > 0) {  	return pCheckInternalFunction (functionName' code);  }  else if (code.Length == 0) {  	return "";  }  else if (code == "\"\"") {  	return "";  }  else if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (functionName.Length > 0) {  	return pCheckInternalFunction (functionName' code);  }  else if (code.Length == 0) {  	return "";  }  else if (code == "\"\"") {  	return "";  }  else if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (code.Length == 0) {  	return "";  }  else if (code == "\"\"") {  	return "";  }  else if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (code.Length == 0) {  	return "";  }  else if (code == "\"\"") {  	return "";  }  else if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (code.Length == 0) {  	return "";  }  else if (code == "\"\"") {  	return "";  }  else if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (code == "\"\"") {  	return "";  }  else if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (code == "\"\"") {  	return "";  }  else if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (code == "\"\"") {  	return "";  }  else if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (G.isNumeric (code)) {  	return code;  }  else if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (cReportGlobals.isDate (code)) {  	return code;  }  else if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (pIsTime (code)) {  	return code;  }  else if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (!bParam) {  	pExecScriptCode (code' formula);  	return code;  }  else {  	String[] vParams = null;  	String parameters = "";  	parameters = code.Trim ();  	if (parameters.Length > 2) {  		parameters = parameters.Substring (2' parameters.Length - 2);  		parameters = parameters.Trim ();  		vParams = parameters.Split ('|');  	}  	try {  		for (i = 0; i < vParams.Length; i++) {  			try {  				// if it is a number we don't need to evaluate it  				//  				if (!G.isNumeric (vParams [i])) {  					if (!pIsControl (vParams [i])) {  						// Si se produce un error es por que se trata  						// de un parametro a la funcion' la asignacion  						// no se llevara a cabo' y no perdere el valor  						// del parametro  						s = C_TEMPFUNCTIONB + vParams [i] + C_TEMPFUNCTIONE;  						vParams [i] = pExecScriptCode (s' formula).ToString ();  					}  				}  				code = vParams [i] + "|";  			}  			catch {  				// we don't care about errors here  			}  		}  		code = cUtil.removeLastColon (code);  		return code;  	}  	catch {  		// we don't care about errors here  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (parameters.Length > 2) {  	parameters = parameters.Substring (2' parameters.Length - 2);  	parameters = parameters.Trim ();  	vParams = parameters.Split ('|');  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (parameters.Length > 2) {  	parameters = parameters.Substring (2' parameters.Length - 2);  	parameters = parameters.Trim ();  	vParams = parameters.Split ('|');  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: if (parameters.Length > 2) {  	parameters = parameters.Substring (2' parameters.Length - 2);  	parameters = parameters.Trim ();  	vParams = parameters.Split ('|');  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: parameters = parameters.Substring (2' parameters.Length - 2);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalSyntax,The following statement contains a magic number: parameters = parameters.Substring (2' parameters.Length - 2);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: if (parameters.Length > 2) {  	parameters = parameters.Substring (1' parameters.Length - 2);  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: if (parameters.Length > 2) {  	parameters = parameters.Substring (1' parameters.Length - 2);  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: parameters = parameters.Substring (1' parameters.Length - 2);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: switch (idFunction) {  case csRptFormulaType.CSRPTFPAGENUMBER:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	if (m_report == null) {  		return 0;  	}  	else {  		return m_report.getCurrenPage ();  	}  case csRptFormulaType.CSRPTTEXTREPLACE:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "";  case csRptFormulaType.CSRPTFTOTALPAGES:  	return m_report.getTotalPages ();  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFAVERAGE:  case csRptFormulaType.CSRPTFSUM:  case csRptFormulaType.CSRPTMAX:  case csRptFormulaType.CSRPTMIN:  case csRptFormulaType.CSRPTLENGTH:  case csRptFormulaType.CSRPTFVAL:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGROUPTOTAL:  case csRptFormulaType.CSRPTGROUPMAX:  case csRptFormulaType.CSRPTGROUPMIN:  case csRptFormulaType.CSRPTGROUPAVERAGE:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTGROUPCOUNT:  case csRptFormulaType.CSRPTGROUPPERCENT:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (3' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFGETSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  case csRptFormulaType.CSRPTFSUMTIME:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTCOUNT:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFNUMBERTOSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTISEQUAL:  case csRptFormulaType.CSRPTISNOTEQUAL:  case csRptFormulaType.CSRPTISGREATERTHAN:  case csRptFormulaType.CSRPTISLESSTHAN:  case csRptFormulaType.CSRPTISINRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFCALCULO:  case csRptFormulaType.CSRPTGETDATAFROMRSAD:  case csRptFormulaType.CSRPTGETDATAFROMRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (4' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTDECLAREVAR:  case csRptFormulaType.CSRPTGETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGETPARAM:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTADDTOVAR:  case csRptFormulaType.CSRPTSETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  default:  	throw new ReportNotDefinedFunctionException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRINDEFINEDFUNCTION' name));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: switch (idFunction) {  case csRptFormulaType.CSRPTFPAGENUMBER:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	if (m_report == null) {  		return 0;  	}  	else {  		return m_report.getCurrenPage ();  	}  case csRptFormulaType.CSRPTTEXTREPLACE:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "";  case csRptFormulaType.CSRPTFTOTALPAGES:  	return m_report.getTotalPages ();  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFAVERAGE:  case csRptFormulaType.CSRPTFSUM:  case csRptFormulaType.CSRPTMAX:  case csRptFormulaType.CSRPTMIN:  case csRptFormulaType.CSRPTLENGTH:  case csRptFormulaType.CSRPTFVAL:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGROUPTOTAL:  case csRptFormulaType.CSRPTGROUPMAX:  case csRptFormulaType.CSRPTGROUPMIN:  case csRptFormulaType.CSRPTGROUPAVERAGE:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTGROUPCOUNT:  case csRptFormulaType.CSRPTGROUPPERCENT:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (3' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFGETSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  case csRptFormulaType.CSRPTFSUMTIME:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTCOUNT:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFNUMBERTOSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTISEQUAL:  case csRptFormulaType.CSRPTISNOTEQUAL:  case csRptFormulaType.CSRPTISGREATERTHAN:  case csRptFormulaType.CSRPTISLESSTHAN:  case csRptFormulaType.CSRPTISINRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFCALCULO:  case csRptFormulaType.CSRPTGETDATAFROMRSAD:  case csRptFormulaType.CSRPTGETDATAFROMRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (4' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTDECLAREVAR:  case csRptFormulaType.CSRPTGETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGETPARAM:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTADDTOVAR:  case csRptFormulaType.CSRPTSETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  default:  	throw new ReportNotDefinedFunctionException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRINDEFINEDFUNCTION' name));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: switch (idFunction) {  case csRptFormulaType.CSRPTFPAGENUMBER:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	if (m_report == null) {  		return 0;  	}  	else {  		return m_report.getCurrenPage ();  	}  case csRptFormulaType.CSRPTTEXTREPLACE:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "";  case csRptFormulaType.CSRPTFTOTALPAGES:  	return m_report.getTotalPages ();  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFAVERAGE:  case csRptFormulaType.CSRPTFSUM:  case csRptFormulaType.CSRPTMAX:  case csRptFormulaType.CSRPTMIN:  case csRptFormulaType.CSRPTLENGTH:  case csRptFormulaType.CSRPTFVAL:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGROUPTOTAL:  case csRptFormulaType.CSRPTGROUPMAX:  case csRptFormulaType.CSRPTGROUPMIN:  case csRptFormulaType.CSRPTGROUPAVERAGE:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTGROUPCOUNT:  case csRptFormulaType.CSRPTGROUPPERCENT:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (3' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFGETSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  case csRptFormulaType.CSRPTFSUMTIME:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTCOUNT:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFNUMBERTOSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTISEQUAL:  case csRptFormulaType.CSRPTISNOTEQUAL:  case csRptFormulaType.CSRPTISGREATERTHAN:  case csRptFormulaType.CSRPTISLESSTHAN:  case csRptFormulaType.CSRPTISINRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFCALCULO:  case csRptFormulaType.CSRPTGETDATAFROMRSAD:  case csRptFormulaType.CSRPTGETDATAFROMRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (4' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTDECLAREVAR:  case csRptFormulaType.CSRPTGETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGETPARAM:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTADDTOVAR:  case csRptFormulaType.CSRPTSETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  default:  	throw new ReportNotDefinedFunctionException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRINDEFINEDFUNCTION' name));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: switch (idFunction) {  case csRptFormulaType.CSRPTFPAGENUMBER:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	if (m_report == null) {  		return 0;  	}  	else {  		return m_report.getCurrenPage ();  	}  case csRptFormulaType.CSRPTTEXTREPLACE:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "";  case csRptFormulaType.CSRPTFTOTALPAGES:  	return m_report.getTotalPages ();  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFAVERAGE:  case csRptFormulaType.CSRPTFSUM:  case csRptFormulaType.CSRPTMAX:  case csRptFormulaType.CSRPTMIN:  case csRptFormulaType.CSRPTLENGTH:  case csRptFormulaType.CSRPTFVAL:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGROUPTOTAL:  case csRptFormulaType.CSRPTGROUPMAX:  case csRptFormulaType.CSRPTGROUPMIN:  case csRptFormulaType.CSRPTGROUPAVERAGE:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTGROUPCOUNT:  case csRptFormulaType.CSRPTGROUPPERCENT:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (3' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFGETSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  case csRptFormulaType.CSRPTFSUMTIME:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTCOUNT:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFNUMBERTOSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTISEQUAL:  case csRptFormulaType.CSRPTISNOTEQUAL:  case csRptFormulaType.CSRPTISGREATERTHAN:  case csRptFormulaType.CSRPTISLESSTHAN:  case csRptFormulaType.CSRPTISINRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFCALCULO:  case csRptFormulaType.CSRPTGETDATAFROMRSAD:  case csRptFormulaType.CSRPTGETDATAFROMRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (4' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTDECLAREVAR:  case csRptFormulaType.CSRPTGETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGETPARAM:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTADDTOVAR:  case csRptFormulaType.CSRPTSETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  default:  	throw new ReportNotDefinedFunctionException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRINDEFINEDFUNCTION' name));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: switch (idFunction) {  case csRptFormulaType.CSRPTFPAGENUMBER:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	if (m_report == null) {  		return 0;  	}  	else {  		return m_report.getCurrenPage ();  	}  case csRptFormulaType.CSRPTTEXTREPLACE:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "";  case csRptFormulaType.CSRPTFTOTALPAGES:  	return m_report.getTotalPages ();  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFAVERAGE:  case csRptFormulaType.CSRPTFSUM:  case csRptFormulaType.CSRPTMAX:  case csRptFormulaType.CSRPTMIN:  case csRptFormulaType.CSRPTLENGTH:  case csRptFormulaType.CSRPTFVAL:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGROUPTOTAL:  case csRptFormulaType.CSRPTGROUPMAX:  case csRptFormulaType.CSRPTGROUPMIN:  case csRptFormulaType.CSRPTGROUPAVERAGE:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTGROUPCOUNT:  case csRptFormulaType.CSRPTGROUPPERCENT:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (3' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFGETSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  case csRptFormulaType.CSRPTFSUMTIME:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTCOUNT:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFNUMBERTOSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTISEQUAL:  case csRptFormulaType.CSRPTISNOTEQUAL:  case csRptFormulaType.CSRPTISGREATERTHAN:  case csRptFormulaType.CSRPTISLESSTHAN:  case csRptFormulaType.CSRPTISINRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFCALCULO:  case csRptFormulaType.CSRPTGETDATAFROMRSAD:  case csRptFormulaType.CSRPTGETDATAFROMRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (4' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTDECLAREVAR:  case csRptFormulaType.CSRPTGETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGETPARAM:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTADDTOVAR:  case csRptFormulaType.CSRPTSETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  default:  	throw new ReportNotDefinedFunctionException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRINDEFINEDFUNCTION' name));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: switch (idFunction) {  case csRptFormulaType.CSRPTFPAGENUMBER:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	if (m_report == null) {  		return 0;  	}  	else {  		return m_report.getCurrenPage ();  	}  case csRptFormulaType.CSRPTTEXTREPLACE:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "";  case csRptFormulaType.CSRPTFTOTALPAGES:  	return m_report.getTotalPages ();  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFAVERAGE:  case csRptFormulaType.CSRPTFSUM:  case csRptFormulaType.CSRPTMAX:  case csRptFormulaType.CSRPTMIN:  case csRptFormulaType.CSRPTLENGTH:  case csRptFormulaType.CSRPTFVAL:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGROUPTOTAL:  case csRptFormulaType.CSRPTGROUPMAX:  case csRptFormulaType.CSRPTGROUPMIN:  case csRptFormulaType.CSRPTGROUPAVERAGE:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTGROUPCOUNT:  case csRptFormulaType.CSRPTGROUPPERCENT:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (3' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFGETSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  case csRptFormulaType.CSRPTFSUMTIME:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTCOUNT:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFNUMBERTOSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTISEQUAL:  case csRptFormulaType.CSRPTISNOTEQUAL:  case csRptFormulaType.CSRPTISGREATERTHAN:  case csRptFormulaType.CSRPTISLESSTHAN:  case csRptFormulaType.CSRPTISINRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFCALCULO:  case csRptFormulaType.CSRPTGETDATAFROMRSAD:  case csRptFormulaType.CSRPTGETDATAFROMRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (4' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTDECLAREVAR:  case csRptFormulaType.CSRPTGETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGETPARAM:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTADDTOVAR:  case csRptFormulaType.CSRPTSETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  default:  	throw new ReportNotDefinedFunctionException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRINDEFINEDFUNCTION' name));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: switch (idFunction) {  case csRptFormulaType.CSRPTFPAGENUMBER:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	if (m_report == null) {  		return 0;  	}  	else {  		return m_report.getCurrenPage ();  	}  case csRptFormulaType.CSRPTTEXTREPLACE:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "";  case csRptFormulaType.CSRPTFTOTALPAGES:  	return m_report.getTotalPages ();  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFAVERAGE:  case csRptFormulaType.CSRPTFSUM:  case csRptFormulaType.CSRPTMAX:  case csRptFormulaType.CSRPTMIN:  case csRptFormulaType.CSRPTLENGTH:  case csRptFormulaType.CSRPTFVAL:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGROUPTOTAL:  case csRptFormulaType.CSRPTGROUPMAX:  case csRptFormulaType.CSRPTGROUPMIN:  case csRptFormulaType.CSRPTGROUPAVERAGE:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTGROUPCOUNT:  case csRptFormulaType.CSRPTGROUPPERCENT:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (3' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFGETSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  case csRptFormulaType.CSRPTFSUMTIME:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTCOUNT:  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTFNUMBERTOSTRING:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return "\"\"";  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTISEQUAL:  case csRptFormulaType.CSRPTISNOTEQUAL:  case csRptFormulaType.CSRPTISGREATERTHAN:  case csRptFormulaType.CSRPTISLESSTHAN:  case csRptFormulaType.CSRPTISINRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTFCALCULO:  case csRptFormulaType.CSRPTGETDATAFROMRSAD:  case csRptFormulaType.CSRPTGETDATAFROMRS:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (4' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTDECLAREVAR:  case csRptFormulaType.CSRPTGETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  case csRptFormulaType.CSRPTGETPARAM:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (1' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  // all this functions have the same amount of parameters  //  case csRptFormulaType.CSRPTADDTOVAR:  case csRptFormulaType.CSRPTSETVAR:  	// in this evaluation we load the parameters of the function  	//  	pCheckParameters (2' parameters' name);  	// in compiling time we need to return a value which is consistent  	// with the return type of the internal function  	//  	return 0;  default:  	throw new ReportNotDefinedFunctionException (C_MODULE' cReportError.errGetDescript (csRptErrors.CSRPTERRINDEFINEDFUNCTION' name));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: pCheckParameters (2' parameters' name);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: pCheckParameters (3' parameters' name);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: pCheckParameters (2' parameters' name);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: pCheckParameters (2' parameters' name);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: pCheckParameters (2' parameters' name);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: pCheckParameters (4' parameters' name);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pCheckInternalFunction,The following statement contains a magic number: pCheckParameters (2' parameters' name);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultCalculo,The following statement contains a magic number: if (control != "\"\"") {  	value2 = Convert.ToDouble (m_report.getValue (control' true));  }  else {  	value2 = double.Parse (fint.getParameters ().item (2).getValue ());  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultCalculo,The following statement contains a magic number: value2 = double.Parse (fint.getParameters ().item (2).getValue ());  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultCalculo,The following statement contains a magic number: oper = int.Parse (fint.getParameters ().item (3).getValue ());  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultCalculo,The following statement contains a magic number: switch (oper) {  // addition  case 1:  	return value1 + value2;  // substraction  case 2:  	return value1 - value2;  // multiplication  case 3:  	return value1 * value2;  // division  case 4:  	return cUtil.divideByZero (value1' value2);  // power  case 5:  	return Math.Pow (value1' ((int)value2));  default:  	return 0;  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultCalculo,The following statement contains a magic number: switch (oper) {  // addition  case 1:  	return value1 + value2;  // substraction  case 2:  	return value1 - value2;  // multiplication  case 3:  	return value1 * value2;  // division  case 4:  	return cUtil.divideByZero (value1' value2);  // power  case 5:  	return Math.Pow (value1' ((int)value2));  default:  	return 0;  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultCalculo,The following statement contains a magic number: switch (oper) {  // addition  case 1:  	return value1 + value2;  // substraction  case 2:  	return value1 - value2;  // multiplication  case 3:  	return value1 * value2;  // division  case 4:  	return cUtil.divideByZero (value1' value2);  // power  case 5:  	return Math.Pow (value1' ((int)value2));  default:  	return 0;  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultCalculo,The following statement contains a magic number: switch (oper) {  // addition  case 1:  	return value1 + value2;  // substraction  case 2:  	return value1 - value2;  // multiplication  case 3:  	return value1 * value2;  // division  case 4:  	return cUtil.divideByZero (value1' value2);  // power  case 5:  	return Math.Pow (value1' ((int)value2));  default:  	return 0;  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: try {  	collCtrlsToReplace = m_collTextReplace [m_ctrlName];  }  catch {  	int lenText = 0;  	int pos = 0;  	int endpos = 0;  	collCtrlsToReplace = new List<String> ();  	lenText = text.Length;  	while (i < lenText) {  		pos = text.IndexOf (C_MACRO_CTRL' i + 1);  		if (pos > 0) {  			endpos = text.IndexOf (C_MACRO_CTRL' pos + 1);  			if (endpos > 0) {  				collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  			}  			i = endpos + 1;  		}  		else {  			i = lenText + 1;  		}  	}  	m_collTextReplace.Add (m_ctrlName' collCtrlsToReplace);  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: try {  	collCtrlsToReplace = m_collTextReplace [m_ctrlName];  }  catch {  	int lenText = 0;  	int pos = 0;  	int endpos = 0;  	collCtrlsToReplace = new List<String> ();  	lenText = text.Length;  	while (i < lenText) {  		pos = text.IndexOf (C_MACRO_CTRL' i + 1);  		if (pos > 0) {  			endpos = text.IndexOf (C_MACRO_CTRL' pos + 1);  			if (endpos > 0) {  				collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  			}  			i = endpos + 1;  		}  		else {  			i = lenText + 1;  		}  	}  	m_collTextReplace.Add (m_ctrlName' collCtrlsToReplace);  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: while (i < lenText) {  	pos = text.IndexOf (C_MACRO_CTRL' i + 1);  	if (pos > 0) {  		endpos = text.IndexOf (C_MACRO_CTRL' pos + 1);  		if (endpos > 0) {  			collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  		}  		i = endpos + 1;  	}  	else {  		i = lenText + 1;  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: while (i < lenText) {  	pos = text.IndexOf (C_MACRO_CTRL' i + 1);  	if (pos > 0) {  		endpos = text.IndexOf (C_MACRO_CTRL' pos + 1);  		if (endpos > 0) {  			collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  		}  		i = endpos + 1;  	}  	else {  		i = lenText + 1;  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: if (pos > 0) {  	endpos = text.IndexOf (C_MACRO_CTRL' pos + 1);  	if (endpos > 0) {  		collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  	}  	i = endpos + 1;  }  else {  	i = lenText + 1;  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: if (pos > 0) {  	endpos = text.IndexOf (C_MACRO_CTRL' pos + 1);  	if (endpos > 0) {  		collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  	}  	i = endpos + 1;  }  else {  	i = lenText + 1;  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: if (endpos > 0) {  	collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: if (endpos > 0) {  	collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,resultTextReplace,The following statement contains a magic number: collCtrlsToReplace.Add (text.Substring (pos + 2' endpos - pos - 2));  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pSumTimes,The following statement contains a magic number: s = (st.getSecond () + s2) % 60;  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pSumTimes,The following statement contains a magic number: n = (int)((st.getSecond () + s2) / 60);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pSumTimes,The following statement contains a magic number: n = n + (st.getMinute () + n2) % 60;  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pSumTimes,The following statement contains a magic number: h = (int)((st.getMinute () + n2) / 60);  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pSetParams,The following statement contains a magic number: if (parameters.Length > 2) {  	parameters = parameters.Substring (1' parameters.Length - 2);  	parameters = parameters.Trim ();  	vParams = parameters.Split ('|');  	for (i = 0; i < vParams.Length; i++) {  		fint.getParameters ().item (i).setValue (vParams [i].Trim ());  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pSetParams,The following statement contains a magic number: if (parameters.Length > 2) {  	parameters = parameters.Substring (1' parameters.Length - 2);  	parameters = parameters.Trim ();  	vParams = parameters.Split ('|');  	for (i = 0; i < vParams.Length; i++) {  		fint.getParameters ().item (i).setValue (vParams [i].Trim ());  	}  }  
Magic Number,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pSetParams,The following statement contains a magic number: parameters = parameters.Substring (1' parameters.Length - 2);  
Magic Number,CSReportDll,cReportGroup,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroup.cs,fixName,The following statement contains a magic number: if (m_name.Length == 0 || cUtil.subString (m_name.ToLower ()' 0' 5) == "group" || cUtil.subString (m_name.ToLower ()' 0' 5) == "grupo" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gh_" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gf_" || cUtil.subString (m_name.ToLower ()' 0' 2) == "g_") {  	m_name = "G_" + m_index;  }  
Magic Number,CSReportDll,cReportGroup,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroup.cs,fixName,The following statement contains a magic number: if (m_name.Length == 0 || cUtil.subString (m_name.ToLower ()' 0' 5) == "group" || cUtil.subString (m_name.ToLower ()' 0' 5) == "grupo" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gh_" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gf_" || cUtil.subString (m_name.ToLower ()' 0' 2) == "g_") {  	m_name = "G_" + m_index;  }  
Magic Number,CSReportDll,cReportGroup,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroup.cs,fixName,The following statement contains a magic number: if (m_name.Length == 0 || cUtil.subString (m_name.ToLower ()' 0' 5) == "group" || cUtil.subString (m_name.ToLower ()' 0' 5) == "grupo" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gh_" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gf_" || cUtil.subString (m_name.ToLower ()' 0' 2) == "g_") {  	m_name = "G_" + m_index;  }  
Magic Number,CSReportDll,cReportGroup,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroup.cs,fixName,The following statement contains a magic number: if (m_name.Length == 0 || cUtil.subString (m_name.ToLower ()' 0' 5) == "group" || cUtil.subString (m_name.ToLower ()' 0' 5) == "grupo" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gh_" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gf_" || cUtil.subString (m_name.ToLower ()' 0' 2) == "g_") {  	m_name = "G_" + m_index;  }  
Magic Number,CSReportDll,cReportGroup,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroup.cs,fixName,The following statement contains a magic number: if (m_name.Length == 0 || cUtil.subString (m_name.ToLower ()' 0' 5) == "group" || cUtil.subString (m_name.ToLower ()' 0' 5) == "grupo" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gh_" || cUtil.subString (m_name.ToLower ()' 0' 3) == "gf_" || cUtil.subString (m_name.ToLower ()' 0' 2) == "g_") {  	m_name = "G_" + m_index;  }  
Magic Number,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,pSetName,The following statement contains a magic number: if (sectionName.Length == 0 || cUtil.subString (sectionName' 0' 5) == "group" || cUtil.subString (sectionName' 0' 5) == "grupo" || cUtil.subString (sectionName' 0' 3) == "gh_" || cUtil.subString (sectionName' 0' 3) == "gf_" || cUtil.subString (sectionName' 0' 2) == "g_") {  	return name;  }  else {  	return section;  }  
Magic Number,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,pSetName,The following statement contains a magic number: if (sectionName.Length == 0 || cUtil.subString (sectionName' 0' 5) == "group" || cUtil.subString (sectionName' 0' 5) == "grupo" || cUtil.subString (sectionName' 0' 3) == "gh_" || cUtil.subString (sectionName' 0' 3) == "gf_" || cUtil.subString (sectionName' 0' 2) == "g_") {  	return name;  }  else {  	return section;  }  
Magic Number,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,pSetName,The following statement contains a magic number: if (sectionName.Length == 0 || cUtil.subString (sectionName' 0' 5) == "group" || cUtil.subString (sectionName' 0' 5) == "grupo" || cUtil.subString (sectionName' 0' 3) == "gh_" || cUtil.subString (sectionName' 0' 3) == "gf_" || cUtil.subString (sectionName' 0' 2) == "g_") {  	return name;  }  else {  	return section;  }  
Magic Number,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,pSetName,The following statement contains a magic number: if (sectionName.Length == 0 || cUtil.subString (sectionName' 0' 5) == "group" || cUtil.subString (sectionName' 0' 5) == "grupo" || cUtil.subString (sectionName' 0' 3) == "gh_" || cUtil.subString (sectionName' 0' 3) == "gf_" || cUtil.subString (sectionName' 0' 2) == "g_") {  	return name;  }  else {  	return section;  }  
Magic Number,CSReportDll,cReportGroups,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportGroups.cs,pSetName,The following statement contains a magic number: if (sectionName.Length == 0 || cUtil.subString (sectionName' 0' 5) == "group" || cUtil.subString (sectionName' 0' 5) == "grupo" || cUtil.subString (sectionName' 0' 3) == "gh_" || cUtil.subString (sectionName' 0' 3) == "gf_" || cUtil.subString (sectionName' 0' 2) == "g_") {  	return name;  }  else {  	return section;  }  
Magic Number,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,putCodeInClass,The following statement contains a magic number: if (cUtil.subString (code' 0' 8).ToLower () == "function") {  	return "Public Class util\r\n" + "Implements CSReportScript.cIReportScriptType\r\n" + code + "\r\n" + "Public Function RunScript(globals As CSReportScript.cReportCompilerGlobals) As String Implements CSReportScript.cIReportScriptType.RunScript\r\n" + "  dim value__ = " + getFunctionCall (code' formula) + "\r\n" // TODO: remove debug info  	/*                      + "  System.Console.WriteLine(\"" + formula.getName() + "\")\r\n"                      + "  Dim var__\r\nFor Each var__ In globals\r\n System.Console.WriteLine(var__.ToString() + \" : \" + globals.getVar(var__).getValue().ToString())\r\nNext\r\n"                      + "  System.Console.WriteLine(value__.ToString())\r\n"                      + "  System.Console.WriteLine(\"---------------\")\r\n"                       */// end debug info  	+ "  Select Case Microsoft.VisualBasic.Information.VarType(value__)\r\n" + "    Case 11\r\n" + "      RunScript = System.Convert.ToInt32(value__)\r\n" + "    Case 7\r\n" + "      RunScript = String.Format(\"{0:MM/dd/yyyy}\"' value__)\r\n" + "    Case Else\r\n" + "      RunScript = value__\r\n" + "  End Select\r\n" + "End Function\r\n" + "Function Now()\r\n" + "  Now = Microsoft.VisualBasic.Now\r\n" + "End Function\r\n" + "Function FormatDateTime(aDate' format) As String\r\n" + "    FormatDateTime = Microsoft.VisualBasic.Strings.FormatDateTime(aDate' format)\r\n" + "End Function\r\n" + "End Class";  }  else {  	// TODO: implement c# scripting  	//  	return "public class util: cIReportScriptType { public " + code + "}";  }  
Magic Number,CSReportDll,cReportScriptEngine,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportScriptEngine.cs,compileCode,The following statement contains a magic number: if (cUtil.subString (code' 0' 8).ToLower () == "function") {  	provider = new Microsoft.VisualBasic.VBCodeProvider ();  }  else {  	provider = new Microsoft.CSharp.CSharpCodeProvider ();  }  
Magic Number,CSReportDll,cReportSections,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSections.cs,remove,The following statement contains a magic number: try {  	item (key).getSectionLines ().clear ();  	m_coll.Remove (key);  	m_keys.Remove (key);  	for (int i = 0; i < this.count (); i++) {  		m_coll [m_keys [i]].setIndex (i);  		m_coll [m_keys [i]].setName (m_coll [m_keys [i]].getName ().Substring (0' 2).Replace ("_"' "") + "_" + i.ToString ());  	}  	pRefreshIndex ();  	return;  }  catch {  }  
Magic Number,CSReportDll,cReportSections,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSections.cs,remove,The following statement contains a magic number: for (int i = 0; i < this.count (); i++) {  	m_coll [m_keys [i]].setIndex (i);  	m_coll [m_keys [i]].setName (m_coll [m_keys [i]].getName ().Substring (0' 2).Replace ("_"' "") + "_" + i.ToString ());  }  
Magic Number,CSReportDll,cReportSections,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSections.cs,remove,The following statement contains a magic number: m_coll [m_keys [i]].setName (m_coll [m_keys [i]].getName ().Substring (0' 2).Replace ("_"' "") + "_" + i.ToString ());  
Magic Number,CSReportDll,cReportSections,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSections.cs,remove,The following statement contains a magic number: try {  	item (index).getSectionLines ().clear ();  	m_coll.Remove (m_keys [index]);  	m_keys.RemoveAt (index);  	for (int i = 0; i < this.count (); i++) {  		cReportSection sec = (cReportSection)m_coll [m_keys [i]];  		sec.setIndex (i);  		sec.setName (sec.getName ().Substring (0' 2).Replace ("_"' "") + "_" + i.ToString ());  	}  	pRefreshIndex ();  	return;  }  catch {  }  
Magic Number,CSReportDll,cReportSections,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSections.cs,remove,The following statement contains a magic number: for (int i = 0; i < this.count (); i++) {  	cReportSection sec = (cReportSection)m_coll [m_keys [i]];  	sec.setIndex (i);  	sec.setName (sec.getName ().Substring (0' 2).Replace ("_"' "") + "_" + i.ToString ());  }  
Magic Number,CSReportDll,cReportSections,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportSections.cs,remove,The following statement contains a magic number: sec.setName (sec.getName ().Substring (0' 2).Replace ("_"' "") + "_" + i.ToString ());  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetIndexRows,The following statement contains a magic number: indexRows = (int)(ctrl.getField ().getIndex () / 1000);  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetIndexRows,The following statement contains a magic number: indexField = ctrl.getField ().getIndex () - (indexRows * 1000);  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getValue,The following statement contains a magic number: switch (ctrl.getControlType ()) {  case csRptControlType.CSRPTCTFIELD:  	// this indexes   	// current datasource  	//  	int indexRows = 0;  	// current row in the active datasource  	//  	int indexRow = 0;  	int indexField = 0;  	// the datasource index have an offset of 1000 between each other  	//  	indexRows = (int)(ctrl.getField ().getIndex () / 1000);  	indexField = ctrl.getField ().getIndex () - (indexRows * 1000);  	if (indexRows == 0) {  		indexRow = m_vRowsIndex [iRow];  	}  	else {  		indexRow = m_vRowsIndexAux [indexRows];  	}  	if (m_collRows [indexRows] != null) {  		// it looks ugly' dont think you?  		//  		// maybe this help a litle:  		//  		//    m_vCollRows(IndexRows)    a matrix with the data   		//                              contained in the datasource  		//                              referd by this control  		//  		//    (IndexField' IndexRow)    a cell in this matrix  		//  		object value = m_collRows [indexRows].Rows [indexRow] [indexField];  		if (ctrl.getLabel ().getAspect ().getFormat () != "" && notFormat == false) {  			return cReportGlobals.format (cReportGlobals.valVariant (value)' ctrl.getLabel ().getAspect ().getFormat ());  			// this is the same  		}  		else {  			return cReportGlobals.valVariant (value);  		}  	}  	else {  		return null;  	}  case csRptControlType.CSRPTCTLABEL:  case csRptControlType.CSRPTCTIMAGE:  	if (ctrl.getHasFormulaValue ()) {  		if (ctrl.getFormulaValue ().getHaveToEval ()) {  			object value = m_compiler.resultFunction (ctrl.getFormulaValue ());  			if (ctrl.getLabel ().getAspect ().getFormat () != "" && notFormat == false) {  				return cReportGlobals.format (value' ctrl.getLabel ().getAspect ().getFormat ());  			}  			else {  				return value;  			}  		}  		else {  			object value = ctrl.getFormulaValue ().getLastResult ();  			if (ctrl.getLabel ().getAspect ().getFormat () != "" && notFormat == false) {  				return cReportGlobals.format (value' ctrl.getLabel ().getAspect ().getFormat ());  			}  			else {  				return value;  			}  		}  	}  	else {  		return ctrl.getLabel ().getText ();  	}  default:  	return null;  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getValue,The following statement contains a magic number: switch (ctrl.getControlType ()) {  case csRptControlType.CSRPTCTFIELD:  	// this indexes   	// current datasource  	//  	int indexRows = 0;  	// current row in the active datasource  	//  	int indexRow = 0;  	int indexField = 0;  	// the datasource index have an offset of 1000 between each other  	//  	indexRows = (int)(ctrl.getField ().getIndex () / 1000);  	indexField = ctrl.getField ().getIndex () - (indexRows * 1000);  	if (indexRows == 0) {  		indexRow = m_vRowsIndex [iRow];  	}  	else {  		indexRow = m_vRowsIndexAux [indexRows];  	}  	if (m_collRows [indexRows] != null) {  		// it looks ugly' dont think you?  		//  		// maybe this help a litle:  		//  		//    m_vCollRows(IndexRows)    a matrix with the data   		//                              contained in the datasource  		//                              referd by this control  		//  		//    (IndexField' IndexRow)    a cell in this matrix  		//  		object value = m_collRows [indexRows].Rows [indexRow] [indexField];  		if (ctrl.getLabel ().getAspect ().getFormat () != "" && notFormat == false) {  			return cReportGlobals.format (cReportGlobals.valVariant (value)' ctrl.getLabel ().getAspect ().getFormat ());  			// this is the same  		}  		else {  			return cReportGlobals.valVariant (value);  		}  	}  	else {  		return null;  	}  case csRptControlType.CSRPTCTLABEL:  case csRptControlType.CSRPTCTIMAGE:  	if (ctrl.getHasFormulaValue ()) {  		if (ctrl.getFormulaValue ().getHaveToEval ()) {  			object value = m_compiler.resultFunction (ctrl.getFormulaValue ());  			if (ctrl.getLabel ().getAspect ().getFormat () != "" && notFormat == false) {  				return cReportGlobals.format (value' ctrl.getLabel ().getAspect ().getFormat ());  			}  			else {  				return value;  			}  		}  		else {  			object value = ctrl.getFormulaValue ().getLastResult ();  			if (ctrl.getLabel ().getAspect ().getFormat () != "" && notFormat == false) {  				return cReportGlobals.format (value' ctrl.getLabel ().getAspect ().getFormat ());  			}  			else {  				return value;  			}  		}  	}  	else {  		return ctrl.getLabel ().getText ();  	}  default:  	return null;  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getValue,The following statement contains a magic number: indexRows = (int)(ctrl.getField ().getIndex () / 1000);  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getValue,The following statement contains a magic number: indexField = ctrl.getField ().getIndex () - (indexRows * 1000);  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pInitCtrls,The following statement contains a magic number: for (int _i = 0; _i < recordsets.Count; _i++) {  	object[] varRs = recordsets [_i];  	String rsDataSource = (String)varRs [1];  	if (rsDataSource.ToUpper () == dataSource.ToUpper () || dataSource == "") {  		DataTable rs = (DataTable)varRs [0];  		for (j = 0; j < rs.Columns.Count; j++) {  			if (rs.Columns [j].ColumnName.ToUpper () == cReportGlobals.getRealName (fieldName).ToUpper ()) {  				// TODO: we need to check what is the value of rs.Columns[j].DataType  				//       when the column contains a binary field (tipicaly used for images)  				//  				System.TypeCode typeCode = System.Type.GetTypeCode (rs.Columns [j].DataType);  				bIsDBImage = typeCode == System.TypeCode.Object;  				found = true;  				break;  			}  		}  	}  	if (found) {  		break;  	}  	k = k + 1000;  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pInitCtrls,The following statement contains a magic number: k = k + 1000;  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The following statement contains a magic number: for (i = 0; i < m_groupCount; i++) {  	for (j = 0; j < m_vGroups [i].groups.Length; j++) {  		if (!m_vGroups [i].grandTotalGroup) {  			if (m_vGroups [i].oderType == csRptGrpOrderType.CSRPTGRPASC) {  				switch (m_vGroups [i].comparisonType) {  				case csRptGrpComparisonType.CSRPTGRPTEXT:  					if (!orderTextAsc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  						return false;  					}  					break;  				case csRptGrpComparisonType.CSRPTGRPNUMBER:  					if (!orderNumberAsc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  						return false;  					}  					break;  				case csRptGrpComparisonType.CSRPTGRPDATE:  					if (!orderDateAsc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  						return false;  					}  					break;  				}  			}  			else {  				switch (m_vGroups [i].comparisonType) {  				case csRptGrpComparisonType.CSRPTGRPTEXT:  					if (!orderTextDesc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  						return false;  					}  					break;  				case csRptGrpComparisonType.CSRPTGRPNUMBER:  					if (!orderNumberDesc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  						return false;  					}  					break;  				case csRptGrpComparisonType.CSRPTGRPDATE:  					if (!orderDateDesc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  						return false;  					}  					break;  				}  			}  		}  	}  	// after sorting we need to prepare the next group  	//  	if (i < m_groupCount - 1) {  		for (k = 0; k < m_vGroups [i].groups.Length; k++) {  			// if it is a total group the next group  			// is from the first to the last row in   			// the main recordset  			// Si es un grupo de totales el proximo grupo  			// first (position: 0)  			// last  (position: m_vGroups[0].groups[0].last)  			//  			if (m_vGroups [i].grandTotalGroup) {  				int t = i + 1;  				int r = m_vGroups [t].groups.Length - 1;  				m_vGroups [t].groups [r].last = -1;  				// add a group item  				//  				redimPreserve (ref m_vGroups [t].groups' r + 2);  				r = m_vGroups [t].groups.Length - 1;  				// set the values of the new group item  				//  				m_vGroups [t].groups [t].first = 0;  				m_vGroups [t].groups [t].last = m_vGroups [0].groups [0].last;  				m_vGroups [t].value = null;  			}  			else {  				for (j = m_vGroups [i].groups [k].first; j <= m_vGroups [i].groups [k].last; j++) {  					q = q + 1;  					if (!OnProgress (""' 0' q' recordCount)) {  						return false;  					}  					object value = cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [j]] [m_vGroups [i].indexField]);  					if (m_vGroups [i + 1].value == null) {  						addGroup (i' j' value);  					}  					else {  						switch (m_vGroups [i].comparisonType) {  						case csRptGrpComparisonType.CSRPTGRPTEXT:  							String text1 = m_vGroups [i + 1].value.ToString ();  							String text2 = value.ToString ();  							if (text1.ToLower () != text2.ToLower ()) {  								addGroup (i' j' value);  							}  							break;  						case csRptGrpComparisonType.CSRPTGRPNUMBER:  							double number1 = cUtil.val (m_vGroups [i + 1].value);  							double number2 = cUtil.val (value);  							if (number1 != number2) {  								addGroup (i' j' value);  							}  							break;  						case csRptGrpComparisonType.CSRPTGRPDATE:  							DateTime date1 = (DateTime)m_vGroups [i + 1].value;  							DateTime date2 = (DateTime)value;  							if (date1 != date2) {  								addGroup (i' j' value);  							}  							break;  						}  					}  				}  				m_vGroups [i + 1].groups [m_vGroups [i + 1].groups.Length - 1].last = j - 1;  				m_vGroups [i + 1].value = null;  			}  		}  	}  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The following statement contains a magic number: if (i < m_groupCount - 1) {  	for (k = 0; k < m_vGroups [i].groups.Length; k++) {  		// if it is a total group the next group  		// is from the first to the last row in   		// the main recordset  		// Si es un grupo de totales el proximo grupo  		// first (position: 0)  		// last  (position: m_vGroups[0].groups[0].last)  		//  		if (m_vGroups [i].grandTotalGroup) {  			int t = i + 1;  			int r = m_vGroups [t].groups.Length - 1;  			m_vGroups [t].groups [r].last = -1;  			// add a group item  			//  			redimPreserve (ref m_vGroups [t].groups' r + 2);  			r = m_vGroups [t].groups.Length - 1;  			// set the values of the new group item  			//  			m_vGroups [t].groups [t].first = 0;  			m_vGroups [t].groups [t].last = m_vGroups [0].groups [0].last;  			m_vGroups [t].value = null;  		}  		else {  			for (j = m_vGroups [i].groups [k].first; j <= m_vGroups [i].groups [k].last; j++) {  				q = q + 1;  				if (!OnProgress (""' 0' q' recordCount)) {  					return false;  				}  				object value = cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [j]] [m_vGroups [i].indexField]);  				if (m_vGroups [i + 1].value == null) {  					addGroup (i' j' value);  				}  				else {  					switch (m_vGroups [i].comparisonType) {  					case csRptGrpComparisonType.CSRPTGRPTEXT:  						String text1 = m_vGroups [i + 1].value.ToString ();  						String text2 = value.ToString ();  						if (text1.ToLower () != text2.ToLower ()) {  							addGroup (i' j' value);  						}  						break;  					case csRptGrpComparisonType.CSRPTGRPNUMBER:  						double number1 = cUtil.val (m_vGroups [i + 1].value);  						double number2 = cUtil.val (value);  						if (number1 != number2) {  							addGroup (i' j' value);  						}  						break;  					case csRptGrpComparisonType.CSRPTGRPDATE:  						DateTime date1 = (DateTime)m_vGroups [i + 1].value;  						DateTime date2 = (DateTime)value;  						if (date1 != date2) {  							addGroup (i' j' value);  						}  						break;  					}  				}  			}  			m_vGroups [i + 1].groups [m_vGroups [i + 1].groups.Length - 1].last = j - 1;  			m_vGroups [i + 1].value = null;  		}  	}  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The following statement contains a magic number: for (k = 0; k < m_vGroups [i].groups.Length; k++) {  	// if it is a total group the next group  	// is from the first to the last row in   	// the main recordset  	// Si es un grupo de totales el proximo grupo  	// first (position: 0)  	// last  (position: m_vGroups[0].groups[0].last)  	//  	if (m_vGroups [i].grandTotalGroup) {  		int t = i + 1;  		int r = m_vGroups [t].groups.Length - 1;  		m_vGroups [t].groups [r].last = -1;  		// add a group item  		//  		redimPreserve (ref m_vGroups [t].groups' r + 2);  		r = m_vGroups [t].groups.Length - 1;  		// set the values of the new group item  		//  		m_vGroups [t].groups [t].first = 0;  		m_vGroups [t].groups [t].last = m_vGroups [0].groups [0].last;  		m_vGroups [t].value = null;  	}  	else {  		for (j = m_vGroups [i].groups [k].first; j <= m_vGroups [i].groups [k].last; j++) {  			q = q + 1;  			if (!OnProgress (""' 0' q' recordCount)) {  				return false;  			}  			object value = cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [j]] [m_vGroups [i].indexField]);  			if (m_vGroups [i + 1].value == null) {  				addGroup (i' j' value);  			}  			else {  				switch (m_vGroups [i].comparisonType) {  				case csRptGrpComparisonType.CSRPTGRPTEXT:  					String text1 = m_vGroups [i + 1].value.ToString ();  					String text2 = value.ToString ();  					if (text1.ToLower () != text2.ToLower ()) {  						addGroup (i' j' value);  					}  					break;  				case csRptGrpComparisonType.CSRPTGRPNUMBER:  					double number1 = cUtil.val (m_vGroups [i + 1].value);  					double number2 = cUtil.val (value);  					if (number1 != number2) {  						addGroup (i' j' value);  					}  					break;  				case csRptGrpComparisonType.CSRPTGRPDATE:  					DateTime date1 = (DateTime)m_vGroups [i + 1].value;  					DateTime date2 = (DateTime)value;  					if (date1 != date2) {  						addGroup (i' j' value);  					}  					break;  				}  			}  		}  		m_vGroups [i + 1].groups [m_vGroups [i + 1].groups.Length - 1].last = j - 1;  		m_vGroups [i + 1].value = null;  	}  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The following statement contains a magic number: if (m_vGroups [i].grandTotalGroup) {  	int t = i + 1;  	int r = m_vGroups [t].groups.Length - 1;  	m_vGroups [t].groups [r].last = -1;  	// add a group item  	//  	redimPreserve (ref m_vGroups [t].groups' r + 2);  	r = m_vGroups [t].groups.Length - 1;  	// set the values of the new group item  	//  	m_vGroups [t].groups [t].first = 0;  	m_vGroups [t].groups [t].last = m_vGroups [0].groups [0].last;  	m_vGroups [t].value = null;  }  else {  	for (j = m_vGroups [i].groups [k].first; j <= m_vGroups [i].groups [k].last; j++) {  		q = q + 1;  		if (!OnProgress (""' 0' q' recordCount)) {  			return false;  		}  		object value = cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [j]] [m_vGroups [i].indexField]);  		if (m_vGroups [i + 1].value == null) {  			addGroup (i' j' value);  		}  		else {  			switch (m_vGroups [i].comparisonType) {  			case csRptGrpComparisonType.CSRPTGRPTEXT:  				String text1 = m_vGroups [i + 1].value.ToString ();  				String text2 = value.ToString ();  				if (text1.ToLower () != text2.ToLower ()) {  					addGroup (i' j' value);  				}  				break;  			case csRptGrpComparisonType.CSRPTGRPNUMBER:  				double number1 = cUtil.val (m_vGroups [i + 1].value);  				double number2 = cUtil.val (value);  				if (number1 != number2) {  					addGroup (i' j' value);  				}  				break;  			case csRptGrpComparisonType.CSRPTGRPDATE:  				DateTime date1 = (DateTime)m_vGroups [i + 1].value;  				DateTime date2 = (DateTime)value;  				if (date1 != date2) {  					addGroup (i' j' value);  				}  				break;  			}  		}  	}  	m_vGroups [i + 1].groups [m_vGroups [i + 1].groups.Length - 1].last = j - 1;  	m_vGroups [i + 1].value = null;  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The following statement contains a magic number: redimPreserve (ref m_vGroups [t].groups' r + 2);  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,The following statement contains a magic number: for (int _i = 0; _i < formula.getFormulasInt ().count (); _i++) {  	fint = formula.getFormulasInt ().item (_i);  	if (pIsGroupFormula ((int)fint.getFormulaType ())) {  		if (fint.getFormulaType () == csRptFormulaType.CSRPTGROUPPERCENT) {  			formula.setIdxGroup2 (0);  			indexGroup = cUtil.valAsInt (fint.getParameters ().item (3).getValue ());  		}  		else {  			indexGroup = cUtil.valAsInt (fint.getParameters ().item (2).getValue ());  		}  		if (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP) == null) {  			fint.getParameters ().add2 (""' cReportGlobals.C_KEYINDEXGROUP);  		}  		if (indexGroup == -1) {  			if (sec.getTypeSection () == csRptSectionType.GROUP_HEADER || sec.getTypeSection () == csRptSectionType.GROUP_FOOTER) {  				// index of the group  				//  				fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (sec.getIndex ().ToString ());  				formula.setIdxGroup (sec.getIndex ());  			}  			else if (sec.getTypeSection () == csRptSectionType.MAIN_DETAIL) {  				// index of the most internal group  				//  				fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (m_groups.count ().ToString ());  				formula.setIdxGroup (m_groups.count () - 1);  			}  			else {  				fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue ("0");  				formula.setIdxGroup (0);  			}  		}  		else {  			fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (indexGroup.ToString ());  			formula.setIdxGroup (indexGroup);  		}  	}  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,The following statement contains a magic number: for (int _i = 0; _i < formula.getFormulasInt ().count (); _i++) {  	fint = formula.getFormulasInt ().item (_i);  	if (pIsGroupFormula ((int)fint.getFormulaType ())) {  		if (fint.getFormulaType () == csRptFormulaType.CSRPTGROUPPERCENT) {  			formula.setIdxGroup2 (0);  			indexGroup = cUtil.valAsInt (fint.getParameters ().item (3).getValue ());  		}  		else {  			indexGroup = cUtil.valAsInt (fint.getParameters ().item (2).getValue ());  		}  		if (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP) == null) {  			fint.getParameters ().add2 (""' cReportGlobals.C_KEYINDEXGROUP);  		}  		if (indexGroup == -1) {  			if (sec.getTypeSection () == csRptSectionType.GROUP_HEADER || sec.getTypeSection () == csRptSectionType.GROUP_FOOTER) {  				// index of the group  				//  				fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (sec.getIndex ().ToString ());  				formula.setIdxGroup (sec.getIndex ());  			}  			else if (sec.getTypeSection () == csRptSectionType.MAIN_DETAIL) {  				// index of the most internal group  				//  				fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (m_groups.count ().ToString ());  				formula.setIdxGroup (m_groups.count () - 1);  			}  			else {  				fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue ("0");  				formula.setIdxGroup (0);  			}  		}  		else {  			fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (indexGroup.ToString ());  			formula.setIdxGroup (indexGroup);  		}  	}  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,The following statement contains a magic number: if (pIsGroupFormula ((int)fint.getFormulaType ())) {  	if (fint.getFormulaType () == csRptFormulaType.CSRPTGROUPPERCENT) {  		formula.setIdxGroup2 (0);  		indexGroup = cUtil.valAsInt (fint.getParameters ().item (3).getValue ());  	}  	else {  		indexGroup = cUtil.valAsInt (fint.getParameters ().item (2).getValue ());  	}  	if (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP) == null) {  		fint.getParameters ().add2 (""' cReportGlobals.C_KEYINDEXGROUP);  	}  	if (indexGroup == -1) {  		if (sec.getTypeSection () == csRptSectionType.GROUP_HEADER || sec.getTypeSection () == csRptSectionType.GROUP_FOOTER) {  			// index of the group  			//  			fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (sec.getIndex ().ToString ());  			formula.setIdxGroup (sec.getIndex ());  		}  		else if (sec.getTypeSection () == csRptSectionType.MAIN_DETAIL) {  			// index of the most internal group  			//  			fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (m_groups.count ().ToString ());  			formula.setIdxGroup (m_groups.count () - 1);  		}  		else {  			fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue ("0");  			formula.setIdxGroup (0);  		}  	}  	else {  		fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (indexGroup.ToString ());  		formula.setIdxGroup (indexGroup);  	}  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,The following statement contains a magic number: if (pIsGroupFormula ((int)fint.getFormulaType ())) {  	if (fint.getFormulaType () == csRptFormulaType.CSRPTGROUPPERCENT) {  		formula.setIdxGroup2 (0);  		indexGroup = cUtil.valAsInt (fint.getParameters ().item (3).getValue ());  	}  	else {  		indexGroup = cUtil.valAsInt (fint.getParameters ().item (2).getValue ());  	}  	if (fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP) == null) {  		fint.getParameters ().add2 (""' cReportGlobals.C_KEYINDEXGROUP);  	}  	if (indexGroup == -1) {  		if (sec.getTypeSection () == csRptSectionType.GROUP_HEADER || sec.getTypeSection () == csRptSectionType.GROUP_FOOTER) {  			// index of the group  			//  			fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (sec.getIndex ().ToString ());  			formula.setIdxGroup (sec.getIndex ());  		}  		else if (sec.getTypeSection () == csRptSectionType.MAIN_DETAIL) {  			// index of the most internal group  			//  			fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (m_groups.count ().ToString ());  			formula.setIdxGroup (m_groups.count () - 1);  		}  		else {  			fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue ("0");  			formula.setIdxGroup (0);  		}  	}  	else {  		fint.getParameters ().item (cReportGlobals.C_KEYINDEXGROUP).setValue (indexGroup.ToString ());  		formula.setIdxGroup (indexGroup);  	}  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,The following statement contains a magic number: if (fint.getFormulaType () == csRptFormulaType.CSRPTGROUPPERCENT) {  	formula.setIdxGroup2 (0);  	indexGroup = cUtil.valAsInt (fint.getParameters ().item (3).getValue ());  }  else {  	indexGroup = cUtil.valAsInt (fint.getParameters ().item (2).getValue ());  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,The following statement contains a magic number: if (fint.getFormulaType () == csRptFormulaType.CSRPTGROUPPERCENT) {  	formula.setIdxGroup2 (0);  	indexGroup = cUtil.valAsInt (fint.getParameters ().item (3).getValue ());  }  else {  	indexGroup = cUtil.valAsInt (fint.getParameters ().item (2).getValue ());  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,The following statement contains a magic number: indexGroup = cUtil.valAsInt (fint.getParameters ().item (3).getValue ());  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pSetFormulaIndexGroup,The following statement contains a magic number: indexGroup = cUtil.valAsInt (fint.getParameters ().item (2).getValue ());  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetData,The following statement contains a magic number: if (!getReportDisconnected ()) {  	if (strConnect.Trim () == "") {  		cWindow.msgWarning ("The connection settings were not defined." + "Both the LaunchInfo and the Connect object have their " + "strConnect property empty. Whitout this connection string " + "it will be imposible to open the connection to the database."' "CSReportEditor");  		return false;  	}  	cn = new cDataBase (m_databaseEngine);  	if (m_isForWeb) {  		cn.setSilent (true);  	}  	if (connect.getCommandTimeout () > 0) {  		cn.setCommandTimeout (connect.getCommandTimeout ());  	}  	if (connect.getConnectionTimeout () > 0) {  		cn.setConnectionTimeout (connect.getConnectionTimeout ());  	}  	// open the connection  	//  	if (!cn.initDb (""' ""' ""' ""' strConnect)) {  		if (!resumeDBAccessMissing (strConnect' saveInReport' cn)) {  			return false;  		}  	}  	// we need to prepare the first sentence  	//  	String sqlstmt = "";  	// if it was a select  	//  	if (m_launchInfo.getSqlstmt ().Trim () != "") {  		sqlstmt = m_launchInfo.getSqlstmt ();  	}  	else {  		if (connect.getDataSourceType () == csDataSourceType.CDDTPROCEDURE) {  			sqlstmt = "exec [" + connect.getDataSource () + "] " + connect.getSqlParameters ();  		}  		else if (connect.getDataSourceType () == csDataSourceType.CSDTTABLE) {  			sqlstmt = "select * from [" + connect.getDataSource () + "]";  		}  		else {  			sqlstmt = connect.getDataSource ();  		}  	}  	// open the recordset  	//  	cn.setOpenRsExDescript (m_descripUser);  	if (!cn.loadDataTable (true' false' false' sqlstmt' out rs' out dr' "GetData"' C_MODULE' "")) {  		return false;  	}  	if (rs.Rows.Count == 0) {  		vRows = null;  		if (createIndexVector) {  			m_vRowsIndex = new int[0];  			m_lastRowIndex = -1;  		}  	}  	else {  		vRows = rs;  		if (createIndexVector) {  			m_vRowsIndex = new int[vRows.Rows.Count];  			m_lastRowIndex = m_vRowsIndex.Length - 1;  			int k = 0;  			for (k = 0; k < m_vRowsIndex.Length; k++) {  				m_vRowsIndex [k] = k;  			}  		}  	}  	varRs = new object[2];  	varRs [0] = rs;  	varRs [1] = connect.getDataSource ();  	recordsets.Add (varRs);  	// we need to load every recordset from every data source  	// in the recordset collection (this code suport multiples  	// recordset in the same reader)  	//  	while (!dr.IsClosed && dr.NextResult ()) {  		rsAux = new DataTable ();  		rsAux.Load (dr);  		varRs = new object[2];  		varRs [0] = rsAux;  		varRs [1] = connect.getDataSource ();  		recordsets.Add (varRs);  		// TODO: check if this works  		//  		// we add an empty element to m_collRows to avoid  		// index of bounds exception  		//  		G.redimPreserve (ref m_collRows' m_collRows.Length + 1);  	}  	cn.closeDb ();  }  else {  	vRows = null;  	if (createIndexVector) {  		m_vRowsIndex = new int[0];  		m_lastRowIndex = -1;  	}  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetData,The following statement contains a magic number: if (!getReportDisconnected ()) {  	if (strConnect.Trim () == "") {  		cWindow.msgWarning ("The connection settings were not defined." + "Both the LaunchInfo and the Connect object have their " + "strConnect property empty. Whitout this connection string " + "it will be imposible to open the connection to the database."' "CSReportEditor");  		return false;  	}  	cn = new cDataBase (m_databaseEngine);  	if (m_isForWeb) {  		cn.setSilent (true);  	}  	if (connect.getCommandTimeout () > 0) {  		cn.setCommandTimeout (connect.getCommandTimeout ());  	}  	if (connect.getConnectionTimeout () > 0) {  		cn.setConnectionTimeout (connect.getConnectionTimeout ());  	}  	// open the connection  	//  	if (!cn.initDb (""' ""' ""' ""' strConnect)) {  		if (!resumeDBAccessMissing (strConnect' saveInReport' cn)) {  			return false;  		}  	}  	// we need to prepare the first sentence  	//  	String sqlstmt = "";  	// if it was a select  	//  	if (m_launchInfo.getSqlstmt ().Trim () != "") {  		sqlstmt = m_launchInfo.getSqlstmt ();  	}  	else {  		if (connect.getDataSourceType () == csDataSourceType.CDDTPROCEDURE) {  			sqlstmt = "exec [" + connect.getDataSource () + "] " + connect.getSqlParameters ();  		}  		else if (connect.getDataSourceType () == csDataSourceType.CSDTTABLE) {  			sqlstmt = "select * from [" + connect.getDataSource () + "]";  		}  		else {  			sqlstmt = connect.getDataSource ();  		}  	}  	// open the recordset  	//  	cn.setOpenRsExDescript (m_descripUser);  	if (!cn.loadDataTable (true' false' false' sqlstmt' out rs' out dr' "GetData"' C_MODULE' "")) {  		return false;  	}  	if (rs.Rows.Count == 0) {  		vRows = null;  		if (createIndexVector) {  			m_vRowsIndex = new int[0];  			m_lastRowIndex = -1;  		}  	}  	else {  		vRows = rs;  		if (createIndexVector) {  			m_vRowsIndex = new int[vRows.Rows.Count];  			m_lastRowIndex = m_vRowsIndex.Length - 1;  			int k = 0;  			for (k = 0; k < m_vRowsIndex.Length; k++) {  				m_vRowsIndex [k] = k;  			}  		}  	}  	varRs = new object[2];  	varRs [0] = rs;  	varRs [1] = connect.getDataSource ();  	recordsets.Add (varRs);  	// we need to load every recordset from every data source  	// in the recordset collection (this code suport multiples  	// recordset in the same reader)  	//  	while (!dr.IsClosed && dr.NextResult ()) {  		rsAux = new DataTable ();  		rsAux.Load (dr);  		varRs = new object[2];  		varRs [0] = rsAux;  		varRs [1] = connect.getDataSource ();  		recordsets.Add (varRs);  		// TODO: check if this works  		//  		// we add an empty element to m_collRows to avoid  		// index of bounds exception  		//  		G.redimPreserve (ref m_collRows' m_collRows.Length + 1);  	}  	cn.closeDb ();  }  else {  	vRows = null;  	if (createIndexVector) {  		m_vRowsIndex = new int[0];  		m_lastRowIndex = -1;  	}  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetData,The following statement contains a magic number: varRs = new object[2];  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetData,The following statement contains a magic number: while (!dr.IsClosed && dr.NextResult ()) {  	rsAux = new DataTable ();  	rsAux.Load (dr);  	varRs = new object[2];  	varRs [0] = rsAux;  	varRs [1] = connect.getDataSource ();  	recordsets.Add (varRs);  	// TODO: check if this works  	//  	// we add an empty element to m_collRows to avoid  	// index of bounds exception  	//  	G.redimPreserve (ref m_collRows' m_collRows.Length + 1);  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetData,The following statement contains a magic number: varRs = new object[2];  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pInitRowFormulas,The following statement contains a magic number: m_lastRowPreEvalued = new int[3];  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pInitRowFormulas,The following statement contains a magic number: m_lastRowPostEvalued = new int[3];  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pInitRowFormulas,The following statement contains a magic number: for (i = 0; i < 3; i++) {  	m_lastRowPreEvalued [i] = -1;  	m_lastRowPostEvalued [i] = -1;  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getControlsInZOrder,The following statement contains a magic number: while (col.count () > 0) {  	// we search the lower zorder in this collection  	//  	i = 32767;  	for (int _i = 0; _i < col.count (); _i++) {  		ctrl = col.item (_i);  		if (ctrl.getLabel ().getAspect ().getNZOrder () < i) {  			i = ctrl.getLabel ().getAspect ().getNZOrder ();  		}  	}  	for (int _i = 0; _i < col.count (); _i++) {  		ctrl = col.item (_i);  		if (ctrl.getLabel ().getAspect ().getNZOrder () == i) {  			col.remove (ctrl.getKey ());  			ctrls.add (ctrl' ctrl.getKey ());  			break;  		}  	}  	i = i + 1;  }  
Magic Number,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getControlsInZOrder,The following statement contains a magic number: i = 32767;  
Missing Default,CSReportDll,cReportChart,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportChart.cs,pGetExt,The following switch statement is missing a default case: switch (m_imageFormat) {  case csRptChartFormat.BMP:  	_rtn = ".bmp";  	break;  case csRptChartFormat.JPEG:  	_rtn = ".jpg";  	break;  case csRptChartFormat.GIF:  	_rtn = ".gif";  	break;  case csRptChartFormat.PNG:  	_rtn = ".png";  	break;  }  
Missing Default,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalGroupFunctions,The following switch statement is missing a default case: switch (fint.getFormulaType ()) {  case csRptFormulaType.CSRPTGROUPTOTAL:  	evalGroupTotal (fint);  	break;  case csRptFormulaType.CSRPTGROUPMAX:  	evalGroupMax (fint);  	break;  case csRptFormulaType.CSRPTGROUPMIN:  	evalGroupMin (fint);  	break;  case csRptFormulaType.CSRPTGROUPAVERAGE:  	evalGroupAverage (fint);  	break;  case csRptFormulaType.CSRPTGROUPPERCENT:  	evalGroupPercent (fint);  	break;  case csRptFormulaType.CSRPTGROUPCOUNT:  	evalGroupCount (fint);  	break;  case csRptFormulaType.CSRPTGROUPLINENUMBER:  	evalGroupLineNumber (fint);  	break;  }  
Missing Default,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pEvalFunctionInt,The following switch statement is missing a default case: switch (fint.getFormulaType ()) {  case csRptFormulaType.CSRPTFAVERAGE:  	evalAverage (fint);  	break;  case csRptFormulaType.CSRPTFSUM:  	evalSum (fint);  	break;  case csRptFormulaType.CSRPTFSUMTIME:  	evalSumTime (fint);  	break;  case csRptFormulaType.CSRPTMAX:  	evalMax (fint);  	break;  case csRptFormulaType.CSRPTMIN:  	evalMin (fint);  	break;  case csRptFormulaType.CSRPTCOUNT:  	evalCount (fint);  	break;  case csRptFormulaType.CSRPTFNUMBERTOSTRING:  	evalNumberToString (fint);  	break;  case csRptFormulaType.CSRPTISEQUAL:  	evalIsEqual (fint);  	break;  case csRptFormulaType.CSRPTISNOTEQUAL:  	evalIsNotEqual (fint);  	break;  case csRptFormulaType.CSRPTISGREATERTHAN:  	evalIsGreaterThan (fint);  	break;  case csRptFormulaType.CSRPTISLESSTHAN:  	evalIsLessThan (fint);  	break;  case csRptFormulaType.CSRPTFCALCULO:  	// nothing to do  	break;  case csRptFormulaType.CSRPTDECLAREVAR:  	evalDeclareVar (fint);  	break;  case csRptFormulaType.CSRPTGETVAR:  	// nothing to do  	break;  case csRptFormulaType.CSRPTGETPARAM:  	// nothing to do  	break;  case csRptFormulaType.CSRPTSETVAR:  	evalSetVar (fint);  	break;  case csRptFormulaType.CSRPTADDTOVAR:  	evalAddToVar (fint);  	break;  case csRptFormulaType.CSRPTGETDATAFROMRSAD:  	evalGetDataFromRsAd (fint);  	break;  case csRptFormulaType.CSRPTGETDATAFROMRS:  	evalGetDataFromRs (fint);  	break;  case csRptFormulaType.CSRPTISINRS:  	evalIsInRs (fint);  	break;  }  
Missing Default,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,pResultFunctionInt,The following switch statement is missing a default case: switch (fint.getFormulaType ()) {  case csRptFormulaType.CSRPTFAVERAGE:  	return resultAverage (fint);  case csRptFormulaType.CSRPTFSUM:  	return resultSum (fint);  case csRptFormulaType.CSRPTFGETSTRING:  	return resultGetString (fint);  case csRptFormulaType.CSRPTFSUMTIME:  	return resultSumTime (fint);  case csRptFormulaType.CSRPTMAX:  	return resultMax (fint);  case csRptFormulaType.CSRPTMIN:  	return resultMin (fint);  case csRptFormulaType.CSRPTCOUNT:  	return resultCount (fint);  case csRptFormulaType.CSRPTFNUMBERTOSTRING:  	return resultNumberToString (fint);  case csRptFormulaType.CSRPTISEQUAL:  	return resultIsEqual (fint);  case csRptFormulaType.CSRPTISNOTEQUAL:  	return resultIsNotEqual (fint);  case csRptFormulaType.CSRPTISGREATERTHAN:  	return resultIsGreaterThan (fint);  case csRptFormulaType.CSRPTISLESSTHAN:  	return resultIsLessThan (fint);  case csRptFormulaType.CSRPTFPAGENUMBER:  	return resultPageNumber ();  case csRptFormulaType.CSRPTFTOTALPAGES:  	return resultTotalPages ();  case csRptFormulaType.CSRPTFVAL:  	return resultValue (fint);  case csRptFormulaType.CSRPTLENGTH:  	return resultLength (fint);  case csRptFormulaType.CSRPTTEXTREPLACE:  	return resultTextReplace (fint);  case csRptFormulaType.CSRPTFCALCULO:  	return resultCalculo (fint);  case csRptFormulaType.CSRPTDECLAREVAR:  	// nothing to do  	break;  case csRptFormulaType.CSRPTGETVAR:  	return resultGetVar (fint);  case csRptFormulaType.CSRPTGETPARAM:  	return resultGetParam (fint);  case csRptFormulaType.CSRPTSETVAR:  	// nothing to do  	break;  case csRptFormulaType.CSRPTADDTOVAR:  	// nothing to do  	break;  case csRptFormulaType.CSRPTGETDATAFROMRSAD:  	return resultGetDataFromRsAd (fint);  case csRptFormulaType.CSRPTGETDATAFROMRS:  	return resultGetDataFromRs (fint);  case csRptFormulaType.CSRPTGROUPTOTAL:  	return resultGroupTotal (fint);  case csRptFormulaType.CSRPTGROUPMAX:  	return resultGroupMax (fint);  case csRptFormulaType.CSRPTGROUPMIN:  	return resultGroupMin (fint);  case csRptFormulaType.CSRPTGROUPAVERAGE:  	return resultGroupAverage (fint);  case csRptFormulaType.CSRPTGROUPPERCENT:  	return resultGroupPercent (fint);  case csRptFormulaType.CSRPTGROUPCOUNT:  	return resultGroupCount (fint);  case csRptFormulaType.CSRPTGROUPLINENUMBER:  	return resultGroupLineNumber (fint);  case csRptFormulaType.CSRPTISINRS:  	return resultIsInRs (fint);  }  
Missing Default,CSReportDll,cReportCompiler,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReportCompiler.cs,evalNumberToString,The following switch statement is missing a default case: switch (iLenguage) {  case C_SPANISH:  	w_item.setValue (ntos.spanishNumberToString (iNumber));  	break;  case C_ENGLISH:  	w_item.setValue (ntos.englishNumberToString (iNumber));  	break;  case C_FRENCH:  	w_item.setValue (ntos.frenchNumberToString (iNumber));  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGetLineAuxPrintHeader,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	String text = cReportGlobals.valVariant (m_rows.Rows [row] [col]).ToString ().ToLower ();  	if (m_vGroups [i].value.ToString () != text) {  		return true;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	double number = cUtil.val (cReportGlobals.valVariant (m_rows.Rows [row] [col]));  	if ((double)m_vGroups [i].value != number) {  		return true;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	DateTime date = cReportGlobals.dateValue (cReportGlobals.valVariant (m_rows.Rows [row] [col]));  	if ((DateTime)m_vGroups [i].value != date) {  		return true;  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pEvalGroupChange,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	String text = cReportGlobals.valVariant (m_rows.Rows [row] [col]).ToString ().ToLower ();  	if (m_vGroups [i].value == null) {  		changeGroup (i' text);  	}  	else if (m_vGroups [i].value.ToString () != text) {  		changeGroup (i' text);  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	double number = cUtil.val (cReportGlobals.valVariant (m_rows.Rows [row] [col]));  	if (m_vGroups [i].value == null) {  		changeGroup (i' number);  	}  	else if ((double)m_vGroups [i].value != number) {  		changeGroup (i' number);  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	DateTime date = cReportGlobals.dateValue (cReportGlobals.valVariant (m_rows.Rows [row] [col]));  	if (m_vGroups [i].value == null) {  		changeGroup (i' date);  	}  	else if ((DateTime)m_vGroups [i].value != date) {  		changeGroup (i' date);  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,pGroupChangedAux,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	m_vGroups [i].value = cReportGlobals.valVariant (m_rows.Rows [row] [col]).ToString ().ToLower ();  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	m_vGroups [i].value = cUtil.val (cReportGlobals.valVariant (m_rows.Rows [row] [col]));  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	m_vGroups [i].value = cReportGlobals.dateValue (cReportGlobals.valVariant (m_rows.Rows [row] [col]));  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getLineAux,The following switch statement is missing a default case: switch (ctrl.getControlType ()) {  case csRptControlType.CSRPTCTFIELD:  	pGetIndexRows (out indexRows' out indexRow' out indexField' ctrl);  	if (m_collRows [indexRows] != null) {  		// it looks ugly' dont think you?  		//  		// maybe this help a litle:  		//  		//    m_vCollRows(IndexRows)    a matrix with the data   		//                              contained in the datasource  		//                              referd by this control  		//  		//    (IndexField' IndexRow)    a cell in this matrix  		//  		object value = m_collRows [indexRows].Rows [indexRow] [indexField];  		field.setValue (cReportGlobals.format (cReportGlobals.valVariant (value)' ctrl.getLabel ().getAspect ().getFormat ()));  	}  	break;  case csRptControlType.CSRPTCTLABEL:  	w_label = ctrl.getLabel ();  	field.setValue (cReportGlobals.format (w_label.getText ()' w_label.getAspect ().getFormat ()));  	break;  case csRptControlType.CSRPTCTIMAGE:  	w_label = ctrl.getLabel ();  	field.setValue (cReportGlobals.format (w_label.getText ()' w_label.getAspect ().getFormat ()));  	field.setImage (ctrl.getImage ().getImage ());  	break;  case csRptControlType.CSRPTCTDBIMAGE:  	pGetIndexRows (out indexRows' out indexRow' out indexField' ctrl);  	if (m_collRows [indexRows] != null) {  		field.setImage (pGetImage (indexRows' indexField' indexRow));  	}  	break;  case csRptControlType.CSRPTCTCHART:  	pGetIndexRows (out indexRows' out indexRow' out indexField' ctrl);  	field.setImage (pGetChartImage (indexRows' indexField' indexRow' ctrl));  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,launch,The following switch statement is missing a default case: switch (m_launchInfo.getAction ()) {  case csRptLaunchAction.CSRPTLAUNCHPRINTER:  	if (!m_launchInfo.getObjPaint ().printReport ()) {  		return false;  	}  	break;  case csRptLaunchAction.CSRPTLAUNCHFILE:  	if (!m_launchInfo.getObjPaint ().makeXml ()) {  		return false;  	}  	break;  case csRptLaunchAction.CSRPTLAUNCHPREVIEW:  	if (!m_launchInfo.getObjPaint ().previewReport ()) {  		return false;  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupTotal,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		String text = (String)cReportGlobals.valVariant (value);  		if ((String)m_vGroups [i].value != text.ToLower ()) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		object value = m_rows.Rows [colIndex] [m_vRowsIndex [iRow]];  		rtn = rtn + (double)cReportGlobals.valVariant (value);  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		double number = cUtil.val (cReportGlobals.valVariant (value));  		if ((double)m_vGroups [i].value != number) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [colIndex];  		rtn = rtn + (double)cReportGlobals.valVariant (value);  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		DateTime date = cReportGlobals.dateValue (cReportGlobals.valVariant (value));  		if ((DateTime)m_vGroups [i].value != date) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [colIndex];  		rtn = rtn + (double)cReportGlobals.valVariant (value);  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupMax,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		String text = (String)cReportGlobals.valVariant (value);  		if ((String)m_vGroups [i].value != text.ToLower ()) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		double value = (double)cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [iRow]] [colIndex]);  		if (rtn < value) {  			rtn = value;  		}  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		double number = cUtil.val (cReportGlobals.valVariant (value));  		if ((double)m_vGroups [i].value != number) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		double value = (double)cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [iRow]] [colIndex]);  		if (rtn < value) {  			rtn = value;  		}  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		DateTime date = cReportGlobals.dateValue (cReportGlobals.valVariant (value));  		if ((DateTime)m_vGroups [i].value != date) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		double value = (double)cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [iRow]] [colIndex]);  		if (rtn < value) {  			rtn = value;  		}  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupMin,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		String text = (String)cReportGlobals.valVariant (value);  		if ((String)m_vGroups [i].value != text.ToLower ()) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		double value = (double)cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [iRow]] [colIndex]);  		if (rtn > value) {  			rtn = value;  		}  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		double number = cUtil.val (cReportGlobals.valVariant (value));  		if ((double)m_vGroups [i].value != number) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		double value = (double)cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [iRow]] [colIndex]);  		if (rtn > value) {  			rtn = value;  		}  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		DateTime date = cReportGlobals.dateValue (cReportGlobals.valVariant (value));  		if ((DateTime)m_vGroups [i].value != date) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		double value = (double)cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [iRow]] [colIndex]);  		if (rtn > value) {  			rtn = value;  		}  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupAverage,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		String text = (String)cReportGlobals.valVariant (value);  		if (m_vGroups [i].value != text.ToLower ()) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		rtn = rtn + (double)cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [iRow]] [colIndex]);  		count = count + 1;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		double number = cUtil.val (cReportGlobals.valVariant (value));  		if ((double)m_vGroups [i].value != number) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		rtn = rtn + (double)cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [iRow]] [colIndex]);  		count = count + 1;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		DateTime date = cReportGlobals.dateValue (cReportGlobals.valVariant (value));  		if ((DateTime)m_vGroups [i].value != date) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		rtn = rtn + (double)cReportGlobals.valVariant (m_rows.Rows [m_vRowsIndex [iRow]] [colIndex]);  		count = count + 1;  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,getGroupCount,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		String text = (String)cReportGlobals.valVariant (value);  		if ((String)m_vGroups [i].value != text.ToLower ()) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		rtn = rtn + 1;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		double number = cUtil.val (cReportGlobals.valVariant (value));  		if ((double)m_vGroups [i].value != number) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		rtn = rtn + 1;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	if (m_vGroups [i].value == null) {  		return rtn;  	}  	else {  		object value = m_rows.Rows [m_vRowsIndex [iRow]] [m_vGroups [i].indexField];  		DateTime date = cReportGlobals.dateValue (cReportGlobals.valVariant (value));  		if ((DateTime)m_vGroups [i].value != date) {  			return rtn;  		}  	}  	if (i == indexGroup) {  		rtn = rtn + 1;  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	if (!orderTextAsc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  		return false;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	if (!orderNumberAsc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  		return false;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	if (!orderDateAsc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  		return false;  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	if (!orderTextDesc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  		return false;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	if (!orderNumberDesc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  		return false;  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	if (!orderDateDesc (m_vGroups [i].groups [j].first' m_vGroups [i].groups [j].last' m_vGroups [i].indexField)) {  		return false;  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,initGroups,The following switch statement is missing a default case: switch (m_vGroups [i].comparisonType) {  case csRptGrpComparisonType.CSRPTGRPTEXT:  	String text1 = m_vGroups [i + 1].value.ToString ();  	String text2 = value.ToString ();  	if (text1.ToLower () != text2.ToLower ()) {  		addGroup (i' j' value);  	}  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	double number1 = cUtil.val (m_vGroups [i + 1].value);  	double number2 = cUtil.val (value);  	if (number1 != number2) {  		addGroup (i' j' value);  	}  	break;  case csRptGrpComparisonType.CSRPTGRPDATE:  	DateTime date1 = (DateTime)m_vGroups [i + 1].value;  	DateTime date2 = (DateTime)value;  	if (date1 != date2) {  		addGroup (i' j' value);  	}  	break;  }  
Missing Default,CSReportDll,cReport,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportDll\Codigo\CSReportDll\cReport.cs,addFieldToNewPage,The following switch statement is missing a default case: switch (ctrl.getControlType ()) {  case csRptControlType.CSRPTCTFIELD:  	pGetIndexRows (out indexRows' out indexRow' out indexField' ctrl);  	if (m_collRows [indexRows] != null) {  		// it looks ugly' dont think you?  		//  		// maybe this help a litle:  		//  		//    m_vCollRows(IndexRows)    a matrix with the data   		//                              contained in the datasource  		//                              referd by this control  		//  		//    (IndexField' IndexRow)    a cell in this matrix  		//  		object value = m_collRows [indexRows].Rows [indexRow] [indexField];  		field.setValue (cReportGlobals.format (cReportGlobals.valVariant (value)' ctrl.getLabel ().getAspect ().getFormat ()));  	}  	break;  case csRptControlType.CSRPTCTLABEL:  	field.setValue (cReportGlobals.format (ctrl.getLabel ().getText ()' ctrl.getLabel ().getAspect ().getFormat ()));  	break;  case csRptControlType.CSRPTCTIMAGE:  	field.setValue (cReportGlobals.format (ctrl.getLabel ().getText ()' ctrl.getLabel ().getAspect ().getFormat ()));  	field.setImage (ctrl.getImage ().getImage ());  	break;  case csRptControlType.CSRPTCTDBIMAGE:  	pGetIndexRows (out indexRows' out indexRow' out indexField' ctrl);  	if (m_collRows [indexRows] != null) {  		field.setImage (pGetImage (indexRows' indexField' indexRow));  	}  	break;  case csRptControlType.CSRPTCTCHART:  	pGetIndexRows (out indexRows' out indexRow' out indexField' ctrl);  	field.setImage (pGetChartImage (indexRows' indexField' indexRow' ctrl));  	break;  }  
