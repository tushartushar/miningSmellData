Implementation smell,Namespace,Class,File,Method,Description
Long Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_KeyDown,The method has 105 lines of code.
Long Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseDown,The method has 162 lines of code.
Long Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The method has 183 lines of code.
Long Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,deleteObj,The method has 166 lines of code.
Long Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The method has 422 lines of code.
Long Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reLoadReport,The method has 113 lines of code.
Long Method,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,pAddCtrlsAux,The method has 105 lines of code.
Long Method,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,pFillColors,The method has 143 lines of code.
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSelectSection,Cyclomatic complexity of the method is 18
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showEditFormula,Cyclomatic complexity of the method is 8
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_fTreeCtrls_UpdateSectionFormulaHide,Cyclomatic complexity of the method is 11
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_KeyDown,Cyclomatic complexity of the method is 49
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetMovingFromKeyboard,Cyclomatic complexity of the method is 11
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseDown,Cyclomatic complexity of the method is 35
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,Cyclomatic complexity of the method is 52
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,Cyclomatic complexity of the method is 111
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSbPnlCtrl,Cyclomatic complexity of the method is 13
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseUp,Cyclomatic complexity of the method is 15
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,deleteObj,Cyclomatic complexity of the method is 37
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pCanDeleteSection,Cyclomatic complexity of the method is 13
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,Cyclomatic complexity of the method is 14
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetNewControlProperties,Cyclomatic complexity of the method is 45
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSectionLine,Cyclomatic complexity of the method is 14
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,Cyclomatic complexity of the method is 40
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,Cyclomatic complexity of the method is 61
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pShowGroupProperties,Cyclomatic complexity of the method is 20
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pShowSecProperties,Cyclomatic complexity of the method is 8
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pGetSection,Cyclomatic complexity of the method is 24
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,Cyclomatic complexity of the method is 103
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,getLineRegionForControl,Cyclomatic complexity of the method is 8
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pChangeTopSection,Cyclomatic complexity of the method is 16
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,moveSection,Cyclomatic complexity of the method is 14
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pChangeTopSections,Cyclomatic complexity of the method is 17
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reLoadReport,Cyclomatic complexity of the method is 13
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reportProgress,Cyclomatic complexity of the method is 10
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveVertical,Cyclomatic complexity of the method is 45
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pResizeControl,Cyclomatic complexity of the method is 37
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveControlAfterResize,Cyclomatic complexity of the method is 28
Complex Method,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,getHeightOfSectionsBellowMe,Cyclomatic complexity of the method is 34
Complex Method,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,Cyclomatic complexity of the method is 18
Complex Method,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,pAddCtrlsAux,Cyclomatic complexity of the method is 19
Complex Method,CSReportEditor,cMainEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cMainEditor.cs,setDocActive,Cyclomatic complexity of the method is 11
Complex Method,CSReportEditor,fSearch,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fSearch.cs,searchInSections,Cyclomatic complexity of the method is 13
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,cEditor,The method has 9 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_fToolBox_AddControl,The method has 6 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSbPnlCtrl,The method has 7 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pGetSection,The method has 5 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pGetSection,The method has 6 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,paintSection,The method has 5 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,getRegionForControlAux,The method has 5 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,moveSection,The method has 7 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pChangeSecLnHeight,The method has 5 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveHeader,The method has 6 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveGroupHeader,The method has 6 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveDetails,The method has 6 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveGroupFooter,The method has 6 parameters.
Long Parameter List,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveFooter,The method has 6 parameters.
Long Parameter List,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The method has 6 parameters.
Long Parameter List,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,pAddCtrlsAux,The method has 6 parameters.
Long Parameter List,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,fillColumns,The method has 6 parameters.
Long Parameter List,CSReportEditor,fFormula,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fFormula.cs,addFormula,The method has 5 parameters.
Long Parameter List,CSReportEditor,fSearch,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fSearch.cs,pAddToSearchResult,The method has 5 parameters.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetMovingFromKeyboard,The length of the statement  "		if (po.getRptType () == csRptSectionType.DETAIL || po.getRptType () == csRptSectionType.HEADER || po.getRptType () == csRptSectionType.GROUP_HEADER || po.getRptType () == csRptSectionType.GROUP_FOOTER || po.getRptType () == csRptSectionType.FOOTER) { " is 250.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetMovingFromKeyboard,The length of the statement  "		else if (po.getRptType () == csRptSectionType.SECLN_HEADER || po.getRptType () == csRptSectionType.SECLN_DETAIL || po.getRptType () == csRptSectionType.SECLN_FOOTER || po.getRptType () == csRptSectionType.SECLN_GROUPH || po.getRptType () == csRptSectionType.SECLN_GROUPF) { " is 273.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseDown,The length of the statement  "						if (po.getRptType () == csRptSectionType.DETAIL || po.getRptType () == csRptSectionType.HEADER || po.getRptType () == csRptSectionType.GROUP_HEADER || po.getRptType () == csRptSectionType.GROUP_FOOTER || po.getRptType () == csRptSectionType.FOOTER) { " is 250.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseDown,The length of the statement  "						else if (po.getRptType () == csRptSectionType.SECLN_HEADER || po.getRptType () == csRptSectionType.SECLN_DETAIL || po.getRptType () == csRptSectionType.SECLN_FOOTER || po.getRptType () == csRptSectionType.SECLN_GROUPH || po.getRptType () == csRptSectionType.SECLN_GROUPF) { " is 273.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pShowMoveAll,The length of the statement  "			m_paint.moveObjToXYEx (m_keyMoving' x - m_offX + offsetLeft' firstTop - offSet2 + offsetTop' m_picReport.CreateGraphics ()' clear); " is 131.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pShowMoveAll,The length of the statement  "			m_paint.moveObjToXYEx (m_keyMoving' firstLeft + offsetLeft' y - m_offY + offsetTop' m_picReport.CreateGraphics ()' clear); " is 122.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pShowMoveAll,The length of the statement  "			m_paint.moveObjToXYEx (m_keyMoving' x - m_offX + offsetLeft' y - m_offY + offsetTop' m_picReport.CreateGraphics ()' clear); " is 123.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The length of the statement  "				m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' y); " is 129.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The length of the statement  "				m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' x' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE); " is 129.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The length of the statement  "				m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' x' cGlobals.C_NO_CHANGE); " is 129.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The length of the statement  "				m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' cGlobals.C_NO_CHANGE' y' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE); " is 129.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The length of the statement  "				pSetSbPnlCtrl (ctrl.getName ()' ctrl.getControlType ()' ctrl.getFormulaHide ().getText ()' ctrl.getFormulaValue ().getText ()' ctrl.getHasFormulaHide ()' ctrl.getHasFormulaValue ()' ctrl.getField ().getName ()); " is 211.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The length of the statement  "						if (po.getRptType () == csRptSectionType.DETAIL || po.getRptType () == csRptSectionType.HEADER || po.getRptType () == csRptSectionType.GROUP_HEADER || po.getRptType () == csRptSectionType.GROUP_FOOTER || po.getRptType () == csRptSectionType.FOOTER) { " is 250.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The length of the statement  "					pSetSbPnlCtrl (rptCtrl.getName ()' rptCtrl.getControlType ()' rptCtrl.getFormulaHide ().getText ()' rptCtrl.getFormulaValue ().getText ()' rptCtrl.getHasFormulaHide ()' rptCtrl.getHasFormulaValue ()' rptCtrl.getField ().getName ()); " is 232.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSbPnlCtrl,The length of the statement  "		msg = "Ctl:[" + ctrlName + "]Tipo:[" + strCtlType + "]F.Hide:[" + cUtil.subString (formulaHide' 1' 100) + "]Activa[" + ((bool)hasFormulaHide).ToString () + "]F.Value:[" + cUtil.subString (formulaValue' 1' 100) + "]Activa[" + ((bool)hasFormulaValue).ToString () + "]Field:[" + fieldName + "]"; " is 292.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,setParameters,The length of the statement  "	if (!connect.getDataSourceColumnsInfo (m_report.getConnect ().getDataSource ()' m_report.getConnect ().getDataSourceType ())) " is 125.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,deleteObj,The length of the statement  "		if (!cWindow.ask ("Are yuo sure you want to delete " + what + " and all the controls it contains? "' MessageBoxDefaultButton.Button2)) { " is 136.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetNewControlPosition,The length of the statement  "	if (ctrl.getControlType () == csRptControlType.CSRPTCTIMAGE || ctrl.getControlType () == csRptControlType.CSRPTCTCHART) { " is 121.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The length of the statement  "	secL.setKeyPaint (paintSection (secL.getAspect ()' secL.getKey ()' sec.getTypeSection ()' C_SECTIONLINE + (sec.getSectionLines ().count () - 2).ToString ()' true)); " is 164.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The length of the statement  "		rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.HEADER' rptSection.getName ()' false)); " is 141.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The length of the statement  "		moveSection (m_paint.getPaintObject (rptSection.getKeyPaint ())' 0' w_aspect.getTop ()' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' w_aspect.getTop () + rptSection.getAspect ().getHeight ()' rptSection' true); " is 217.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The length of the statement  "		rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.GROUP_HEADER' rptSection.getName ()' false)); " is 147.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The length of the statement  "		moveSection (m_paint.getPaintObject (rptSection.getKeyPaint ())' 0' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' w_aspect.getTop ()' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' rptSection' true); " is 210.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The length of the statement  "		rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.GROUP_FOOTER' rptSection.getName ()' false)); " is 147.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The length of the statement  "		rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.FOOTER' rptSection.getName ()' false)); " is 141.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,openDocument,The length of the statement  "                System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0' 0' (int)graph.VisibleClipBounds.Width' (int)graph.VisibleClipBounds.Height + 56); // TODO check why 56 ???" is 170.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,askEdit,The length of the statement  "	DialogResult rslt = MessageBox.Show (msg' title' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button3); " is 138.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The length of the statement  "		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) { " is 129.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The length of the statement  "						if (cWindow.ask ("You have changed the name of this control.;;Do you want to update all references to this control in all formulas of this report?"' MessageBoxDefaultButton.Button2)) { " is 184.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The length of the statement  "				rptCtrl.getFormulaValue ().setWhenEval (m_fProperties.opAfterPrint.Checked ? csRptWhenEval.CSRPTEVALPOST : csRptWhenEval.CSRPTEVALPRE); " is 135.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The length of the statement  "			if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) { " is 129.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,moveSection,The length of the statement  "	// TODO: remove after more testing - aligning the sections has an undesired result: the last section line is shrinked after five resize actions " is 143.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,moveSection,The length of the statement  "	secToMove.getAspect ().setHeight (w_aspect.getTop () + cGlobals.C_HEIGHT_BAR_SECTION - secToMove.getAspect ().getTop ()); " is 121.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,moveSection,The length of the statement  "	pGetOffSet (CSReportPaint.cGlobals.getRectFromPaperSize (m_report.getPaperInfo ()' w_paperInfo.getPaperSize ()' w_paperInfo.getOrientation ()).Height' out pageHeight); " is 167.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pChangeBottomSections,The length of the statement  "	if (secToMove.getTypeSection () == csRptSectionType.FOOTER || secToMove.getTypeSection () == csRptSectionType.MAIN_FOOTER || bChangeTop) { " is 138.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pChangeTopSections,The length of the statement  "	if (secToMove.getTypeSection () == csRptSectionType.HEADER || secToMove.getTypeSection () == csRptSectionType.MAIN_HEADER) { " is 124.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pChangeTopSections,The length of the statement  "	if (secToMove.getTypeSection () == csRptSectionType.MAIN_DETAIL || secToMove.getTypeSection () == csRptSectionType.DETAIL || bChangeTop) { " is 138.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reLoadReport,The length of the statement  "	m_paint.setGridHeight (pSetSizePics (CSReportPaint.cGlobals.getRectFromPaperSize (m_report.getPaperInfo ()' w_paperInfo.getPaperSize ()' w_paperInfo.getOrientation ()).Height)); " is 177.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reLoadReport,The length of the statement  "		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTIMAGE || rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) { " is 127.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddPaintSetcionForSecLn,The length of the statement  "			secLine.setKeyPaint (paintSection (secLine.getAspect ()' secLine.getKey ()' sec.getTypeSection ()' C_SECTIONLINE + i.ToString ()' true)); " is 137.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,refreshReport,The length of the statement  "	m_paint.setGridHeight (pSetSizePics (CSReportPaint.cGlobals.getRectFromPaperSize (m_report.getPaperInfo ()' w_paperInfo.getPaperSize ()' w_paperInfo.getOrientation ()).Height)); " is 177.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSizePics,The length of the statement  "	m_picReport.Width = (int)CSReportPaint.cGlobals.getRectFromPaperSize (m_report.getPaperInfo ()' w_paperInfo.getPaperSize ()' w_paperInfo.getOrientation ()).Width; " is 162.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveAll,The length of the statement  "		offsetTop = pGetOffsetTopFromControls (firstTop - firstOffSet' paintObj.getAspect ().getTop () - paintObj.getAspect ().getOffset ()); " is 133.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveVertical,The length of the statement  "		rptSec = pMoveGroupHeader (sKeySection' out minBottom' out maxBottom' true' paintObj.getTag ()' out maxBottomSectionLine); " is 122.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveVertical,The length of the statement  "		rptSec = pMoveGroupFooter (sKeySection' out minBottom' out maxBottom' true' paintObj.getTag ()' out maxBottomSectionLine); " is 122.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveVertical,The length of the statement  "		y = rptSec.getAspect ().getTop () - paintObj.getAspect ().getOffset () + pGetSecHeigthFromSecLines (rptSec) - cGlobals.C_HEIGHT_BAR_SECTION; " is 140.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pChangeSecLnHeight,The length of the statement  "	// TODO: remove after more testing - aligning the sections has an undesired result: the last section line is shrinked after five resize actions " is 143.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,getHeightOfSectionsBellowMe,The length of the statement  "		throw new ReportEditorException (csRptEditorErrors.CSRPT_EDITOR_SECTION_TYPE_INVALID' C_MODULE' cReportEditorError.errGetDescript (csRptEditorErrors.CSRPT_EDITOR_SECTION_TYPE_INVALID)); " is 185.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pValidateSectionAspect,The length of the statement  "	var height = CSReportPaint.cGlobals.getRectFromPaperSize (m_report.getPaperInfo ()' w_paperInfo.getPaperSize ()' w_paperInfo.getOrientation ()).Height; " is 151.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pValidateSectionAspecAux,The length of the statement  "	width = CSReportPaint.cGlobals.getRectFromPaperSize (m_report.getPaperInfo ()' w_paperInfo.getPaperSize ()' w_paperInfo.getOrientation ()).Width; " is 145.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,init,The length of the statement  "	tR = new Rectangle (CSReportPaint.cGlobals.getRectFromPaperSize (m_report.getPaperInfo ()' w_paperInfo.getPaperSize ()' w_paperInfo.getOrientation ())); " is 152.
Long Statement,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,editConnectionString,The length of the statement  "	if (cUtil.getInput (ref stringConnection' "You can modify the string connection of this report"' "String connection")) { " is 120.
Long Statement,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,pAddCtrlsAux,The length of the statement  "				nodeCtrl = nodeSecLn.Nodes.Add (ctrl.getName () + (ctrl.getLabel ().getText () != "" ? " - " + ctrl.getLabel ().getText () : "")); " is 130.
Long Statement,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,fMain_Load,The length of the statement  "	cPrintAPI.getDefaultPrinter (out m_printerName' out m_driverName' out m_port' out m_paperSize' out m_orientation' out m_paperSizeWidth' out m_paperSizeHeight); " is 159.
Long Statement,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The length of the statement  "		if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") { " is 175.
Long Statement,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,mnuHelpAbout_Click,The length of the statement  "	cWindow.msgInfo (System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Name + " - Version " + System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version + "\r\n\r\nhttps://github.com/javiercrowsoft/CSReports.net"); " is 233.
Long Statement,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,mnuPageSetup_Click,The length of the statement  "		pageSetup.initDialog (editor.getPaperSize ()' editor.getCustomHeight ()' editor.getCustomWidth ()' editor.getOrientation ()); " is 125.
Long Statement,CSReportEditor,fSearch,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fSearch.cs,searchInSections,The length of the statement  "			pAddToSearchResult (sec.getName ()' objType' csObjType.iTypeFormulaH' "S" + sec.getKey ()' sec.getFormulaHide ().getText ()); " is 125.
Long Statement,CSReportEditor,fSearch,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fSearch.cs,searchInSections,The length of the statement  "				pAddToSearchResult (sec.getName () + " - Line " + secLn.getIndex ().ToString ()' csObjType.iTypeSecLn' csObjType.iTypeFormulaH' "S" + sec.getKey ()' secLn.getFormulaHide ().getText ()); " is 185.
Long Statement,CSReportEditor,fSearch,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fSearch.cs,searchInSections,The length of the statement  "				if (ctrl.getControlType () == csRptControlType.CSRPTCTFIELD || ctrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) { " is 123.
Long Statement,CSReportEditor,fSearch,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fSearch.cs,searchInSections,The length of the statement  "						pAddToSearchResult (ctrl.getName ()' csObjType.iTypeCtrl' csObjType.iTypeDbField' ctrl.getKey ()' ctrl.getField ().getName ()); " is 127.
Long Statement,CSReportEditor,fSearch,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fSearch.cs,searchInSections,The length of the statement  "						pAddToSearchResult (ctrl.getName ()' csObjType.iTypeCtrl' csObjType.iTypeText' ctrl.getKey ()' ctrl.getLabel ().getText ()); " is 124.
Long Statement,CSReportEditor,fSearch,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fSearch.cs,searchInSections,The length of the statement  "					pAddToSearchResult (ctrl.getName ()' csObjType.iTypeCtrl' csObjType.iTypeFormulaV' ctrl.getKey ()' ctrl.getFormulaValue ().getText ()); " is 135.
Long Statement,CSReportEditor,fSearch,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fSearch.cs,searchInSections,The length of the statement  "					pAddToSearchResult (ctrl.getName ()' csObjType.iTypeCtrl' csObjType.iTypeFormulaH' ctrl.getKey ()' ctrl.getFormulaHide ().getText ()); " is 134.
Long Statement,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The length of the statement  "		if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") { " is 175.
Complex Conditional,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetMovingFromKeyboard,The conditional expression  "po.getRptType () == csRptSectionType.DETAIL || po.getRptType () == csRptSectionType.HEADER || po.getRptType () == csRptSectionType.GROUP_HEADER || po.getRptType () == csRptSectionType.GROUP_FOOTER || po.getRptType () == csRptSectionType.FOOTER"  is complex.
Complex Conditional,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetMovingFromKeyboard,The conditional expression  "po.getRptType () == csRptSectionType.SECLN_HEADER || po.getRptType () == csRptSectionType.SECLN_DETAIL || po.getRptType () == csRptSectionType.SECLN_FOOTER || po.getRptType () == csRptSectionType.SECLN_GROUPH || po.getRptType () == csRptSectionType.SECLN_GROUPF"  is complex.
Complex Conditional,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseDown,The conditional expression  "po.getRptType () == csRptSectionType.DETAIL || po.getRptType () == csRptSectionType.HEADER || po.getRptType () == csRptSectionType.GROUP_HEADER || po.getRptType () == csRptSectionType.GROUP_FOOTER || po.getRptType () == csRptSectionType.FOOTER"  is complex.
Complex Conditional,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseDown,The conditional expression  "po.getRptType () == csRptSectionType.SECLN_HEADER || po.getRptType () == csRptSectionType.SECLN_DETAIL || po.getRptType () == csRptSectionType.SECLN_FOOTER || po.getRptType () == csRptSectionType.SECLN_GROUPH || po.getRptType () == csRptSectionType.SECLN_GROUPF"  is complex.
Complex Conditional,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The conditional expression  "po.getRptType () == csRptSectionType.DETAIL || po.getRptType () == csRptSectionType.HEADER || po.getRptType () == csRptSectionType.GROUP_HEADER || po.getRptType () == csRptSectionType.GROUP_FOOTER || po.getRptType () == csRptSectionType.FOOTER"  is complex.
Complex Conditional,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The conditional expression  "m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine""  is complex.
Complex Conditional,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The conditional expression  "m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine""  is complex.
Empty Catch Block,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,tx_border3D_LostFocus,The method has an empty catch block.
Empty Catch Block,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,cmd_border3D_click,The method has an empty catch block.
Empty Catch Block,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,tx_borderColor_LostFocus,The method has an empty catch block.
Empty Catch Block,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,cmd_borderColor_Click,The method has an empty catch block.
Empty Catch Block,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,tx_borderShadow_LostFocus,The method has an empty catch block.
Empty Catch Block,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,cmd_borderShadow_Click,The method has an empty catch block.
Empty Catch Block,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,tx_foreColor_LostFocus,The method has an empty catch block.
Empty Catch Block,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,tx_backColor_LostFocus,The method has an empty catch block.
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,cEditor,The following statement contains a magic number: m_picRule.SetBounds (cUtil.mp (1)' cUtil.mp (1)' cUtil.mp (50)' cUtil.mp (297));  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,cEditor,The following statement contains a magic number: m_picRule.SetBounds (cUtil.mp (1)' cUtil.mp (1)' cUtil.mp (50)' cUtil.mp (297));  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,cEditor,The following statement contains a magic number: m_picReport.SetBounds (cUtil.mp (50) + cUtil.mp (1)' cUtil.mp (1)' cUtil.mp (210)' cUtil.mp (297));  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,cEditor,The following statement contains a magic number: m_picReport.SetBounds (cUtil.mp (50) + cUtil.mp (1)' cUtil.mp (1)' cUtil.mp (210)' cUtil.mp (297));  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,cEditor,The following statement contains a magic number: m_picReport.SetBounds (cUtil.mp (50) + cUtil.mp (1)' cUtil.mp (1)' cUtil.mp (210)' cUtil.mp (297));  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,setFontBold,The following statement contains a magic number: for (int i = 0; i < m_vSelectedKeys.Length; i++) {  	cReportFont font = m_paint.getPaintObject (m_vSelectedKeys [i]).getAspect ().getFont ();  	if (bBold == -2) {  		bBold = font.getBold () ? -1 : 0;  	}  	else if (bBold != (font.getBold () ? -1 : 0)) {  		bBold = -2;  		break;  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,setFontBold,The following statement contains a magic number: for (int i = 0; i < m_vSelectedKeys.Length; i++) {  	cReportFont font = m_paint.getPaintObject (m_vSelectedKeys [i]).getAspect ().getFont ();  	if (bBold == -2) {  		bBold = font.getBold () ? -1 : 0;  	}  	else if (bBold != (font.getBold () ? -1 : 0)) {  		bBold = -2;  		break;  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,setFontBold,The following statement contains a magic number: if (bBold == -2) {  	bBold = font.getBold () ? -1 : 0;  }  else if (bBold != (font.getBold () ? -1 : 0)) {  	bBold = -2;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,setFontBold,The following statement contains a magic number: if (bBold == -2) {  	bBold = font.getBold () ? -1 : 0;  }  else if (bBold != (font.getBold () ? -1 : 0)) {  	bBold = -2;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,setFontBold,The following statement contains a magic number: if (bBold != (font.getBold () ? -1 : 0)) {  	bBold = -2;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,setFontBold,The following statement contains a magic number: bBold = -2;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,setFontBold,The following statement contains a magic number: if (bBold == -2) {  	bBoldValue = true;  }  else {  	bBoldValue = bBold == 0;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetFontBoldValue,The following statement contains a magic number: for (int i = 0; i < m_vSelectedKeys.Length; i++) {  	cReportFont font = m_paint.getPaintObject (m_vSelectedKeys [i]).getAspect ().getFont ();  	if (bBold == -2) {  		bBold = font.getBold () ? -1 : 0;  	}  	else if (bBold != (font.getBold () ? -1 : 0)) {  		bBold = -2;  		break;  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetFontBoldValue,The following statement contains a magic number: for (int i = 0; i < m_vSelectedKeys.Length; i++) {  	cReportFont font = m_paint.getPaintObject (m_vSelectedKeys [i]).getAspect ().getFont ();  	if (bBold == -2) {  		bBold = font.getBold () ? -1 : 0;  	}  	else if (bBold != (font.getBold () ? -1 : 0)) {  		bBold = -2;  		break;  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetFontBoldValue,The following statement contains a magic number: if (bBold == -2) {  	bBold = font.getBold () ? -1 : 0;  }  else if (bBold != (font.getBold () ? -1 : 0)) {  	bBold = -2;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetFontBoldValue,The following statement contains a magic number: if (bBold == -2) {  	bBold = font.getBold () ? -1 : 0;  }  else if (bBold != (font.getBold () ? -1 : 0)) {  	bBold = -2;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetFontBoldValue,The following statement contains a magic number: if (bBold != (font.getBold () ? -1 : 0)) {  	bBold = -2;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetFontBoldValue,The following statement contains a magic number: bBold = -2;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,The following statement contains a magic number: switch (align) {  case csECtlAlignConst.csECtlAlignHeight:  case csECtlAlignConst.csECtlAlignWidth:  	aspect = m_paint.getPaintObject (m_vSelectedKeys [1]).getAspect ();  	height = aspect.getHeight ();  	width = aspect.getWidth ();  	break;  case csECtlAlignConst.csECtlAlignVertical:  case csECtlAlignConst.csECtlAlignHorizontal:  	aspect = m_paint.getPaintObject (m_vSelectedKeys [1]).getAspect ();  	newTop = aspect.getTop ();  	newLeft = aspect.getLeft ();  	break;  default:  	switch (align) {  	case csECtlAlignConst.csECtlAlignLeft:  		newLeft = 100000;  		break;  	case csECtlAlignConst.csECtlAlignRight:  		newLeft = 0;  		break;  	case csECtlAlignConst.csECtlAlignTop:  		newTop = 100000;  		break;  	case csECtlAlignConst.csECtlAlignBottom:  		newTop = 0;  		break;  	}  	for (int i = 0; i < m_vSelectedKeys.Length; i++) {  		aspect = m_paint.getPaintObject (m_vSelectedKeys [i]).getAspect ();  		top = aspect.getTop ();  		left = aspect.getLeft ();  		switch (align) {  		case csECtlAlignConst.csECtlAlignLeft:  			if (left < newLeft) {  				newLeft = left;  			}  			break;  		case csECtlAlignConst.csECtlAlignRight:  			if (left > newLeft) {  				newLeft = left;  			}  			break;  		case csECtlAlignConst.csECtlAlignTop:  			if (top < newTop) {  				newTop = top;  			}  			break;  		case csECtlAlignConst.csECtlAlignBottom:  			if (top > newTop) {  				newTop = top;  			}  			break;  		}  	}  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,The following statement contains a magic number: switch (align) {  case csECtlAlignConst.csECtlAlignHeight:  case csECtlAlignConst.csECtlAlignWidth:  	aspect = m_paint.getPaintObject (m_vSelectedKeys [1]).getAspect ();  	height = aspect.getHeight ();  	width = aspect.getWidth ();  	break;  case csECtlAlignConst.csECtlAlignVertical:  case csECtlAlignConst.csECtlAlignHorizontal:  	aspect = m_paint.getPaintObject (m_vSelectedKeys [1]).getAspect ();  	newTop = aspect.getTop ();  	newLeft = aspect.getLeft ();  	break;  default:  	switch (align) {  	case csECtlAlignConst.csECtlAlignLeft:  		newLeft = 100000;  		break;  	case csECtlAlignConst.csECtlAlignRight:  		newLeft = 0;  		break;  	case csECtlAlignConst.csECtlAlignTop:  		newTop = 100000;  		break;  	case csECtlAlignConst.csECtlAlignBottom:  		newTop = 0;  		break;  	}  	for (int i = 0; i < m_vSelectedKeys.Length; i++) {  		aspect = m_paint.getPaintObject (m_vSelectedKeys [i]).getAspect ();  		top = aspect.getTop ();  		left = aspect.getLeft ();  		switch (align) {  		case csECtlAlignConst.csECtlAlignLeft:  			if (left < newLeft) {  				newLeft = left;  			}  			break;  		case csECtlAlignConst.csECtlAlignRight:  			if (left > newLeft) {  				newLeft = left;  			}  			break;  		case csECtlAlignConst.csECtlAlignTop:  			if (top < newTop) {  				newTop = top;  			}  			break;  		case csECtlAlignConst.csECtlAlignBottom:  			if (top > newTop) {  				newTop = top;  			}  			break;  		}  	}  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,The following statement contains a magic number: switch (align) {  case csECtlAlignConst.csECtlAlignLeft:  	newLeft = 100000;  	break;  case csECtlAlignConst.csECtlAlignRight:  	newLeft = 0;  	break;  case csECtlAlignConst.csECtlAlignTop:  	newTop = 100000;  	break;  case csECtlAlignConst.csECtlAlignBottom:  	newTop = 0;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,The following statement contains a magic number: switch (align) {  case csECtlAlignConst.csECtlAlignLeft:  	newLeft = 100000;  	break;  case csECtlAlignConst.csECtlAlignRight:  	newLeft = 0;  	break;  case csECtlAlignConst.csECtlAlignTop:  	newTop = 100000;  	break;  case csECtlAlignConst.csECtlAlignBottom:  	newTop = 0;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,The following statement contains a magic number: newLeft = 100000;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,The following statement contains a magic number: newTop = 100000;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetEditAlignValue,The following statement contains a magic number: for (int i = 0; i < m_vSelectedKeys.Length; i++) {  	CSReportDll.cReportAspect aspect = m_paint.getPaintObject (m_vSelectedKeys [i]).getAspect ();  	if (align == -1) {  		align = (int)aspect.getAlign ();  	}  	else if (align != (int)aspect.getAlign ()) {  		align = -2;  		break;  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetEditAlignValue,The following statement contains a magic number: if (align == -1) {  	align = (int)aspect.getAlign ();  }  else if (align != (int)aspect.getAlign ()) {  	align = -2;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetEditAlignValue,The following statement contains a magic number: if (align != (int)aspect.getAlign ()) {  	align = -2;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetEditAlignValue,The following statement contains a magic number: align = -2;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSbPnlCtrl,The following statement contains a magic number: if (ctrlName != "") {  	msg = "Ctl:[" + ctrlName + "]Tipo:[" + strCtlType + "]F.Hide:[" + cUtil.subString (formulaHide' 1' 100) + "]Activa[" + ((bool)hasFormulaHide).ToString () + "]F.Value:[" + cUtil.subString (formulaValue' 1' 100) + "]Activa[" + ((bool)hasFormulaValue).ToString () + "]Field:[" + fieldName + "]";  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSbPnlCtrl,The following statement contains a magic number: if (ctrlName != "") {  	msg = "Ctl:[" + ctrlName + "]Tipo:[" + strCtlType + "]F.Hide:[" + cUtil.subString (formulaHide' 1' 100) + "]Activa[" + ((bool)hasFormulaHide).ToString () + "]F.Value:[" + cUtil.subString (formulaValue' 1' 100) + "]Activa[" + ((bool)hasFormulaValue).ToString () + "]Field:[" + fieldName + "]";  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSbPnlCtrl,The following statement contains a magic number: msg = "Ctl:[" + ctrlName + "]Tipo:[" + strCtlType + "]F.Hide:[" + cUtil.subString (formulaHide' 1' 100) + "]Activa[" + ((bool)hasFormulaHide).ToString () + "]F.Value:[" + cUtil.subString (formulaValue' 1' 100) + "]Activa[" + ((bool)hasFormulaValue).ToString () + "]Field:[" + fieldName + "]";  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSbPnlCtrl,The following statement contains a magic number: msg = "Ctl:[" + ctrlName + "]Tipo:[" + strCtlType + "]F.Hide:[" + cUtil.subString (formulaHide' 1' 100) + "]Activa[" + ((bool)hasFormulaHide).ToString () + "]F.Value:[" + cUtil.subString (formulaValue' 1' 100) + "]Activa[" + ((bool)hasFormulaValue).ToString () + "]Field:[" + fieldName + "]";  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (m_copyControls) {  	if (m_vCopyKeys.Length == 0) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	String keyPaint = m_vCopyKeys [m_vCopyKeys.Length - 1];  	String keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = m_report.getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = m_vCopyKeys.Length - 1; i > -1; i--) {  		keyPaint = m_vCopyKeys [i];  		keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = m_report.getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 26 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top += 6;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 6;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControls = false;  }  else if (m_copyControlsFromOtherReport) {  	if (m_fmain.getReportCopySource () == null) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	cEditor editor = m_fmain.getReportCopySource ();  	String keyPaint = editor.getVCopyKeys (editor.getVCopyKeysCount ());  	String keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = editor.getReport ().getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  		keyPaint = editor.getVCopyKeys (i);  		keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 400 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top = top + 100;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 100;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControlsFromOtherReport = false;  }  else {  	pAddControlEndAux (left' top' null);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (m_copyControls) {  	if (m_vCopyKeys.Length == 0) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	String keyPaint = m_vCopyKeys [m_vCopyKeys.Length - 1];  	String keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = m_report.getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = m_vCopyKeys.Length - 1; i > -1; i--) {  		keyPaint = m_vCopyKeys [i];  		keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = m_report.getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 26 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top += 6;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 6;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControls = false;  }  else if (m_copyControlsFromOtherReport) {  	if (m_fmain.getReportCopySource () == null) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	cEditor editor = m_fmain.getReportCopySource ();  	String keyPaint = editor.getVCopyKeys (editor.getVCopyKeysCount ());  	String keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = editor.getReport ().getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  		keyPaint = editor.getVCopyKeys (i);  		keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 400 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top = top + 100;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 100;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControlsFromOtherReport = false;  }  else {  	pAddControlEndAux (left' top' null);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (m_copyControls) {  	if (m_vCopyKeys.Length == 0) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	String keyPaint = m_vCopyKeys [m_vCopyKeys.Length - 1];  	String keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = m_report.getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = m_vCopyKeys.Length - 1; i > -1; i--) {  		keyPaint = m_vCopyKeys [i];  		keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = m_report.getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 26 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top += 6;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 6;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControls = false;  }  else if (m_copyControlsFromOtherReport) {  	if (m_fmain.getReportCopySource () == null) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	cEditor editor = m_fmain.getReportCopySource ();  	String keyPaint = editor.getVCopyKeys (editor.getVCopyKeysCount ());  	String keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = editor.getReport ().getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  		keyPaint = editor.getVCopyKeys (i);  		keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 400 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top = top + 100;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 100;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControlsFromOtherReport = false;  }  else {  	pAddControlEndAux (left' top' null);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (m_copyControls) {  	if (m_vCopyKeys.Length == 0) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	String keyPaint = m_vCopyKeys [m_vCopyKeys.Length - 1];  	String keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = m_report.getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = m_vCopyKeys.Length - 1; i > -1; i--) {  		keyPaint = m_vCopyKeys [i];  		keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = m_report.getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 26 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top += 6;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 6;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControls = false;  }  else if (m_copyControlsFromOtherReport) {  	if (m_fmain.getReportCopySource () == null) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	cEditor editor = m_fmain.getReportCopySource ();  	String keyPaint = editor.getVCopyKeys (editor.getVCopyKeysCount ());  	String keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = editor.getReport ().getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  		keyPaint = editor.getVCopyKeys (i);  		keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 400 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top = top + 100;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 100;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControlsFromOtherReport = false;  }  else {  	pAddControlEndAux (left' top' null);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (m_copyControls) {  	if (m_vCopyKeys.Length == 0) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	String keyPaint = m_vCopyKeys [m_vCopyKeys.Length - 1];  	String keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = m_report.getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = m_vCopyKeys.Length - 1; i > -1; i--) {  		keyPaint = m_vCopyKeys [i];  		keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = m_report.getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 26 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top += 6;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 6;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControls = false;  }  else if (m_copyControlsFromOtherReport) {  	if (m_fmain.getReportCopySource () == null) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	cEditor editor = m_fmain.getReportCopySource ();  	String keyPaint = editor.getVCopyKeys (editor.getVCopyKeysCount ());  	String keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = editor.getReport ().getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  		keyPaint = editor.getVCopyKeys (i);  		keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 400 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top = top + 100;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 100;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControlsFromOtherReport = false;  }  else {  	pAddControlEndAux (left' top' null);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (m_copyControls) {  	if (m_vCopyKeys.Length == 0) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	String keyPaint = m_vCopyKeys [m_vCopyKeys.Length - 1];  	String keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = m_report.getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = m_vCopyKeys.Length - 1; i > -1; i--) {  		keyPaint = m_vCopyKeys [i];  		keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = m_report.getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 26 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top += 6;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 6;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControls = false;  }  else if (m_copyControlsFromOtherReport) {  	if (m_fmain.getReportCopySource () == null) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	cEditor editor = m_fmain.getReportCopySource ();  	String keyPaint = editor.getVCopyKeys (editor.getVCopyKeysCount ());  	String keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = editor.getReport ().getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  		keyPaint = editor.getVCopyKeys (i);  		keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 400 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top = top + 100;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 100;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControlsFromOtherReport = false;  }  else {  	pAddControlEndAux (left' top' null);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: for (int i = m_vCopyKeys.Length - 1; i > -1; i--) {  	keyPaint = m_vCopyKeys [i];  	keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  	copyCtrl = m_report.getControls ().item (keyCtrl);  	// starting with the first control we move the left  	// of every control if reach the right margin  	// move down a line and restart  	//  	offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  	left = originalLeft + offSet;  	if (m_bCopyWithoutMoving) {  		top = copyCtrl.getLabel ().getAspect ().getTop ();  		left = copyCtrl.getLabel ().getAspect ().getLeft ();  	}  	if (left - 26 > m_picReport.Width) {  		left = originalLeft + (offSet % originalLeft);  		top += 6;  	}  	if (top > m_picReport.Height) {  		top = m_picReport.Height - 6;  	}  	pAddControlEndAux (left' top' copyCtrl);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: for (int i = m_vCopyKeys.Length - 1; i > -1; i--) {  	keyPaint = m_vCopyKeys [i];  	keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  	copyCtrl = m_report.getControls ().item (keyCtrl);  	// starting with the first control we move the left  	// of every control if reach the right margin  	// move down a line and restart  	//  	offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  	left = originalLeft + offSet;  	if (m_bCopyWithoutMoving) {  		top = copyCtrl.getLabel ().getAspect ().getTop ();  		left = copyCtrl.getLabel ().getAspect ().getLeft ();  	}  	if (left - 26 > m_picReport.Width) {  		left = originalLeft + (offSet % originalLeft);  		top += 6;  	}  	if (top > m_picReport.Height) {  		top = m_picReport.Height - 6;  	}  	pAddControlEndAux (left' top' copyCtrl);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: for (int i = m_vCopyKeys.Length - 1; i > -1; i--) {  	keyPaint = m_vCopyKeys [i];  	keyCtrl = m_paint.getPaintObjects ().item (keyPaint).getTag ();  	copyCtrl = m_report.getControls ().item (keyCtrl);  	// starting with the first control we move the left  	// of every control if reach the right margin  	// move down a line and restart  	//  	offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  	left = originalLeft + offSet;  	if (m_bCopyWithoutMoving) {  		top = copyCtrl.getLabel ().getAspect ().getTop ();  		left = copyCtrl.getLabel ().getAspect ().getLeft ();  	}  	if (left - 26 > m_picReport.Width) {  		left = originalLeft + (offSet % originalLeft);  		top += 6;  	}  	if (top > m_picReport.Height) {  		top = m_picReport.Height - 6;  	}  	pAddControlEndAux (left' top' copyCtrl);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (left - 26 > m_picReport.Width) {  	left = originalLeft + (offSet % originalLeft);  	top += 6;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (left - 26 > m_picReport.Width) {  	left = originalLeft + (offSet % originalLeft);  	top += 6;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: top += 6;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (top > m_picReport.Height) {  	top = m_picReport.Height - 6;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: top = m_picReport.Height - 6;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (m_copyControlsFromOtherReport) {  	if (m_fmain.getReportCopySource () == null) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	cEditor editor = m_fmain.getReportCopySource ();  	String keyPaint = editor.getVCopyKeys (editor.getVCopyKeysCount ());  	String keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = editor.getReport ().getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  		keyPaint = editor.getVCopyKeys (i);  		keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 400 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top = top + 100;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 100;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControlsFromOtherReport = false;  }  else {  	pAddControlEndAux (left' top' null);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (m_copyControlsFromOtherReport) {  	if (m_fmain.getReportCopySource () == null) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	cEditor editor = m_fmain.getReportCopySource ();  	String keyPaint = editor.getVCopyKeys (editor.getVCopyKeysCount ());  	String keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = editor.getReport ().getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  		keyPaint = editor.getVCopyKeys (i);  		keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 400 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top = top + 100;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 100;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControlsFromOtherReport = false;  }  else {  	pAddControlEndAux (left' top' null);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (m_copyControlsFromOtherReport) {  	if (m_fmain.getReportCopySource () == null) {  		return false;  	}  	originalLeft = left;  	originalTop = top;  	cEditor editor = m_fmain.getReportCopySource ();  	String keyPaint = editor.getVCopyKeys (editor.getVCopyKeysCount ());  	String keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	movedCtrl = editor.getReport ().getControls ().item (keyCtrl);  	firstCtrlLeft = movedCtrl.getLabel ().getAspect ().getLeft ();  	for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  		keyPaint = editor.getVCopyKeys (i);  		keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  		copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  		// starting with the first control we move the left  		// of every control if reach the right margin  		// move down a line and restart  		//  		offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  		left = originalLeft + offSet;  		if (m_bCopyWithoutMoving) {  			top = copyCtrl.getLabel ().getAspect ().getTop ();  			left = copyCtrl.getLabel ().getAspect ().getLeft ();  		}  		if (left - 400 > m_picReport.Width) {  			left = originalLeft + (offSet % originalLeft);  			top = top + 100;  		}  		if (top > m_picReport.Height) {  			top = m_picReport.Height - 100;  		}  		pAddControlEndAux (left' top' copyCtrl);  	}  	m_copyControlsFromOtherReport = false;  }  else {  	pAddControlEndAux (left' top' null);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  	keyPaint = editor.getVCopyKeys (i);  	keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  	// starting with the first control we move the left  	// of every control if reach the right margin  	// move down a line and restart  	//  	offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  	left = originalLeft + offSet;  	if (m_bCopyWithoutMoving) {  		top = copyCtrl.getLabel ().getAspect ().getTop ();  		left = copyCtrl.getLabel ().getAspect ().getLeft ();  	}  	if (left - 400 > m_picReport.Width) {  		left = originalLeft + (offSet % originalLeft);  		top = top + 100;  	}  	if (top > m_picReport.Height) {  		top = m_picReport.Height - 100;  	}  	pAddControlEndAux (left' top' copyCtrl);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  	keyPaint = editor.getVCopyKeys (i);  	keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  	// starting with the first control we move the left  	// of every control if reach the right margin  	// move down a line and restart  	//  	offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  	left = originalLeft + offSet;  	if (m_bCopyWithoutMoving) {  		top = copyCtrl.getLabel ().getAspect ().getTop ();  		left = copyCtrl.getLabel ().getAspect ().getLeft ();  	}  	if (left - 400 > m_picReport.Width) {  		left = originalLeft + (offSet % originalLeft);  		top = top + 100;  	}  	if (top > m_picReport.Height) {  		top = m_picReport.Height - 100;  	}  	pAddControlEndAux (left' top' copyCtrl);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: for (int i = editor.getVCopyKeysCount () - 1; i > -1; i--) {  	keyPaint = editor.getVCopyKeys (i);  	keyCtrl = editor.getPaint ().getPaintObjects ().item (keyPaint).getTag ();  	copyCtrl = editor.getReport ().getControls ().item (keyCtrl);  	// starting with the first control we move the left  	// of every control if reach the right margin  	// move down a line and restart  	//  	offSet = pGetOffsetLeftFromControls (firstCtrlLeft' copyCtrl.getLabel ().getAspect ().getLeft ());  	left = originalLeft + offSet;  	if (m_bCopyWithoutMoving) {  		top = copyCtrl.getLabel ().getAspect ().getTop ();  		left = copyCtrl.getLabel ().getAspect ().getLeft ();  	}  	if (left - 400 > m_picReport.Width) {  		left = originalLeft + (offSet % originalLeft);  		top = top + 100;  	}  	if (top > m_picReport.Height) {  		top = m_picReport.Height - 100;  	}  	pAddControlEndAux (left' top' copyCtrl);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (left - 400 > m_picReport.Width) {  	left = originalLeft + (offSet % originalLeft);  	top = top + 100;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (left - 400 > m_picReport.Width) {  	left = originalLeft + (offSet % originalLeft);  	top = top + 100;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: top = top + 100;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: if (top > m_picReport.Height) {  	top = m_picReport.Height - 100;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addControlEnd,The following statement contains a magic number: top = m_picReport.Height - 100;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following statement contains a magic number: switch (sec.getTypeSection ()) {  case csRptSectionType.HEADER:  case csRptSectionType.MAIN_HEADER:  	pMoveHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_HEADER;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.DETAIL:  case csRptSectionType.MAIN_DETAIL:  	pMoveDetails (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_DETAIL;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_HEADER:  	pMoveGroupHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPH;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_FOOTER:  	pMoveGroupFooter (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPF;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.FOOTER:  case csRptSectionType.MAIN_FOOTER:  	aspect = sec.getAspect ();  	aspect.setTop (aspect.getTop () - cGlobals.C_HEIGHT_NEW_SECTION);  	pMoveFooter (sec.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	y = aspect.getHeight () + aspect.getTop () - m_offSet - cGlobals.C_HEIGHT_BAR_SECTION;  	typeSecLn = csRptSectionType.SECLN_FOOTER;  	index = 0;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following statement contains a magic number: switch (sec.getTypeSection ()) {  case csRptSectionType.HEADER:  case csRptSectionType.MAIN_HEADER:  	pMoveHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_HEADER;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.DETAIL:  case csRptSectionType.MAIN_DETAIL:  	pMoveDetails (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_DETAIL;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_HEADER:  	pMoveGroupHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPH;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_FOOTER:  	pMoveGroupFooter (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPF;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.FOOTER:  case csRptSectionType.MAIN_FOOTER:  	aspect = sec.getAspect ();  	aspect.setTop (aspect.getTop () - cGlobals.C_HEIGHT_NEW_SECTION);  	pMoveFooter (sec.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	y = aspect.getHeight () + aspect.getTop () - m_offSet - cGlobals.C_HEIGHT_BAR_SECTION;  	typeSecLn = csRptSectionType.SECLN_FOOTER;  	index = 0;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following statement contains a magic number: switch (sec.getTypeSection ()) {  case csRptSectionType.HEADER:  case csRptSectionType.MAIN_HEADER:  	pMoveHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_HEADER;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.DETAIL:  case csRptSectionType.MAIN_DETAIL:  	pMoveDetails (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_DETAIL;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_HEADER:  	pMoveGroupHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPH;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_FOOTER:  	pMoveGroupFooter (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPF;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.FOOTER:  case csRptSectionType.MAIN_FOOTER:  	aspect = sec.getAspect ();  	aspect.setTop (aspect.getTop () - cGlobals.C_HEIGHT_NEW_SECTION);  	pMoveFooter (sec.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	y = aspect.getHeight () + aspect.getTop () - m_offSet - cGlobals.C_HEIGHT_BAR_SECTION;  	typeSecLn = csRptSectionType.SECLN_FOOTER;  	index = 0;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following statement contains a magic number: switch (sec.getTypeSection ()) {  case csRptSectionType.HEADER:  case csRptSectionType.MAIN_HEADER:  	pMoveHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_HEADER;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.DETAIL:  case csRptSectionType.MAIN_DETAIL:  	pMoveDetails (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_DETAIL;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_HEADER:  	pMoveGroupHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPH;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_FOOTER:  	pMoveGroupFooter (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPF;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.FOOTER:  case csRptSectionType.MAIN_FOOTER:  	aspect = sec.getAspect ();  	aspect.setTop (aspect.getTop () - cGlobals.C_HEIGHT_NEW_SECTION);  	pMoveFooter (sec.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	y = aspect.getHeight () + aspect.getTop () - m_offSet - cGlobals.C_HEIGHT_BAR_SECTION;  	typeSecLn = csRptSectionType.SECLN_FOOTER;  	index = 0;  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following statement contains a magic number: index = sec.getSectionLines ().count () - 2;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following statement contains a magic number: index = sec.getSectionLines ().count () - 2;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following statement contains a magic number: index = sec.getSectionLines ().count () - 2;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following statement contains a magic number: index = sec.getSectionLines ().count () - 2;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following statement contains a magic number: secL.setKeyPaint (paintSection (secL.getAspect ()' secL.getKey ()' sec.getTypeSection ()' C_SECTIONLINE + (sec.getSectionLines ().count () - 2).ToString ()' true));  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The following statement contains a magic number: switch (typeSection) {  case csRptSectionType.HEADER:  	cReportSections w_headers = m_report.getHeaders ();  	rptSection = w_headers.add ();  	rptSection.setName ("H_" + rptSection.getIndex ().ToString ());  	aspect = w_headers.item (w_headers.count () - 2).getAspect ();  	rptSection.getAspect ().setWidth (aspect.getWidth ());  	rptSection.getAspect ().setHeight (0);  	rptSection.getAspect ().setTop (aspect.getTop () + aspect.getHeight ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.HEADER' rptSection.getName ()' false));  	w_aspect = rptSection.getAspect ();  	moveSection (m_paint.getPaintObject (rptSection.getKeyPaint ())' 0' w_aspect.getTop ()' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' w_aspect.getTop () + rptSection.getAspect ().getHeight ()' rptSection' true);  	break;  case csRptSectionType.DETAIL:  	break;  case csRptSectionType.GROUP_HEADER:  	cIReportGroupSections w_groupsHeaders = m_report.getGroupsHeaders ();  	rptSection = w_groupsHeaders.item (w_groupsHeaders.count () - 1);  	rptSection.setName ("G_" + rptSection.getIndex ().ToString ());  	// the first group is next to the last header  	//  	if (w_groupsHeaders.count () == 1) {  		topSec = m_report.getHeaders ().item (m_report.getHeaders ().count () - 1);  	}  	else {  		topSec = w_groupsHeaders.item (w_groupsHeaders.count () - 2);  	}  	w_aspect = topSec.getAspect ();  	rptSection.getAspect ().setWidth (w_aspect.getWidth ());  	rptSection.getAspect ().setHeight (0);  	rptSection.getAspect ().setTop (w_aspect.getTop () + w_aspect.getHeight ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.GROUP_HEADER' rptSection.getName ()' false));  	w_aspect = rptSection.getAspect ();  	moveSection (m_paint.getPaintObject (rptSection.getKeyPaint ())' 0' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' w_aspect.getTop ()' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' rptSection' true);  	break;  case csRptSectionType.GROUP_FOOTER:  	cIReportGroupSections w_groupsFooters = m_report.getGroupsFooters ();  	rptSection = w_groupsFooters.item (0);  	rptSection.setName ("G_" + rptSection.getIndex ().ToString ());  	// all group footers are added to the top so at the  	// beginning they are next to the detail section  	//  	topSec = m_report.getDetails ().item (m_report.getDetails ().count () - 1);  	w_aspect = topSec.getAspect ();  	rptSection.getAspect ().setWidth (w_aspect.getWidth ());  	rptSection.getAspect ().setHeight (cGlobals.C_HEIGHT_NEW_SECTION);  	rptSection.getAspect ().setTop (w_aspect.getTop () + w_aspect.getHeight ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.GROUP_FOOTER' rptSection.getName ()' false));  	paintObj = m_paint.getPaintObject (rptSection.getKeyPaint ());  	pMoveGroupFooter (rptSection.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	w_aspect = rptSection.getAspect ();  	y = w_aspect.getHeight () + w_aspect.getTop () - cGlobals.C_HEIGHT_BAR_SECTION;  	moveSection (paintObj' 0' y' minBottom' maxBottom' rptSection' true);  	break;  case csRptSectionType.FOOTER:  	cReportSections w_footers = m_report.getFooters ();  	// all footers are added to the beginning of the collection  	//  	rptSection = w_footers.add (null' ""' 0);  	rptSection.setName ("F_" + rptSection.getIndex ().ToString ());  	aspect = w_footers.item (1).getAspect ();  	rptSection.getAspect ().setWidth (aspect.getWidth ());  	rptSection.getAspect ().setHeight (cGlobals.C_HEIGHT_NEW_SECTION);  	rptSection.getAspect ().setTop (aspect.getTop ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.FOOTER' rptSection.getName ()' false));  	paintObj = m_paint.getPaintObject (rptSection.getKeyPaint ());  	pMoveFooter (rptSection.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	w_aspect = rptSection.getAspect ();  	y = w_aspect.getHeight () + w_aspect.getTop () - m_offSet - cGlobals.C_HEIGHT_BAR_SECTION;  	moveSection (paintObj' 0' y' minBottom' maxBottom' rptSection' true);  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The following statement contains a magic number: switch (typeSection) {  case csRptSectionType.HEADER:  	cReportSections w_headers = m_report.getHeaders ();  	rptSection = w_headers.add ();  	rptSection.setName ("H_" + rptSection.getIndex ().ToString ());  	aspect = w_headers.item (w_headers.count () - 2).getAspect ();  	rptSection.getAspect ().setWidth (aspect.getWidth ());  	rptSection.getAspect ().setHeight (0);  	rptSection.getAspect ().setTop (aspect.getTop () + aspect.getHeight ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.HEADER' rptSection.getName ()' false));  	w_aspect = rptSection.getAspect ();  	moveSection (m_paint.getPaintObject (rptSection.getKeyPaint ())' 0' w_aspect.getTop ()' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' w_aspect.getTop () + rptSection.getAspect ().getHeight ()' rptSection' true);  	break;  case csRptSectionType.DETAIL:  	break;  case csRptSectionType.GROUP_HEADER:  	cIReportGroupSections w_groupsHeaders = m_report.getGroupsHeaders ();  	rptSection = w_groupsHeaders.item (w_groupsHeaders.count () - 1);  	rptSection.setName ("G_" + rptSection.getIndex ().ToString ());  	// the first group is next to the last header  	//  	if (w_groupsHeaders.count () == 1) {  		topSec = m_report.getHeaders ().item (m_report.getHeaders ().count () - 1);  	}  	else {  		topSec = w_groupsHeaders.item (w_groupsHeaders.count () - 2);  	}  	w_aspect = topSec.getAspect ();  	rptSection.getAspect ().setWidth (w_aspect.getWidth ());  	rptSection.getAspect ().setHeight (0);  	rptSection.getAspect ().setTop (w_aspect.getTop () + w_aspect.getHeight ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.GROUP_HEADER' rptSection.getName ()' false));  	w_aspect = rptSection.getAspect ();  	moveSection (m_paint.getPaintObject (rptSection.getKeyPaint ())' 0' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' w_aspect.getTop ()' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' rptSection' true);  	break;  case csRptSectionType.GROUP_FOOTER:  	cIReportGroupSections w_groupsFooters = m_report.getGroupsFooters ();  	rptSection = w_groupsFooters.item (0);  	rptSection.setName ("G_" + rptSection.getIndex ().ToString ());  	// all group footers are added to the top so at the  	// beginning they are next to the detail section  	//  	topSec = m_report.getDetails ().item (m_report.getDetails ().count () - 1);  	w_aspect = topSec.getAspect ();  	rptSection.getAspect ().setWidth (w_aspect.getWidth ());  	rptSection.getAspect ().setHeight (cGlobals.C_HEIGHT_NEW_SECTION);  	rptSection.getAspect ().setTop (w_aspect.getTop () + w_aspect.getHeight ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.GROUP_FOOTER' rptSection.getName ()' false));  	paintObj = m_paint.getPaintObject (rptSection.getKeyPaint ());  	pMoveGroupFooter (rptSection.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	w_aspect = rptSection.getAspect ();  	y = w_aspect.getHeight () + w_aspect.getTop () - cGlobals.C_HEIGHT_BAR_SECTION;  	moveSection (paintObj' 0' y' minBottom' maxBottom' rptSection' true);  	break;  case csRptSectionType.FOOTER:  	cReportSections w_footers = m_report.getFooters ();  	// all footers are added to the beginning of the collection  	//  	rptSection = w_footers.add (null' ""' 0);  	rptSection.setName ("F_" + rptSection.getIndex ().ToString ());  	aspect = w_footers.item (1).getAspect ();  	rptSection.getAspect ().setWidth (aspect.getWidth ());  	rptSection.getAspect ().setHeight (cGlobals.C_HEIGHT_NEW_SECTION);  	rptSection.getAspect ().setTop (aspect.getTop ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.FOOTER' rptSection.getName ()' false));  	paintObj = m_paint.getPaintObject (rptSection.getKeyPaint ());  	pMoveFooter (rptSection.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	w_aspect = rptSection.getAspect ();  	y = w_aspect.getHeight () + w_aspect.getTop () - m_offSet - cGlobals.C_HEIGHT_BAR_SECTION;  	moveSection (paintObj' 0' y' minBottom' maxBottom' rptSection' true);  	break;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The following statement contains a magic number: aspect = w_headers.item (w_headers.count () - 2).getAspect ();  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The following statement contains a magic number: if (w_groupsHeaders.count () == 1) {  	topSec = m_report.getHeaders ().item (m_report.getHeaders ().count () - 1);  }  else {  	topSec = w_groupsHeaders.item (w_groupsHeaders.count () - 2);  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The following statement contains a magic number: topSec = w_groupsHeaders.item (w_groupsHeaders.count () - 2);  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: try {  	cReportPaintObject paintObject = null;  	cReportControl rptCtrl = null;  	cReportAspect w_aspect = null;  	cReportFont w_font = null;  	bool bMultiSelect = false;  	m_showingProperties = true;  	if (m_fProperties == null) {  		m_fProperties = new fProperties ();  	}  	m_fProperties.setHandler (this);  	paintObject = m_paint.getPaintObject (m_keyObj);  	if (paintObject == null) {  		return;  	}  	m_fProperties.txText.Text = paintObject.getText ();  	rptCtrl = m_report.getControls ().item (paintObject.getTag ());  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTIMAGE) {  		m_fProperties.hideTabImage ();  	}  	else {  		m_fProperties.picImage.Image = rptCtrl.getImage ().getImage ();  	}  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTCHART) {  		m_fProperties.hideTabChart ();  	}  	else {  		cUtil.listSetListIndexForId (m_fProperties.cbType' (int)rptCtrl.getChart ().getChartType ());  		cUtil.listSetListIndexForId (m_fProperties.cbFormatType' (int)rptCtrl.getChart ().getFormat ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartSize' (int)rptCtrl.getChart ().getDiameter ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartThickness' (int)rptCtrl.getChart ().getThickness ());  		cUtil.listSetListIndexForId (m_fProperties.cbLinesType' (int)rptCtrl.getChart ().getGridLines ());  		m_fProperties.txChartTop.Text = rptCtrl.getChart ().getTop ().ToString ();  		m_fProperties.txDbFieldGroupValue.Text = rptCtrl.getChart ().getGroupFieldName ();  		m_fProperties.setChartGroupIndex (rptCtrl.getChart ().getGroupFieldIndex ());  		m_fProperties.txChartGroupValue.Text = rptCtrl.getChart ().getGroupValue ();  		m_fProperties.chkShowOutlines.Checked = rptCtrl.getChart ().getOutlineBars ();  		m_fProperties.chkShowBarValues.Checked = rptCtrl.getChart ().getShowValues ();  		m_fProperties.chkSort.Checked = rptCtrl.getChart ().getSort ();  		m_fProperties.txText.Text = rptCtrl.getChart ().getChartTitle ();  		if (rptCtrl.getChart ().getSeries ().count () > 0) {  			m_fProperties.txDbFieldLbl1.Text = rptCtrl.getChart ().getSeries ().item (0).getLabelFieldName ();  			m_fProperties.txDbFieldVal1.Text = rptCtrl.getChart ().getSeries ().item (0).getValueFieldName ();  			m_fProperties.setChartIndex (0' rptCtrl.getChart ().getSeries ().item (0).getLabelIndex ());  			m_fProperties.setChartIndex (1' rptCtrl.getChart ().getSeries ().item (0).getValueIndex ());  			cUtil.listSetListIndexForId (m_fProperties.cbColorSerie1' (int)rptCtrl.getChart ().getSeries ().item (0).getColor ());  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  				m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  				m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  				m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  				cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  			}  		}  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  		m_fProperties.txText.Enabled = false;  		cReportField w_field = rptCtrl.getField ();  		m_fProperties.txText.Text = w_field.getName ();  		m_fProperties.txDbField.Text = w_field.getName ();  		m_fProperties.setFieldType (w_field.getFieldType ());  		m_fProperties.setIndex (w_field.getIndex ());  	}  	else {  		m_fProperties.hideTabField ();  		m_fProperties.txText.Enabled = true;  	}  	m_fProperties.txName.Text = rptCtrl.getName ();  	m_fProperties.lbControl.Text = rptCtrl.getName ();  	m_fProperties.chkFormulaHide.Checked = rptCtrl.getHasFormulaHide ();  	m_fProperties.chkFormulaValue.Checked = rptCtrl.getHasFormulaValue ();  	m_fProperties.txExportColIdx.Text = rptCtrl.getExportColIdx ().ToString ();  	m_fProperties.chkIsFreeCtrl.Checked = rptCtrl.getIsFreeCtrl ();  	m_fProperties.txTag.Text = rptCtrl.getTag ();  	m_fProperties.setFormulaHide (rptCtrl.getFormulaHide ().getText ());  	m_fProperties.setFormulaValue (rptCtrl.getFormulaValue ().getText ());  	m_fProperties.txIdxGroup.Text = rptCtrl.getFormulaValue ().getIdxGroup ().ToString ();  	m_fProperties.opBeforePrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPRE;  	m_fProperties.opAfterPrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPOST;  	w_aspect = rptCtrl.getLabel ().getAspect ();  	m_fProperties.chkCanGrow.Checked = w_aspect.getCanGrow ();  	m_fProperties.txFormat.Text = w_aspect.getFormat ();  	m_fProperties.txSymbol.Text = w_aspect.getSymbol ();  	m_fProperties.setIsAccounting (w_aspect.getIsAccounting ());  	m_fProperties.chkWordWrap.Checked = w_aspect.getWordWrap ();  	cUtil.listSetListIndexForId (m_fProperties.cbAlign' (int)w_aspect.getAlign ());  	m_fProperties.txBorderColor.Text = w_aspect.getBorderColor ().ToString ();  	m_fProperties.txBorder3D.Text = w_aspect.getBorderColor3d ().ToString ();  	m_fProperties.txBorderShadow.Text = w_aspect.getBorderColor3dShadow ().ToString ();  	m_fProperties.chkBorderRounded.Checked = w_aspect.getBorderRounded ();  	m_fProperties.txBorderWidth.Text = w_aspect.getBorderWidth ().ToString ();  	cUtil.listSetListIndexForId (m_fProperties.cbBorderType' (int)w_aspect.getBorderType ());  	w_font = w_aspect.getFont ();  	m_fProperties.txFont.Text = w_font.getName ();  	m_fProperties.txForeColor.Text = w_font.getForeColor ().ToString ();  	m_fProperties.shForeColor.BackColor = cColor.colorFromRGB (w_font.getForeColor ());  	m_fProperties.txFontSize.Text = w_font.getSize ().ToString ();  	m_fProperties.chkFontBold.Checked = w_font.getBold ();  	m_fProperties.chkFontItalic.Checked = w_font.getItalic ();  	m_fProperties.chkFontUnderline.Checked = w_font.getUnderline ();  	m_fProperties.chkFontStrike.Checked = w_font.getStrike ();  	w_aspect = paintObject.getAspect ();  	m_fProperties.txLeft.Text = w_aspect.getLeft ().ToString ();  	m_fProperties.txTop.Text = w_aspect.getTop ().ToString ();  	m_fProperties.txWidth.Text = w_aspect.getWidth ().ToString ();  	m_fProperties.txHeight.Text = w_aspect.getHeight ().ToString ();  	m_fProperties.txBackColor.Text = w_aspect.getBackColor ().ToString ();  	m_fProperties.shBackColor.BackColor = cColor.colorFromRGB (w_aspect.getBackColor ());  	m_fProperties.chkTransparent.Checked = w_aspect.getTransparent ();  	bMultiSelect = m_vSelectedKeys.Length > 1;  	m_fProperties.resetChangedFlags ();  	m_fProperties.ShowDialog ();  	if (!m_fProperties.getOk ()) {  		return;  	}  	for (int i = 0; i < m_vSelectedKeys.Length; i++) {  		paintObject = m_paint.getPaintObject (m_vSelectedKeys [i]);  		rptCtrl = m_report.getControls ().item (paintObject.getTag ());  		if (!bMultiSelect) {  			if (rptCtrl.getName () != m_fProperties.txName.Text) {  				if (rptCtrl.getName () != "") {  					if (cWindow.ask ("You have changed the name of this control.;;Do you want to update all references to this control in all formulas of this report?"' MessageBoxDefaultButton.Button2)) {  						pUpdateFormulas (rptCtrl.getName ()' m_fProperties.txName.Text);  					}  				}  			}  			rptCtrl.setName (m_fProperties.txName.Text);  		}  		if (m_fProperties.getTextChanged ()) {  			rptCtrl.getLabel ().setText (m_fProperties.txText.Text);  		}  		if (m_fProperties.getTagChanged ()) {  			rptCtrl.setTag (m_fProperties.txTag.Text);  		}  		if (m_fProperties.getSetFormulaHideChanged ()) {  			rptCtrl.setHasFormulaHide (m_fProperties.chkFormulaHide.Checked);  		}  		if (m_fProperties.getSetFormulaValueChanged ()) {  			rptCtrl.setHasFormulaValue (m_fProperties.chkFormulaValue.Checked);  		}  		if (m_fProperties.getFormulaHideChanged ()) {  			rptCtrl.getFormulaHide ().setText (m_fProperties.getFormulaHide ());  		}  		if (m_fProperties.getFormulaValueChanged ()) {  			rptCtrl.getFormulaValue ().setText (m_fProperties.getFormulaValue ());  		}  		if (m_fProperties.getIdxGroupChanged ()) {  			rptCtrl.getFormulaValue ().setIdxGroup (cUtil.valAsInt (m_fProperties.txIdxGroup.Text));  		}  		if (m_fProperties.getWhenEvalChanged ()) {  			rptCtrl.getFormulaValue ().setWhenEval (m_fProperties.opAfterPrint.Checked ? csRptWhenEval.CSRPTEVALPOST : csRptWhenEval.CSRPTEVALPRE);  		}  		if (m_fProperties.getExportColIdxChanged ()) {  			rptCtrl.setExportColIdx (cUtil.valAsInt (m_fProperties.txExportColIdx.Text));  		}  		if (m_fProperties.getIsFreeCtrlChanged ()) {  			rptCtrl.setIsFreeCtrl (m_fProperties.chkIsFreeCtrl.Checked);  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  			cReportField w_field = rptCtrl.getField ();  			if (m_fProperties.getDbFieldChanged ()) {  				w_field.setFieldType (m_fProperties.getFieldType ());  				w_field.setIndex (m_fProperties.getIndex ());  				w_field.setName (m_fProperties.txDbField.Text);  			}  		}  		if (m_fProperties.getPictureChanged ()) {  			rptCtrl.getImage ().setImage (new Bitmap (m_fProperties.picImage.Image));  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  			if (rptCtrl.getChart ().getSeries ().count () < 1) {  				rptCtrl.getChart ().getSeries ().add ();  			}  			if (m_fProperties.getChartTypeChanged ()) {  				rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  			}  			if (m_fProperties.getChartFormatTypeChanged ()) {  				rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  			}  			if (m_fProperties.getChartSizeChanged ()) {  				rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  			}  			if (m_fProperties.getChartThicknessChanged ()) {  				rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  			}  			if (m_fProperties.getChartLinesTypeChanged ()) {  				rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  			}  			if (m_fProperties.getChartShowLinesChanged ()) {  				rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  			}  			if (m_fProperties.getChartShowValuesChanged ()) {  				rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  			}  			if (m_fProperties.getTextChanged ()) {  				rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  			}  			if (m_fProperties.getChartTopChanged ()) {  				rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  			}  			if (m_fProperties.getChartSortChanged ()) {  				rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  			}  			if (m_fProperties.getChartGroupValueChanged ()) {  				rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  			}  			if (m_fProperties.getChartFieldGroupChanged ()) {  				rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  				rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  			}  			if (m_fProperties.getChartFieldLbl1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  			}  			if (m_fProperties.getChartFieldVal1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  			}  			if (m_fProperties.getChartColorSerie1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  			}  			if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  				if (rptCtrl.getChart ().getSeries ().count () < 2) {  					rptCtrl.getChart ().getSeries ().add ();  				}  			}  			if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  				if (rptCtrl.getChart ().getSeries ().count () > 1) {  					rptCtrl.getChart ().getSeries ().remove (1);  				}  			}  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				if (m_fProperties.getChartFieldLbl2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  				}  				if (m_fProperties.getChartFieldVal2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  				}  				if (m_fProperties.getChartColorSerie2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  				}  			}  		}  		if (m_fProperties.getTextChanged ()) {  			paintObject.setText (m_fProperties.txText.Text);  		}  		w_aspect = rptCtrl.getLabel ().getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  			w_aspect.setIsAccounting (m_fProperties.getIsAccounting ());  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getCanGrowChanged ()) {  			w_aspect.setCanGrow (m_fProperties.chkCanGrow.Checked);  		}  		if (m_fProperties.getBorderColorChanged ()) {  			w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  		}  		if (m_fProperties.getBorder3DChanged ()) {  			w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  		}  		if (m_fProperties.getBorder3DShadowChanged ()) {  			w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  		}  		if (m_fProperties.getBorderRoundedChanged ()) {  			w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  		}  		if (m_fProperties.getBorderWidthChanged ()) {  			w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  		if (m_fProperties.getPictureChanged ()) {  			paintObject.setImage (rptCtrl.getImage ().getImage ());  		}  		//  		// TODO: check if we can refactor this now we have a better class hierarchy  		//  		w_aspect = paintObject.getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		if (w_aspect.getBorderType () == csReportBorderType.CSRPTBSNONE) {  			w_aspect.setBorderColor (Color.Black.ToArgb ());  			w_aspect.setBorderWidth (1);  			w_aspect.setBorderRounded (false);  			w_aspect.setBorderType (csReportBorderType.CSRPTBSFIXED);  		}  		else {  			if (m_fProperties.getBorderColorChanged ()) {  				w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  			}  			if (m_fProperties.getBorder3DChanged ()) {  				w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  			}  			if (m_fProperties.getBorder3DShadowChanged ()) {  				w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  			}  			if (m_fProperties.getBorderRoundedChanged ()) {  				w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  			}  			if (m_fProperties.getBorderWidthChanged ()) {  				w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  			}  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  	}  	m_dataHasChanged = true;  }  catch (Exception ex) {  	cError.mngError (ex' "pShowCtrlProperties"' C_MODULE' "");  }  finally {  	m_fProperties.Hide ();  	m_showingProperties = false;  	m_fProperties = null;  	m_paint.endMove (m_picReport.CreateGraphics ());  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: try {  	cReportPaintObject paintObject = null;  	cReportControl rptCtrl = null;  	cReportAspect w_aspect = null;  	cReportFont w_font = null;  	bool bMultiSelect = false;  	m_showingProperties = true;  	if (m_fProperties == null) {  		m_fProperties = new fProperties ();  	}  	m_fProperties.setHandler (this);  	paintObject = m_paint.getPaintObject (m_keyObj);  	if (paintObject == null) {  		return;  	}  	m_fProperties.txText.Text = paintObject.getText ();  	rptCtrl = m_report.getControls ().item (paintObject.getTag ());  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTIMAGE) {  		m_fProperties.hideTabImage ();  	}  	else {  		m_fProperties.picImage.Image = rptCtrl.getImage ().getImage ();  	}  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTCHART) {  		m_fProperties.hideTabChart ();  	}  	else {  		cUtil.listSetListIndexForId (m_fProperties.cbType' (int)rptCtrl.getChart ().getChartType ());  		cUtil.listSetListIndexForId (m_fProperties.cbFormatType' (int)rptCtrl.getChart ().getFormat ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartSize' (int)rptCtrl.getChart ().getDiameter ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartThickness' (int)rptCtrl.getChart ().getThickness ());  		cUtil.listSetListIndexForId (m_fProperties.cbLinesType' (int)rptCtrl.getChart ().getGridLines ());  		m_fProperties.txChartTop.Text = rptCtrl.getChart ().getTop ().ToString ();  		m_fProperties.txDbFieldGroupValue.Text = rptCtrl.getChart ().getGroupFieldName ();  		m_fProperties.setChartGroupIndex (rptCtrl.getChart ().getGroupFieldIndex ());  		m_fProperties.txChartGroupValue.Text = rptCtrl.getChart ().getGroupValue ();  		m_fProperties.chkShowOutlines.Checked = rptCtrl.getChart ().getOutlineBars ();  		m_fProperties.chkShowBarValues.Checked = rptCtrl.getChart ().getShowValues ();  		m_fProperties.chkSort.Checked = rptCtrl.getChart ().getSort ();  		m_fProperties.txText.Text = rptCtrl.getChart ().getChartTitle ();  		if (rptCtrl.getChart ().getSeries ().count () > 0) {  			m_fProperties.txDbFieldLbl1.Text = rptCtrl.getChart ().getSeries ().item (0).getLabelFieldName ();  			m_fProperties.txDbFieldVal1.Text = rptCtrl.getChart ().getSeries ().item (0).getValueFieldName ();  			m_fProperties.setChartIndex (0' rptCtrl.getChart ().getSeries ().item (0).getLabelIndex ());  			m_fProperties.setChartIndex (1' rptCtrl.getChart ().getSeries ().item (0).getValueIndex ());  			cUtil.listSetListIndexForId (m_fProperties.cbColorSerie1' (int)rptCtrl.getChart ().getSeries ().item (0).getColor ());  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  				m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  				m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  				m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  				cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  			}  		}  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  		m_fProperties.txText.Enabled = false;  		cReportField w_field = rptCtrl.getField ();  		m_fProperties.txText.Text = w_field.getName ();  		m_fProperties.txDbField.Text = w_field.getName ();  		m_fProperties.setFieldType (w_field.getFieldType ());  		m_fProperties.setIndex (w_field.getIndex ());  	}  	else {  		m_fProperties.hideTabField ();  		m_fProperties.txText.Enabled = true;  	}  	m_fProperties.txName.Text = rptCtrl.getName ();  	m_fProperties.lbControl.Text = rptCtrl.getName ();  	m_fProperties.chkFormulaHide.Checked = rptCtrl.getHasFormulaHide ();  	m_fProperties.chkFormulaValue.Checked = rptCtrl.getHasFormulaValue ();  	m_fProperties.txExportColIdx.Text = rptCtrl.getExportColIdx ().ToString ();  	m_fProperties.chkIsFreeCtrl.Checked = rptCtrl.getIsFreeCtrl ();  	m_fProperties.txTag.Text = rptCtrl.getTag ();  	m_fProperties.setFormulaHide (rptCtrl.getFormulaHide ().getText ());  	m_fProperties.setFormulaValue (rptCtrl.getFormulaValue ().getText ());  	m_fProperties.txIdxGroup.Text = rptCtrl.getFormulaValue ().getIdxGroup ().ToString ();  	m_fProperties.opBeforePrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPRE;  	m_fProperties.opAfterPrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPOST;  	w_aspect = rptCtrl.getLabel ().getAspect ();  	m_fProperties.chkCanGrow.Checked = w_aspect.getCanGrow ();  	m_fProperties.txFormat.Text = w_aspect.getFormat ();  	m_fProperties.txSymbol.Text = w_aspect.getSymbol ();  	m_fProperties.setIsAccounting (w_aspect.getIsAccounting ());  	m_fProperties.chkWordWrap.Checked = w_aspect.getWordWrap ();  	cUtil.listSetListIndexForId (m_fProperties.cbAlign' (int)w_aspect.getAlign ());  	m_fProperties.txBorderColor.Text = w_aspect.getBorderColor ().ToString ();  	m_fProperties.txBorder3D.Text = w_aspect.getBorderColor3d ().ToString ();  	m_fProperties.txBorderShadow.Text = w_aspect.getBorderColor3dShadow ().ToString ();  	m_fProperties.chkBorderRounded.Checked = w_aspect.getBorderRounded ();  	m_fProperties.txBorderWidth.Text = w_aspect.getBorderWidth ().ToString ();  	cUtil.listSetListIndexForId (m_fProperties.cbBorderType' (int)w_aspect.getBorderType ());  	w_font = w_aspect.getFont ();  	m_fProperties.txFont.Text = w_font.getName ();  	m_fProperties.txForeColor.Text = w_font.getForeColor ().ToString ();  	m_fProperties.shForeColor.BackColor = cColor.colorFromRGB (w_font.getForeColor ());  	m_fProperties.txFontSize.Text = w_font.getSize ().ToString ();  	m_fProperties.chkFontBold.Checked = w_font.getBold ();  	m_fProperties.chkFontItalic.Checked = w_font.getItalic ();  	m_fProperties.chkFontUnderline.Checked = w_font.getUnderline ();  	m_fProperties.chkFontStrike.Checked = w_font.getStrike ();  	w_aspect = paintObject.getAspect ();  	m_fProperties.txLeft.Text = w_aspect.getLeft ().ToString ();  	m_fProperties.txTop.Text = w_aspect.getTop ().ToString ();  	m_fProperties.txWidth.Text = w_aspect.getWidth ().ToString ();  	m_fProperties.txHeight.Text = w_aspect.getHeight ().ToString ();  	m_fProperties.txBackColor.Text = w_aspect.getBackColor ().ToString ();  	m_fProperties.shBackColor.BackColor = cColor.colorFromRGB (w_aspect.getBackColor ());  	m_fProperties.chkTransparent.Checked = w_aspect.getTransparent ();  	bMultiSelect = m_vSelectedKeys.Length > 1;  	m_fProperties.resetChangedFlags ();  	m_fProperties.ShowDialog ();  	if (!m_fProperties.getOk ()) {  		return;  	}  	for (int i = 0; i < m_vSelectedKeys.Length; i++) {  		paintObject = m_paint.getPaintObject (m_vSelectedKeys [i]);  		rptCtrl = m_report.getControls ().item (paintObject.getTag ());  		if (!bMultiSelect) {  			if (rptCtrl.getName () != m_fProperties.txName.Text) {  				if (rptCtrl.getName () != "") {  					if (cWindow.ask ("You have changed the name of this control.;;Do you want to update all references to this control in all formulas of this report?"' MessageBoxDefaultButton.Button2)) {  						pUpdateFormulas (rptCtrl.getName ()' m_fProperties.txName.Text);  					}  				}  			}  			rptCtrl.setName (m_fProperties.txName.Text);  		}  		if (m_fProperties.getTextChanged ()) {  			rptCtrl.getLabel ().setText (m_fProperties.txText.Text);  		}  		if (m_fProperties.getTagChanged ()) {  			rptCtrl.setTag (m_fProperties.txTag.Text);  		}  		if (m_fProperties.getSetFormulaHideChanged ()) {  			rptCtrl.setHasFormulaHide (m_fProperties.chkFormulaHide.Checked);  		}  		if (m_fProperties.getSetFormulaValueChanged ()) {  			rptCtrl.setHasFormulaValue (m_fProperties.chkFormulaValue.Checked);  		}  		if (m_fProperties.getFormulaHideChanged ()) {  			rptCtrl.getFormulaHide ().setText (m_fProperties.getFormulaHide ());  		}  		if (m_fProperties.getFormulaValueChanged ()) {  			rptCtrl.getFormulaValue ().setText (m_fProperties.getFormulaValue ());  		}  		if (m_fProperties.getIdxGroupChanged ()) {  			rptCtrl.getFormulaValue ().setIdxGroup (cUtil.valAsInt (m_fProperties.txIdxGroup.Text));  		}  		if (m_fProperties.getWhenEvalChanged ()) {  			rptCtrl.getFormulaValue ().setWhenEval (m_fProperties.opAfterPrint.Checked ? csRptWhenEval.CSRPTEVALPOST : csRptWhenEval.CSRPTEVALPRE);  		}  		if (m_fProperties.getExportColIdxChanged ()) {  			rptCtrl.setExportColIdx (cUtil.valAsInt (m_fProperties.txExportColIdx.Text));  		}  		if (m_fProperties.getIsFreeCtrlChanged ()) {  			rptCtrl.setIsFreeCtrl (m_fProperties.chkIsFreeCtrl.Checked);  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  			cReportField w_field = rptCtrl.getField ();  			if (m_fProperties.getDbFieldChanged ()) {  				w_field.setFieldType (m_fProperties.getFieldType ());  				w_field.setIndex (m_fProperties.getIndex ());  				w_field.setName (m_fProperties.txDbField.Text);  			}  		}  		if (m_fProperties.getPictureChanged ()) {  			rptCtrl.getImage ().setImage (new Bitmap (m_fProperties.picImage.Image));  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  			if (rptCtrl.getChart ().getSeries ().count () < 1) {  				rptCtrl.getChart ().getSeries ().add ();  			}  			if (m_fProperties.getChartTypeChanged ()) {  				rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  			}  			if (m_fProperties.getChartFormatTypeChanged ()) {  				rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  			}  			if (m_fProperties.getChartSizeChanged ()) {  				rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  			}  			if (m_fProperties.getChartThicknessChanged ()) {  				rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  			}  			if (m_fProperties.getChartLinesTypeChanged ()) {  				rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  			}  			if (m_fProperties.getChartShowLinesChanged ()) {  				rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  			}  			if (m_fProperties.getChartShowValuesChanged ()) {  				rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  			}  			if (m_fProperties.getTextChanged ()) {  				rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  			}  			if (m_fProperties.getChartTopChanged ()) {  				rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  			}  			if (m_fProperties.getChartSortChanged ()) {  				rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  			}  			if (m_fProperties.getChartGroupValueChanged ()) {  				rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  			}  			if (m_fProperties.getChartFieldGroupChanged ()) {  				rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  				rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  			}  			if (m_fProperties.getChartFieldLbl1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  			}  			if (m_fProperties.getChartFieldVal1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  			}  			if (m_fProperties.getChartColorSerie1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  			}  			if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  				if (rptCtrl.getChart ().getSeries ().count () < 2) {  					rptCtrl.getChart ().getSeries ().add ();  				}  			}  			if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  				if (rptCtrl.getChart ().getSeries ().count () > 1) {  					rptCtrl.getChart ().getSeries ().remove (1);  				}  			}  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				if (m_fProperties.getChartFieldLbl2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  				}  				if (m_fProperties.getChartFieldVal2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  				}  				if (m_fProperties.getChartColorSerie2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  				}  			}  		}  		if (m_fProperties.getTextChanged ()) {  			paintObject.setText (m_fProperties.txText.Text);  		}  		w_aspect = rptCtrl.getLabel ().getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  			w_aspect.setIsAccounting (m_fProperties.getIsAccounting ());  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getCanGrowChanged ()) {  			w_aspect.setCanGrow (m_fProperties.chkCanGrow.Checked);  		}  		if (m_fProperties.getBorderColorChanged ()) {  			w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  		}  		if (m_fProperties.getBorder3DChanged ()) {  			w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  		}  		if (m_fProperties.getBorder3DShadowChanged ()) {  			w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  		}  		if (m_fProperties.getBorderRoundedChanged ()) {  			w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  		}  		if (m_fProperties.getBorderWidthChanged ()) {  			w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  		if (m_fProperties.getPictureChanged ()) {  			paintObject.setImage (rptCtrl.getImage ().getImage ());  		}  		//  		// TODO: check if we can refactor this now we have a better class hierarchy  		//  		w_aspect = paintObject.getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		if (w_aspect.getBorderType () == csReportBorderType.CSRPTBSNONE) {  			w_aspect.setBorderColor (Color.Black.ToArgb ());  			w_aspect.setBorderWidth (1);  			w_aspect.setBorderRounded (false);  			w_aspect.setBorderType (csReportBorderType.CSRPTBSFIXED);  		}  		else {  			if (m_fProperties.getBorderColorChanged ()) {  				w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  			}  			if (m_fProperties.getBorder3DChanged ()) {  				w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  			}  			if (m_fProperties.getBorder3DShadowChanged ()) {  				w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  			}  			if (m_fProperties.getBorderRoundedChanged ()) {  				w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  			}  			if (m_fProperties.getBorderWidthChanged ()) {  				w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  			}  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  	}  	m_dataHasChanged = true;  }  catch (Exception ex) {  	cError.mngError (ex' "pShowCtrlProperties"' C_MODULE' "");  }  finally {  	m_fProperties.Hide ();  	m_showingProperties = false;  	m_fProperties = null;  	m_paint.endMove (m_picReport.CreateGraphics ());  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: try {  	cReportPaintObject paintObject = null;  	cReportControl rptCtrl = null;  	cReportAspect w_aspect = null;  	cReportFont w_font = null;  	bool bMultiSelect = false;  	m_showingProperties = true;  	if (m_fProperties == null) {  		m_fProperties = new fProperties ();  	}  	m_fProperties.setHandler (this);  	paintObject = m_paint.getPaintObject (m_keyObj);  	if (paintObject == null) {  		return;  	}  	m_fProperties.txText.Text = paintObject.getText ();  	rptCtrl = m_report.getControls ().item (paintObject.getTag ());  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTIMAGE) {  		m_fProperties.hideTabImage ();  	}  	else {  		m_fProperties.picImage.Image = rptCtrl.getImage ().getImage ();  	}  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTCHART) {  		m_fProperties.hideTabChart ();  	}  	else {  		cUtil.listSetListIndexForId (m_fProperties.cbType' (int)rptCtrl.getChart ().getChartType ());  		cUtil.listSetListIndexForId (m_fProperties.cbFormatType' (int)rptCtrl.getChart ().getFormat ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartSize' (int)rptCtrl.getChart ().getDiameter ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartThickness' (int)rptCtrl.getChart ().getThickness ());  		cUtil.listSetListIndexForId (m_fProperties.cbLinesType' (int)rptCtrl.getChart ().getGridLines ());  		m_fProperties.txChartTop.Text = rptCtrl.getChart ().getTop ().ToString ();  		m_fProperties.txDbFieldGroupValue.Text = rptCtrl.getChart ().getGroupFieldName ();  		m_fProperties.setChartGroupIndex (rptCtrl.getChart ().getGroupFieldIndex ());  		m_fProperties.txChartGroupValue.Text = rptCtrl.getChart ().getGroupValue ();  		m_fProperties.chkShowOutlines.Checked = rptCtrl.getChart ().getOutlineBars ();  		m_fProperties.chkShowBarValues.Checked = rptCtrl.getChart ().getShowValues ();  		m_fProperties.chkSort.Checked = rptCtrl.getChart ().getSort ();  		m_fProperties.txText.Text = rptCtrl.getChart ().getChartTitle ();  		if (rptCtrl.getChart ().getSeries ().count () > 0) {  			m_fProperties.txDbFieldLbl1.Text = rptCtrl.getChart ().getSeries ().item (0).getLabelFieldName ();  			m_fProperties.txDbFieldVal1.Text = rptCtrl.getChart ().getSeries ().item (0).getValueFieldName ();  			m_fProperties.setChartIndex (0' rptCtrl.getChart ().getSeries ().item (0).getLabelIndex ());  			m_fProperties.setChartIndex (1' rptCtrl.getChart ().getSeries ().item (0).getValueIndex ());  			cUtil.listSetListIndexForId (m_fProperties.cbColorSerie1' (int)rptCtrl.getChart ().getSeries ().item (0).getColor ());  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  				m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  				m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  				m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  				cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  			}  		}  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  		m_fProperties.txText.Enabled = false;  		cReportField w_field = rptCtrl.getField ();  		m_fProperties.txText.Text = w_field.getName ();  		m_fProperties.txDbField.Text = w_field.getName ();  		m_fProperties.setFieldType (w_field.getFieldType ());  		m_fProperties.setIndex (w_field.getIndex ());  	}  	else {  		m_fProperties.hideTabField ();  		m_fProperties.txText.Enabled = true;  	}  	m_fProperties.txName.Text = rptCtrl.getName ();  	m_fProperties.lbControl.Text = rptCtrl.getName ();  	m_fProperties.chkFormulaHide.Checked = rptCtrl.getHasFormulaHide ();  	m_fProperties.chkFormulaValue.Checked = rptCtrl.getHasFormulaValue ();  	m_fProperties.txExportColIdx.Text = rptCtrl.getExportColIdx ().ToString ();  	m_fProperties.chkIsFreeCtrl.Checked = rptCtrl.getIsFreeCtrl ();  	m_fProperties.txTag.Text = rptCtrl.getTag ();  	m_fProperties.setFormulaHide (rptCtrl.getFormulaHide ().getText ());  	m_fProperties.setFormulaValue (rptCtrl.getFormulaValue ().getText ());  	m_fProperties.txIdxGroup.Text = rptCtrl.getFormulaValue ().getIdxGroup ().ToString ();  	m_fProperties.opBeforePrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPRE;  	m_fProperties.opAfterPrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPOST;  	w_aspect = rptCtrl.getLabel ().getAspect ();  	m_fProperties.chkCanGrow.Checked = w_aspect.getCanGrow ();  	m_fProperties.txFormat.Text = w_aspect.getFormat ();  	m_fProperties.txSymbol.Text = w_aspect.getSymbol ();  	m_fProperties.setIsAccounting (w_aspect.getIsAccounting ());  	m_fProperties.chkWordWrap.Checked = w_aspect.getWordWrap ();  	cUtil.listSetListIndexForId (m_fProperties.cbAlign' (int)w_aspect.getAlign ());  	m_fProperties.txBorderColor.Text = w_aspect.getBorderColor ().ToString ();  	m_fProperties.txBorder3D.Text = w_aspect.getBorderColor3d ().ToString ();  	m_fProperties.txBorderShadow.Text = w_aspect.getBorderColor3dShadow ().ToString ();  	m_fProperties.chkBorderRounded.Checked = w_aspect.getBorderRounded ();  	m_fProperties.txBorderWidth.Text = w_aspect.getBorderWidth ().ToString ();  	cUtil.listSetListIndexForId (m_fProperties.cbBorderType' (int)w_aspect.getBorderType ());  	w_font = w_aspect.getFont ();  	m_fProperties.txFont.Text = w_font.getName ();  	m_fProperties.txForeColor.Text = w_font.getForeColor ().ToString ();  	m_fProperties.shForeColor.BackColor = cColor.colorFromRGB (w_font.getForeColor ());  	m_fProperties.txFontSize.Text = w_font.getSize ().ToString ();  	m_fProperties.chkFontBold.Checked = w_font.getBold ();  	m_fProperties.chkFontItalic.Checked = w_font.getItalic ();  	m_fProperties.chkFontUnderline.Checked = w_font.getUnderline ();  	m_fProperties.chkFontStrike.Checked = w_font.getStrike ();  	w_aspect = paintObject.getAspect ();  	m_fProperties.txLeft.Text = w_aspect.getLeft ().ToString ();  	m_fProperties.txTop.Text = w_aspect.getTop ().ToString ();  	m_fProperties.txWidth.Text = w_aspect.getWidth ().ToString ();  	m_fProperties.txHeight.Text = w_aspect.getHeight ().ToString ();  	m_fProperties.txBackColor.Text = w_aspect.getBackColor ().ToString ();  	m_fProperties.shBackColor.BackColor = cColor.colorFromRGB (w_aspect.getBackColor ());  	m_fProperties.chkTransparent.Checked = w_aspect.getTransparent ();  	bMultiSelect = m_vSelectedKeys.Length > 1;  	m_fProperties.resetChangedFlags ();  	m_fProperties.ShowDialog ();  	if (!m_fProperties.getOk ()) {  		return;  	}  	for (int i = 0; i < m_vSelectedKeys.Length; i++) {  		paintObject = m_paint.getPaintObject (m_vSelectedKeys [i]);  		rptCtrl = m_report.getControls ().item (paintObject.getTag ());  		if (!bMultiSelect) {  			if (rptCtrl.getName () != m_fProperties.txName.Text) {  				if (rptCtrl.getName () != "") {  					if (cWindow.ask ("You have changed the name of this control.;;Do you want to update all references to this control in all formulas of this report?"' MessageBoxDefaultButton.Button2)) {  						pUpdateFormulas (rptCtrl.getName ()' m_fProperties.txName.Text);  					}  				}  			}  			rptCtrl.setName (m_fProperties.txName.Text);  		}  		if (m_fProperties.getTextChanged ()) {  			rptCtrl.getLabel ().setText (m_fProperties.txText.Text);  		}  		if (m_fProperties.getTagChanged ()) {  			rptCtrl.setTag (m_fProperties.txTag.Text);  		}  		if (m_fProperties.getSetFormulaHideChanged ()) {  			rptCtrl.setHasFormulaHide (m_fProperties.chkFormulaHide.Checked);  		}  		if (m_fProperties.getSetFormulaValueChanged ()) {  			rptCtrl.setHasFormulaValue (m_fProperties.chkFormulaValue.Checked);  		}  		if (m_fProperties.getFormulaHideChanged ()) {  			rptCtrl.getFormulaHide ().setText (m_fProperties.getFormulaHide ());  		}  		if (m_fProperties.getFormulaValueChanged ()) {  			rptCtrl.getFormulaValue ().setText (m_fProperties.getFormulaValue ());  		}  		if (m_fProperties.getIdxGroupChanged ()) {  			rptCtrl.getFormulaValue ().setIdxGroup (cUtil.valAsInt (m_fProperties.txIdxGroup.Text));  		}  		if (m_fProperties.getWhenEvalChanged ()) {  			rptCtrl.getFormulaValue ().setWhenEval (m_fProperties.opAfterPrint.Checked ? csRptWhenEval.CSRPTEVALPOST : csRptWhenEval.CSRPTEVALPRE);  		}  		if (m_fProperties.getExportColIdxChanged ()) {  			rptCtrl.setExportColIdx (cUtil.valAsInt (m_fProperties.txExportColIdx.Text));  		}  		if (m_fProperties.getIsFreeCtrlChanged ()) {  			rptCtrl.setIsFreeCtrl (m_fProperties.chkIsFreeCtrl.Checked);  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  			cReportField w_field = rptCtrl.getField ();  			if (m_fProperties.getDbFieldChanged ()) {  				w_field.setFieldType (m_fProperties.getFieldType ());  				w_field.setIndex (m_fProperties.getIndex ());  				w_field.setName (m_fProperties.txDbField.Text);  			}  		}  		if (m_fProperties.getPictureChanged ()) {  			rptCtrl.getImage ().setImage (new Bitmap (m_fProperties.picImage.Image));  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  			if (rptCtrl.getChart ().getSeries ().count () < 1) {  				rptCtrl.getChart ().getSeries ().add ();  			}  			if (m_fProperties.getChartTypeChanged ()) {  				rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  			}  			if (m_fProperties.getChartFormatTypeChanged ()) {  				rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  			}  			if (m_fProperties.getChartSizeChanged ()) {  				rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  			}  			if (m_fProperties.getChartThicknessChanged ()) {  				rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  			}  			if (m_fProperties.getChartLinesTypeChanged ()) {  				rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  			}  			if (m_fProperties.getChartShowLinesChanged ()) {  				rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  			}  			if (m_fProperties.getChartShowValuesChanged ()) {  				rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  			}  			if (m_fProperties.getTextChanged ()) {  				rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  			}  			if (m_fProperties.getChartTopChanged ()) {  				rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  			}  			if (m_fProperties.getChartSortChanged ()) {  				rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  			}  			if (m_fProperties.getChartGroupValueChanged ()) {  				rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  			}  			if (m_fProperties.getChartFieldGroupChanged ()) {  				rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  				rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  			}  			if (m_fProperties.getChartFieldLbl1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  			}  			if (m_fProperties.getChartFieldVal1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  			}  			if (m_fProperties.getChartColorSerie1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  			}  			if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  				if (rptCtrl.getChart ().getSeries ().count () < 2) {  					rptCtrl.getChart ().getSeries ().add ();  				}  			}  			if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  				if (rptCtrl.getChart ().getSeries ().count () > 1) {  					rptCtrl.getChart ().getSeries ().remove (1);  				}  			}  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				if (m_fProperties.getChartFieldLbl2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  				}  				if (m_fProperties.getChartFieldVal2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  				}  				if (m_fProperties.getChartColorSerie2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  				}  			}  		}  		if (m_fProperties.getTextChanged ()) {  			paintObject.setText (m_fProperties.txText.Text);  		}  		w_aspect = rptCtrl.getLabel ().getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  			w_aspect.setIsAccounting (m_fProperties.getIsAccounting ());  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getCanGrowChanged ()) {  			w_aspect.setCanGrow (m_fProperties.chkCanGrow.Checked);  		}  		if (m_fProperties.getBorderColorChanged ()) {  			w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  		}  		if (m_fProperties.getBorder3DChanged ()) {  			w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  		}  		if (m_fProperties.getBorder3DShadowChanged ()) {  			w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  		}  		if (m_fProperties.getBorderRoundedChanged ()) {  			w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  		}  		if (m_fProperties.getBorderWidthChanged ()) {  			w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  		if (m_fProperties.getPictureChanged ()) {  			paintObject.setImage (rptCtrl.getImage ().getImage ());  		}  		//  		// TODO: check if we can refactor this now we have a better class hierarchy  		//  		w_aspect = paintObject.getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		if (w_aspect.getBorderType () == csReportBorderType.CSRPTBSNONE) {  			w_aspect.setBorderColor (Color.Black.ToArgb ());  			w_aspect.setBorderWidth (1);  			w_aspect.setBorderRounded (false);  			w_aspect.setBorderType (csReportBorderType.CSRPTBSFIXED);  		}  		else {  			if (m_fProperties.getBorderColorChanged ()) {  				w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  			}  			if (m_fProperties.getBorder3DChanged ()) {  				w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  			}  			if (m_fProperties.getBorder3DShadowChanged ()) {  				w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  			}  			if (m_fProperties.getBorderRoundedChanged ()) {  				w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  			}  			if (m_fProperties.getBorderWidthChanged ()) {  				w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  			}  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  	}  	m_dataHasChanged = true;  }  catch (Exception ex) {  	cError.mngError (ex' "pShowCtrlProperties"' C_MODULE' "");  }  finally {  	m_fProperties.Hide ();  	m_showingProperties = false;  	m_fProperties = null;  	m_paint.endMove (m_picReport.CreateGraphics ());  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: try {  	cReportPaintObject paintObject = null;  	cReportControl rptCtrl = null;  	cReportAspect w_aspect = null;  	cReportFont w_font = null;  	bool bMultiSelect = false;  	m_showingProperties = true;  	if (m_fProperties == null) {  		m_fProperties = new fProperties ();  	}  	m_fProperties.setHandler (this);  	paintObject = m_paint.getPaintObject (m_keyObj);  	if (paintObject == null) {  		return;  	}  	m_fProperties.txText.Text = paintObject.getText ();  	rptCtrl = m_report.getControls ().item (paintObject.getTag ());  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTIMAGE) {  		m_fProperties.hideTabImage ();  	}  	else {  		m_fProperties.picImage.Image = rptCtrl.getImage ().getImage ();  	}  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTCHART) {  		m_fProperties.hideTabChart ();  	}  	else {  		cUtil.listSetListIndexForId (m_fProperties.cbType' (int)rptCtrl.getChart ().getChartType ());  		cUtil.listSetListIndexForId (m_fProperties.cbFormatType' (int)rptCtrl.getChart ().getFormat ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartSize' (int)rptCtrl.getChart ().getDiameter ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartThickness' (int)rptCtrl.getChart ().getThickness ());  		cUtil.listSetListIndexForId (m_fProperties.cbLinesType' (int)rptCtrl.getChart ().getGridLines ());  		m_fProperties.txChartTop.Text = rptCtrl.getChart ().getTop ().ToString ();  		m_fProperties.txDbFieldGroupValue.Text = rptCtrl.getChart ().getGroupFieldName ();  		m_fProperties.setChartGroupIndex (rptCtrl.getChart ().getGroupFieldIndex ());  		m_fProperties.txChartGroupValue.Text = rptCtrl.getChart ().getGroupValue ();  		m_fProperties.chkShowOutlines.Checked = rptCtrl.getChart ().getOutlineBars ();  		m_fProperties.chkShowBarValues.Checked = rptCtrl.getChart ().getShowValues ();  		m_fProperties.chkSort.Checked = rptCtrl.getChart ().getSort ();  		m_fProperties.txText.Text = rptCtrl.getChart ().getChartTitle ();  		if (rptCtrl.getChart ().getSeries ().count () > 0) {  			m_fProperties.txDbFieldLbl1.Text = rptCtrl.getChart ().getSeries ().item (0).getLabelFieldName ();  			m_fProperties.txDbFieldVal1.Text = rptCtrl.getChart ().getSeries ().item (0).getValueFieldName ();  			m_fProperties.setChartIndex (0' rptCtrl.getChart ().getSeries ().item (0).getLabelIndex ());  			m_fProperties.setChartIndex (1' rptCtrl.getChart ().getSeries ().item (0).getValueIndex ());  			cUtil.listSetListIndexForId (m_fProperties.cbColorSerie1' (int)rptCtrl.getChart ().getSeries ().item (0).getColor ());  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  				m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  				m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  				m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  				cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  			}  		}  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  		m_fProperties.txText.Enabled = false;  		cReportField w_field = rptCtrl.getField ();  		m_fProperties.txText.Text = w_field.getName ();  		m_fProperties.txDbField.Text = w_field.getName ();  		m_fProperties.setFieldType (w_field.getFieldType ());  		m_fProperties.setIndex (w_field.getIndex ());  	}  	else {  		m_fProperties.hideTabField ();  		m_fProperties.txText.Enabled = true;  	}  	m_fProperties.txName.Text = rptCtrl.getName ();  	m_fProperties.lbControl.Text = rptCtrl.getName ();  	m_fProperties.chkFormulaHide.Checked = rptCtrl.getHasFormulaHide ();  	m_fProperties.chkFormulaValue.Checked = rptCtrl.getHasFormulaValue ();  	m_fProperties.txExportColIdx.Text = rptCtrl.getExportColIdx ().ToString ();  	m_fProperties.chkIsFreeCtrl.Checked = rptCtrl.getIsFreeCtrl ();  	m_fProperties.txTag.Text = rptCtrl.getTag ();  	m_fProperties.setFormulaHide (rptCtrl.getFormulaHide ().getText ());  	m_fProperties.setFormulaValue (rptCtrl.getFormulaValue ().getText ());  	m_fProperties.txIdxGroup.Text = rptCtrl.getFormulaValue ().getIdxGroup ().ToString ();  	m_fProperties.opBeforePrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPRE;  	m_fProperties.opAfterPrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPOST;  	w_aspect = rptCtrl.getLabel ().getAspect ();  	m_fProperties.chkCanGrow.Checked = w_aspect.getCanGrow ();  	m_fProperties.txFormat.Text = w_aspect.getFormat ();  	m_fProperties.txSymbol.Text = w_aspect.getSymbol ();  	m_fProperties.setIsAccounting (w_aspect.getIsAccounting ());  	m_fProperties.chkWordWrap.Checked = w_aspect.getWordWrap ();  	cUtil.listSetListIndexForId (m_fProperties.cbAlign' (int)w_aspect.getAlign ());  	m_fProperties.txBorderColor.Text = w_aspect.getBorderColor ().ToString ();  	m_fProperties.txBorder3D.Text = w_aspect.getBorderColor3d ().ToString ();  	m_fProperties.txBorderShadow.Text = w_aspect.getBorderColor3dShadow ().ToString ();  	m_fProperties.chkBorderRounded.Checked = w_aspect.getBorderRounded ();  	m_fProperties.txBorderWidth.Text = w_aspect.getBorderWidth ().ToString ();  	cUtil.listSetListIndexForId (m_fProperties.cbBorderType' (int)w_aspect.getBorderType ());  	w_font = w_aspect.getFont ();  	m_fProperties.txFont.Text = w_font.getName ();  	m_fProperties.txForeColor.Text = w_font.getForeColor ().ToString ();  	m_fProperties.shForeColor.BackColor = cColor.colorFromRGB (w_font.getForeColor ());  	m_fProperties.txFontSize.Text = w_font.getSize ().ToString ();  	m_fProperties.chkFontBold.Checked = w_font.getBold ();  	m_fProperties.chkFontItalic.Checked = w_font.getItalic ();  	m_fProperties.chkFontUnderline.Checked = w_font.getUnderline ();  	m_fProperties.chkFontStrike.Checked = w_font.getStrike ();  	w_aspect = paintObject.getAspect ();  	m_fProperties.txLeft.Text = w_aspect.getLeft ().ToString ();  	m_fProperties.txTop.Text = w_aspect.getTop ().ToString ();  	m_fProperties.txWidth.Text = w_aspect.getWidth ().ToString ();  	m_fProperties.txHeight.Text = w_aspect.getHeight ().ToString ();  	m_fProperties.txBackColor.Text = w_aspect.getBackColor ().ToString ();  	m_fProperties.shBackColor.BackColor = cColor.colorFromRGB (w_aspect.getBackColor ());  	m_fProperties.chkTransparent.Checked = w_aspect.getTransparent ();  	bMultiSelect = m_vSelectedKeys.Length > 1;  	m_fProperties.resetChangedFlags ();  	m_fProperties.ShowDialog ();  	if (!m_fProperties.getOk ()) {  		return;  	}  	for (int i = 0; i < m_vSelectedKeys.Length; i++) {  		paintObject = m_paint.getPaintObject (m_vSelectedKeys [i]);  		rptCtrl = m_report.getControls ().item (paintObject.getTag ());  		if (!bMultiSelect) {  			if (rptCtrl.getName () != m_fProperties.txName.Text) {  				if (rptCtrl.getName () != "") {  					if (cWindow.ask ("You have changed the name of this control.;;Do you want to update all references to this control in all formulas of this report?"' MessageBoxDefaultButton.Button2)) {  						pUpdateFormulas (rptCtrl.getName ()' m_fProperties.txName.Text);  					}  				}  			}  			rptCtrl.setName (m_fProperties.txName.Text);  		}  		if (m_fProperties.getTextChanged ()) {  			rptCtrl.getLabel ().setText (m_fProperties.txText.Text);  		}  		if (m_fProperties.getTagChanged ()) {  			rptCtrl.setTag (m_fProperties.txTag.Text);  		}  		if (m_fProperties.getSetFormulaHideChanged ()) {  			rptCtrl.setHasFormulaHide (m_fProperties.chkFormulaHide.Checked);  		}  		if (m_fProperties.getSetFormulaValueChanged ()) {  			rptCtrl.setHasFormulaValue (m_fProperties.chkFormulaValue.Checked);  		}  		if (m_fProperties.getFormulaHideChanged ()) {  			rptCtrl.getFormulaHide ().setText (m_fProperties.getFormulaHide ());  		}  		if (m_fProperties.getFormulaValueChanged ()) {  			rptCtrl.getFormulaValue ().setText (m_fProperties.getFormulaValue ());  		}  		if (m_fProperties.getIdxGroupChanged ()) {  			rptCtrl.getFormulaValue ().setIdxGroup (cUtil.valAsInt (m_fProperties.txIdxGroup.Text));  		}  		if (m_fProperties.getWhenEvalChanged ()) {  			rptCtrl.getFormulaValue ().setWhenEval (m_fProperties.opAfterPrint.Checked ? csRptWhenEval.CSRPTEVALPOST : csRptWhenEval.CSRPTEVALPRE);  		}  		if (m_fProperties.getExportColIdxChanged ()) {  			rptCtrl.setExportColIdx (cUtil.valAsInt (m_fProperties.txExportColIdx.Text));  		}  		if (m_fProperties.getIsFreeCtrlChanged ()) {  			rptCtrl.setIsFreeCtrl (m_fProperties.chkIsFreeCtrl.Checked);  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  			cReportField w_field = rptCtrl.getField ();  			if (m_fProperties.getDbFieldChanged ()) {  				w_field.setFieldType (m_fProperties.getFieldType ());  				w_field.setIndex (m_fProperties.getIndex ());  				w_field.setName (m_fProperties.txDbField.Text);  			}  		}  		if (m_fProperties.getPictureChanged ()) {  			rptCtrl.getImage ().setImage (new Bitmap (m_fProperties.picImage.Image));  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  			if (rptCtrl.getChart ().getSeries ().count () < 1) {  				rptCtrl.getChart ().getSeries ().add ();  			}  			if (m_fProperties.getChartTypeChanged ()) {  				rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  			}  			if (m_fProperties.getChartFormatTypeChanged ()) {  				rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  			}  			if (m_fProperties.getChartSizeChanged ()) {  				rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  			}  			if (m_fProperties.getChartThicknessChanged ()) {  				rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  			}  			if (m_fProperties.getChartLinesTypeChanged ()) {  				rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  			}  			if (m_fProperties.getChartShowLinesChanged ()) {  				rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  			}  			if (m_fProperties.getChartShowValuesChanged ()) {  				rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  			}  			if (m_fProperties.getTextChanged ()) {  				rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  			}  			if (m_fProperties.getChartTopChanged ()) {  				rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  			}  			if (m_fProperties.getChartSortChanged ()) {  				rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  			}  			if (m_fProperties.getChartGroupValueChanged ()) {  				rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  			}  			if (m_fProperties.getChartFieldGroupChanged ()) {  				rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  				rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  			}  			if (m_fProperties.getChartFieldLbl1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  			}  			if (m_fProperties.getChartFieldVal1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  			}  			if (m_fProperties.getChartColorSerie1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  			}  			if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  				if (rptCtrl.getChart ().getSeries ().count () < 2) {  					rptCtrl.getChart ().getSeries ().add ();  				}  			}  			if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  				if (rptCtrl.getChart ().getSeries ().count () > 1) {  					rptCtrl.getChart ().getSeries ().remove (1);  				}  			}  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				if (m_fProperties.getChartFieldLbl2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  				}  				if (m_fProperties.getChartFieldVal2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  				}  				if (m_fProperties.getChartColorSerie2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  				}  			}  		}  		if (m_fProperties.getTextChanged ()) {  			paintObject.setText (m_fProperties.txText.Text);  		}  		w_aspect = rptCtrl.getLabel ().getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  			w_aspect.setIsAccounting (m_fProperties.getIsAccounting ());  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getCanGrowChanged ()) {  			w_aspect.setCanGrow (m_fProperties.chkCanGrow.Checked);  		}  		if (m_fProperties.getBorderColorChanged ()) {  			w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  		}  		if (m_fProperties.getBorder3DChanged ()) {  			w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  		}  		if (m_fProperties.getBorder3DShadowChanged ()) {  			w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  		}  		if (m_fProperties.getBorderRoundedChanged ()) {  			w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  		}  		if (m_fProperties.getBorderWidthChanged ()) {  			w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  		if (m_fProperties.getPictureChanged ()) {  			paintObject.setImage (rptCtrl.getImage ().getImage ());  		}  		//  		// TODO: check if we can refactor this now we have a better class hierarchy  		//  		w_aspect = paintObject.getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		if (w_aspect.getBorderType () == csReportBorderType.CSRPTBSNONE) {  			w_aspect.setBorderColor (Color.Black.ToArgb ());  			w_aspect.setBorderWidth (1);  			w_aspect.setBorderRounded (false);  			w_aspect.setBorderType (csReportBorderType.CSRPTBSFIXED);  		}  		else {  			if (m_fProperties.getBorderColorChanged ()) {  				w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  			}  			if (m_fProperties.getBorder3DChanged ()) {  				w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  			}  			if (m_fProperties.getBorder3DShadowChanged ()) {  				w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  			}  			if (m_fProperties.getBorderRoundedChanged ()) {  				w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  			}  			if (m_fProperties.getBorderWidthChanged ()) {  				w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  			}  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  	}  	m_dataHasChanged = true;  }  catch (Exception ex) {  	cError.mngError (ex' "pShowCtrlProperties"' C_MODULE' "");  }  finally {  	m_fProperties.Hide ();  	m_showingProperties = false;  	m_fProperties = null;  	m_paint.endMove (m_picReport.CreateGraphics ());  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: try {  	cReportPaintObject paintObject = null;  	cReportControl rptCtrl = null;  	cReportAspect w_aspect = null;  	cReportFont w_font = null;  	bool bMultiSelect = false;  	m_showingProperties = true;  	if (m_fProperties == null) {  		m_fProperties = new fProperties ();  	}  	m_fProperties.setHandler (this);  	paintObject = m_paint.getPaintObject (m_keyObj);  	if (paintObject == null) {  		return;  	}  	m_fProperties.txText.Text = paintObject.getText ();  	rptCtrl = m_report.getControls ().item (paintObject.getTag ());  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTIMAGE) {  		m_fProperties.hideTabImage ();  	}  	else {  		m_fProperties.picImage.Image = rptCtrl.getImage ().getImage ();  	}  	if (rptCtrl.getControlType () != csRptControlType.CSRPTCTCHART) {  		m_fProperties.hideTabChart ();  	}  	else {  		cUtil.listSetListIndexForId (m_fProperties.cbType' (int)rptCtrl.getChart ().getChartType ());  		cUtil.listSetListIndexForId (m_fProperties.cbFormatType' (int)rptCtrl.getChart ().getFormat ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartSize' (int)rptCtrl.getChart ().getDiameter ());  		cUtil.listSetListIndexForId (m_fProperties.cbChartThickness' (int)rptCtrl.getChart ().getThickness ());  		cUtil.listSetListIndexForId (m_fProperties.cbLinesType' (int)rptCtrl.getChart ().getGridLines ());  		m_fProperties.txChartTop.Text = rptCtrl.getChart ().getTop ().ToString ();  		m_fProperties.txDbFieldGroupValue.Text = rptCtrl.getChart ().getGroupFieldName ();  		m_fProperties.setChartGroupIndex (rptCtrl.getChart ().getGroupFieldIndex ());  		m_fProperties.txChartGroupValue.Text = rptCtrl.getChart ().getGroupValue ();  		m_fProperties.chkShowOutlines.Checked = rptCtrl.getChart ().getOutlineBars ();  		m_fProperties.chkShowBarValues.Checked = rptCtrl.getChart ().getShowValues ();  		m_fProperties.chkSort.Checked = rptCtrl.getChart ().getSort ();  		m_fProperties.txText.Text = rptCtrl.getChart ().getChartTitle ();  		if (rptCtrl.getChart ().getSeries ().count () > 0) {  			m_fProperties.txDbFieldLbl1.Text = rptCtrl.getChart ().getSeries ().item (0).getLabelFieldName ();  			m_fProperties.txDbFieldVal1.Text = rptCtrl.getChart ().getSeries ().item (0).getValueFieldName ();  			m_fProperties.setChartIndex (0' rptCtrl.getChart ().getSeries ().item (0).getLabelIndex ());  			m_fProperties.setChartIndex (1' rptCtrl.getChart ().getSeries ().item (0).getValueIndex ());  			cUtil.listSetListIndexForId (m_fProperties.cbColorSerie1' (int)rptCtrl.getChart ().getSeries ().item (0).getColor ());  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  				m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  				m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  				m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  				cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  			}  		}  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  		m_fProperties.txText.Enabled = false;  		cReportField w_field = rptCtrl.getField ();  		m_fProperties.txText.Text = w_field.getName ();  		m_fProperties.txDbField.Text = w_field.getName ();  		m_fProperties.setFieldType (w_field.getFieldType ());  		m_fProperties.setIndex (w_field.getIndex ());  	}  	else {  		m_fProperties.hideTabField ();  		m_fProperties.txText.Enabled = true;  	}  	m_fProperties.txName.Text = rptCtrl.getName ();  	m_fProperties.lbControl.Text = rptCtrl.getName ();  	m_fProperties.chkFormulaHide.Checked = rptCtrl.getHasFormulaHide ();  	m_fProperties.chkFormulaValue.Checked = rptCtrl.getHasFormulaValue ();  	m_fProperties.txExportColIdx.Text = rptCtrl.getExportColIdx ().ToString ();  	m_fProperties.chkIsFreeCtrl.Checked = rptCtrl.getIsFreeCtrl ();  	m_fProperties.txTag.Text = rptCtrl.getTag ();  	m_fProperties.setFormulaHide (rptCtrl.getFormulaHide ().getText ());  	m_fProperties.setFormulaValue (rptCtrl.getFormulaValue ().getText ());  	m_fProperties.txIdxGroup.Text = rptCtrl.getFormulaValue ().getIdxGroup ().ToString ();  	m_fProperties.opBeforePrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPRE;  	m_fProperties.opAfterPrint.Checked = rptCtrl.getFormulaValue ().getWhenEval () == csRptWhenEval.CSRPTEVALPOST;  	w_aspect = rptCtrl.getLabel ().getAspect ();  	m_fProperties.chkCanGrow.Checked = w_aspect.getCanGrow ();  	m_fProperties.txFormat.Text = w_aspect.getFormat ();  	m_fProperties.txSymbol.Text = w_aspect.getSymbol ();  	m_fProperties.setIsAccounting (w_aspect.getIsAccounting ());  	m_fProperties.chkWordWrap.Checked = w_aspect.getWordWrap ();  	cUtil.listSetListIndexForId (m_fProperties.cbAlign' (int)w_aspect.getAlign ());  	m_fProperties.txBorderColor.Text = w_aspect.getBorderColor ().ToString ();  	m_fProperties.txBorder3D.Text = w_aspect.getBorderColor3d ().ToString ();  	m_fProperties.txBorderShadow.Text = w_aspect.getBorderColor3dShadow ().ToString ();  	m_fProperties.chkBorderRounded.Checked = w_aspect.getBorderRounded ();  	m_fProperties.txBorderWidth.Text = w_aspect.getBorderWidth ().ToString ();  	cUtil.listSetListIndexForId (m_fProperties.cbBorderType' (int)w_aspect.getBorderType ());  	w_font = w_aspect.getFont ();  	m_fProperties.txFont.Text = w_font.getName ();  	m_fProperties.txForeColor.Text = w_font.getForeColor ().ToString ();  	m_fProperties.shForeColor.BackColor = cColor.colorFromRGB (w_font.getForeColor ());  	m_fProperties.txFontSize.Text = w_font.getSize ().ToString ();  	m_fProperties.chkFontBold.Checked = w_font.getBold ();  	m_fProperties.chkFontItalic.Checked = w_font.getItalic ();  	m_fProperties.chkFontUnderline.Checked = w_font.getUnderline ();  	m_fProperties.chkFontStrike.Checked = w_font.getStrike ();  	w_aspect = paintObject.getAspect ();  	m_fProperties.txLeft.Text = w_aspect.getLeft ().ToString ();  	m_fProperties.txTop.Text = w_aspect.getTop ().ToString ();  	m_fProperties.txWidth.Text = w_aspect.getWidth ().ToString ();  	m_fProperties.txHeight.Text = w_aspect.getHeight ().ToString ();  	m_fProperties.txBackColor.Text = w_aspect.getBackColor ().ToString ();  	m_fProperties.shBackColor.BackColor = cColor.colorFromRGB (w_aspect.getBackColor ());  	m_fProperties.chkTransparent.Checked = w_aspect.getTransparent ();  	bMultiSelect = m_vSelectedKeys.Length > 1;  	m_fProperties.resetChangedFlags ();  	m_fProperties.ShowDialog ();  	if (!m_fProperties.getOk ()) {  		return;  	}  	for (int i = 0; i < m_vSelectedKeys.Length; i++) {  		paintObject = m_paint.getPaintObject (m_vSelectedKeys [i]);  		rptCtrl = m_report.getControls ().item (paintObject.getTag ());  		if (!bMultiSelect) {  			if (rptCtrl.getName () != m_fProperties.txName.Text) {  				if (rptCtrl.getName () != "") {  					if (cWindow.ask ("You have changed the name of this control.;;Do you want to update all references to this control in all formulas of this report?"' MessageBoxDefaultButton.Button2)) {  						pUpdateFormulas (rptCtrl.getName ()' m_fProperties.txName.Text);  					}  				}  			}  			rptCtrl.setName (m_fProperties.txName.Text);  		}  		if (m_fProperties.getTextChanged ()) {  			rptCtrl.getLabel ().setText (m_fProperties.txText.Text);  		}  		if (m_fProperties.getTagChanged ()) {  			rptCtrl.setTag (m_fProperties.txTag.Text);  		}  		if (m_fProperties.getSetFormulaHideChanged ()) {  			rptCtrl.setHasFormulaHide (m_fProperties.chkFormulaHide.Checked);  		}  		if (m_fProperties.getSetFormulaValueChanged ()) {  			rptCtrl.setHasFormulaValue (m_fProperties.chkFormulaValue.Checked);  		}  		if (m_fProperties.getFormulaHideChanged ()) {  			rptCtrl.getFormulaHide ().setText (m_fProperties.getFormulaHide ());  		}  		if (m_fProperties.getFormulaValueChanged ()) {  			rptCtrl.getFormulaValue ().setText (m_fProperties.getFormulaValue ());  		}  		if (m_fProperties.getIdxGroupChanged ()) {  			rptCtrl.getFormulaValue ().setIdxGroup (cUtil.valAsInt (m_fProperties.txIdxGroup.Text));  		}  		if (m_fProperties.getWhenEvalChanged ()) {  			rptCtrl.getFormulaValue ().setWhenEval (m_fProperties.opAfterPrint.Checked ? csRptWhenEval.CSRPTEVALPOST : csRptWhenEval.CSRPTEVALPRE);  		}  		if (m_fProperties.getExportColIdxChanged ()) {  			rptCtrl.setExportColIdx (cUtil.valAsInt (m_fProperties.txExportColIdx.Text));  		}  		if (m_fProperties.getIsFreeCtrlChanged ()) {  			rptCtrl.setIsFreeCtrl (m_fProperties.chkIsFreeCtrl.Checked);  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  			cReportField w_field = rptCtrl.getField ();  			if (m_fProperties.getDbFieldChanged ()) {  				w_field.setFieldType (m_fProperties.getFieldType ());  				w_field.setIndex (m_fProperties.getIndex ());  				w_field.setName (m_fProperties.txDbField.Text);  			}  		}  		if (m_fProperties.getPictureChanged ()) {  			rptCtrl.getImage ().setImage (new Bitmap (m_fProperties.picImage.Image));  		}  		if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  			if (rptCtrl.getChart ().getSeries ().count () < 1) {  				rptCtrl.getChart ().getSeries ().add ();  			}  			if (m_fProperties.getChartTypeChanged ()) {  				rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  			}  			if (m_fProperties.getChartFormatTypeChanged ()) {  				rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  			}  			if (m_fProperties.getChartSizeChanged ()) {  				rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  			}  			if (m_fProperties.getChartThicknessChanged ()) {  				rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  			}  			if (m_fProperties.getChartLinesTypeChanged ()) {  				rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  			}  			if (m_fProperties.getChartShowLinesChanged ()) {  				rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  			}  			if (m_fProperties.getChartShowValuesChanged ()) {  				rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  			}  			if (m_fProperties.getTextChanged ()) {  				rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  			}  			if (m_fProperties.getChartTopChanged ()) {  				rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  			}  			if (m_fProperties.getChartSortChanged ()) {  				rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  			}  			if (m_fProperties.getChartGroupValueChanged ()) {  				rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  			}  			if (m_fProperties.getChartFieldGroupChanged ()) {  				rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  				rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  			}  			if (m_fProperties.getChartFieldLbl1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  			}  			if (m_fProperties.getChartFieldVal1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  				rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  			}  			if (m_fProperties.getChartColorSerie1Changed ()) {  				rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  			}  			if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  				if (rptCtrl.getChart ().getSeries ().count () < 2) {  					rptCtrl.getChart ().getSeries ().add ();  				}  			}  			if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  				if (rptCtrl.getChart ().getSeries ().count () > 1) {  					rptCtrl.getChart ().getSeries ().remove (1);  				}  			}  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				if (m_fProperties.getChartFieldLbl2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  				}  				if (m_fProperties.getChartFieldVal2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  					rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  				}  				if (m_fProperties.getChartColorSerie2Changed ()) {  					rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  				}  			}  		}  		if (m_fProperties.getTextChanged ()) {  			paintObject.setText (m_fProperties.txText.Text);  		}  		w_aspect = rptCtrl.getLabel ().getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  			w_aspect.setIsAccounting (m_fProperties.getIsAccounting ());  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getCanGrowChanged ()) {  			w_aspect.setCanGrow (m_fProperties.chkCanGrow.Checked);  		}  		if (m_fProperties.getBorderColorChanged ()) {  			w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  		}  		if (m_fProperties.getBorder3DChanged ()) {  			w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  		}  		if (m_fProperties.getBorder3DShadowChanged ()) {  			w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  		}  		if (m_fProperties.getBorderRoundedChanged ()) {  			w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  		}  		if (m_fProperties.getBorderWidthChanged ()) {  			w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  		if (m_fProperties.getPictureChanged ()) {  			paintObject.setImage (rptCtrl.getImage ().getImage ());  		}  		//  		// TODO: check if we can refactor this now we have a better class hierarchy  		//  		w_aspect = paintObject.getAspect ();  		if (m_fProperties.getLeftChanged ()) {  			w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  		}  		if (m_fProperties.getTopChanged ()) {  			w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  		}  		if (m_fProperties.getWidthChanged ()) {  			w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  		}  		if (m_fProperties.getHeightChanged ()) {  			w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  		}  		if (m_fProperties.getBackColorChanged ()) {  			w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  		}  		if (m_fProperties.getTransparentChanged ()) {  			w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  		}  		if (m_fProperties.getAlignChanged ()) {  			w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  		}  		if (m_fProperties.getFormatChanged ()) {  			w_aspect.setFormat (m_fProperties.txFormat.Text);  		}  		if (m_fProperties.getSymbolChanged ()) {  			w_aspect.setSymbol (m_fProperties.txSymbol.Text);  		}  		if (m_fProperties.getWordWrapChanged ()) {  			w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  		}  		if (m_fProperties.getBorderTypeChanged ()) {  			w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  		}  		if (w_aspect.getBorderType () == csReportBorderType.CSRPTBSNONE) {  			w_aspect.setBorderColor (Color.Black.ToArgb ());  			w_aspect.setBorderWidth (1);  			w_aspect.setBorderRounded (false);  			w_aspect.setBorderType (csReportBorderType.CSRPTBSFIXED);  		}  		else {  			if (m_fProperties.getBorderColorChanged ()) {  				w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  			}  			if (m_fProperties.getBorder3DChanged ()) {  				w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  			}  			if (m_fProperties.getBorder3DShadowChanged ()) {  				w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  			}  			if (m_fProperties.getBorderRoundedChanged ()) {  				w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  			}  			if (m_fProperties.getBorderWidthChanged ()) {  				w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  			}  		}  		w_font = w_aspect.getFont ();  		if (m_fProperties.getFontChanged ()) {  			w_font.setName (m_fProperties.txFont.Text);  		}  		if (m_fProperties.getForeColorChanged ()) {  			w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  		}  		if (m_fProperties.getFontSizeChanged ()) {  			w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  		}  		if (m_fProperties.getBoldChanged ()) {  			w_font.setBold (m_fProperties.chkFontBold.Checked);  		}  		if (m_fProperties.getItalicChanged ()) {  			w_font.setItalic (m_fProperties.chkFontItalic.Checked);  		}  		if (m_fProperties.getUnderlineChanged ()) {  			w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  		}  		if (m_fProperties.getStrikeChanged ()) {  			w_font.setStrike (m_fProperties.chkFontStrike.Checked);  		}  	}  	m_dataHasChanged = true;  }  catch (Exception ex) {  	cError.mngError (ex' "pShowCtrlProperties"' C_MODULE' "");  }  finally {  	m_fProperties.Hide ();  	m_showingProperties = false;  	m_fProperties = null;  	m_paint.endMove (m_picReport.CreateGraphics ());  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getControlType () != csRptControlType.CSRPTCTCHART) {  	m_fProperties.hideTabChart ();  }  else {  	cUtil.listSetListIndexForId (m_fProperties.cbType' (int)rptCtrl.getChart ().getChartType ());  	cUtil.listSetListIndexForId (m_fProperties.cbFormatType' (int)rptCtrl.getChart ().getFormat ());  	cUtil.listSetListIndexForId (m_fProperties.cbChartSize' (int)rptCtrl.getChart ().getDiameter ());  	cUtil.listSetListIndexForId (m_fProperties.cbChartThickness' (int)rptCtrl.getChart ().getThickness ());  	cUtil.listSetListIndexForId (m_fProperties.cbLinesType' (int)rptCtrl.getChart ().getGridLines ());  	m_fProperties.txChartTop.Text = rptCtrl.getChart ().getTop ().ToString ();  	m_fProperties.txDbFieldGroupValue.Text = rptCtrl.getChart ().getGroupFieldName ();  	m_fProperties.setChartGroupIndex (rptCtrl.getChart ().getGroupFieldIndex ());  	m_fProperties.txChartGroupValue.Text = rptCtrl.getChart ().getGroupValue ();  	m_fProperties.chkShowOutlines.Checked = rptCtrl.getChart ().getOutlineBars ();  	m_fProperties.chkShowBarValues.Checked = rptCtrl.getChart ().getShowValues ();  	m_fProperties.chkSort.Checked = rptCtrl.getChart ().getSort ();  	m_fProperties.txText.Text = rptCtrl.getChart ().getChartTitle ();  	if (rptCtrl.getChart ().getSeries ().count () > 0) {  		m_fProperties.txDbFieldLbl1.Text = rptCtrl.getChart ().getSeries ().item (0).getLabelFieldName ();  		m_fProperties.txDbFieldVal1.Text = rptCtrl.getChart ().getSeries ().item (0).getValueFieldName ();  		m_fProperties.setChartIndex (0' rptCtrl.getChart ().getSeries ().item (0).getLabelIndex ());  		m_fProperties.setChartIndex (1' rptCtrl.getChart ().getSeries ().item (0).getValueIndex ());  		cUtil.listSetListIndexForId (m_fProperties.cbColorSerie1' (int)rptCtrl.getChart ().getSeries ().item (0).getColor ());  		if (rptCtrl.getChart ().getSeries ().count () > 1) {  			m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  			m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  			m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  			m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  			cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  		}  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getControlType () != csRptControlType.CSRPTCTCHART) {  	m_fProperties.hideTabChart ();  }  else {  	cUtil.listSetListIndexForId (m_fProperties.cbType' (int)rptCtrl.getChart ().getChartType ());  	cUtil.listSetListIndexForId (m_fProperties.cbFormatType' (int)rptCtrl.getChart ().getFormat ());  	cUtil.listSetListIndexForId (m_fProperties.cbChartSize' (int)rptCtrl.getChart ().getDiameter ());  	cUtil.listSetListIndexForId (m_fProperties.cbChartThickness' (int)rptCtrl.getChart ().getThickness ());  	cUtil.listSetListIndexForId (m_fProperties.cbLinesType' (int)rptCtrl.getChart ().getGridLines ());  	m_fProperties.txChartTop.Text = rptCtrl.getChart ().getTop ().ToString ();  	m_fProperties.txDbFieldGroupValue.Text = rptCtrl.getChart ().getGroupFieldName ();  	m_fProperties.setChartGroupIndex (rptCtrl.getChart ().getGroupFieldIndex ());  	m_fProperties.txChartGroupValue.Text = rptCtrl.getChart ().getGroupValue ();  	m_fProperties.chkShowOutlines.Checked = rptCtrl.getChart ().getOutlineBars ();  	m_fProperties.chkShowBarValues.Checked = rptCtrl.getChart ().getShowValues ();  	m_fProperties.chkSort.Checked = rptCtrl.getChart ().getSort ();  	m_fProperties.txText.Text = rptCtrl.getChart ().getChartTitle ();  	if (rptCtrl.getChart ().getSeries ().count () > 0) {  		m_fProperties.txDbFieldLbl1.Text = rptCtrl.getChart ().getSeries ().item (0).getLabelFieldName ();  		m_fProperties.txDbFieldVal1.Text = rptCtrl.getChart ().getSeries ().item (0).getValueFieldName ();  		m_fProperties.setChartIndex (0' rptCtrl.getChart ().getSeries ().item (0).getLabelIndex ());  		m_fProperties.setChartIndex (1' rptCtrl.getChart ().getSeries ().item (0).getValueIndex ());  		cUtil.listSetListIndexForId (m_fProperties.cbColorSerie1' (int)rptCtrl.getChart ().getSeries ().item (0).getColor ());  		if (rptCtrl.getChart ().getSeries ().count () > 1) {  			m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  			m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  			m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  			m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  			cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  		}  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getChart ().getSeries ().count () > 0) {  	m_fProperties.txDbFieldLbl1.Text = rptCtrl.getChart ().getSeries ().item (0).getLabelFieldName ();  	m_fProperties.txDbFieldVal1.Text = rptCtrl.getChart ().getSeries ().item (0).getValueFieldName ();  	m_fProperties.setChartIndex (0' rptCtrl.getChart ().getSeries ().item (0).getLabelIndex ());  	m_fProperties.setChartIndex (1' rptCtrl.getChart ().getSeries ().item (0).getValueIndex ());  	cUtil.listSetListIndexForId (m_fProperties.cbColorSerie1' (int)rptCtrl.getChart ().getSeries ().item (0).getColor ());  	if (rptCtrl.getChart ().getSeries ().count () > 1) {  		m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  		m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  		m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  		m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  		cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getChart ().getSeries ().count () > 0) {  	m_fProperties.txDbFieldLbl1.Text = rptCtrl.getChart ().getSeries ().item (0).getLabelFieldName ();  	m_fProperties.txDbFieldVal1.Text = rptCtrl.getChart ().getSeries ().item (0).getValueFieldName ();  	m_fProperties.setChartIndex (0' rptCtrl.getChart ().getSeries ().item (0).getLabelIndex ());  	m_fProperties.setChartIndex (1' rptCtrl.getChart ().getSeries ().item (0).getValueIndex ());  	cUtil.listSetListIndexForId (m_fProperties.cbColorSerie1' (int)rptCtrl.getChart ().getSeries ().item (0).getColor ());  	if (rptCtrl.getChart ().getSeries ().count () > 1) {  		m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  		m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  		m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  		m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  		cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getChart ().getSeries ().count () > 1) {  	m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  	m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  	m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  	m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  	cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getChart ().getSeries ().count () > 1) {  	m_fProperties.txDbFieldLbl2.Text = rptCtrl.getChart ().getSeries ().item (1).getLabelFieldName ();  	m_fProperties.txDbFieldVal2.Text = rptCtrl.getChart ().getSeries ().item (1).getValueFieldName ();  	m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  	m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  	cUtil.listSetListIndexForId (m_fProperties.cbColorSerie2' (int)rptCtrl.getChart ().getSeries ().item (1).getColor ());  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: m_fProperties.setChartIndex (2' rptCtrl.getChart ().getSeries ().item (1).getLabelIndex ());  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: m_fProperties.setChartIndex (3' rptCtrl.getChart ().getSeries ().item (1).getValueIndex ());  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: for (int i = 0; i < m_vSelectedKeys.Length; i++) {  	paintObject = m_paint.getPaintObject (m_vSelectedKeys [i]);  	rptCtrl = m_report.getControls ().item (paintObject.getTag ());  	if (!bMultiSelect) {  		if (rptCtrl.getName () != m_fProperties.txName.Text) {  			if (rptCtrl.getName () != "") {  				if (cWindow.ask ("You have changed the name of this control.;;Do you want to update all references to this control in all formulas of this report?"' MessageBoxDefaultButton.Button2)) {  					pUpdateFormulas (rptCtrl.getName ()' m_fProperties.txName.Text);  				}  			}  		}  		rptCtrl.setName (m_fProperties.txName.Text);  	}  	if (m_fProperties.getTextChanged ()) {  		rptCtrl.getLabel ().setText (m_fProperties.txText.Text);  	}  	if (m_fProperties.getTagChanged ()) {  		rptCtrl.setTag (m_fProperties.txTag.Text);  	}  	if (m_fProperties.getSetFormulaHideChanged ()) {  		rptCtrl.setHasFormulaHide (m_fProperties.chkFormulaHide.Checked);  	}  	if (m_fProperties.getSetFormulaValueChanged ()) {  		rptCtrl.setHasFormulaValue (m_fProperties.chkFormulaValue.Checked);  	}  	if (m_fProperties.getFormulaHideChanged ()) {  		rptCtrl.getFormulaHide ().setText (m_fProperties.getFormulaHide ());  	}  	if (m_fProperties.getFormulaValueChanged ()) {  		rptCtrl.getFormulaValue ().setText (m_fProperties.getFormulaValue ());  	}  	if (m_fProperties.getIdxGroupChanged ()) {  		rptCtrl.getFormulaValue ().setIdxGroup (cUtil.valAsInt (m_fProperties.txIdxGroup.Text));  	}  	if (m_fProperties.getWhenEvalChanged ()) {  		rptCtrl.getFormulaValue ().setWhenEval (m_fProperties.opAfterPrint.Checked ? csRptWhenEval.CSRPTEVALPOST : csRptWhenEval.CSRPTEVALPRE);  	}  	if (m_fProperties.getExportColIdxChanged ()) {  		rptCtrl.setExportColIdx (cUtil.valAsInt (m_fProperties.txExportColIdx.Text));  	}  	if (m_fProperties.getIsFreeCtrlChanged ()) {  		rptCtrl.setIsFreeCtrl (m_fProperties.chkIsFreeCtrl.Checked);  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  		cReportField w_field = rptCtrl.getField ();  		if (m_fProperties.getDbFieldChanged ()) {  			w_field.setFieldType (m_fProperties.getFieldType ());  			w_field.setIndex (m_fProperties.getIndex ());  			w_field.setName (m_fProperties.txDbField.Text);  		}  	}  	if (m_fProperties.getPictureChanged ()) {  		rptCtrl.getImage ().setImage (new Bitmap (m_fProperties.picImage.Image));  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  		if (rptCtrl.getChart ().getSeries ().count () < 1) {  			rptCtrl.getChart ().getSeries ().add ();  		}  		if (m_fProperties.getChartTypeChanged ()) {  			rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  		}  		if (m_fProperties.getChartFormatTypeChanged ()) {  			rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  		}  		if (m_fProperties.getChartSizeChanged ()) {  			rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  		}  		if (m_fProperties.getChartThicknessChanged ()) {  			rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  		}  		if (m_fProperties.getChartLinesTypeChanged ()) {  			rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  		}  		if (m_fProperties.getChartShowLinesChanged ()) {  			rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  		}  		if (m_fProperties.getChartShowValuesChanged ()) {  			rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  		}  		if (m_fProperties.getTextChanged ()) {  			rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  		}  		if (m_fProperties.getChartTopChanged ()) {  			rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  		}  		if (m_fProperties.getChartSortChanged ()) {  			rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  		}  		if (m_fProperties.getChartGroupValueChanged ()) {  			rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  		}  		if (m_fProperties.getChartFieldGroupChanged ()) {  			rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  			rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  		}  		if (m_fProperties.getChartFieldLbl1Changed ()) {  			rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  			rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  		}  		if (m_fProperties.getChartFieldVal1Changed ()) {  			rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  			rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  		}  		if (m_fProperties.getChartColorSerie1Changed ()) {  			rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  		}  		if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  			if (rptCtrl.getChart ().getSeries ().count () < 2) {  				rptCtrl.getChart ().getSeries ().add ();  			}  		}  		if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				rptCtrl.getChart ().getSeries ().remove (1);  			}  		}  		if (rptCtrl.getChart ().getSeries ().count () > 1) {  			if (m_fProperties.getChartFieldLbl2Changed ()) {  				rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  				rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  			}  			if (m_fProperties.getChartFieldVal2Changed ()) {  				rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  				rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  			}  			if (m_fProperties.getChartColorSerie2Changed ()) {  				rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  			}  		}  	}  	if (m_fProperties.getTextChanged ()) {  		paintObject.setText (m_fProperties.txText.Text);  	}  	w_aspect = rptCtrl.getLabel ().getAspect ();  	if (m_fProperties.getLeftChanged ()) {  		w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  	}  	if (m_fProperties.getTopChanged ()) {  		w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  	}  	if (m_fProperties.getWidthChanged ()) {  		w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  	}  	if (m_fProperties.getHeightChanged ()) {  		w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  	}  	if (m_fProperties.getBackColorChanged ()) {  		w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  	}  	if (m_fProperties.getTransparentChanged ()) {  		w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  	}  	if (m_fProperties.getAlignChanged ()) {  		w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  	}  	if (m_fProperties.getFormatChanged ()) {  		w_aspect.setFormat (m_fProperties.txFormat.Text);  	}  	if (m_fProperties.getSymbolChanged ()) {  		w_aspect.setSymbol (m_fProperties.txSymbol.Text);  		w_aspect.setIsAccounting (m_fProperties.getIsAccounting ());  	}  	if (m_fProperties.getWordWrapChanged ()) {  		w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  	}  	if (m_fProperties.getCanGrowChanged ()) {  		w_aspect.setCanGrow (m_fProperties.chkCanGrow.Checked);  	}  	if (m_fProperties.getBorderColorChanged ()) {  		w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  	}  	if (m_fProperties.getBorder3DChanged ()) {  		w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  	}  	if (m_fProperties.getBorder3DShadowChanged ()) {  		w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  	}  	if (m_fProperties.getBorderRoundedChanged ()) {  		w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  	}  	if (m_fProperties.getBorderWidthChanged ()) {  		w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  	}  	if (m_fProperties.getBorderTypeChanged ()) {  		w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  	}  	w_font = w_aspect.getFont ();  	if (m_fProperties.getFontChanged ()) {  		w_font.setName (m_fProperties.txFont.Text);  	}  	if (m_fProperties.getForeColorChanged ()) {  		w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  	}  	if (m_fProperties.getFontSizeChanged ()) {  		w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  	}  	if (m_fProperties.getBoldChanged ()) {  		w_font.setBold (m_fProperties.chkFontBold.Checked);  	}  	if (m_fProperties.getItalicChanged ()) {  		w_font.setItalic (m_fProperties.chkFontItalic.Checked);  	}  	if (m_fProperties.getUnderlineChanged ()) {  		w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  	}  	if (m_fProperties.getStrikeChanged ()) {  		w_font.setStrike (m_fProperties.chkFontStrike.Checked);  	}  	if (m_fProperties.getPictureChanged ()) {  		paintObject.setImage (rptCtrl.getImage ().getImage ());  	}  	//  	// TODO: check if we can refactor this now we have a better class hierarchy  	//  	w_aspect = paintObject.getAspect ();  	if (m_fProperties.getLeftChanged ()) {  		w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  	}  	if (m_fProperties.getTopChanged ()) {  		w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  	}  	if (m_fProperties.getWidthChanged ()) {  		w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  	}  	if (m_fProperties.getHeightChanged ()) {  		w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  	}  	if (m_fProperties.getBackColorChanged ()) {  		w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  	}  	if (m_fProperties.getTransparentChanged ()) {  		w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  	}  	if (m_fProperties.getAlignChanged ()) {  		w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  	}  	if (m_fProperties.getFormatChanged ()) {  		w_aspect.setFormat (m_fProperties.txFormat.Text);  	}  	if (m_fProperties.getSymbolChanged ()) {  		w_aspect.setSymbol (m_fProperties.txSymbol.Text);  	}  	if (m_fProperties.getWordWrapChanged ()) {  		w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  	}  	if (m_fProperties.getBorderTypeChanged ()) {  		w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  	}  	if (w_aspect.getBorderType () == csReportBorderType.CSRPTBSNONE) {  		w_aspect.setBorderColor (Color.Black.ToArgb ());  		w_aspect.setBorderWidth (1);  		w_aspect.setBorderRounded (false);  		w_aspect.setBorderType (csReportBorderType.CSRPTBSFIXED);  	}  	else {  		if (m_fProperties.getBorderColorChanged ()) {  			w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  		}  		if (m_fProperties.getBorder3DChanged ()) {  			w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  		}  		if (m_fProperties.getBorder3DShadowChanged ()) {  			w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  		}  		if (m_fProperties.getBorderRoundedChanged ()) {  			w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  		}  		if (m_fProperties.getBorderWidthChanged ()) {  			w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  		}  	}  	w_font = w_aspect.getFont ();  	if (m_fProperties.getFontChanged ()) {  		w_font.setName (m_fProperties.txFont.Text);  	}  	if (m_fProperties.getForeColorChanged ()) {  		w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  	}  	if (m_fProperties.getFontSizeChanged ()) {  		w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  	}  	if (m_fProperties.getBoldChanged ()) {  		w_font.setBold (m_fProperties.chkFontBold.Checked);  	}  	if (m_fProperties.getItalicChanged ()) {  		w_font.setItalic (m_fProperties.chkFontItalic.Checked);  	}  	if (m_fProperties.getUnderlineChanged ()) {  		w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  	}  	if (m_fProperties.getStrikeChanged ()) {  		w_font.setStrike (m_fProperties.chkFontStrike.Checked);  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: for (int i = 0; i < m_vSelectedKeys.Length; i++) {  	paintObject = m_paint.getPaintObject (m_vSelectedKeys [i]);  	rptCtrl = m_report.getControls ().item (paintObject.getTag ());  	if (!bMultiSelect) {  		if (rptCtrl.getName () != m_fProperties.txName.Text) {  			if (rptCtrl.getName () != "") {  				if (cWindow.ask ("You have changed the name of this control.;;Do you want to update all references to this control in all formulas of this report?"' MessageBoxDefaultButton.Button2)) {  					pUpdateFormulas (rptCtrl.getName ()' m_fProperties.txName.Text);  				}  			}  		}  		rptCtrl.setName (m_fProperties.txName.Text);  	}  	if (m_fProperties.getTextChanged ()) {  		rptCtrl.getLabel ().setText (m_fProperties.txText.Text);  	}  	if (m_fProperties.getTagChanged ()) {  		rptCtrl.setTag (m_fProperties.txTag.Text);  	}  	if (m_fProperties.getSetFormulaHideChanged ()) {  		rptCtrl.setHasFormulaHide (m_fProperties.chkFormulaHide.Checked);  	}  	if (m_fProperties.getSetFormulaValueChanged ()) {  		rptCtrl.setHasFormulaValue (m_fProperties.chkFormulaValue.Checked);  	}  	if (m_fProperties.getFormulaHideChanged ()) {  		rptCtrl.getFormulaHide ().setText (m_fProperties.getFormulaHide ());  	}  	if (m_fProperties.getFormulaValueChanged ()) {  		rptCtrl.getFormulaValue ().setText (m_fProperties.getFormulaValue ());  	}  	if (m_fProperties.getIdxGroupChanged ()) {  		rptCtrl.getFormulaValue ().setIdxGroup (cUtil.valAsInt (m_fProperties.txIdxGroup.Text));  	}  	if (m_fProperties.getWhenEvalChanged ()) {  		rptCtrl.getFormulaValue ().setWhenEval (m_fProperties.opAfterPrint.Checked ? csRptWhenEval.CSRPTEVALPOST : csRptWhenEval.CSRPTEVALPRE);  	}  	if (m_fProperties.getExportColIdxChanged ()) {  		rptCtrl.setExportColIdx (cUtil.valAsInt (m_fProperties.txExportColIdx.Text));  	}  	if (m_fProperties.getIsFreeCtrlChanged ()) {  		rptCtrl.setIsFreeCtrl (m_fProperties.chkIsFreeCtrl.Checked);  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  		cReportField w_field = rptCtrl.getField ();  		if (m_fProperties.getDbFieldChanged ()) {  			w_field.setFieldType (m_fProperties.getFieldType ());  			w_field.setIndex (m_fProperties.getIndex ());  			w_field.setName (m_fProperties.txDbField.Text);  		}  	}  	if (m_fProperties.getPictureChanged ()) {  		rptCtrl.getImage ().setImage (new Bitmap (m_fProperties.picImage.Image));  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  		if (rptCtrl.getChart ().getSeries ().count () < 1) {  			rptCtrl.getChart ().getSeries ().add ();  		}  		if (m_fProperties.getChartTypeChanged ()) {  			rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  		}  		if (m_fProperties.getChartFormatTypeChanged ()) {  			rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  		}  		if (m_fProperties.getChartSizeChanged ()) {  			rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  		}  		if (m_fProperties.getChartThicknessChanged ()) {  			rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  		}  		if (m_fProperties.getChartLinesTypeChanged ()) {  			rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  		}  		if (m_fProperties.getChartShowLinesChanged ()) {  			rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  		}  		if (m_fProperties.getChartShowValuesChanged ()) {  			rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  		}  		if (m_fProperties.getTextChanged ()) {  			rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  		}  		if (m_fProperties.getChartTopChanged ()) {  			rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  		}  		if (m_fProperties.getChartSortChanged ()) {  			rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  		}  		if (m_fProperties.getChartGroupValueChanged ()) {  			rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  		}  		if (m_fProperties.getChartFieldGroupChanged ()) {  			rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  			rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  		}  		if (m_fProperties.getChartFieldLbl1Changed ()) {  			rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  			rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  		}  		if (m_fProperties.getChartFieldVal1Changed ()) {  			rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  			rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  		}  		if (m_fProperties.getChartColorSerie1Changed ()) {  			rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  		}  		if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  			if (rptCtrl.getChart ().getSeries ().count () < 2) {  				rptCtrl.getChart ().getSeries ().add ();  			}  		}  		if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				rptCtrl.getChart ().getSeries ().remove (1);  			}  		}  		if (rptCtrl.getChart ().getSeries ().count () > 1) {  			if (m_fProperties.getChartFieldLbl2Changed ()) {  				rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  				rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  			}  			if (m_fProperties.getChartFieldVal2Changed ()) {  				rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  				rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  			}  			if (m_fProperties.getChartColorSerie2Changed ()) {  				rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  			}  		}  	}  	if (m_fProperties.getTextChanged ()) {  		paintObject.setText (m_fProperties.txText.Text);  	}  	w_aspect = rptCtrl.getLabel ().getAspect ();  	if (m_fProperties.getLeftChanged ()) {  		w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  	}  	if (m_fProperties.getTopChanged ()) {  		w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  	}  	if (m_fProperties.getWidthChanged ()) {  		w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  	}  	if (m_fProperties.getHeightChanged ()) {  		w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  	}  	if (m_fProperties.getBackColorChanged ()) {  		w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  	}  	if (m_fProperties.getTransparentChanged ()) {  		w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  	}  	if (m_fProperties.getAlignChanged ()) {  		w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  	}  	if (m_fProperties.getFormatChanged ()) {  		w_aspect.setFormat (m_fProperties.txFormat.Text);  	}  	if (m_fProperties.getSymbolChanged ()) {  		w_aspect.setSymbol (m_fProperties.txSymbol.Text);  		w_aspect.setIsAccounting (m_fProperties.getIsAccounting ());  	}  	if (m_fProperties.getWordWrapChanged ()) {  		w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  	}  	if (m_fProperties.getCanGrowChanged ()) {  		w_aspect.setCanGrow (m_fProperties.chkCanGrow.Checked);  	}  	if (m_fProperties.getBorderColorChanged ()) {  		w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  	}  	if (m_fProperties.getBorder3DChanged ()) {  		w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  	}  	if (m_fProperties.getBorder3DShadowChanged ()) {  		w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  	}  	if (m_fProperties.getBorderRoundedChanged ()) {  		w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  	}  	if (m_fProperties.getBorderWidthChanged ()) {  		w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  	}  	if (m_fProperties.getBorderTypeChanged ()) {  		w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  	}  	w_font = w_aspect.getFont ();  	if (m_fProperties.getFontChanged ()) {  		w_font.setName (m_fProperties.txFont.Text);  	}  	if (m_fProperties.getForeColorChanged ()) {  		w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  	}  	if (m_fProperties.getFontSizeChanged ()) {  		w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  	}  	if (m_fProperties.getBoldChanged ()) {  		w_font.setBold (m_fProperties.chkFontBold.Checked);  	}  	if (m_fProperties.getItalicChanged ()) {  		w_font.setItalic (m_fProperties.chkFontItalic.Checked);  	}  	if (m_fProperties.getUnderlineChanged ()) {  		w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  	}  	if (m_fProperties.getStrikeChanged ()) {  		w_font.setStrike (m_fProperties.chkFontStrike.Checked);  	}  	if (m_fProperties.getPictureChanged ()) {  		paintObject.setImage (rptCtrl.getImage ().getImage ());  	}  	//  	// TODO: check if we can refactor this now we have a better class hierarchy  	//  	w_aspect = paintObject.getAspect ();  	if (m_fProperties.getLeftChanged ()) {  		w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  	}  	if (m_fProperties.getTopChanged ()) {  		w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  	}  	if (m_fProperties.getWidthChanged ()) {  		w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  	}  	if (m_fProperties.getHeightChanged ()) {  		w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  	}  	if (m_fProperties.getBackColorChanged ()) {  		w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  	}  	if (m_fProperties.getTransparentChanged ()) {  		w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  	}  	if (m_fProperties.getAlignChanged ()) {  		w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  	}  	if (m_fProperties.getFormatChanged ()) {  		w_aspect.setFormat (m_fProperties.txFormat.Text);  	}  	if (m_fProperties.getSymbolChanged ()) {  		w_aspect.setSymbol (m_fProperties.txSymbol.Text);  	}  	if (m_fProperties.getWordWrapChanged ()) {  		w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  	}  	if (m_fProperties.getBorderTypeChanged ()) {  		w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  	}  	if (w_aspect.getBorderType () == csReportBorderType.CSRPTBSNONE) {  		w_aspect.setBorderColor (Color.Black.ToArgb ());  		w_aspect.setBorderWidth (1);  		w_aspect.setBorderRounded (false);  		w_aspect.setBorderType (csReportBorderType.CSRPTBSFIXED);  	}  	else {  		if (m_fProperties.getBorderColorChanged ()) {  			w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  		}  		if (m_fProperties.getBorder3DChanged ()) {  			w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  		}  		if (m_fProperties.getBorder3DShadowChanged ()) {  			w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  		}  		if (m_fProperties.getBorderRoundedChanged ()) {  			w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  		}  		if (m_fProperties.getBorderWidthChanged ()) {  			w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  		}  	}  	w_font = w_aspect.getFont ();  	if (m_fProperties.getFontChanged ()) {  		w_font.setName (m_fProperties.txFont.Text);  	}  	if (m_fProperties.getForeColorChanged ()) {  		w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  	}  	if (m_fProperties.getFontSizeChanged ()) {  		w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  	}  	if (m_fProperties.getBoldChanged ()) {  		w_font.setBold (m_fProperties.chkFontBold.Checked);  	}  	if (m_fProperties.getItalicChanged ()) {  		w_font.setItalic (m_fProperties.chkFontItalic.Checked);  	}  	if (m_fProperties.getUnderlineChanged ()) {  		w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  	}  	if (m_fProperties.getStrikeChanged ()) {  		w_font.setStrike (m_fProperties.chkFontStrike.Checked);  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: for (int i = 0; i < m_vSelectedKeys.Length; i++) {  	paintObject = m_paint.getPaintObject (m_vSelectedKeys [i]);  	rptCtrl = m_report.getControls ().item (paintObject.getTag ());  	if (!bMultiSelect) {  		if (rptCtrl.getName () != m_fProperties.txName.Text) {  			if (rptCtrl.getName () != "") {  				if (cWindow.ask ("You have changed the name of this control.;;Do you want to update all references to this control in all formulas of this report?"' MessageBoxDefaultButton.Button2)) {  					pUpdateFormulas (rptCtrl.getName ()' m_fProperties.txName.Text);  				}  			}  		}  		rptCtrl.setName (m_fProperties.txName.Text);  	}  	if (m_fProperties.getTextChanged ()) {  		rptCtrl.getLabel ().setText (m_fProperties.txText.Text);  	}  	if (m_fProperties.getTagChanged ()) {  		rptCtrl.setTag (m_fProperties.txTag.Text);  	}  	if (m_fProperties.getSetFormulaHideChanged ()) {  		rptCtrl.setHasFormulaHide (m_fProperties.chkFormulaHide.Checked);  	}  	if (m_fProperties.getSetFormulaValueChanged ()) {  		rptCtrl.setHasFormulaValue (m_fProperties.chkFormulaValue.Checked);  	}  	if (m_fProperties.getFormulaHideChanged ()) {  		rptCtrl.getFormulaHide ().setText (m_fProperties.getFormulaHide ());  	}  	if (m_fProperties.getFormulaValueChanged ()) {  		rptCtrl.getFormulaValue ().setText (m_fProperties.getFormulaValue ());  	}  	if (m_fProperties.getIdxGroupChanged ()) {  		rptCtrl.getFormulaValue ().setIdxGroup (cUtil.valAsInt (m_fProperties.txIdxGroup.Text));  	}  	if (m_fProperties.getWhenEvalChanged ()) {  		rptCtrl.getFormulaValue ().setWhenEval (m_fProperties.opAfterPrint.Checked ? csRptWhenEval.CSRPTEVALPOST : csRptWhenEval.CSRPTEVALPRE);  	}  	if (m_fProperties.getExportColIdxChanged ()) {  		rptCtrl.setExportColIdx (cUtil.valAsInt (m_fProperties.txExportColIdx.Text));  	}  	if (m_fProperties.getIsFreeCtrlChanged ()) {  		rptCtrl.setIsFreeCtrl (m_fProperties.chkIsFreeCtrl.Checked);  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTFIELD || rptCtrl.getControlType () == csRptControlType.CSRPTCTDBIMAGE) {  		cReportField w_field = rptCtrl.getField ();  		if (m_fProperties.getDbFieldChanged ()) {  			w_field.setFieldType (m_fProperties.getFieldType ());  			w_field.setIndex (m_fProperties.getIndex ());  			w_field.setName (m_fProperties.txDbField.Text);  		}  	}  	if (m_fProperties.getPictureChanged ()) {  		rptCtrl.getImage ().setImage (new Bitmap (m_fProperties.picImage.Image));  	}  	if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  		if (rptCtrl.getChart ().getSeries ().count () < 1) {  			rptCtrl.getChart ().getSeries ().add ();  		}  		if (m_fProperties.getChartTypeChanged ()) {  			rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  		}  		if (m_fProperties.getChartFormatTypeChanged ()) {  			rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  		}  		if (m_fProperties.getChartSizeChanged ()) {  			rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  		}  		if (m_fProperties.getChartThicknessChanged ()) {  			rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  		}  		if (m_fProperties.getChartLinesTypeChanged ()) {  			rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  		}  		if (m_fProperties.getChartShowLinesChanged ()) {  			rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  		}  		if (m_fProperties.getChartShowValuesChanged ()) {  			rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  		}  		if (m_fProperties.getTextChanged ()) {  			rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  		}  		if (m_fProperties.getChartTopChanged ()) {  			rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  		}  		if (m_fProperties.getChartSortChanged ()) {  			rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  		}  		if (m_fProperties.getChartGroupValueChanged ()) {  			rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  		}  		if (m_fProperties.getChartFieldGroupChanged ()) {  			rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  			rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  		}  		if (m_fProperties.getChartFieldLbl1Changed ()) {  			rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  			rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  		}  		if (m_fProperties.getChartFieldVal1Changed ()) {  			rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  			rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  		}  		if (m_fProperties.getChartColorSerie1Changed ()) {  			rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  		}  		if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  			if (rptCtrl.getChart ().getSeries ().count () < 2) {  				rptCtrl.getChart ().getSeries ().add ();  			}  		}  		if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  			if (rptCtrl.getChart ().getSeries ().count () > 1) {  				rptCtrl.getChart ().getSeries ().remove (1);  			}  		}  		if (rptCtrl.getChart ().getSeries ().count () > 1) {  			if (m_fProperties.getChartFieldLbl2Changed ()) {  				rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  				rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  			}  			if (m_fProperties.getChartFieldVal2Changed ()) {  				rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  				rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  			}  			if (m_fProperties.getChartColorSerie2Changed ()) {  				rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  			}  		}  	}  	if (m_fProperties.getTextChanged ()) {  		paintObject.setText (m_fProperties.txText.Text);  	}  	w_aspect = rptCtrl.getLabel ().getAspect ();  	if (m_fProperties.getLeftChanged ()) {  		w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  	}  	if (m_fProperties.getTopChanged ()) {  		w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  	}  	if (m_fProperties.getWidthChanged ()) {  		w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  	}  	if (m_fProperties.getHeightChanged ()) {  		w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  	}  	if (m_fProperties.getBackColorChanged ()) {  		w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  	}  	if (m_fProperties.getTransparentChanged ()) {  		w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  	}  	if (m_fProperties.getAlignChanged ()) {  		w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  	}  	if (m_fProperties.getFormatChanged ()) {  		w_aspect.setFormat (m_fProperties.txFormat.Text);  	}  	if (m_fProperties.getSymbolChanged ()) {  		w_aspect.setSymbol (m_fProperties.txSymbol.Text);  		w_aspect.setIsAccounting (m_fProperties.getIsAccounting ());  	}  	if (m_fProperties.getWordWrapChanged ()) {  		w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  	}  	if (m_fProperties.getCanGrowChanged ()) {  		w_aspect.setCanGrow (m_fProperties.chkCanGrow.Checked);  	}  	if (m_fProperties.getBorderColorChanged ()) {  		w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  	}  	if (m_fProperties.getBorder3DChanged ()) {  		w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  	}  	if (m_fProperties.getBorder3DShadowChanged ()) {  		w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  	}  	if (m_fProperties.getBorderRoundedChanged ()) {  		w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  	}  	if (m_fProperties.getBorderWidthChanged ()) {  		w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  	}  	if (m_fProperties.getBorderTypeChanged ()) {  		w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  	}  	w_font = w_aspect.getFont ();  	if (m_fProperties.getFontChanged ()) {  		w_font.setName (m_fProperties.txFont.Text);  	}  	if (m_fProperties.getForeColorChanged ()) {  		w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  	}  	if (m_fProperties.getFontSizeChanged ()) {  		w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  	}  	if (m_fProperties.getBoldChanged ()) {  		w_font.setBold (m_fProperties.chkFontBold.Checked);  	}  	if (m_fProperties.getItalicChanged ()) {  		w_font.setItalic (m_fProperties.chkFontItalic.Checked);  	}  	if (m_fProperties.getUnderlineChanged ()) {  		w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  	}  	if (m_fProperties.getStrikeChanged ()) {  		w_font.setStrike (m_fProperties.chkFontStrike.Checked);  	}  	if (m_fProperties.getPictureChanged ()) {  		paintObject.setImage (rptCtrl.getImage ().getImage ());  	}  	//  	// TODO: check if we can refactor this now we have a better class hierarchy  	//  	w_aspect = paintObject.getAspect ();  	if (m_fProperties.getLeftChanged ()) {  		w_aspect.setLeft ((float)cUtil.val (m_fProperties.txLeft.Text));  	}  	if (m_fProperties.getTopChanged ()) {  		w_aspect.setTop ((float)cUtil.val (m_fProperties.txTop.Text));  	}  	if (m_fProperties.getWidthChanged ()) {  		w_aspect.setWidth ((float)cUtil.val (m_fProperties.txWidth.Text));  	}  	if (m_fProperties.getHeightChanged ()) {  		w_aspect.setHeight ((float)cUtil.val (m_fProperties.txHeight.Text));  	}  	if (m_fProperties.getBackColorChanged ()) {  		w_aspect.setBackColor (cUtil.valAsInt (m_fProperties.txBackColor.Text));  	}  	if (m_fProperties.getTransparentChanged ()) {  		w_aspect.setTransparent (m_fProperties.chkTransparent.Checked);  	}  	if (m_fProperties.getAlignChanged ()) {  		w_aspect.setAlign ((CSReportGlobals.HorizontalAlignment)cUtil.listID (m_fProperties.cbAlign));  	}  	if (m_fProperties.getFormatChanged ()) {  		w_aspect.setFormat (m_fProperties.txFormat.Text);  	}  	if (m_fProperties.getSymbolChanged ()) {  		w_aspect.setSymbol (m_fProperties.txSymbol.Text);  	}  	if (m_fProperties.getWordWrapChanged ()) {  		w_aspect.setWordWrap (m_fProperties.chkWordWrap.Checked);  	}  	if (m_fProperties.getBorderTypeChanged ()) {  		w_aspect.setBorderType ((csReportBorderType)cUtil.listID (m_fProperties.cbBorderType));  	}  	if (w_aspect.getBorderType () == csReportBorderType.CSRPTBSNONE) {  		w_aspect.setBorderColor (Color.Black.ToArgb ());  		w_aspect.setBorderWidth (1);  		w_aspect.setBorderRounded (false);  		w_aspect.setBorderType (csReportBorderType.CSRPTBSFIXED);  	}  	else {  		if (m_fProperties.getBorderColorChanged ()) {  			w_aspect.setBorderColor (cUtil.valAsInt (m_fProperties.txBorderColor.Text));  		}  		if (m_fProperties.getBorder3DChanged ()) {  			w_aspect.setBorderColor3d (cUtil.valAsInt (m_fProperties.txBorder3D.Text));  		}  		if (m_fProperties.getBorder3DShadowChanged ()) {  			w_aspect.setBorderColor3dShadow (cUtil.valAsInt (m_fProperties.txBorderShadow.Text));  		}  		if (m_fProperties.getBorderRoundedChanged ()) {  			w_aspect.setBorderRounded (m_fProperties.chkBorderRounded.Checked);  		}  		if (m_fProperties.getBorderWidthChanged ()) {  			w_aspect.setBorderWidth (cUtil.valAsInt (m_fProperties.txBorderWidth.Text));  		}  	}  	w_font = w_aspect.getFont ();  	if (m_fProperties.getFontChanged ()) {  		w_font.setName (m_fProperties.txFont.Text);  	}  	if (m_fProperties.getForeColorChanged ()) {  		w_font.setForeColor (cUtil.valAsInt (m_fProperties.txForeColor.Text));  	}  	if (m_fProperties.getFontSizeChanged ()) {  		w_font.setSize ((float)cUtil.val (m_fProperties.txFontSize.Text));  	}  	if (m_fProperties.getBoldChanged ()) {  		w_font.setBold (m_fProperties.chkFontBold.Checked);  	}  	if (m_fProperties.getItalicChanged ()) {  		w_font.setItalic (m_fProperties.chkFontItalic.Checked);  	}  	if (m_fProperties.getUnderlineChanged ()) {  		w_font.setUnderline (m_fProperties.chkFontUnderline.Checked);  	}  	if (m_fProperties.getStrikeChanged ()) {  		w_font.setStrike (m_fProperties.chkFontStrike.Checked);  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  	if (rptCtrl.getChart ().getSeries ().count () < 1) {  		rptCtrl.getChart ().getSeries ().add ();  	}  	if (m_fProperties.getChartTypeChanged ()) {  		rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  	}  	if (m_fProperties.getChartFormatTypeChanged ()) {  		rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  	}  	if (m_fProperties.getChartSizeChanged ()) {  		rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  	}  	if (m_fProperties.getChartThicknessChanged ()) {  		rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  	}  	if (m_fProperties.getChartLinesTypeChanged ()) {  		rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  	}  	if (m_fProperties.getChartShowLinesChanged ()) {  		rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  	}  	if (m_fProperties.getChartShowValuesChanged ()) {  		rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  	}  	if (m_fProperties.getTextChanged ()) {  		rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  	}  	if (m_fProperties.getChartTopChanged ()) {  		rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  	}  	if (m_fProperties.getChartSortChanged ()) {  		rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  	}  	if (m_fProperties.getChartGroupValueChanged ()) {  		rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  	}  	if (m_fProperties.getChartFieldGroupChanged ()) {  		rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  		rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  	}  	if (m_fProperties.getChartFieldLbl1Changed ()) {  		rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  		rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  	}  	if (m_fProperties.getChartFieldVal1Changed ()) {  		rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  		rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  	}  	if (m_fProperties.getChartColorSerie1Changed ()) {  		rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  	}  	if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  		if (rptCtrl.getChart ().getSeries ().count () < 2) {  			rptCtrl.getChart ().getSeries ().add ();  		}  	}  	if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  		if (rptCtrl.getChart ().getSeries ().count () > 1) {  			rptCtrl.getChart ().getSeries ().remove (1);  		}  	}  	if (rptCtrl.getChart ().getSeries ().count () > 1) {  		if (m_fProperties.getChartFieldLbl2Changed ()) {  			rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  			rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  		}  		if (m_fProperties.getChartFieldVal2Changed ()) {  			rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  			rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  		}  		if (m_fProperties.getChartColorSerie2Changed ()) {  			rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  		}  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  	if (rptCtrl.getChart ().getSeries ().count () < 1) {  		rptCtrl.getChart ().getSeries ().add ();  	}  	if (m_fProperties.getChartTypeChanged ()) {  		rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  	}  	if (m_fProperties.getChartFormatTypeChanged ()) {  		rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  	}  	if (m_fProperties.getChartSizeChanged ()) {  		rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  	}  	if (m_fProperties.getChartThicknessChanged ()) {  		rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  	}  	if (m_fProperties.getChartLinesTypeChanged ()) {  		rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  	}  	if (m_fProperties.getChartShowLinesChanged ()) {  		rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  	}  	if (m_fProperties.getChartShowValuesChanged ()) {  		rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  	}  	if (m_fProperties.getTextChanged ()) {  		rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  	}  	if (m_fProperties.getChartTopChanged ()) {  		rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  	}  	if (m_fProperties.getChartSortChanged ()) {  		rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  	}  	if (m_fProperties.getChartGroupValueChanged ()) {  		rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  	}  	if (m_fProperties.getChartFieldGroupChanged ()) {  		rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  		rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  	}  	if (m_fProperties.getChartFieldLbl1Changed ()) {  		rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  		rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  	}  	if (m_fProperties.getChartFieldVal1Changed ()) {  		rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  		rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  	}  	if (m_fProperties.getChartColorSerie1Changed ()) {  		rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  	}  	if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  		if (rptCtrl.getChart ().getSeries ().count () < 2) {  			rptCtrl.getChart ().getSeries ().add ();  		}  	}  	if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  		if (rptCtrl.getChart ().getSeries ().count () > 1) {  			rptCtrl.getChart ().getSeries ().remove (1);  		}  	}  	if (rptCtrl.getChart ().getSeries ().count () > 1) {  		if (m_fProperties.getChartFieldLbl2Changed ()) {  			rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  			rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  		}  		if (m_fProperties.getChartFieldVal2Changed ()) {  			rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  			rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  		}  		if (m_fProperties.getChartColorSerie2Changed ()) {  			rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  		}  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getControlType () == csRptControlType.CSRPTCTCHART) {  	if (rptCtrl.getChart ().getSeries ().count () < 1) {  		rptCtrl.getChart ().getSeries ().add ();  	}  	if (m_fProperties.getChartTypeChanged ()) {  		rptCtrl.getChart ().setChartType ((csRptChartType)cUtil.listID (m_fProperties.cbType));  	}  	if (m_fProperties.getChartFormatTypeChanged ()) {  		rptCtrl.getChart ().setFormat ((csRptChartFormat)cUtil.listID (m_fProperties.cbFormatType));  	}  	if (m_fProperties.getChartSizeChanged ()) {  		rptCtrl.getChart ().setDiameter ((csRptChartPieDiameter)cUtil.listID (m_fProperties.cbChartSize));  	}  	if (m_fProperties.getChartThicknessChanged ()) {  		rptCtrl.getChart ().setThickness ((csRptChartPieThickness)cUtil.listID (m_fProperties.cbChartThickness));  	}  	if (m_fProperties.getChartLinesTypeChanged ()) {  		rptCtrl.getChart ().setGridLines ((csRptChartLineStyle)cUtil.listID (m_fProperties.cbLinesType));  	}  	if (m_fProperties.getChartShowLinesChanged ()) {  		rptCtrl.getChart ().setOutlineBars (m_fProperties.chkShowOutlines.Checked);  	}  	if (m_fProperties.getChartShowValuesChanged ()) {  		rptCtrl.getChart ().setShowValues (m_fProperties.chkShowBarValues.Checked);  	}  	if (m_fProperties.getTextChanged ()) {  		rptCtrl.getChart ().setChartTitle (m_fProperties.txText.Text);  	}  	if (m_fProperties.getChartTopChanged ()) {  		rptCtrl.getChart ().setTop (cUtil.valAsInt (m_fProperties.txChartTop.Text));  	}  	if (m_fProperties.getChartSortChanged ()) {  		rptCtrl.getChart ().setSort (m_fProperties.chkSort.Checked);  	}  	if (m_fProperties.getChartGroupValueChanged ()) {  		rptCtrl.getChart ().setGroupValue (m_fProperties.txChartGroupValue.Text);  	}  	if (m_fProperties.getChartFieldGroupChanged ()) {  		rptCtrl.getChart ().setGroupFieldName (m_fProperties.txDbFieldGroupValue.Text);  		rptCtrl.getChart ().setGroupFieldIndex (m_fProperties.getChartGroupIndex ());  	}  	if (m_fProperties.getChartFieldLbl1Changed ()) {  		rptCtrl.getChart ().getSeries ().item (0).setLabelFieldName (m_fProperties.txDbFieldLbl1.Text);  		rptCtrl.getChart ().getSeries ().item (0).setLabelIndex (m_fProperties.getChartIndex (0));  	}  	if (m_fProperties.getChartFieldVal1Changed ()) {  		rptCtrl.getChart ().getSeries ().item (0).setValueFieldName (m_fProperties.txDbFieldVal1.Text);  		rptCtrl.getChart ().getSeries ().item (0).setValueIndex (m_fProperties.getChartIndex (1));  	}  	if (m_fProperties.getChartColorSerie1Changed ()) {  		rptCtrl.getChart ().getSeries ().item (0).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie1));  	}  	if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  		if (rptCtrl.getChart ().getSeries ().count () < 2) {  			rptCtrl.getChart ().getSeries ().add ();  		}  	}  	if (m_fProperties.txDbFieldLbl2.Text == "" || m_fProperties.txDbFieldVal2.Text == "") {  		if (rptCtrl.getChart ().getSeries ().count () > 1) {  			rptCtrl.getChart ().getSeries ().remove (1);  		}  	}  	if (rptCtrl.getChart ().getSeries ().count () > 1) {  		if (m_fProperties.getChartFieldLbl2Changed ()) {  			rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  			rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  		}  		if (m_fProperties.getChartFieldVal2Changed ()) {  			rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  			rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  		}  		if (m_fProperties.getChartColorSerie2Changed ()) {  			rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  		}  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (m_fProperties.getChartFieldLbl2Changed () || m_fProperties.getChartFieldVal2Changed ()) {  	if (rptCtrl.getChart ().getSeries ().count () < 2) {  		rptCtrl.getChart ().getSeries ().add ();  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getChart ().getSeries ().count () < 2) {  	rptCtrl.getChart ().getSeries ().add ();  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getChart ().getSeries ().count () > 1) {  	if (m_fProperties.getChartFieldLbl2Changed ()) {  		rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  		rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  	}  	if (m_fProperties.getChartFieldVal2Changed ()) {  		rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  		rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  	}  	if (m_fProperties.getChartColorSerie2Changed ()) {  		rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (rptCtrl.getChart ().getSeries ().count () > 1) {  	if (m_fProperties.getChartFieldLbl2Changed ()) {  		rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  		rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  	}  	if (m_fProperties.getChartFieldVal2Changed ()) {  		rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  		rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  	}  	if (m_fProperties.getChartColorSerie2Changed ()) {  		rptCtrl.getChart ().getSeries ().item (1).setColor ((csColors)cUtil.listID (m_fProperties.cbColorSerie2));  	}  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (m_fProperties.getChartFieldLbl2Changed ()) {  	rptCtrl.getChart ().getSeries ().item (1).setLabelFieldName (m_fProperties.txDbFieldLbl2.Text);  	rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: rptCtrl.getChart ().getSeries ().item (1).setLabelIndex (m_fProperties.getChartIndex (2));  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: if (m_fProperties.getChartFieldVal2Changed ()) {  	rptCtrl.getChart ().getSeries ().item (1).setValueFieldName (m_fProperties.txDbFieldVal2.Text);  	rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The following statement contains a magic number: rptCtrl.getChart ().getSeries ().item (1).setValueIndex (m_fProperties.getChartIndex (3));  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,getLineRegionForControl,The following statement contains a magic number: if (isFreeCtrl) {  	y = w_aspect.getTop () + w_aspect.getOffset ();  }  else {  	y = w_aspect.getTop () + w_aspect.getHeight () / 2 + w_aspect.getOffset ();  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,getLineRegionForControl,The following statement contains a magic number: y = w_aspect.getTop () + w_aspect.getHeight () / 2 + w_aspect.getOffset ();  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,getRegionForControl,The following statement contains a magic number: if (isFreeCtrl) {  	y = w_aspect.getTop ();  }  else {  	y = w_aspect.getTop () + w_aspect.getHeight () / 2;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,getRegionForControl,The following statement contains a magic number: y = w_aspect.getTop () + w_aspect.getHeight () / 2;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reportProgress,The following statement contains a magic number: if (recordCount > 0 && currRecord > 0) {  	percent = Convert.ToDouble (currRecord) / recordCount;  	var value = Convert.ToInt32 (percent * 100);  	if (value > 100)  		value = 100;  	m_fProgress.prgBar.Value = value;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reportProgress,The following statement contains a magic number: if (recordCount > 0 && currRecord > 0) {  	percent = Convert.ToDouble (currRecord) / recordCount;  	var value = Convert.ToInt32 (percent * 100);  	if (value > 100)  		value = 100;  	m_fProgress.prgBar.Value = value;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reportProgress,The following statement contains a magic number: if (recordCount > 0 && currRecord > 0) {  	percent = Convert.ToDouble (currRecord) / recordCount;  	var value = Convert.ToInt32 (percent * 100);  	if (value > 100)  		value = 100;  	m_fProgress.prgBar.Value = value;  }  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reportProgress,The following statement contains a magic number: if (value > 100)  	value = 100;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reportProgress,The following statement contains a magic number: if (value > 100)  	value = 100;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reportProgress,The following statement contains a magic number: value = 100;  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSizePics,The following statement contains a magic number: m_picRule.Height = (int)(realPageHeight + C_TOPBODY * 2);  
Magic Number,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,form_Load,The following statement contains a magic number: m_keyboardMoveStep = 50;  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: for (int i = 0; i < report.getControls ().count (); i++) {  	var ctrl = report.getControls ().item (i);  	var ctrlName = ctrl.getName ();  	var ctrlInfo = "";  	var ctrlField = "";  	switch (ctrl.getControlType ()) {  	case csRptControlType.CSRPTCTFIELD:  		ctrlField = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTDBIMAGE:  		ctrlInfo = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTIMAGE:  		ctrlInfo = " (Image)";  		break;  	case csRptControlType.CSRPTCTLABEL:  		ctrlInfo = ctrl.getLabel ().getText ();  		break;  	}  	if (ctrlInfo.Length > 0) {  		ctrlName += " (" + ctrlInfo + ")";  	}  	var item = lv_controls.Items.Add (ctrlName' C_CTRL_IMAGE);  	item.Tag = ctrl.getKey ();  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	if (ctrl.getHasFormulaValue ())  		item.SubItems [1].Text = "*";  	if (ctrl.getHasFormulaHide ())  		item.SubItems [2].Text = "*";  	if (ctrlField.Length > 0) {  		item.SubItems [3].Text = ctrlField;  		item.SubItems [3].ForeColor = Color.Blue;  		item.ImageIndex = C_DB_IMAGE;  	}  	if (ctrl.getName ().Length > 4 && ctrl.getName ().Substring (0' 4) == "lnk_") {  		item.ForeColor = Color.Red;  	}  }  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: for (int i = 0; i < report.getControls ().count (); i++) {  	var ctrl = report.getControls ().item (i);  	var ctrlName = ctrl.getName ();  	var ctrlInfo = "";  	var ctrlField = "";  	switch (ctrl.getControlType ()) {  	case csRptControlType.CSRPTCTFIELD:  		ctrlField = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTDBIMAGE:  		ctrlInfo = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTIMAGE:  		ctrlInfo = " (Image)";  		break;  	case csRptControlType.CSRPTCTLABEL:  		ctrlInfo = ctrl.getLabel ().getText ();  		break;  	}  	if (ctrlInfo.Length > 0) {  		ctrlName += " (" + ctrlInfo + ")";  	}  	var item = lv_controls.Items.Add (ctrlName' C_CTRL_IMAGE);  	item.Tag = ctrl.getKey ();  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	if (ctrl.getHasFormulaValue ())  		item.SubItems [1].Text = "*";  	if (ctrl.getHasFormulaHide ())  		item.SubItems [2].Text = "*";  	if (ctrlField.Length > 0) {  		item.SubItems [3].Text = ctrlField;  		item.SubItems [3].ForeColor = Color.Blue;  		item.ImageIndex = C_DB_IMAGE;  	}  	if (ctrl.getName ().Length > 4 && ctrl.getName ().Substring (0' 4) == "lnk_") {  		item.ForeColor = Color.Red;  	}  }  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: for (int i = 0; i < report.getControls ().count (); i++) {  	var ctrl = report.getControls ().item (i);  	var ctrlName = ctrl.getName ();  	var ctrlInfo = "";  	var ctrlField = "";  	switch (ctrl.getControlType ()) {  	case csRptControlType.CSRPTCTFIELD:  		ctrlField = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTDBIMAGE:  		ctrlInfo = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTIMAGE:  		ctrlInfo = " (Image)";  		break;  	case csRptControlType.CSRPTCTLABEL:  		ctrlInfo = ctrl.getLabel ().getText ();  		break;  	}  	if (ctrlInfo.Length > 0) {  		ctrlName += " (" + ctrlInfo + ")";  	}  	var item = lv_controls.Items.Add (ctrlName' C_CTRL_IMAGE);  	item.Tag = ctrl.getKey ();  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	if (ctrl.getHasFormulaValue ())  		item.SubItems [1].Text = "*";  	if (ctrl.getHasFormulaHide ())  		item.SubItems [2].Text = "*";  	if (ctrlField.Length > 0) {  		item.SubItems [3].Text = ctrlField;  		item.SubItems [3].ForeColor = Color.Blue;  		item.ImageIndex = C_DB_IMAGE;  	}  	if (ctrl.getName ().Length > 4 && ctrl.getName ().Substring (0' 4) == "lnk_") {  		item.ForeColor = Color.Red;  	}  }  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: for (int i = 0; i < report.getControls ().count (); i++) {  	var ctrl = report.getControls ().item (i);  	var ctrlName = ctrl.getName ();  	var ctrlInfo = "";  	var ctrlField = "";  	switch (ctrl.getControlType ()) {  	case csRptControlType.CSRPTCTFIELD:  		ctrlField = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTDBIMAGE:  		ctrlInfo = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTIMAGE:  		ctrlInfo = " (Image)";  		break;  	case csRptControlType.CSRPTCTLABEL:  		ctrlInfo = ctrl.getLabel ().getText ();  		break;  	}  	if (ctrlInfo.Length > 0) {  		ctrlName += " (" + ctrlInfo + ")";  	}  	var item = lv_controls.Items.Add (ctrlName' C_CTRL_IMAGE);  	item.Tag = ctrl.getKey ();  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	if (ctrl.getHasFormulaValue ())  		item.SubItems [1].Text = "*";  	if (ctrl.getHasFormulaHide ())  		item.SubItems [2].Text = "*";  	if (ctrlField.Length > 0) {  		item.SubItems [3].Text = ctrlField;  		item.SubItems [3].ForeColor = Color.Blue;  		item.ImageIndex = C_DB_IMAGE;  	}  	if (ctrl.getName ().Length > 4 && ctrl.getName ().Substring (0' 4) == "lnk_") {  		item.ForeColor = Color.Red;  	}  }  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: for (int i = 0; i < report.getControls ().count (); i++) {  	var ctrl = report.getControls ().item (i);  	var ctrlName = ctrl.getName ();  	var ctrlInfo = "";  	var ctrlField = "";  	switch (ctrl.getControlType ()) {  	case csRptControlType.CSRPTCTFIELD:  		ctrlField = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTDBIMAGE:  		ctrlInfo = ctrl.getField ().getName ();  		break;  	case csRptControlType.CSRPTCTIMAGE:  		ctrlInfo = " (Image)";  		break;  	case csRptControlType.CSRPTCTLABEL:  		ctrlInfo = ctrl.getLabel ().getText ();  		break;  	}  	if (ctrlInfo.Length > 0) {  		ctrlName += " (" + ctrlInfo + ")";  	}  	var item = lv_controls.Items.Add (ctrlName' C_CTRL_IMAGE);  	item.Tag = ctrl.getKey ();  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	item.SubItems.Add ("");  	if (ctrl.getHasFormulaValue ())  		item.SubItems [1].Text = "*";  	if (ctrl.getHasFormulaHide ())  		item.SubItems [2].Text = "*";  	if (ctrlField.Length > 0) {  		item.SubItems [3].Text = ctrlField;  		item.SubItems [3].ForeColor = Color.Blue;  		item.ImageIndex = C_DB_IMAGE;  	}  	if (ctrl.getName ().Length > 4 && ctrl.getName ().Substring (0' 4) == "lnk_") {  		item.ForeColor = Color.Red;  	}  }  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: if (ctrl.getHasFormulaHide ())  	item.SubItems [2].Text = "*";  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: item.SubItems [2].Text = "*";  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: if (ctrlField.Length > 0) {  	item.SubItems [3].Text = ctrlField;  	item.SubItems [3].ForeColor = Color.Blue;  	item.ImageIndex = C_DB_IMAGE;  }  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: if (ctrlField.Length > 0) {  	item.SubItems [3].Text = ctrlField;  	item.SubItems [3].ForeColor = Color.Blue;  	item.ImageIndex = C_DB_IMAGE;  }  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: item.SubItems [3].Text = ctrlField;  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: item.SubItems [3].ForeColor = Color.Blue;  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: if (ctrl.getName ().Length > 4 && ctrl.getName ().Substring (0' 4) == "lnk_") {  	item.ForeColor = Color.Red;  }  
Magic Number,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following statement contains a magic number: if (ctrl.getName ().Length > 4 && ctrl.getName ().Substring (0' 4) == "lnk_") {  	item.ForeColor = Color.Red;  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,fMain_Load,The following statement contains a magic number: this.Width = 1200;  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,fMain_Load,The following statement contains a magic number: this.Height = 900;  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The following statement contains a magic number: foreach (var m in methods) {  	if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  		var item = lv_properties.Items.Add (tabs + m.Name.Substring (3));  		item.ImageIndex = C_IMG_CONTROL;  		item.SubItems.Add (getValue (m.Invoke (anObject' null)' n));  		if (item.SubItems [1].Text == "...")  			item.ImageIndex = C_IMG_FOLDER;  	}  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The following statement contains a magic number: foreach (var m in methods) {  	if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  		var item = lv_properties.Items.Add (tabs + m.Name.Substring (3));  		item.ImageIndex = C_IMG_CONTROL;  		item.SubItems.Add (getValue (m.Invoke (anObject' null)' n));  		if (item.SubItems [1].Text == "...")  			item.ImageIndex = C_IMG_FOLDER;  	}  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The following statement contains a magic number: foreach (var m in methods) {  	if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  		var item = lv_properties.Items.Add (tabs + m.Name.Substring (3));  		item.ImageIndex = C_IMG_CONTROL;  		item.SubItems.Add (getValue (m.Invoke (anObject' null)' n));  		if (item.SubItems [1].Text == "...")  			item.ImageIndex = C_IMG_FOLDER;  	}  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The following statement contains a magic number: foreach (var m in methods) {  	if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  		var item = lv_properties.Items.Add (tabs + m.Name.Substring (3));  		item.ImageIndex = C_IMG_CONTROL;  		item.SubItems.Add (getValue (m.Invoke (anObject' null)' n));  		if (item.SubItems [1].Text == "...")  			item.ImageIndex = C_IMG_FOLDER;  	}  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The following statement contains a magic number: if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  	var item = lv_properties.Items.Add (tabs + m.Name.Substring (3));  	item.ImageIndex = C_IMG_CONTROL;  	item.SubItems.Add (getValue (m.Invoke (anObject' null)' n));  	if (item.SubItems [1].Text == "...")  		item.ImageIndex = C_IMG_FOLDER;  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The following statement contains a magic number: if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  	var item = lv_properties.Items.Add (tabs + m.Name.Substring (3));  	item.ImageIndex = C_IMG_CONTROL;  	item.SubItems.Add (getValue (m.Invoke (anObject' null)' n));  	if (item.SubItems [1].Text == "...")  		item.ImageIndex = C_IMG_FOLDER;  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The following statement contains a magic number: if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  	var item = lv_properties.Items.Add (tabs + m.Name.Substring (3));  	item.ImageIndex = C_IMG_CONTROL;  	item.SubItems.Add (getValue (m.Invoke (anObject' null)' n));  	if (item.SubItems [1].Text == "...")  		item.ImageIndex = C_IMG_FOLDER;  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,setObjectDescription,The following statement contains a magic number: if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  	var item = lv_properties.Items.Add (tabs + m.Name.Substring (3));  	item.ImageIndex = C_IMG_CONTROL;  	item.SubItems.Add (getValue (m.Invoke (anObject' null)' n));  	if (item.SubItems [1].Text == "...")  		item.ImageIndex = C_IMG_FOLDER;  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,getValue,The following statement contains a magic number: if (n > 10)  	return "";  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,tabReports_MouseClick,The following statement contains a magic number: for (int i = 0; i < tabReports.TabCount; ++i) {  	var rect = tabReports.GetTabRect (i);  	var xRect = new System.Drawing.Rectangle (rect.Left + rect.Width - 18' rect.Top' 18' rect.Height);  	if (xRect.Contains (e.Location)) {  		cEditor editor = (cEditor)tabReports.TabPages [i].Tag;  		if (editor.close ()) {  			tabReports.TabPages.RemoveAt (i);  			if (tabReports.TabPages.Count == 0) {  				cMainEditor.setDocActive (null);  			}  		}  	}  }  
Magic Number,CSReportEditor,fMain,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fMain.cs,tabReports_MouseClick,The following statement contains a magic number: for (int i = 0; i < tabReports.TabCount; ++i) {  	var rect = tabReports.GetTabRect (i);  	var xRect = new System.Drawing.Rectangle (rect.Left + rect.Width - 18' rect.Top' 18' rect.Height);  	if (xRect.Contains (e.Location)) {  		cEditor editor = (cEditor)tabReports.TabPages [i].Tag;  		if (editor.close ()) {  			tabReports.TabPages.RemoveAt (i);  			if (tabReports.TabPages.Count == 0) {  				cMainEditor.setDocActive (null);  			}  		}  	}  }  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,fProperties,The following statement contains a magic number: G.redim (ref m_chartFieldType' 3);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,fProperties,The following statement contains a magic number: G.redim (ref m_chartIndex' 3);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listSetListIndex (cb_colorSerie1' 10);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listSetListIndex (cb_colorSerie2' 69);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartSize' "Smallest"' 50);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartSize' "Smaller"' 100);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartSize' "Small"' 150);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartSize' "Medium"' 200);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartSize' "Large"' 250);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartSize' "Big"' 350);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listSetListIndex (cb_chartSize' 3);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartThickness' "Wafer"' 2);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartThickness' "Thin"' 4);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartThickness' "Medium"' 8);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartThickness' "Thick"' 16);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listAdd (cb_chartThickness' "Thickest"' 32);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listSetListIndex (cb_chartThickness' 2);  
Magic Number,CSReportEditor,fProperties,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fProperties.cs,initChart,The following statement contains a magic number: cUtil.listSetListIndex (cb_linesType' 3);  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,selectAndShowInfo,The following statement contains a magic number: if (node != null && node.Tag != null) {  	var info = node.Tag.ToString ();  	if (info.Length > 0) {  		var infoType = info.Substring (0' 1);  		if (infoType == "@") {  			tx_descrip.Text = info.Substring (4);  		}  		else if (infoType == "S" || infoType == "L") {  			m_editor.selectSection (info.Substring (1));  		}  		else {  			tx_descrip.Text = getObjectDescription (getControl (info));  			m_editor.selectCtrl (info);  		}  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,selectAndShowInfo,The following statement contains a magic number: if (info.Length > 0) {  	var infoType = info.Substring (0' 1);  	if (infoType == "@") {  		tx_descrip.Text = info.Substring (4);  	}  	else if (infoType == "S" || infoType == "L") {  		m_editor.selectSection (info.Substring (1));  	}  	else {  		tx_descrip.Text = getObjectDescription (getControl (info));  		m_editor.selectCtrl (info);  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,selectAndShowInfo,The following statement contains a magic number: if (infoType == "@") {  	tx_descrip.Text = info.Substring (4);  }  else if (infoType == "S" || infoType == "L") {  	m_editor.selectSection (info.Substring (1));  }  else {  	tx_descrip.Text = getObjectDescription (getControl (info));  	m_editor.selectCtrl (info);  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,selectAndShowInfo,The following statement contains a magic number: tx_descrip.Text = info.Substring (4);  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,tv_formulas_NodeMouseDoubleClick,The following statement contains a magic number: if (e.Node.Tag != null) {  	var info = e.Node.Tag.ToString ();  	if (info.Length > 0) {  		var infoType = info.Substring (0' 4);  		if (infoType == "@FH=") {  			m_formulaName = "Hide";  			string formula = info.Substring (4);  			if (m_editor.showEditFormula (ref formula)) {  				e.Node.Tag = "@FH=" + formula;  			}  		}  		else if (infoType == "@FV=") {  			m_formulaName = "Value";  			string formula = info.Substring (4);  			if (m_editor.showEditFormula (ref formula)) {  				e.Node.Tag = "@FV=" + formula;  			}  		}  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,tv_formulas_NodeMouseDoubleClick,The following statement contains a magic number: if (e.Node.Tag != null) {  	var info = e.Node.Tag.ToString ();  	if (info.Length > 0) {  		var infoType = info.Substring (0' 4);  		if (infoType == "@FH=") {  			m_formulaName = "Hide";  			string formula = info.Substring (4);  			if (m_editor.showEditFormula (ref formula)) {  				e.Node.Tag = "@FH=" + formula;  			}  		}  		else if (infoType == "@FV=") {  			m_formulaName = "Value";  			string formula = info.Substring (4);  			if (m_editor.showEditFormula (ref formula)) {  				e.Node.Tag = "@FV=" + formula;  			}  		}  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,tv_formulas_NodeMouseDoubleClick,The following statement contains a magic number: if (e.Node.Tag != null) {  	var info = e.Node.Tag.ToString ();  	if (info.Length > 0) {  		var infoType = info.Substring (0' 4);  		if (infoType == "@FH=") {  			m_formulaName = "Hide";  			string formula = info.Substring (4);  			if (m_editor.showEditFormula (ref formula)) {  				e.Node.Tag = "@FH=" + formula;  			}  		}  		else if (infoType == "@FV=") {  			m_formulaName = "Value";  			string formula = info.Substring (4);  			if (m_editor.showEditFormula (ref formula)) {  				e.Node.Tag = "@FV=" + formula;  			}  		}  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,tv_formulas_NodeMouseDoubleClick,The following statement contains a magic number: if (info.Length > 0) {  	var infoType = info.Substring (0' 4);  	if (infoType == "@FH=") {  		m_formulaName = "Hide";  		string formula = info.Substring (4);  		if (m_editor.showEditFormula (ref formula)) {  			e.Node.Tag = "@FH=" + formula;  		}  	}  	else if (infoType == "@FV=") {  		m_formulaName = "Value";  		string formula = info.Substring (4);  		if (m_editor.showEditFormula (ref formula)) {  			e.Node.Tag = "@FV=" + formula;  		}  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,tv_formulas_NodeMouseDoubleClick,The following statement contains a magic number: if (info.Length > 0) {  	var infoType = info.Substring (0' 4);  	if (infoType == "@FH=") {  		m_formulaName = "Hide";  		string formula = info.Substring (4);  		if (m_editor.showEditFormula (ref formula)) {  			e.Node.Tag = "@FH=" + formula;  		}  	}  	else if (infoType == "@FV=") {  		m_formulaName = "Value";  		string formula = info.Substring (4);  		if (m_editor.showEditFormula (ref formula)) {  			e.Node.Tag = "@FV=" + formula;  		}  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,tv_formulas_NodeMouseDoubleClick,The following statement contains a magic number: if (info.Length > 0) {  	var infoType = info.Substring (0' 4);  	if (infoType == "@FH=") {  		m_formulaName = "Hide";  		string formula = info.Substring (4);  		if (m_editor.showEditFormula (ref formula)) {  			e.Node.Tag = "@FH=" + formula;  		}  	}  	else if (infoType == "@FV=") {  		m_formulaName = "Value";  		string formula = info.Substring (4);  		if (m_editor.showEditFormula (ref formula)) {  			e.Node.Tag = "@FV=" + formula;  		}  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,tv_formulas_NodeMouseDoubleClick,The following statement contains a magic number: if (infoType == "@FH=") {  	m_formulaName = "Hide";  	string formula = info.Substring (4);  	if (m_editor.showEditFormula (ref formula)) {  		e.Node.Tag = "@FH=" + formula;  	}  }  else if (infoType == "@FV=") {  	m_formulaName = "Value";  	string formula = info.Substring (4);  	if (m_editor.showEditFormula (ref formula)) {  		e.Node.Tag = "@FV=" + formula;  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,tv_formulas_NodeMouseDoubleClick,The following statement contains a magic number: if (infoType == "@FH=") {  	m_formulaName = "Hide";  	string formula = info.Substring (4);  	if (m_editor.showEditFormula (ref formula)) {  		e.Node.Tag = "@FH=" + formula;  	}  }  else if (infoType == "@FV=") {  	m_formulaName = "Value";  	string formula = info.Substring (4);  	if (m_editor.showEditFormula (ref formula)) {  		e.Node.Tag = "@FV=" + formula;  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,tv_formulas_NodeMouseDoubleClick,The following statement contains a magic number: if (infoType == "@FV=") {  	m_formulaName = "Value";  	string formula = info.Substring (4);  	if (m_editor.showEditFormula (ref formula)) {  		e.Node.Tag = "@FV=" + formula;  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The following statement contains a magic number: foreach (var m in methods) {  	if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  		descrip += tabs + m.Name.Substring (3) + ": " + getValue (m.Invoke (anObject' null)' n) + "\r\n";  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The following statement contains a magic number: foreach (var m in methods) {  	if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  		descrip += tabs + m.Name.Substring (3) + ": " + getValue (m.Invoke (anObject' null)' n) + "\r\n";  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The following statement contains a magic number: foreach (var m in methods) {  	if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  		descrip += tabs + m.Name.Substring (3) + ": " + getValue (m.Invoke (anObject' null)' n) + "\r\n";  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The following statement contains a magic number: foreach (var m in methods) {  	if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  		descrip += tabs + m.Name.Substring (3) + ": " + getValue (m.Invoke (anObject' null)' n) + "\r\n";  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The following statement contains a magic number: if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  	descrip += tabs + m.Name.Substring (3) + ": " + getValue (m.Invoke (anObject' null)' n) + "\r\n";  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The following statement contains a magic number: if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  	descrip += tabs + m.Name.Substring (3) + ": " + getValue (m.Invoke (anObject' null)' n) + "\r\n";  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The following statement contains a magic number: if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  	descrip += tabs + m.Name.Substring (3) + ": " + getValue (m.Invoke (anObject' null)' n) + "\r\n";  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The following statement contains a magic number: if (m.IsPublic && m.Name.Length > 3 && m.Name.Substring (0' 3) == "get" && m.Name.Substring (0' 4) != "get_" && m.GetParameters ().Length == 0 && m.Name != "getSectionLine") {  	descrip += tabs + m.Name.Substring (3) + ": " + getValue (m.Invoke (anObject' null)' n) + "\r\n";  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getObjectDescription,The following statement contains a magic number: descrip += tabs + m.Name.Substring (3) + ": " + getValue (m.Invoke (anObject' null)' n) + "\r\n";  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,getValue,The following statement contains a magic number: if (n > 10)  	return "";  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,cmd_edit_Click,The following statement contains a magic number: if (tv_controls.SelectedNode != null) {  	if (tv_controls.SelectedNode.Tag != null) {  		var info = tv_controls.SelectedNode.Tag.ToString ();  		if (info.Length > 0) {  			var infoType = info.Substring (0' 1);  			if (infoType == "@") {  				tx_descrip.Text = info.Substring (4);  			}  			else {  				m_editor.showProperties (info);  			}  		}  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,cmd_edit_Click,The following statement contains a magic number: if (tv_controls.SelectedNode.Tag != null) {  	var info = tv_controls.SelectedNode.Tag.ToString ();  	if (info.Length > 0) {  		var infoType = info.Substring (0' 1);  		if (infoType == "@") {  			tx_descrip.Text = info.Substring (4);  		}  		else {  			m_editor.showProperties (info);  		}  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,cmd_edit_Click,The following statement contains a magic number: if (info.Length > 0) {  	var infoType = info.Substring (0' 1);  	if (infoType == "@") {  		tx_descrip.Text = info.Substring (4);  	}  	else {  		m_editor.showProperties (info);  	}  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,cmd_edit_Click,The following statement contains a magic number: if (infoType == "@") {  	tx_descrip.Text = info.Substring (4);  }  else {  	m_editor.showProperties (info);  }  
Magic Number,CSReportEditor,fTreeViewCtrls,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\fTreeViewCtrls.cs,cmd_edit_Click,The following statement contains a magic number: tx_descrip.Text = info.Substring (4);  
Duplicate Code,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The method contains a code clone-set at the following line numbers (starting from the method definition): ((251' 276)' (332' 357))
Duplicate Code,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,showCtrlProperties,The method contains a code clone-set at the following line numbers (starting from the method definition): ((302' 324)' (387' 409))
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_KeyDown,The following switch statement is missing a default case: switch (keyCode) {  case (int)Keys.Down:  case (int)Keys.Up:  	m_keyMoving = "";  	m_moveType = csRptEditorMoveType.CSRPTEDMOVDOWN;  	break;  case (int)Keys.Right:  case (int)Keys.Left:  	m_keyMoving = "";  	m_moveType = csRptEditorMoveType.CSRPTEDMOVRIGHT;  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_KeyDown,The following switch statement is missing a default case: switch (keyCode) {  case (int)Keys.Up:  	y = y - m_keyboardMoveStep;  	break;  case (int)Keys.Down:  	y = y + m_keyboardMoveStep;  	break;  case (int)Keys.Left:  	x = x - m_keyboardMoveStep;  	break;  case (int)Keys.Right:  	x = x + m_keyboardMoveStep;  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_KeyDown,The following switch statement is missing a default case: switch (keyCode) {  case (int)Keys.Up:  	y = y - m_keyboardMoveStep;  	break;  case (int)Keys.Down:  	y = y + m_keyboardMoveStep;  	break;  case (int)Keys.Left:  	x = x - m_keyboardMoveStep;  	break;  case (int)Keys.Right:  	x = x + m_keyboardMoveStep;  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,The following switch statement is missing a default case: switch (align) {  case csECtlAlignConst.csECtlAlignLeft:  	newLeft = 100000;  	break;  case csECtlAlignConst.csECtlAlignRight:  	newLeft = 0;  	break;  case csECtlAlignConst.csECtlAlignTop:  	newTop = 100000;  	break;  case csECtlAlignConst.csECtlAlignBottom:  	newTop = 0;  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,The following switch statement is missing a default case: switch (align) {  case csECtlAlignConst.csECtlAlignLeft:  	if (left < newLeft) {  		newLeft = left;  	}  	break;  case csECtlAlignConst.csECtlAlignRight:  	if (left > newLeft) {  		newLeft = left;  	}  	break;  case csECtlAlignConst.csECtlAlignTop:  	if (top < newTop) {  		newTop = top;  	}  	break;  case csECtlAlignConst.csECtlAlignBottom:  	if (top > newTop) {  		newTop = top;  	}  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,controlsAlign,The following switch statement is missing a default case: switch (align) {  case csECtlAlignConst.csECtlAlignHeight:  	rptCtrl.getLabel ().getAspect ().setHeight (height);  	paintObject.getAspect ().setHeight (height);  	break;  case csECtlAlignConst.csECtlAlignWidth:  	rptCtrl.getLabel ().getAspect ().setWidth (width);  	paintObject.getAspect ().setWidth (width);  	break;  case csECtlAlignConst.csECtlAlignLeft:  case csECtlAlignConst.csECtlAlignRight:  case csECtlAlignConst.csECtlAlignHorizontal:  	rptCtrl.getLabel ().getAspect ().setLeft (newLeft);  	paintObject.getAspect ().setLeft (newLeft);  	break;  case csECtlAlignConst.csECtlAlignTop:  case csECtlAlignConst.csECtlAlignBottom:  case csECtlAlignConst.csECtlAlignVertical:  	rptCtrl.getLabel ().getAspect ().setTop (newTop);  	paintObject.getAspect ().setTop (newTop);  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The following switch statement is missing a default case: switch (m_moveType) {  case csRptEditorMoveType.CSRPTEDMOVTALL:  	pShowMoveAll (x' y);  	break;  case csRptEditorMoveType.CSRPTEDMOVTHORIZONTAL:  	m_paint.moveHorizontal (m_keyMoving' x' m_picReport.CreateGraphics ());  	break;  case csRptEditorMoveType.CSRPTEDMOVTVERTICAL:  	m_paint.moveVertical (m_keyMoving' y' m_picReport.CreateGraphics ());  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseMove,The following switch statement is missing a default case: switch (m_moveType) {  case csRptEditorMoveType.CSRPTEDMOVDOWN:  	m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' y);  	break;  case csRptEditorMoveType.CSRPTEDMOVLEFT:  	m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' x' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE);  	break;  case csRptEditorMoveType.CSRPTEDMOVRIGHT:  	m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' x' cGlobals.C_NO_CHANGE);  	break;  case csRptEditorMoveType.CSRPTEDMOVUP:  	m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' cGlobals.C_NO_CHANGE' y' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE);  	break;  case csRptEditorMoveType.CSRPTEDMOVLEFTDOWN:  	m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' x' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' y);  	break;  case csRptEditorMoveType.CSRPTEDMOVLEFTUP:  	m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' x' y' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE);  	break;  case csRptEditorMoveType.CSRPTEDMOVRIGHTDOWN:  	m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' cGlobals.C_NO_CHANGE' cGlobals.C_NO_CHANGE' x' y);  	break;  case csRptEditorMoveType.CSRPTEDMOVRIGHTUP:  	m_paint.resize (m_picReport.CreateGraphics ()' m_keySizing' cGlobals.C_NO_CHANGE' y' x' cGlobals.C_NO_CHANGE);  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetSbPnlCtrl,The following switch statement is missing a default case: switch (ctrlType) {  case csRptControlType.CSRPTCTDBIMAGE:  	strCtlType = "DbImage";  	break;  case csRptControlType.CSRPTCTFIELD:  	strCtlType = "Field";  	break;  case csRptControlType.CSRPTCTIMAGE:  	strCtlType = "Image";  	break;  case csRptControlType.CSRPTCTLABEL:  	strCtlType = "Label";  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,m_picReport_MouseUp,The following switch statement is missing a default case: switch (m_moveType) {  case csRptEditorMoveType.CSRPTEDMOVTALL:  	if (m_bMoveVertical) {  		pMoveAll (C_NOMOVE' y);  	}  	else if (m_bMoveHorizontal) {  		pMoveAll (x' C_NOMOVE);  	}  	else {  		pMoveAll (x' y);  	}  	break;  case csRptEditorMoveType.CSRPTEDMOVTHORIZONTAL:  	pMoveHorizontal (x);  	break;  case csRptEditorMoveType.CSRPTEDMOVTVERTICAL:  	pMoveVertical (x' y);  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pSetNewControlProperties,The following switch statement is missing a default case: switch (m_controlType) {  case csRptEditCtrlType.field:  	ctrl.setControlType (csRptControlType.CSRPTCTFIELD);  	ctrl.getLabel ().setText (m_fieldName);  	cReportField field = ctrl.getField ();  	field.setIndex (m_fieldIndex);  	field.setName (m_fieldName);  	field.setFieldType (m_fieldType);  	if (cDatabaseGlobals.isNumberField (m_fieldType)) {  		aspect = ctrl.getLabel ().getAspect ();  		aspect.setAlign (CSReportGlobals.HorizontalAlignment.Right);  		aspect.setFormat ("#0.00;-#0.00");  	}  	break;  case csRptEditCtrlType.formula:  	ctrl.setControlType (csRptControlType.CSRPTCTLABEL);  	ctrl.getFormulaValue ().setText (m_formulaText + "(" + m_controlName + ")");  	ctrl.setHasFormulaValue (true);  	label = ctrl.getLabel ();  	aspect = label.getAspect ();  	aspect.setFormat ("0.00;-0.00");  	aspect.getFont ().setBold (true);  	label.setText (ctrl.getFormulaValue ().getText ());  	aspect.setAlign (CSReportGlobals.HorizontalAlignment.Right);  	break;  case csRptEditCtrlType.label:  	ctrl.setControlType (csRptControlType.CSRPTCTLABEL);  	label = ctrl.getLabel ();  	label.setText (m_fieldName);  	label.getAspect ().getFont ().setBold (true);  	break;  case csRptEditCtrlType.lineLabel:  	ctrlHeigth = LINE_HEIGHT;  	ctrl.setControlType (csRptControlType.CSRPTCTLABEL);  	label = ctrl.getLabel ();  	label.setText (m_fieldName);  	aspect = label.getAspect ();  	aspect.getFont ().setBold (true);  	aspect.setBackColor (Color.Gray.ToArgb ());  	transparent = false;  	break;  case csRptEditCtrlType.image:  	ctrl.setControlType (csRptControlType.CSRPTCTIMAGE);  	ctrl.getLabel ().setText (m_fieldName);  	break;  case csRptEditCtrlType.chart:  	ctrl.setControlType (csRptControlType.CSRPTCTCHART);  	ctrl.getLabel ().setText (m_fieldName);  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pAddSectionLinesAux,The following switch statement is missing a default case: switch (sec.getTypeSection ()) {  case csRptSectionType.HEADER:  case csRptSectionType.MAIN_HEADER:  	pMoveHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_HEADER;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.DETAIL:  case csRptSectionType.MAIN_DETAIL:  	pMoveDetails (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_DETAIL;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_HEADER:  	pMoveGroupHeader (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPH;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.GROUP_FOOTER:  	pMoveGroupFooter (sec.getKey ()' out minBottom' out maxBottom);  	aspect = sec.getAspect ();  	y = aspect.getHeight () + aspect.getTop ();  	typeSecLn = csRptSectionType.SECLN_GROUPF;  	index = sec.getSectionLines ().count () - 2;  	break;  case csRptSectionType.FOOTER:  case csRptSectionType.MAIN_FOOTER:  	aspect = sec.getAspect ();  	aspect.setTop (aspect.getTop () - cGlobals.C_HEIGHT_NEW_SECTION);  	pMoveFooter (sec.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	y = aspect.getHeight () + aspect.getTop () - m_offSet - cGlobals.C_HEIGHT_BAR_SECTION;  	typeSecLn = csRptSectionType.SECLN_FOOTER;  	index = 0;  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,addSection,The following switch statement is missing a default case: switch (typeSection) {  case csRptSectionType.HEADER:  	cReportSections w_headers = m_report.getHeaders ();  	rptSection = w_headers.add ();  	rptSection.setName ("H_" + rptSection.getIndex ().ToString ());  	aspect = w_headers.item (w_headers.count () - 2).getAspect ();  	rptSection.getAspect ().setWidth (aspect.getWidth ());  	rptSection.getAspect ().setHeight (0);  	rptSection.getAspect ().setTop (aspect.getTop () + aspect.getHeight ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.HEADER' rptSection.getName ()' false));  	w_aspect = rptSection.getAspect ();  	moveSection (m_paint.getPaintObject (rptSection.getKeyPaint ())' 0' w_aspect.getTop ()' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' w_aspect.getTop () + rptSection.getAspect ().getHeight ()' rptSection' true);  	break;  case csRptSectionType.DETAIL:  	break;  case csRptSectionType.GROUP_HEADER:  	cIReportGroupSections w_groupsHeaders = m_report.getGroupsHeaders ();  	rptSection = w_groupsHeaders.item (w_groupsHeaders.count () - 1);  	rptSection.setName ("G_" + rptSection.getIndex ().ToString ());  	// the first group is next to the last header  	//  	if (w_groupsHeaders.count () == 1) {  		topSec = m_report.getHeaders ().item (m_report.getHeaders ().count () - 1);  	}  	else {  		topSec = w_groupsHeaders.item (w_groupsHeaders.count () - 2);  	}  	w_aspect = topSec.getAspect ();  	rptSection.getAspect ().setWidth (w_aspect.getWidth ());  	rptSection.getAspect ().setHeight (0);  	rptSection.getAspect ().setTop (w_aspect.getTop () + w_aspect.getHeight ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.GROUP_HEADER' rptSection.getName ()' false));  	w_aspect = rptSection.getAspect ();  	moveSection (m_paint.getPaintObject (rptSection.getKeyPaint ())' 0' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' w_aspect.getTop ()' w_aspect.getTop () + cGlobals.C_HEIGHT_NEW_SECTION' rptSection' true);  	break;  case csRptSectionType.GROUP_FOOTER:  	cIReportGroupSections w_groupsFooters = m_report.getGroupsFooters ();  	rptSection = w_groupsFooters.item (0);  	rptSection.setName ("G_" + rptSection.getIndex ().ToString ());  	// all group footers are added to the top so at the  	// beginning they are next to the detail section  	//  	topSec = m_report.getDetails ().item (m_report.getDetails ().count () - 1);  	w_aspect = topSec.getAspect ();  	rptSection.getAspect ().setWidth (w_aspect.getWidth ());  	rptSection.getAspect ().setHeight (cGlobals.C_HEIGHT_NEW_SECTION);  	rptSection.getAspect ().setTop (w_aspect.getTop () + w_aspect.getHeight ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.GROUP_FOOTER' rptSection.getName ()' false));  	paintObj = m_paint.getPaintObject (rptSection.getKeyPaint ());  	pMoveGroupFooter (rptSection.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	w_aspect = rptSection.getAspect ();  	y = w_aspect.getHeight () + w_aspect.getTop () - cGlobals.C_HEIGHT_BAR_SECTION;  	moveSection (paintObj' 0' y' minBottom' maxBottom' rptSection' true);  	break;  case csRptSectionType.FOOTER:  	cReportSections w_footers = m_report.getFooters ();  	// all footers are added to the beginning of the collection  	//  	rptSection = w_footers.add (null' ""' 0);  	rptSection.setName ("F_" + rptSection.getIndex ().ToString ());  	aspect = w_footers.item (1).getAspect ();  	rptSection.getAspect ().setWidth (aspect.getWidth ());  	rptSection.getAspect ().setHeight (cGlobals.C_HEIGHT_NEW_SECTION);  	rptSection.getAspect ().setTop (aspect.getTop ());  	rptSection.setKeyPaint (paintSection (rptSection.getAspect ()' rptSection.getKey ()' csRptSectionType.FOOTER' rptSection.getName ()' false));  	paintObj = m_paint.getPaintObject (rptSection.getKeyPaint ());  	pMoveFooter (rptSection.getKey ()' out minBottom' out maxBottom);  	m_offY = 0;  	w_aspect = rptSection.getAspect ();  	y = w_aspect.getHeight () + w_aspect.getTop () - m_offSet - cGlobals.C_HEIGHT_BAR_SECTION;  	moveSection (paintObj' 0' y' minBottom' maxBottom' rptSection' true);  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,saveChanges,The following switch statement is missing a default case: switch (rslt) {  case csAskEditResult.CSASKRSLTYES:  	if (!saveDocument (false))  		return false;  	break;  case csAskEditResult.CSASKRSLTCANCEL:  	return false;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pShowGroupProperties,The following switch statement is missing a default case: switch (group.getComparisonType ()) {  case csRptGrpComparisonType.CSRPTGRPDATE:  	m_fGroup.opDate.Checked = true;  	break;  case csRptGrpComparisonType.CSRPTGRPNUMBER:  	m_fGroup.opNumber.Checked = true;  	break;  case csRptGrpComparisonType.CSRPTGRPTEXT:  	m_fGroup.opText.Checked = true;  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pGetSection,The following switch statement is missing a default case: switch (paintObj.getRptType ()) {  case csRptSectionType.SECLN_HEADER:  	sec = m_report.getHeaders ().item (paintObj.getRptKeySec ());  	break;  case csRptSectionType.SECLN_DETAIL:  	sec = m_report.getDetails ().item (paintObj.getRptKeySec ());  	break;  case csRptSectionType.SECLN_FOOTER:  	sec = m_report.getFooters ().item (paintObj.getRptKeySec ());  	break;  case csRptSectionType.SECLN_GROUPH:  	sec = m_report.getGroupsHeaders ().item (paintObj.getRptKeySec ());  	break;  case csRptSectionType.SECLN_GROUPF:  	sec = m_report.getGroupsFooters ().item (paintObj.getRptKeySec ());  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,reLoadReport,The following switch statement is missing a default case: switch (rptCtrl.getSectionLine ().getTypeSection ()) {  case csRptSectionType.FOOTER:  case csRptSectionType.MAIN_FOOTER:  	w_aspect.setOffset (m_offSet);  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveVertical,The following switch statement is missing a default case: switch (rptType) {  //---------------------  // HEADER  //---------------------  case csRptSectionType.MAIN_HEADER:  case csRptSectionType.HEADER:  	rptSec = pMoveHeader (sKeySection' out minBottom' out maxBottom);  	//---------------------  	// GROUP HEADER  	//---------------------  	break;  case csRptSectionType.GROUP_HEADER:  	rptSec = pMoveGroupHeader (sKeySection' out minBottom' out maxBottom);  	//---------------------  	// DETAIL  	//---------------------  	break;  case csRptSectionType.MAIN_DETAIL:  case csRptSectionType.DETAIL:  	rptSec = pMoveDetails (sKeySection' out minBottom' out maxBottom);  	//---------------------  	// GROUP FOOTER  	//---------------------  	break;  case csRptSectionType.GROUP_FOOTER:  	rptSec = pMoveGroupFooter (sKeySection' out minBottom' out maxBottom);  	//---------------------  	// FOOTER  	//---------------------  	break;  case csRptSectionType.MAIN_FOOTER:  case csRptSectionType.FOOTER:  	rptSec = pMoveFooter (sKeySection' out minBottom' out maxBottom);  	//---------------------  	// Section Lines  	//---------------------  	break;  case csRptSectionType.SECLN_HEADER:  	sKeySection = paintObj.getRptKeySec ();  	rptSec = pMoveHeader (sKeySection' out minBottom' out maxBottom' true' paintObj.getTag ()' out maxBottomSectionLine);  	isSecLn = true;  	break;  case csRptSectionType.SECLN_GROUPH:  	sKeySection = paintObj.getRptKeySec ();  	rptSec = pMoveGroupHeader (sKeySection' out minBottom' out maxBottom' true' paintObj.getTag ()' out maxBottomSectionLine);  	isSecLn = true;  	break;  case csRptSectionType.SECLN_DETAIL:  	sKeySection = paintObj.getRptKeySec ();  	rptSec = pMoveDetails (sKeySection' out minBottom' out maxBottom' true' paintObj.getTag ()' out maxBottomSectionLine);  	isSecLn = true;  	break;  case csRptSectionType.SECLN_GROUPF:  	sKeySection = paintObj.getRptKeySec ();  	rptSec = pMoveGroupFooter (sKeySection' out minBottom' out maxBottom' true' paintObj.getTag ()' out maxBottomSectionLine);  	isSecLn = true;  	break;  case csRptSectionType.SECLN_FOOTER:  	sKeySection = paintObj.getRptKeySec ();  	rptSec = pMoveFooter (sKeySection' out minBottom' out maxBottom' true' paintObj.getTag ()' out maxBottomSectionLine);  	isSecLn = true;  	m_indexSecLnMoved = rptSec.getSectionLines ().item (paintObj.getTag ()).getRealIndex ();  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pResizeControl,The following switch statement is missing a default case: switch (m_moveType) {  case csRptEditorMoveType.CSRPTEDMOVDOWN:  	w_aspect.setHeight (y - (w_aspect.getTop () - w_aspect.getOffset ()));  	break;  case csRptEditorMoveType.CSRPTEDMOVLEFT:  	w_aspect.setWidth (w_aspect.getWidth () + w_aspect.getLeft () - x);  	w_aspect.setLeft (x);  	break;  case csRptEditorMoveType.CSRPTEDMOVRIGHT:  	w_aspect.setWidth (x - w_aspect.getLeft ());  	break;  case csRptEditorMoveType.CSRPTEDMOVUP:  	w_aspect.setHeight (w_aspect.getHeight () + (w_aspect.getTop () - w_aspect.getOffset ()) - y);  	w_aspect.setTop (y + w_aspect.getOffset ());  	break;  case csRptEditorMoveType.CSRPTEDMOVLEFTDOWN:  	w_aspect.setHeight (y - (w_aspect.getTop () - w_aspect.getOffset ()));  	w_aspect.setWidth (w_aspect.getWidth () + w_aspect.getLeft () - x);  	w_aspect.setLeft (x);  	break;  case csRptEditorMoveType.CSRPTEDMOVLEFTUP:  	w_aspect.setHeight (w_aspect.getHeight () + (w_aspect.getTop () - w_aspect.getOffset ()) - y);  	w_aspect.setTop (y + w_aspect.getOffset ());  	w_aspect.setWidth (w_aspect.getWidth () + w_aspect.getLeft () - x);  	w_aspect.setLeft (x);  	break;  case csRptEditorMoveType.CSRPTEDMOVRIGHTDOWN:  	w_aspect.setWidth (x - w_aspect.getLeft ());  	w_aspect.setHeight (y - (w_aspect.getTop () - w_aspect.getOffset ()));  	break;  case csRptEditorMoveType.CSRPTEDMOVRIGHTUP:  	w_aspect.setHeight (w_aspect.getHeight () + (w_aspect.getTop () - w_aspect.getOffset ()) - y);  	w_aspect.setTop (y + w_aspect.getOffset ());  	w_aspect.setWidth (x - w_aspect.getLeft ());  	break;  }  
Missing Default,CSReportEditor,cEditor,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cEditor.cs,pMoveControlAfterResize,The following switch statement is missing a default case: switch (m_moveType) {  case csRptEditorMoveType.CSRPTEDMOVDOWN:  	m_paint.alingObjBottomToGrid (m_keySizing);  	break;  case csRptEditorMoveType.CSRPTEDMOVLEFT:  	m_paint.alingObjLeftToGrid (m_keySizing);  	break;  case csRptEditorMoveType.CSRPTEDMOVRIGHT:  	m_paint.alingObjRightToGrid (m_keySizing);  	break;  case csRptEditorMoveType.CSRPTEDMOVUP:  	m_paint.alingObjTopToGrid (m_keySizing);  	break;  case csRptEditorMoveType.CSRPTEDMOVLEFTDOWN:  	m_paint.alingObjLeftBottomToGrid (m_keySizing);  	break;  case csRptEditorMoveType.CSRPTEDMOVLEFTUP:  	m_paint.alingObjLeftTopToGrid (m_keySizing);  	break;  case csRptEditorMoveType.CSRPTEDMOVRIGHTDOWN:  	m_paint.alingObjRightBottomToGrid (m_keySizing);  	break;  case csRptEditorMoveType.CSRPTEDMOVRIGHTUP:  	m_paint.alingObjRightTopToGrid (m_keySizing);  	break;  }  
Missing Default,CSReportEditor,cGlobals,C:\repos\javiercrowsoft_CSReports.net\CSReports\CSReport\CSReportEditor\Codigo\CSReportEditor\cGlobals.cs,addCtrls,The following switch statement is missing a default case: switch (ctrl.getControlType ()) {  case csRptControlType.CSRPTCTFIELD:  	ctrlField = ctrl.getField ().getName ();  	break;  case csRptControlType.CSRPTCTDBIMAGE:  	ctrlInfo = ctrl.getField ().getName ();  	break;  case csRptControlType.CSRPTCTIMAGE:  	ctrlInfo = " (Image)";  	break;  case csRptControlType.CSRPTCTLABEL:  	ctrlInfo = ctrl.getLabel ().getText ();  	break;  }  
