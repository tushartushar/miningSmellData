Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Midi,ChordPattern,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,Chord,Cyclomatic complexity of the method is 12
Complex Method,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,FindMatchingChords,Cyclomatic complexity of the method is 12
Complex Method,Midi,InputDevice,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\InputDevice.cs,InputCallback,Cyclomatic complexity of the method is 12
Long Parameter List,Midi,InputDevice,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\InputDevice.cs,InputCallback,The method has 5 parameters.
Long Parameter List,Midi,NoteMessage,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Messages.cs,NoteMessage,The method has 5 parameters.
Long Parameter List,Midi,NoteOnMessage,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Messages.cs,NoteOnMessage,The method has 5 parameters.
Long Parameter List,Midi,NoteOffMessage,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Messages.cs,NoteOffMessage,The method has 5 parameters.
Long Parameter List,Midi,NoteOnOffMessage,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Messages.cs,NoteOnOffMessage,The method has 7 parameters.
Long Parameter List,Midi,ControlChangeMessage,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Messages.cs,ControlChangeMessage,The method has 5 parameters.
Long Parameter List,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeNoteOn,The method has 6 parameters.
Long Parameter List,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeNoteOff,The method has 6 parameters.
Long Parameter List,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeControlChange,The method has 6 parameters.
Long Parameter List,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeProgramChange,The method has 5 parameters.
Long Parameter List,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodePitchBend,The method has 5 parameters.
Long Parameter List,Midi,Win32API,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Win32API.cs,midiOutOpen,The method has 5 parameters.
Long Parameter List,Midi,Win32API,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Win32API.cs,midiInOpen,The method has 5 parameters.
Long Parameter List,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Build,The method has 5 parameters.
Long Identifier,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Build,The length of the parameter positionInOctaveToSequenceIndex is 31.
Long Statement,Midi,InputDevice,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\InputDevice.cs,InputCallback,The length of the statement  "					ControlChange (new ControlChangeMessage (this' channel' control' value' clock == null ? win32Timestamp / 1000f : clock.Time)); " is 126.
Long Statement,Midi,InputDevice,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\InputDevice.cs,InputCallback,The length of the statement  "					ProgramChange (new ProgramChangeMessage (this' channel' instrument' clock == null ? win32Timestamp / 1000f : clock.Time)); " is 122.
Long Statement,Midi,OutputDevice,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\OutputDevice.cs,SendPercussion,The length of the statement  "		CheckReturnCode (Win32API.midiOutShortMsg (handle' ShortMsg.EncodeNoteOn (Channel.Channel10' (Pitch)percussion' velocity))); " is 124.
Long Statement,Midi,Win32API,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Win32API.cs,midiOutOpen,The length of the statement  "	return midiOutOpen (out lphmo' uDeviceID' dwCallback' dwCallbackInstance' dwCallback == null ? MidiOpenFlags.CALLBACK_NULL : MidiOpenFlags.CALLBACK_FUNCTION); " is 158.
Long Statement,Midi,Win32API,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Win32API.cs,midiInOpen,The length of the statement  "	return midiInOpen (out lphMidiIn' uDeviceID' dwCallback' dwCallbackInstance' dwCallback == null ? MidiOpenFlags.CALLBACK_NULL : MidiOpenFlags.CALLBACK_FUNCTION); " is 161.
Complex Conditional,Midi,ChordPattern,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,ChordPattern,The conditional expression  "name == null || abbreviation == null || ascent == null || letterOffsets == null"  is complex.
Magic Number,Midi,ChannelExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Channel.cs,IsValid,The following statement contains a magic number: return (int)channel >= 0 && (int)channel < 16;  
Magic Number,Midi,ChordPattern,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,IsSequenceValid,The following statement contains a magic number: if (sequence.Length < 2 || sequence [0] != 0) {  	return false;  }  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,Chord,The following statement contains a magic number: this.positionInOctaveToContains = new bool[12];  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,Chord,The following statement contains a magic number: this.positionInOctaveToContains = new bool[12];  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,FindMatchingChords,The following statement contains a magic number: foreach (ChordPattern pattern in Patterns) {  	int[] semitoneSequence = pattern.Ascent;  	if (semitoneSequence.Length != semitonesAboveBass.Length) {  		continue;  	}  	for (int inversion = 0; inversion < semitoneSequence.Length; ++inversion) {  		int[] invertedSequence = new int[semitoneSequence.Length];  		RotateArrayLeft (semitoneSequence' invertedSequence' inversion);  		if (inversion != 0) {  			for (int i = 0; i < semitoneSequence.Length - inversion; ++i) {  				invertedSequence [i] -= 12;  			}  		}  		int[] iSemitonesAboveBass = new int[invertedSequence.Length];  		for (int i = 0; i < invertedSequence.Length; ++i) {  			iSemitonesAboveBass [i] = invertedSequence [i] - invertedSequence [0];  		}  		bool equals = true;  		for (int i = 0; i < iSemitonesAboveBass.Length; ++i) {  			if (iSemitonesAboveBass [i] != semitonesAboveBass [i]) {  				equals = false;  				break;  			}  		}  		if (equals) {  			Pitch rootPitch = inversion == 0 ? sorted [0] : sorted [sorted.Length - inversion];  			Note rootNote = rootPitch.NotePreferringSharps ();  			result.Add (new Chord (rootNote' pattern' inversion));  			if (rootPitch.NotePreferringFlats () != rootNote) {  				Note otherRootNote = rootPitch.NotePreferringFlats ();  				result.Add (new Chord (otherRootNote' pattern' inversion));  			}  		}  	}  }  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,FindMatchingChords,The following statement contains a magic number: for (int inversion = 0; inversion < semitoneSequence.Length; ++inversion) {  	int[] invertedSequence = new int[semitoneSequence.Length];  	RotateArrayLeft (semitoneSequence' invertedSequence' inversion);  	if (inversion != 0) {  		for (int i = 0; i < semitoneSequence.Length - inversion; ++i) {  			invertedSequence [i] -= 12;  		}  	}  	int[] iSemitonesAboveBass = new int[invertedSequence.Length];  	for (int i = 0; i < invertedSequence.Length; ++i) {  		iSemitonesAboveBass [i] = invertedSequence [i] - invertedSequence [0];  	}  	bool equals = true;  	for (int i = 0; i < iSemitonesAboveBass.Length; ++i) {  		if (iSemitonesAboveBass [i] != semitonesAboveBass [i]) {  			equals = false;  			break;  		}  	}  	if (equals) {  		Pitch rootPitch = inversion == 0 ? sorted [0] : sorted [sorted.Length - inversion];  		Note rootNote = rootPitch.NotePreferringSharps ();  		result.Add (new Chord (rootNote' pattern' inversion));  		if (rootPitch.NotePreferringFlats () != rootNote) {  			Note otherRootNote = rootPitch.NotePreferringFlats ();  			result.Add (new Chord (otherRootNote' pattern' inversion));  		}  	}  }  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,FindMatchingChords,The following statement contains a magic number: if (inversion != 0) {  	for (int i = 0; i < semitoneSequence.Length - inversion; ++i) {  		invertedSequence [i] -= 12;  	}  }  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,FindMatchingChords,The following statement contains a magic number: for (int i = 0; i < semitoneSequence.Length - inversion; ++i) {  	invertedSequence [i] -= 12;  }  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,FindMatchingChords,The following statement contains a magic number: invertedSequence [i] -= 12;  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,Build,The following statement contains a magic number: for (int i = 0; i < 12; ++i) {  	positionInOctaveToContains [i] = false;  }  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,Build,The following statement contains a magic number: for (int i = 0; i < pattern.Ascent.Length; ++i) {  	Pitch pitch = rootPitch + pattern.Ascent [i];  	char letter = (char)(pattern.LetterOffsets [i] + (int)(root.Letter));  	while (letter > 'G') {  		letter = (char)((int)letter - 7);  	}  	noteSequence [i] = pitch.NoteWithLetter (letter);  	positionInOctaveToContains [pitch.PositionInOctave ()] = true;  }  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,Build,The following statement contains a magic number: while (letter > 'G') {  	letter = (char)((int)letter - 7);  }  
Magic Number,Midi,Chord,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Chord.cs,Build,The following statement contains a magic number: letter = (char)((int)letter - 7);  
Magic Number,Midi,ControlExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Control.cs,IsValid,The following statement contains a magic number: return (int)control >= 0 && (int)control < 128;  
Magic Number,Midi,InstrumentExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Instrument.cs,IsValid,The following statement contains a magic number: return (int)instrument >= 0 && (int)instrument < 128;  
Magic Number,Midi,IntervalExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Interval.cs,Name,The following statement contains a magic number: if (value >= 0 && value <= 12) {  	return IntervalNames [value];  }  else {  	return String.Format ("{0} semitones"' value);  }  
Magic Number,Midi,Note,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Note.cs,PitchInOctave,The following statement contains a magic number: return (Pitch)(positionInOctave + 12 * (octave + 1));  
Magic Number,Midi,Note,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Note.cs,PitchAtOrAbove,The following statement contains a magic number: if (semitoneDelta < 0) {  	semitoneDelta += 12;  }  
Magic Number,Midi,Note,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Note.cs,PitchAtOrAbove,The following statement contains a magic number: semitoneDelta += 12;  
Magic Number,Midi,Note,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Note.cs,PitchAtOrBelow,The following statement contains a magic number: if (semitoneDelta > 0) {  	semitoneDelta -= 12;  }  
Magic Number,Midi,Note,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Note.cs,PitchAtOrBelow,The following statement contains a magic number: semitoneDelta -= 12;  
Magic Number,Midi,Note,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Note.cs,SemitonesUpTo,The following statement contains a magic number: if (semitoneDelta < 0) {  	semitoneDelta += 12;  }  
Magic Number,Midi,Note,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Note.cs,SemitonesUpTo,The following statement contains a magic number: semitoneDelta += 12;  
Magic Number,Midi,Note,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Note.cs,SemitonesDownTo,The following statement contains a magic number: if (semitoneDelta < 0) {  	semitoneDelta += 12;  }  
Magic Number,Midi,Note,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Note.cs,SemitonesDownTo,The following statement contains a magic number: semitoneDelta += 12;  
Magic Number,Midi,PercussionExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Percussion.cs,IsValid,The following statement contains a magic number: return (int)percussion >= 35 && (int)percussion <= 81;  
Magic Number,Midi,PercussionExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Percussion.cs,IsValid,The following statement contains a magic number: return (int)percussion >= 35 && (int)percussion <= 81;  
Magic Number,Midi,PercussionExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Percussion.cs,Name,The following statement contains a magic number: return PercussionNames [(int)percussion - 35];  
Magic Number,Midi,InputDevice,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\InputDevice.cs,CheckReturnCode,The following statement contains a magic number: if (rc != Win32API.MMRESULT.MMSYSERR_NOERROR) {  	StringBuilder errorMsg = new StringBuilder (128);  	rc = Win32API.midiInGetErrorText (rc' errorMsg);  	if (rc != Win32API.MMRESULT.MMSYSERR_NOERROR) {  		throw new DeviceException ("no error details");  	}  	throw new DeviceException (errorMsg.ToString ());  }  
Magic Number,Midi,NoteMessage,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Messages.cs,NoteMessage,The following statement contains a magic number: if (velocity < 0 || velocity > 127) {  	throw new ArgumentOutOfRangeException ("velocity");  }  
Magic Number,Midi,PercussionMessage,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Messages.cs,PercussionMessage,The following statement contains a magic number: if (velocity < 0 || velocity > 127) {  	throw new ArgumentOutOfRangeException ("velocity");  }  
Magic Number,Midi,ControlChangeMessage,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Messages.cs,ControlChangeMessage,The following statement contains a magic number: if (value < 0 || value > 127) {  	throw new ArgumentOutOfRangeException ("control");  }  
Magic Number,Midi,PitchBendMessage,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Messages.cs,PitchBendMessage,The following statement contains a magic number: if (value < 0 || value > 16383) {  	throw new ArgumentOutOfRangeException ("value");  }  
Magic Number,Midi,OutputDevice,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\OutputDevice.cs,CheckReturnCode,The following statement contains a magic number: if (rc != Win32API.MMRESULT.MMSYSERR_NOERROR) {  	StringBuilder errorMsg = new StringBuilder (128);  	rc = Win32API.midiOutGetErrorText (rc' errorMsg);  	if (rc != Win32API.MMRESULT.MMSYSERR_NOERROR) {  		throw new DeviceException ("no error details");  	}  	throw new DeviceException (errorMsg.ToString ());  }  
Magic Number,Midi,PitchExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Pitch.cs,IsInMidiRange,The following statement contains a magic number: return (int)pitch >= 0 && (int)pitch < 128;  
Magic Number,Midi,PitchExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Pitch.cs,Octave,The following statement contains a magic number: return (p < 0 ? (p - 11) / 12 : p / 12) - 1;  
Magic Number,Midi,PitchExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Pitch.cs,Octave,The following statement contains a magic number: return (p < 0 ? (p - 11) / 12 : p / 12) - 1;  
Magic Number,Midi,PitchExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Pitch.cs,Octave,The following statement contains a magic number: return (p < 0 ? (p - 11) / 12 : p / 12) - 1;  
Magic Number,Midi,PitchExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Pitch.cs,PositionInOctave,The following statement contains a magic number: return p < 0 ? 11 - ((-p - 1) % 12) : p % 12;  
Magic Number,Midi,PitchExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Pitch.cs,PositionInOctave,The following statement contains a magic number: return p < 0 ? 11 - ((-p - 1) % 12) : p % 12;  
Magic Number,Midi,PitchExtensionMethods,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Pitch.cs,PositionInOctave,The following statement contains a magic number: return p < 0 ? 11 - ((-p - 1) % 12) : p % 12;  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeNoteOn,The following statement contains a magic number: pitch = (Pitch)(((int)dwParam1 & 0xff00) >> 8);  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeNoteOn,The following statement contains a magic number: velocity = (((int)dwParam1 & 0xff0000) >> 16);  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeNoteOn,The following statement contains a magic number: if (velocity < 0 || velocity > 127) {  	throw new ArgumentOutOfRangeException ("Velocity is out of range.");  }  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeNoteOn,The following statement contains a magic number: return (UInt32)(0x90 | ((int)channel) | ((int)pitch << 8) | (velocity << 16));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeNoteOn,The following statement contains a magic number: return (UInt32)(0x90 | ((int)channel) | ((int)pitch << 8) | (velocity << 16));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeNoteOff,The following statement contains a magic number: pitch = (Pitch)(((int)dwParam1 & 0xff00) >> 8);  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeNoteOff,The following statement contains a magic number: velocity = (((int)dwParam1 & 0xff0000) >> 16);  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeNoteOff,The following statement contains a magic number: if (velocity < 0 || velocity > 127) {  	throw new ArgumentOutOfRangeException ("Velocity is out of range.");  }  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeNoteOff,The following statement contains a magic number: return (UInt32)(0x80 | ((int)channel) | ((int)pitch << 8) | (velocity << 16));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeNoteOff,The following statement contains a magic number: return (UInt32)(0x80 | ((int)channel) | ((int)pitch << 8) | (velocity << 16));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeControlChange,The following statement contains a magic number: control = (Control)(((int)dwParam1 & 0xff00) >> 8);  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeControlChange,The following statement contains a magic number: value = (((int)dwParam1 & 0xff0000) >> 16);  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeControlChange,The following statement contains a magic number: if (value < 0 || value > 127) {  	throw new ArgumentOutOfRangeException ("Value is out of range.");  }  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeControlChange,The following statement contains a magic number: return (UInt32)(0xB0 | (int)(channel) | ((int)control << 8) | (value << 16));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeControlChange,The following statement contains a magic number: return (UInt32)(0xB0 | (int)(channel) | ((int)control << 8) | (value << 16));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodeProgramChange,The following statement contains a magic number: instrument = (Instrument)(((int)dwParam1 & 0xff00) >> 8);  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodeProgramChange,The following statement contains a magic number: return (UInt32)(0xC0 | (int)(channel) | ((int)instrument << 8));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodePitchBend,The following statement contains a magic number: value = ((((int)dwParam1 >> 9) & 0x3f80) | (((int)dwParam1 >> 8) & 0x7f));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,DecodePitchBend,The following statement contains a magic number: value = ((((int)dwParam1 >> 9) & 0x3f80) | (((int)dwParam1 >> 8) & 0x7f));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodePitchBend,The following statement contains a magic number: if (value < 0 || value > 16383) {  	throw new ArgumentOutOfRangeException ("Value is out of range.");  }  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodePitchBend,The following statement contains a magic number: return (UInt32)(0xE0 | (int)(channel) | ((value & 0x7f) << 8) | ((value & 0x3f80) << 9));  
Magic Number,Midi,ShortMsg,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\ShortMsg.cs,EncodePitchBend,The following statement contains a magic number: return (UInt32)(0xE0 | (int)(channel) | ((value & 0x7f) << 8) | ((value & 0x3f80) << 9));  
Magic Number,Midi,ScalePattern,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,AscentIsValid,The following statement contains a magic number: if (ascent.Length < 2 || ascent [0] != 0 || ascent [ascent.Length - 1] >= 12) {  	return false;  }  
Magic Number,Midi,ScalePattern,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,AscentIsValid,The following statement contains a magic number: if (ascent.Length < 2 || ascent [0] != 0 || ascent [ascent.Length - 1] >= 12) {  	return false;  }  
Magic Number,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Scale,The following statement contains a magic number: this.positionInOctaveToSequenceIndex = new int[12];  
Magic Number,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Build,The following statement contains a magic number: for (int i = 0; i < 12; ++i) {  	positionInOctaveToSequenceIndex [i] = -1;  }  
Magic Number,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Build,The following statement contains a magic number: for (int i = 0; i < pattern.Ascent.Length; ++i) {  	Pitch pitch = tonicPitch + pattern.Ascent [i];  	Note note;  	if (pattern.Ascent.Length == 7) {  		char letter = (char)(i + (int)(tonic.Letter));  		if (letter > 'G') {  			letter = (char)((int)letter - 7);  		}  		note = pitch.NoteWithLetter (letter);  	}  	else {  		note = pitch.NotePreferringSharps ();  	}  	noteSequence [i] = note;  	positionInOctaveToSequenceIndex [pitch.PositionInOctave ()] = i;  }  
Magic Number,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Build,The following statement contains a magic number: for (int i = 0; i < pattern.Ascent.Length; ++i) {  	Pitch pitch = tonicPitch + pattern.Ascent [i];  	Note note;  	if (pattern.Ascent.Length == 7) {  		char letter = (char)(i + (int)(tonic.Letter));  		if (letter > 'G') {  			letter = (char)((int)letter - 7);  		}  		note = pitch.NoteWithLetter (letter);  	}  	else {  		note = pitch.NotePreferringSharps ();  	}  	noteSequence [i] = note;  	positionInOctaveToSequenceIndex [pitch.PositionInOctave ()] = i;  }  
Magic Number,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Build,The following statement contains a magic number: if (pattern.Ascent.Length == 7) {  	char letter = (char)(i + (int)(tonic.Letter));  	if (letter > 'G') {  		letter = (char)((int)letter - 7);  	}  	note = pitch.NoteWithLetter (letter);  }  else {  	note = pitch.NotePreferringSharps ();  }  
Magic Number,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Build,The following statement contains a magic number: if (pattern.Ascent.Length == 7) {  	char letter = (char)(i + (int)(tonic.Letter));  	if (letter > 'G') {  		letter = (char)((int)letter - 7);  	}  	note = pitch.NoteWithLetter (letter);  }  else {  	note = pitch.NotePreferringSharps ();  }  
Magic Number,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Build,The following statement contains a magic number: if (letter > 'G') {  	letter = (char)((int)letter - 7);  }  
Magic Number,Midi,Scale,C:\repos\std66_TomiSoft-Roland-Style-Studio\Midi\Scale.cs,Build,The following statement contains a magic number: letter = (char)((int)letter - 7);  
