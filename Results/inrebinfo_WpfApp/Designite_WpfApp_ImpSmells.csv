Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Wpf,CommonExtensions,C:\repos\inrebinfo_WpfApp\Wpf\CommonExtensions.cs,FindMethod,Cyclomatic complexity of the method is 10
Complex Method,Wpf,CommonExtensions,C:\repos\inrebinfo_WpfApp\Wpf\CommonExtensions.cs,FindGenericMethod,Cyclomatic complexity of the method is 11
Long Parameter List,Wpf,CommonExtensions,C:\repos\inrebinfo_WpfApp\Wpf\CommonExtensions.cs,FindGenericMethod,The method has 5 parameters.
Long Parameter List,Wpf.Controls,ListView,C:\repos\inrebinfo_WpfApp\Wpf\Controls\ListView.cs,OnSelectionChanged,The method has 5 parameters.
Long Statement,Wpf,CommonExtensions,C:\repos\inrebinfo_WpfApp\Wpf\CommonExtensions.cs,FindSequences,The length of the statement  "	if (seqType.IsGenericType && seqType.GetGenericArguments ().Length == 1 && seqType.GetGenericTypeDefinition () == typeof(IEnumerable<>)) { " is 138.
Long Statement,Wpf,CommonExtensions,C:\repos\inrebinfo_WpfApp\Wpf\CommonExtensions.cs,FindSequences,The length of the statement  "	if (seqType.IsGenericType && seqType.GetGenericArguments ().Length == 1 && seqType.GetGenericTypeDefinition () == typeof(IQueryable<>)) { " is 137.
Long Statement,Wpf,CommonExtensions,C:\repos\inrebinfo_WpfApp\Wpf\CommonExtensions.cs,FindSequences,The length of the statement  "	if (seqType.IsGenericType && seqType.GetGenericArguments ().Length == 1 && seqType.GetGenericTypeDefinition () == typeof(IOrderedQueryable<>)) { " is 144.
Long Statement,Wpf,CommonExtensions,C:\repos\inrebinfo_WpfApp\Wpf\CommonExtensions.cs,CallMethod,The length of the statement  "		throw new ArgumentOutOfRangeException ("methodName"' string.Format ("Method {0} was not found in Type {1}"' methodName' obj.GetType ().FullName)); " is 146.
Long Statement,Wpf,CommonExtensions,C:\repos\inrebinfo_WpfApp\Wpf\CommonExtensions.cs,FindGenericMethod,The length of the statement  "		MethodInfo mi = isPrivate ? type.GetMethod (methodName' BindingFlags.Instance | BindingFlags.FlattenHierarchy | BindingFlags.NonPublic) : type.GetMethod (methodName); " is 166.
Long Statement,Wpf,CommonExtensions,C:\repos\inrebinfo_WpfApp\Wpf\CommonExtensions.cs,FindGenericMethod,The length of the statement  "		MethodInfo[] methods = isPrivate ? type.GetMethods (BindingFlags.Instance | BindingFlags.FlattenHierarchy | BindingFlags.NonPublic) : type.GetMethods (); " is 153.
Long Statement,Wpf,Proxy,C:\repos\inrebinfo_WpfApp\Wpf\Proxy.cs,SearchInvoiceLines,The length of the statement  "	var serializer = new XmlSerializer (typeof(List<InvoiceLineObject>)' new XmlRootAttribute ("ArrayOfInvoiceLineObject")); " is 120.
Long Statement,Wpf.Converter,AbstractShadeConverter,C:\repos\inrebinfo_WpfApp\Wpf\Converter\ShadeConverter.cs,Convert,The length of the statement  "	if (!(parameter is string) || !float.TryParse ((string)parameter' NumberStyles.Any' CultureInfo.GetCultureInfo ("en-us")' out amount)) { " is 136.
Long Statement,Wpf.Converter,LighterShadeConverter,C:\repos\inrebinfo_WpfApp\Wpf\Converter\ShadeConverter.cs,MakeLighter,The length of the statement  "	return Color.FromScRgb (value.ScA' (1.0f - lighter) * value.ScR + lighter' (1.0f - lighter) * value.ScG + lighter' (1.0f - lighter) * value.ScB + lighter); " is 155.
Long Statement,Wpf.Converter,DarkerShadeConverter,C:\repos\inrebinfo_WpfApp\Wpf\Converter\ShadeConverter.cs,MakeDarker,The length of the statement  "	return Color.FromScRgb (value.ScA' (1.0f - darker) * value.ScR' (1.0f - darker) * value.ScG' (1.0f - darker) * value.ScB); " is 122.
Long Statement,Wpf.ViewModels,ContactEditViewModel,C:\repos\inrebinfo_WpfApp\Wpf\ViewModels\ContactEditViewModel.cs,CanEdit,The length of the statement  "	return (!string.IsNullOrWhiteSpace (EingabeVorname) && !string.IsNullOrWhiteSpace (EingabeNachname)) || (!string.IsNullOrWhiteSpace (EingabeFirma)); " is 148.
Long Statement,Wpf.ViewModels,InvoiceEditViewModel,C:\repos\inrebinfo_WpfApp\Wpf\ViewModels\InvoiceEditViewModel.cs,FillList,The length of the statement  "		Nettogesamt = (Convert.ToDouble (Nettogesamt) + (Convert.ToDouble (item.Menge) * Convert.ToDouble (item.Stkpreis))).ToString (); " is 128.
Long Statement,Wpf.ViewModels,InvoiceEditViewModel,C:\repos\inrebinfo_WpfApp\Wpf\ViewModels\InvoiceEditViewModel.cs,AddNewLine,The length of the statement  "	Nettogesamt = (Convert.ToDouble (Nettogesamt) + (Convert.ToDouble (obj.Menge) * Convert.ToDouble (obj.Stkpreis))).ToString (); " is 126.
Long Statement,Wpf.Controls,ListView,C:\repos\inrebinfo_WpfApp\Wpf\Controls\ListView.cs,AttachSelectedViewModelsCollectionChanged,The length of the statement  "		((INotifyCollectionChanged)SelectedViewModels).CollectionChanged += new NotifyCollectionChangedEventHandler (list_CollectionChanged); " is 133.
Magic Number,Wpf,PdfCreator,C:\repos\inrebinfo_WpfApp\Wpf\PdfCreator.cs,WritePDF,The following statement contains a magic number: using (Document document = new Document (iTextSharp.text.PageSize.A4)) {  	PdfWriter.GetInstance (document' stream);  	document.Open ();  	Font font = new Font (Font.FontFamily.TIMES_ROMAN' 10f);  	Paragraph pKundenID = new Paragraph ("Kundennummer: " + obj.FK_Kontakt' font);  	document.Add (pKundenID);  	Paragraph pErstellDatum = new Paragraph ("Erstellt am: " + obj.ErstellungsDatum' font);  	document.Add (pErstellDatum);  	Paragraph pFaelligDatum = new Paragraph ("Fällig am: " + obj.FaelligkeitsDatum' font);  	document.Add (pFaelligDatum);  	Paragraph pKommentar = new Paragraph ("Kommentar: " + obj.Kommentar' font);  	document.Add (pKommentar);  	Paragraph pNachricht = new Paragraph ("Nachricht: " + obj.Nachricht' font);  	document.Add (pNachricht);  	Paragraph pRechNr = new Paragraph ("Rechnungsnummer: " + obj.ID' font);  	document.Add (pRechNr);  	document.Add (Chunk.NEWLINE);  	PdfPTable table = new PdfPTable (4);  	table.AddCell (new PdfPCell (new Phrase ("Menge"' font)));  	table.AddCell (new PdfPCell (new Phrase ("Stückpreis"' font)));  	table.AddCell (new PdfPCell (new Phrase ("UST"' font)));  	table.AddCell (new PdfPCell (new Phrase ("Netto ges."' font)));  	foreach (InvoiceLineObject line in obj.InvoiceLines) {  		double ges = Convert.ToDouble (line.Stkpreis) * Convert.ToDouble (line.Menge);  		netto += ges;  		brutto += ges * (1 + (Convert.ToDouble (line.UST) / 100));  		table.AddCell (new PdfPCell (new Phrase (line.Menge' font)));  		table.AddCell (new PdfPCell (new Phrase (line.Stkpreis + "€"' font)));  		table.AddCell (new PdfPCell (new Phrase (line.UST + "%"' font)));  		table.AddCell (new PdfPCell (new Phrase (ges.ToString () + "€"' font)));  	}  	document.Add (table);  	document.Add (Chunk.NEWLINE);  	Paragraph pFullNetto = new Paragraph ("Summe netto: " + netto' font);  	document.Add (pFullNetto);  	Paragraph pFullBrutto = new Paragraph ("Summe brutto: " + brutto' font);  	document.Add (pFullBrutto);  }  
Magic Number,Wpf,PdfCreator,C:\repos\inrebinfo_WpfApp\Wpf\PdfCreator.cs,WritePDF,The following statement contains a magic number: using (Document document = new Document (iTextSharp.text.PageSize.A4)) {  	PdfWriter.GetInstance (document' stream);  	document.Open ();  	Font font = new Font (Font.FontFamily.TIMES_ROMAN' 10f);  	Paragraph pKundenID = new Paragraph ("Kundennummer: " + obj.FK_Kontakt' font);  	document.Add (pKundenID);  	Paragraph pErstellDatum = new Paragraph ("Erstellt am: " + obj.ErstellungsDatum' font);  	document.Add (pErstellDatum);  	Paragraph pFaelligDatum = new Paragraph ("Fällig am: " + obj.FaelligkeitsDatum' font);  	document.Add (pFaelligDatum);  	Paragraph pKommentar = new Paragraph ("Kommentar: " + obj.Kommentar' font);  	document.Add (pKommentar);  	Paragraph pNachricht = new Paragraph ("Nachricht: " + obj.Nachricht' font);  	document.Add (pNachricht);  	Paragraph pRechNr = new Paragraph ("Rechnungsnummer: " + obj.ID' font);  	document.Add (pRechNr);  	document.Add (Chunk.NEWLINE);  	PdfPTable table = new PdfPTable (4);  	table.AddCell (new PdfPCell (new Phrase ("Menge"' font)));  	table.AddCell (new PdfPCell (new Phrase ("Stückpreis"' font)));  	table.AddCell (new PdfPCell (new Phrase ("UST"' font)));  	table.AddCell (new PdfPCell (new Phrase ("Netto ges."' font)));  	foreach (InvoiceLineObject line in obj.InvoiceLines) {  		double ges = Convert.ToDouble (line.Stkpreis) * Convert.ToDouble (line.Menge);  		netto += ges;  		brutto += ges * (1 + (Convert.ToDouble (line.UST) / 100));  		table.AddCell (new PdfPCell (new Phrase (line.Menge' font)));  		table.AddCell (new PdfPCell (new Phrase (line.Stkpreis + "€"' font)));  		table.AddCell (new PdfPCell (new Phrase (line.UST + "%"' font)));  		table.AddCell (new PdfPCell (new Phrase (ges.ToString () + "€"' font)));  	}  	document.Add (table);  	document.Add (Chunk.NEWLINE);  	Paragraph pFullNetto = new Paragraph ("Summe netto: " + netto' font);  	document.Add (pFullNetto);  	Paragraph pFullBrutto = new Paragraph ("Summe brutto: " + brutto' font);  	document.Add (pFullBrutto);  }  
Magic Number,Wpf,PdfCreator,C:\repos\inrebinfo_WpfApp\Wpf\PdfCreator.cs,WritePDF,The following statement contains a magic number: foreach (InvoiceLineObject line in obj.InvoiceLines) {  	double ges = Convert.ToDouble (line.Stkpreis) * Convert.ToDouble (line.Menge);  	netto += ges;  	brutto += ges * (1 + (Convert.ToDouble (line.UST) / 100));  	table.AddCell (new PdfPCell (new Phrase (line.Menge' font)));  	table.AddCell (new PdfPCell (new Phrase (line.Stkpreis + "€"' font)));  	table.AddCell (new PdfPCell (new Phrase (line.UST + "%"' font)));  	table.AddCell (new PdfPCell (new Phrase (ges.ToString () + "€"' font)));  }  
Magic Number,Wpf,PdfCreator,C:\repos\inrebinfo_WpfApp\Wpf\PdfCreator.cs,WritePDF,The following statement contains a magic number: brutto += ges * (1 + (Convert.ToDouble (line.UST) / 100));  
Magic Number,Wpf.ViewModels,InvoiceEditViewModel,C:\repos\inrebinfo_WpfApp\Wpf\ViewModels\InvoiceEditViewModel.cs,FillList,The following statement contains a magic number: foreach (var item in result) {  	this.Items.Add (new InvoiceLineViewModel (item));  	invoicelines.Add (item);  	Nettogesamt = (Convert.ToDouble (Nettogesamt) + (Convert.ToDouble (item.Menge) * Convert.ToDouble (item.Stkpreis))).ToString ();  	double brutto = Convert.ToDouble (Bruttogesamt);  	double multiplikator = (1 + (Convert.ToDouble (item.UST) / 100));  	double netto = Convert.ToDouble (item.Menge) * Convert.ToDouble (item.Stkpreis);  	Bruttogesamt = (brutto + (netto * multiplikator)).ToString ();  }  
