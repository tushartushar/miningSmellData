Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectTrigger,Cyclomatic complexity of the method is 18
Complex Method,BAF.Scheduler.Extensions,ScheduleBuilderExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Extensions\ScheduleBuilderExtensions.cs,WithMisfireHandlingInstruction,Cyclomatic complexity of the method is 10
Complex Method,BAF.Scheduler.Extensions,ScheduleBuilderExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Extensions\ScheduleBuilderExtensions.cs,WithMisfireHandlingInstruction,Cyclomatic complexity of the method is 10
Long Parameter List,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,GetJob,The method has 5 parameters.
Long Parameter List,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,GetJobs,The method has 5 parameters.
Long Parameter List,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The method has 47 parameters.
Long Parameter List,BAF.Scheduler.Mappings,SchedulerLogMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\SchedulerLogMapping.cs,Configure,The method has 104 parameters.
Long Parameter List,BAF.Scheduler.Mappings,TriggerMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\TriggerMapping.cs,Configure,The method has 95 parameters.
Long Parameter List,BAF.Scheduler.Mappings,JobDetailMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\JobDetailMapping.cs,Configure,The method has 31 parameters.
Long Parameter List,BAF.Scheduler.Providers,SchedulerProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Providers\SchedulerProvider.cs,SchedulerProvider,The method has 5 parameters.
Long Statement,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectTrigger,The length of the statement  "				TriggerBuilder tb = TriggerBuilder.Create ().WithDescription (description).WithPriority (priority).StartAt (startTimeUtc).EndAt (endTimeUtc).WithIdentity (triggerKey).ModifiedByCalendar (calendarName).WithSchedule (triggerProps.ScheduleBuilder).ForJob (new JobKey (jobName' jobGroup)); " is 285.
Long Statement,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,PrepareCommand,The length of the statement  "	if (!cmd.Parameters.Contains ("createdBy") && commandText != null && commandText.StartsWith ("insert"' StringComparison.CurrentCultureIgnoreCase)) " is 146.
Long Statement,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,ApplyFilter,The length of the statement  "	if (!string.IsNullOrEmpty (filter.CreatedBy) && query.IndexOf (ColumnCreatedBy' whereIndex' StringComparison.InvariantCulture) == -1) { " is 135.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,GetTriggerGroups,The length of the statement  "		TriggerDetails = filter.IncludeTriggers ? _scheduler.GetTriggerKeys (GroupMatcher<TriggerKey>.GroupEquals (o)).Select (t => _scheduler.GetTrigger (t)).Select (Convert) : new List<BaseTrigger> () " is 194.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,GetJob,The length of the statement  "	var oldestContext = _scheduler.GetCurrentlyExecutingJobs ().Where (r => r.JobDetail.Key.ToString () == jobKey.ToString ()).OrderBy (r => r.FireTimeUtc).FirstOrDefault (); " is 170.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,GetJobs,The length of the statement  "		OldestContext = runningJobs.Where (r => r.JobDetail.Key.ToString () == o.ToString ()).OrderBy (r => r.FireTimeUtc).FirstOrDefault () " is 132.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,BuildTrigger,The length of the statement  "	return FillGenericTrigerBuilder (trigger).WithCronSchedule (trigger.CronExpression' o => o.WithMisfireHandlingInstruction (trigger.MisfireInstruction)).Build (); " is 161.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,BuildTrigger,The length of the statement  "	return FillGenericTrigerBuilder (trigger).WithDailyTimeIntervalSchedule (o => o.EndingDailyAt (trigger.EndTimeOfDay.ToTimeOfDay ()).OnDaysOfTheWeek (!trigger.DaysOfWeek.Any () ? DailyTimeIntervalScheduleBuilder.AllDaysOfTheWeek : new Quartz.Collection.HashSet<DayOfWeek> (trigger.DaysOfWeek)).StartingDailyAt (trigger.StartTimeOfDay.ToTimeOfDay ()).WithInterval (trigger.RepeatInterval' trigger.RepeatIntervalUnit.ToQuartz ()).WithMisfireHandlingInstruction (trigger.MisfireInstruction).WithRepeatCount (trigger.RepeatCount)).Build (); " is 535.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,BuildTrigger,The length of the statement  "	return FillGenericTrigerBuilder (trigger).WithSimpleSchedule (o => o.WithInterval (trigger.RepeatInterval).WithRepeatCount (trigger.RepeatCount)).Build (); " is 155.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,FillGenericTrigerBuilder,The length of the statement  "	return TriggerBuilder.Create ().WithDescription (trigger.Description).WithIdentity (trigger.Name' trigger.Group).WithPriority (trigger.Priority).EndAt (trigger.EndTimeUtc).StartAt (trigger.StartTimeUtc).ModifiedByCalendar (trigger.CalendarName).UsingJobData (new JobDataMap (trigger.GetJobData ())); " is 299.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,Convert,The length of the statement  "		Triggers = includeTriggers ? _scheduler.GetTriggersOfJob (jobDetail.Key).Select (Convert).ToList () : new List<BaseTrigger> () " is 126.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,IsSaveRequired,The length of the statement  "	return !jobDetail.Equals (toCompare' true' true) || !jobDetail.JobDataMap.Count.Equals (toCompare.JobDataMap.Count) || !jobDetail.JobDataMap.All (o => toCompare.JobDataMap.ContainsKey (o.Key) && toCompare.JobDataMap [o.Key] == o.Value) || !(jobDetail.JobType == toCompare.JobType) || !jobDetail.Key.Equals (toCompare.Key); " is 322.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,IsSaveRequired,The length of the statement  "	return !trigger.Equals (toCompare' true' true) || !trigger.JobDataMap.Count.Equals (toCompare.JobDataMap.Count) || !trigger.JobDataMap.All (o => toCompare.JobDataMap.ContainsKey (o.Key) && toCompare.JobDataMap [o.Key] == o.Value) || !trigger.JobKey.Equals (toCompare.JobKey) || !trigger.Key.Equals (toCompare.Key) || IsSaveRequired (trigger as IDailyTimeIntervalTrigger' toCompare as IDailyTimeIntervalTrigger) || IsSaveRequired (trigger as ICronTrigger' toCompare as ICronTrigger); " is 482.
Long Statement,BAF.Scheduler,SchedulerFacade,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\SchedulerFacade.cs,IsSaveRequired,The length of the statement  "	return !(trigger == null || toCompare == null || (trigger.DaysOfWeek.Count == toCompare.DaysOfWeek.Count && trigger.DaysOfWeek.All (o => toCompare.DaysOfWeek.Contains (o)))); " is 174.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<BAFBaseCalendar' BaseCalendar> ().Include<BAFDailyCalendar' DailyCalendar> ().Include<BAFWeeklyCalendar' WeeklyCalendar> ().Include<BAFMonthlyCalendar' MonthlyCalendar> ().Include<BAFAnnualCalendar' AnnualCalendar> ().Include<BAFHolidayCalendar' HolidayCalendar> ().Include<BAFCronCalendar' CronCalendar> ().ForMember (dest => dest.CalendarBase' o => o.Ignore ()); " is 374.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "		return new DailyCalendar (start.Hours' start.Minutes' start.Seconds' start.Milliseconds' end.Hours' end.Minutes' end.Seconds' end.Milliseconds); " is 144.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<BAFWeeklyCalendar' WeeklyCalendar> ().ForMember (dest => dest.DaysExcluded' o => o.MapFrom (src => GetExcludedDaysOfweek (src.ExcludedDaysOfWeek))); " is 158.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<BAFMonthlyCalendar' MonthlyCalendar> ().ForMember (dest => dest.DaysExcluded' o => o.MapFrom (src => GetExcludedDaysOfMonth (src.ExcludedDays))); " is 155.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<BAFAnnualCalendar' AnnualCalendar> ().ForMember (dest => dest.DaysExcluded' o => o.MapFrom (src => GetExcludedDays (src.DaysExcluded))); " is 146.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<BAFHolidayCalendar' HolidayCalendar> ().ForMember (dest => dest.ExcludedDates' o => o.MapFrom (src => new SortedSet<DateTime> (src.ExcludedDates))); " is 158.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<BAFCronCalendar' CronCalendar> ().ForMember (dest => dest.CronExpression' o => o.MapFrom (src => new CronExpression (src.CronExpression))); " is 149.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<BaseCalendar' BAFBaseCalendar> ().Include<DailyCalendar' BAFDailyCalendar> ().Include<WeeklyCalendar' BAFWeeklyCalendar> ().Include<MonthlyCalendar' BAFMonthlyCalendar> ().Include<AnnualCalendar' BAFAnnualCalendar> ().Include<HolidayCalendar' BAFHolidayCalendar> ().Include<CronCalendar' BAFCronCalendar> ().ForMember (dest => dest.Name' o => o.Ignore ()).ForMember (dest => dest.NextIncludedTimeUtc' o => o.MapFrom (src => src.GetNextIncludedTimeUtc (CurrentUserDateTimeOffset ()).DateTime)); " is 503.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<DailyCalendar' BAFDailyCalendar> ().ForMember (dest => dest.ExcludedStartTime' o => o.MapFrom (src => src.GetExcludedStartTime ())).ForMember (dest => dest.ExcludedEndTime' o => o.MapFrom (src => src.GetExcludedEndTime ())).ForMember (dest => dest.InvertTimeRange' o => o.MapFrom (src => src.GetInvertTimeRange ())); " is 326.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<WeeklyCalendar' BAFWeeklyCalendar> ().ForMember (dest => dest.ExcludedDaysOfWeek' o => o.MapFrom (src => GetExcludedDaysOfWeek (src.DaysExcluded))); " is 158.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<MonthlyCalendar' BAFMonthlyCalendar> ().ForMember (dest => dest.ExcludedDays' o => o.MapFrom (src => GetExcludedDaysOfMonth (src.DaysExcluded))); " is 155.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<AnnualCalendar' BAFAnnualCalendar> ().ForMember (dest => dest.DaysExcluded' o => o.MapFrom (src => GetExcludedDays (src.DaysExcluded))); " is 146.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<HolidayCalendar' BAFHolidayCalendar> ().ForMember (dest => dest.ExcludedDates' o => o.MapFrom (src => src.ExcludedDates.ToList ())); " is 142.
Long Statement,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,Configure,The length of the statement  "	CreateMap<CronCalendar' BAFCronCalendar> ().ForMember (dest => dest.CronExpression' o => o.MapFrom (src => src.CronExpression.CronExpressionString)); " is 149.
Long Statement,BAF.Scheduler.Mappings,SchedulerLogMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\SchedulerLogMapping.cs,Configure,The length of the statement  "	CreateMap<TriggerKey' SchedulerLog> ().ForMember (dest => dest.Id' o => o.Ignore ()).ForMember (dest => dest.SchedulerName' o => o.Ignore ()).ForMember (dest => dest.Error' o => o.Ignore ()).ForMember (dest => dest.Date' o => o.Ignore ()).ForMember (dest => dest.Type' o => o.Ignore ()).ForMember (dest => dest.JobGroup' o => o.Ignore ()).ForMember (dest => dest.JobName' o => o.Ignore ()).ForMember (dest => dest.TriggerName' o => o.MapFrom (src => src.Name)).ForMember (dest => dest.TriggerGroup' o => o.MapFrom (src => src.Group)); " is 534.
Long Statement,BAF.Scheduler.Mappings,SchedulerLogMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\SchedulerLogMapping.cs,Configure,The length of the statement  "	CreateMap<ITrigger' SchedulerLog> ().ForMember (dest => dest.Id' o => o.Ignore ()).ForMember (dest => dest.SchedulerName' o => o.Ignore ()).ForMember (dest => dest.Error' o => o.Ignore ()).ForMember (dest => dest.Date' o => o.Ignore ()).ForMember (dest => dest.Type' o => o.Ignore ()).ForMember (dest => dest.JobGroup' o => o.MapFrom (src => src.JobKey.Group)).ForMember (dest => dest.JobName' o => o.MapFrom (src => src.JobKey.Name)).ForMember (dest => dest.TriggerName' o => o.MapFrom (src => src.Key.Name)).ForMember (dest => dest.TriggerGroup' o => o.MapFrom (src => src.Key.Group)); " is 587.
Long Statement,BAF.Scheduler.Mappings,SchedulerLogMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\SchedulerLogMapping.cs,Configure,The length of the statement  "	CreateMap<IJobExecutionContext' SchedulerLog> ().ForMember (dest => dest.Id' o => o.Ignore ()).ForMember (dest => dest.SchedulerName' o => o.Ignore ()).ForMember (dest => dest.Error' o => o.Ignore ()).ForMember (dest => dest.Date' o => o.Ignore ()).ForMember (dest => dest.Type' o => o.Ignore ()).ForMember (dest => dest.JobGroup' o => o.MapFrom (src => src.JobDetail.Key.Group)).ForMember (dest => dest.JobName' o => o.MapFrom (src => src.JobDetail.Key.Name)).ForMember (dest => dest.TriggerName' o => o.MapFrom (src => src.Trigger.Key.Name)).ForMember (dest => dest.TriggerGroup' o => o.MapFrom (src => src.Trigger.Key.Group)); " is 629.
Long Statement,BAF.Scheduler.Mappings,SchedulerLogMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\SchedulerLogMapping.cs,Configure,The length of the statement  "	CreateMap<IJobDetail' SchedulerLog> ().ForMember (dest => dest.Id' o => o.Ignore ()).ForMember (dest => dest.SchedulerName' o => o.Ignore ()).ForMember (dest => dest.Error' o => o.Ignore ()).ForMember (dest => dest.Date' o => o.Ignore ()).ForMember (dest => dest.Type' o => o.Ignore ()).ForMember (dest => dest.JobGroup' o => o.MapFrom (src => src.Key.Group)).ForMember (dest => dest.JobName' o => o.MapFrom (src => src.Key.Name)).ForMember (dest => dest.TriggerName' o => o.Ignore ()).ForMember (dest => dest.TriggerGroup' o => o.Ignore ()); " is 542.
Long Statement,BAF.Scheduler.Mappings,SchedulerLogMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\SchedulerLogMapping.cs,Configure,The length of the statement  "	CreateMap<JobKey' SchedulerLog> ().ForMember (dest => dest.Id' o => o.Ignore ()).ForMember (dest => dest.SchedulerName' o => o.Ignore ()).ForMember (dest => dest.Error' o => o.Ignore ()).ForMember (dest => dest.Date' o => o.Ignore ()).ForMember (dest => dest.Type' o => o.Ignore ()).ForMember (dest => dest.JobGroup' o => o.MapFrom (src => src.Group)).ForMember (dest => dest.JobName' o => o.MapFrom (src => src.Name)).ForMember (dest => dest.TriggerName' o => o.Ignore ()).ForMember (dest => dest.TriggerGroup' o => o.Ignore ()); " is 530.
Long Statement,BAF.Scheduler.Mappings,TriggerMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\TriggerMapping.cs,Configure,The length of the statement  "	CreateMap<BaseTrigger' AbstractTrigger> ().Include<SimpleTrigger' SimpleTriggerImpl> ().Include<DailyTimeIntervalTrigger' DailyTimeIntervalTriggerImpl> ().Include<CronTrigger' CronTriggerImpl> ().ForMember (dest => dest.FireInstanceId' o => o.Ignore ()).ForMember (dest => dest.EndTimeUtc' o => o.MapFrom (src => GetDateTimeOffset (src.EndTimeUtc))).ForMember (dest => dest.StartTimeUtc' o => o.MapFrom (src => GetDateTimeOffset (src.StartTimeUtc))).ForMember (dest => dest.JobDataMap' o => o.MapFrom (src => new JobDataMap (src.GetJobData ()))).ForMember (dest => dest.JobKey' o => o.MapFrom (src => new JobKey (src.JobName' src.JobGroup))).ForMember (dest => dest.Key' o => o.MapFrom (src => new TriggerKey (src.Name' src.Group))); " is 733.
Long Statement,BAF.Scheduler.Mappings,TriggerMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\TriggerMapping.cs,Configure,The length of the statement  "	CreateMap<DailyTimeIntervalTrigger' DailyTimeIntervalTriggerImpl> ().ForMember (dest => dest.TimeZone' o => o.ResolveUsing<TimeZoneInfoValueResolver> ()).ForMember (dest => dest.TimesTriggered' o => o.Ignore ()).ForMember (dest => dest.RepeatIntervalUnit' o => o.MapFrom (src => src.RepeatIntervalUnit.ToQuartz ())).ForMember (dest => dest.DaysOfWeek' o => o.MapFrom (src => new Quartz.Collection.HashSet<DayOfWeek> (src.DaysOfWeek))).ForMember (dest => dest.StartTimeOfDay' o => o.MapFrom (src => src.StartTimeOfDay.ToTimeOfDay ())).ForMember (dest => dest.EndTimeOfDay' o => o.MapFrom (src => src.EndTimeOfDay.ToTimeOfDay ())); " is 629.
Long Statement,BAF.Scheduler.Mappings,TriggerMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\TriggerMapping.cs,Configure,The length of the statement  "	CreateMap<CronTrigger' CronTriggerImpl> ().ForMember ("CronExpression"' o => o.Ignore ()).ForMember (dest => dest.TimeZone' o => o.ResolveUsing<TimeZoneInfoValueResolver> ()).ForMember (dest => dest.CronExpressionString' o => o.MapFrom (src => src.CronExpression)); " is 265.
Long Statement,BAF.Scheduler.Mappings,TriggerMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\TriggerMapping.cs,Configure,The length of the statement  "	CreateMap<AbstractTrigger' BaseTrigger> ().Include<SimpleTriggerImpl' SimpleTrigger> ().Include<DailyTimeIntervalTriggerImpl' DailyTimeIntervalTrigger> ().Include<CronTriggerImpl' CronTrigger> ().ForMember (dest => dest.Status' o => o.Ignore ()).ForMember (dest => dest.EndTimeUtc' o => o.MapFrom (src => GetDateTime (src.EndTimeUtc))).ForMember (dest => dest.FinalFireTimeUtc' o => o.MapFrom (src => GetDateTime (src.FinalFireTimeUtc))).ForMember (dest => dest.NextFireTimeUtc' o => o.MapFrom (src => GetDateTime (src.GetNextFireTimeUtc ()))).ForMember (dest => dest.PreviousFireTimeUtc' o => o.MapFrom (src => GetDateTime (src.GetPreviousFireTimeUtc ()))).ForMember (dest => dest.StartTimeUtc' o => o.MapFrom (src => GetDateTime (src.EndTimeUtc))).ForMember (dest => dest.JobData' o => o.MapFrom (src => src.JobDataMap.Select (p => new Parameter { " is 849.
Long Statement,BAF.Scheduler.Mappings,TriggerMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\TriggerMapping.cs,Configure,The length of the statement  "	}).ToList ())).ForMember (dest => dest.JobName' o => o.MapFrom (src => src.JobKey.Name)).ForMember (dest => dest.JobGroup' o => o.MapFrom (src => src.JobKey.Group)).ForMember (dest => dest.Name' o => o.MapFrom (src => src.Key.Name)).ForMember (dest => dest.Group' o => o.MapFrom (src => src.Key.Group)).ForMember (dest => dest.CreatedBy' o => o.MapFrom (src => src.GetCreatedBy ())).ForMember (dest => dest.DateCreated' o => o.MapFrom (src => GetDateTime (src.GetDateCreated ()))); " is 481.
Long Statement,BAF.Scheduler.Mappings,TriggerMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\TriggerMapping.cs,Configure,The length of the statement  "	CreateMap<DailyTimeIntervalTriggerImpl' DailyTimeIntervalTrigger> ().ForMember (dest => dest.RepeatIntervalUnit' o => o.MapFrom (src => src.RepeatIntervalUnit.ToBAF ())).ForMember (dest => dest.DaysOfWeek' o => o.MapFrom (src => src.DaysOfWeek.ToList ())).ForMember (dest => dest.StartTimeOfDay' o => o.MapFrom (src => src.StartTimeOfDay.ToTimeSpan ())).ForMember (dest => dest.EndTimeOfDay' o => o.MapFrom (src => src.EndTimeOfDay.ToTimeSpan ())); " is 448.
Long Statement,BAF.Scheduler.Mappings,TriggerMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\TriggerMapping.cs,Configure,The length of the statement  "	CreateMap<CronTriggerImpl' CronTrigger> ().ForMember (dest => dest.CronExpression' o => o.MapFrom (src => src.CronExpressionString)); " is 133.
Long Statement,BAF.Scheduler.Mappings,JobDetailMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\JobDetailMapping.cs,Configure,The length of the statement  "	CreateMap<JobDetail' IJobDetail> ().ForMember (dest => dest.JobDataMap' o => o.MapFrom (src => new JobDataMap ((IDictionary<string' object>)src.JobData.ToDictionary (d => d.Name' d => d.Value)))).ForMember (dest => dest.Key' o => o.MapFrom (src => new JobKey (src.Name' src.Group))); " is 283.
Long Statement,BAF.Scheduler.Mappings,JobDetailMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\JobDetailMapping.cs,Configure,The length of the statement  "	CreateMap<IJobDetail' JobDetail> ().ForMember (dest => dest.Name' o => o.MapFrom (src => src.Key.Name)).ForMember (dest => dest.Group' o => o.MapFrom (src => src.Key.Group)).ForMember (dest => dest.JobData' o => o.MapFrom (src => src.JobDataMap.Select (p => new Parameter { " is 273.
Long Statement,BAF.Scheduler.Mappings,JobDetailMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\JobDetailMapping.cs,Configure,The length of the statement  "	}).ToList ())).ForMember (dest => dest.InterruptableJob' o => o.MapFrom (src => typeof(IInterruptableJob).IsAssignableFrom (src.JobType))).ForMember (dest => dest.CreatedBy' o => o.MapFrom (src => src.GetCreatedBy ())).ForMember (dest => dest.DateCreated' o => o.MapFrom (src => src.GetDateCreated ())).ForMember (dest => dest.Triggers' o => o.Ignore ()).ForMember (dest => dest.RunningSince' o => o.Ignore ()); " is 411.
Long Statement,BAF.Scheduler.Mappings,SchedulerInfoMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\SchedulerInfoMapping.cs,Configure,The length of the statement  "	CreateMap<SchedulerMetaData' SchedulerInfo> ().ForMember (dest => dest.Summary' o => o.MapFrom (src => src.GetSummary ())); " is 123.
Long Statement,BAF.Scheduler.Providers,SchedulerProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Providers\SchedulerProvider.cs,Create,The length of the statement  "	var scheduler = _schedulerFactory.GetScheduler (BAFScheduler.DefaultSchedulerName) ?? _schedulerFactory.GetScheduler (); " is 120.
Magic Number,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectJobDetail,The following statement contains a magic number: using (var cmd = PrepareCommand (conn' ReplaceTablePrefix (SqlSelectJobDetail))) {  	AddCommandParameter (cmd' "jobName"' jobKey.Name);  	AddCommandParameter (cmd' "jobGroup"' jobKey.Group);  	using (var rs = cmd.ExecuteReader ()) {  		if (!rs.Read ())  			return null;  		var job = new BAFJobDetailImpl {  			Name = rs.GetString (ColumnJobName)'  			Group = rs.GetString (ColumnJobGroup)'  			Description = rs.GetString (ColumnDescription)'  			JobType = loadHelper.LoadType (rs.GetString (ColumnJobClass))'  			Durable = GetBooleanFromDbValue (rs [ColumnIsDurable])'  			RequestsRecovery = GetBooleanFromDbValue (rs [ColumnRequestsRecovery])'  			DateCreated = GetDateTimeFromDbValue (rs [ColumnDateCreated]).GetValueOrDefault ()'  			CreatedBy = rs.GetString (ColumnCreatedBy)  		};  		var map = CanUseProperties ? GetMapFromProperties (rs' 6) : GetObjectFromBlob<IDictionary> (rs' 6);  		if (map != null) {  			job.JobDataMap = map as JobDataMap ?? new JobDataMap (map);  		}  		return job;  	}  }  
Magic Number,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectJobDetail,The following statement contains a magic number: using (var cmd = PrepareCommand (conn' ReplaceTablePrefix (SqlSelectJobDetail))) {  	AddCommandParameter (cmd' "jobName"' jobKey.Name);  	AddCommandParameter (cmd' "jobGroup"' jobKey.Group);  	using (var rs = cmd.ExecuteReader ()) {  		if (!rs.Read ())  			return null;  		var job = new BAFJobDetailImpl {  			Name = rs.GetString (ColumnJobName)'  			Group = rs.GetString (ColumnJobGroup)'  			Description = rs.GetString (ColumnDescription)'  			JobType = loadHelper.LoadType (rs.GetString (ColumnJobClass))'  			Durable = GetBooleanFromDbValue (rs [ColumnIsDurable])'  			RequestsRecovery = GetBooleanFromDbValue (rs [ColumnRequestsRecovery])'  			DateCreated = GetDateTimeFromDbValue (rs [ColumnDateCreated]).GetValueOrDefault ()'  			CreatedBy = rs.GetString (ColumnCreatedBy)  		};  		var map = CanUseProperties ? GetMapFromProperties (rs' 6) : GetObjectFromBlob<IDictionary> (rs' 6);  		if (map != null) {  			job.JobDataMap = map as JobDataMap ?? new JobDataMap (map);  		}  		return job;  	}  }  
Magic Number,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectJobDetail,The following statement contains a magic number: using (var rs = cmd.ExecuteReader ()) {  	if (!rs.Read ())  		return null;  	var job = new BAFJobDetailImpl {  		Name = rs.GetString (ColumnJobName)'  		Group = rs.GetString (ColumnJobGroup)'  		Description = rs.GetString (ColumnDescription)'  		JobType = loadHelper.LoadType (rs.GetString (ColumnJobClass))'  		Durable = GetBooleanFromDbValue (rs [ColumnIsDurable])'  		RequestsRecovery = GetBooleanFromDbValue (rs [ColumnRequestsRecovery])'  		DateCreated = GetDateTimeFromDbValue (rs [ColumnDateCreated]).GetValueOrDefault ()'  		CreatedBy = rs.GetString (ColumnCreatedBy)  	};  	var map = CanUseProperties ? GetMapFromProperties (rs' 6) : GetObjectFromBlob<IDictionary> (rs' 6);  	if (map != null) {  		job.JobDataMap = map as JobDataMap ?? new JobDataMap (map);  	}  	return job;  }  
Magic Number,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectJobDetail,The following statement contains a magic number: using (var rs = cmd.ExecuteReader ()) {  	if (!rs.Read ())  		return null;  	var job = new BAFJobDetailImpl {  		Name = rs.GetString (ColumnJobName)'  		Group = rs.GetString (ColumnJobGroup)'  		Description = rs.GetString (ColumnDescription)'  		JobType = loadHelper.LoadType (rs.GetString (ColumnJobClass))'  		Durable = GetBooleanFromDbValue (rs [ColumnIsDurable])'  		RequestsRecovery = GetBooleanFromDbValue (rs [ColumnRequestsRecovery])'  		DateCreated = GetDateTimeFromDbValue (rs [ColumnDateCreated]).GetValueOrDefault ()'  		CreatedBy = rs.GetString (ColumnCreatedBy)  	};  	var map = CanUseProperties ? GetMapFromProperties (rs' 6) : GetObjectFromBlob<IDictionary> (rs' 6);  	if (map != null) {  		job.JobDataMap = map as JobDataMap ?? new JobDataMap (map);  	}  	return job;  }  
Magic Number,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectTrigger,The following statement contains a magic number: using (var cmd = PrepareCommand (conn' ReplaceTablePrefix (SqlSelectTrigger))) {  	AddCommandParameter (cmd' "triggerName"' triggerKey.Name);  	AddCommandParameter (cmd' "triggerGroup"' triggerKey.Group);  	using (var rs = cmd.ExecuteReader ()) {  		if (!rs.Read ())  			return null;  		string jobName = rs.GetString (ColumnJobName);  		string jobGroup = rs.GetString (ColumnJobGroup);  		string description = rs.GetString (ColumnDescription);  		string triggerType = rs.GetString (ColumnTriggerType);  		string calendarName = rs.GetString (ColumnCalendarName);  		int misFireInstr = rs.GetInt32 (ColumnMifireInstruction);  		int priority = rs.GetInt32 (ColumnPriority);  		var dateCreated = GetDateTimeFromDbValue (rs [ColumnDateCreated]).GetValueOrDefault ();  		var createdBy = rs.GetString (ColumnCreatedBy);  		IDictionary map = CanUseProperties ? GetMapFromProperties (rs' 11) : GetObjectFromBlob<IDictionary> (rs' 11);  		DateTimeOffset? nextFireTimeUtc = GetDateTimeFromDbValue (rs [ColumnNextFireTime]);  		DateTimeOffset? previousFireTimeUtc = GetDateTimeFromDbValue (rs [ColumnPreviousFireTime]);  		DateTimeOffset startTimeUtc = GetDateTimeFromDbValue (rs [ColumnStartTime]) ?? DateTimeOffset.MinValue;  		DateTimeOffset? endTimeUtc = GetDateTimeFromDbValue (rs [ColumnEndTime]);  		// done reading  		rs.Close ();  		if (triggerType.Equals (TriggerTypeBlob)) {  			using (IDbCommand cmd2 = PrepareCommand (conn' ReplaceTablePrefix (SqlSelectBlobTrigger))) {  				AddCommandParameter (cmd2' "triggerName"' triggerKey.Name);  				AddCommandParameter (cmd2' "triggerGroup"' triggerKey.Group);  				using (IDataReader rs2 = cmd2.ExecuteReader ()) {  					if (rs2.Read ()) {  						trigger = GetObjectFromBlob<IOperableTrigger> (rs2' 0);  					}  				}  			}  		}  		else {  			ITriggerPersistenceDelegate tDel = FindTriggerPersistenceDelegate (triggerType);  			if (tDel == null) {  				throw new JobPersistenceException ("No TriggerPersistenceDelegate for trigger discriminator type: " + triggerType);  			}  			TriggerPropertyBundle triggerProps;  			try {  				triggerProps = tDel.LoadExtendedTriggerProperties (conn' triggerKey);  			}  			catch (InvalidOperationException) {  				if (IsTriggerStillPresent (cmd)) {  					throw;  				}  				else {  					// QTZ-386 Trigger has been deleted  					return null;  				}  			}  			TriggerBuilder tb = TriggerBuilder.Create ().WithDescription (description).WithPriority (priority).StartAt (startTimeUtc).EndAt (endTimeUtc).WithIdentity (triggerKey).ModifiedByCalendar (calendarName).WithSchedule (triggerProps.ScheduleBuilder).ForJob (new JobKey (jobName' jobGroup));  			if (map != null) {  				tb.UsingJobData (map as JobDataMap ?? new JobDataMap (map));  			}  			trigger = (IOperableTrigger)tb.Build ();  			trigger.MisfireInstruction = misFireInstr;  			trigger.SetNextFireTimeUtc (nextFireTimeUtc);  			trigger.SetPreviousFireTimeUtc (previousFireTimeUtc);  			SetTriggerStateProperties (trigger' triggerProps);  			//Added  			if (trigger is SimpleTriggerImpl)  				trigger = new SimpleTriggerWrapper ((SimpleTriggerImpl)trigger) {  					DateCreated = dateCreated'  					CreatedBy = createdBy  				};  			else if (trigger is CronTriggerImpl)  				trigger = new CronTriggerWrapper ((CronTriggerImpl)trigger) {  					DateCreated = dateCreated'  					CreatedBy = createdBy  				};  			else if (trigger is CalendarIntervalTriggerImpl)  				trigger = new CalendarIntervalTriggerWrapper ((CalendarIntervalTriggerImpl)trigger) {  					DateCreated = dateCreated'  					CreatedBy = createdBy  				};  			else if (trigger is DailyTimeIntervalTriggerImpl)  				trigger = new DailyTimeIntervalTriggerWrapper ((DailyTimeIntervalTriggerImpl)trigger) {  					DateCreated = dateCreated'  					CreatedBy = createdBy  				};  		}  	}  }  
Magic Number,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectTrigger,The following statement contains a magic number: using (var cmd = PrepareCommand (conn' ReplaceTablePrefix (SqlSelectTrigger))) {  	AddCommandParameter (cmd' "triggerName"' triggerKey.Name);  	AddCommandParameter (cmd' "triggerGroup"' triggerKey.Group);  	using (var rs = cmd.ExecuteReader ()) {  		if (!rs.Read ())  			return null;  		string jobName = rs.GetString (ColumnJobName);  		string jobGroup = rs.GetString (ColumnJobGroup);  		string description = rs.GetString (ColumnDescription);  		string triggerType = rs.GetString (ColumnTriggerType);  		string calendarName = rs.GetString (ColumnCalendarName);  		int misFireInstr = rs.GetInt32 (ColumnMifireInstruction);  		int priority = rs.GetInt32 (ColumnPriority);  		var dateCreated = GetDateTimeFromDbValue (rs [ColumnDateCreated]).GetValueOrDefault ();  		var createdBy = rs.GetString (ColumnCreatedBy);  		IDictionary map = CanUseProperties ? GetMapFromProperties (rs' 11) : GetObjectFromBlob<IDictionary> (rs' 11);  		DateTimeOffset? nextFireTimeUtc = GetDateTimeFromDbValue (rs [ColumnNextFireTime]);  		DateTimeOffset? previousFireTimeUtc = GetDateTimeFromDbValue (rs [ColumnPreviousFireTime]);  		DateTimeOffset startTimeUtc = GetDateTimeFromDbValue (rs [ColumnStartTime]) ?? DateTimeOffset.MinValue;  		DateTimeOffset? endTimeUtc = GetDateTimeFromDbValue (rs [ColumnEndTime]);  		// done reading  		rs.Close ();  		if (triggerType.Equals (TriggerTypeBlob)) {  			using (IDbCommand cmd2 = PrepareCommand (conn' ReplaceTablePrefix (SqlSelectBlobTrigger))) {  				AddCommandParameter (cmd2' "triggerName"' triggerKey.Name);  				AddCommandParameter (cmd2' "triggerGroup"' triggerKey.Group);  				using (IDataReader rs2 = cmd2.ExecuteReader ()) {  					if (rs2.Read ()) {  						trigger = GetObjectFromBlob<IOperableTrigger> (rs2' 0);  					}  				}  			}  		}  		else {  			ITriggerPersistenceDelegate tDel = FindTriggerPersistenceDelegate (triggerType);  			if (tDel == null) {  				throw new JobPersistenceException ("No TriggerPersistenceDelegate for trigger discriminator type: " + triggerType);  			}  			TriggerPropertyBundle triggerProps;  			try {  				triggerProps = tDel.LoadExtendedTriggerProperties (conn' triggerKey);  			}  			catch (InvalidOperationException) {  				if (IsTriggerStillPresent (cmd)) {  					throw;  				}  				else {  					// QTZ-386 Trigger has been deleted  					return null;  				}  			}  			TriggerBuilder tb = TriggerBuilder.Create ().WithDescription (description).WithPriority (priority).StartAt (startTimeUtc).EndAt (endTimeUtc).WithIdentity (triggerKey).ModifiedByCalendar (calendarName).WithSchedule (triggerProps.ScheduleBuilder).ForJob (new JobKey (jobName' jobGroup));  			if (map != null) {  				tb.UsingJobData (map as JobDataMap ?? new JobDataMap (map));  			}  			trigger = (IOperableTrigger)tb.Build ();  			trigger.MisfireInstruction = misFireInstr;  			trigger.SetNextFireTimeUtc (nextFireTimeUtc);  			trigger.SetPreviousFireTimeUtc (previousFireTimeUtc);  			SetTriggerStateProperties (trigger' triggerProps);  			//Added  			if (trigger is SimpleTriggerImpl)  				trigger = new SimpleTriggerWrapper ((SimpleTriggerImpl)trigger) {  					DateCreated = dateCreated'  					CreatedBy = createdBy  				};  			else if (trigger is CronTriggerImpl)  				trigger = new CronTriggerWrapper ((CronTriggerImpl)trigger) {  					DateCreated = dateCreated'  					CreatedBy = createdBy  				};  			else if (trigger is CalendarIntervalTriggerImpl)  				trigger = new CalendarIntervalTriggerWrapper ((CalendarIntervalTriggerImpl)trigger) {  					DateCreated = dateCreated'  					CreatedBy = createdBy  				};  			else if (trigger is DailyTimeIntervalTriggerImpl)  				trigger = new DailyTimeIntervalTriggerWrapper ((DailyTimeIntervalTriggerImpl)trigger) {  					DateCreated = dateCreated'  					CreatedBy = createdBy  				};  		}  	}  }  
Magic Number,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectTrigger,The following statement contains a magic number: using (var rs = cmd.ExecuteReader ()) {  	if (!rs.Read ())  		return null;  	string jobName = rs.GetString (ColumnJobName);  	string jobGroup = rs.GetString (ColumnJobGroup);  	string description = rs.GetString (ColumnDescription);  	string triggerType = rs.GetString (ColumnTriggerType);  	string calendarName = rs.GetString (ColumnCalendarName);  	int misFireInstr = rs.GetInt32 (ColumnMifireInstruction);  	int priority = rs.GetInt32 (ColumnPriority);  	var dateCreated = GetDateTimeFromDbValue (rs [ColumnDateCreated]).GetValueOrDefault ();  	var createdBy = rs.GetString (ColumnCreatedBy);  	IDictionary map = CanUseProperties ? GetMapFromProperties (rs' 11) : GetObjectFromBlob<IDictionary> (rs' 11);  	DateTimeOffset? nextFireTimeUtc = GetDateTimeFromDbValue (rs [ColumnNextFireTime]);  	DateTimeOffset? previousFireTimeUtc = GetDateTimeFromDbValue (rs [ColumnPreviousFireTime]);  	DateTimeOffset startTimeUtc = GetDateTimeFromDbValue (rs [ColumnStartTime]) ?? DateTimeOffset.MinValue;  	DateTimeOffset? endTimeUtc = GetDateTimeFromDbValue (rs [ColumnEndTime]);  	// done reading  	rs.Close ();  	if (triggerType.Equals (TriggerTypeBlob)) {  		using (IDbCommand cmd2 = PrepareCommand (conn' ReplaceTablePrefix (SqlSelectBlobTrigger))) {  			AddCommandParameter (cmd2' "triggerName"' triggerKey.Name);  			AddCommandParameter (cmd2' "triggerGroup"' triggerKey.Group);  			using (IDataReader rs2 = cmd2.ExecuteReader ()) {  				if (rs2.Read ()) {  					trigger = GetObjectFromBlob<IOperableTrigger> (rs2' 0);  				}  			}  		}  	}  	else {  		ITriggerPersistenceDelegate tDel = FindTriggerPersistenceDelegate (triggerType);  		if (tDel == null) {  			throw new JobPersistenceException ("No TriggerPersistenceDelegate for trigger discriminator type: " + triggerType);  		}  		TriggerPropertyBundle triggerProps;  		try {  			triggerProps = tDel.LoadExtendedTriggerProperties (conn' triggerKey);  		}  		catch (InvalidOperationException) {  			if (IsTriggerStillPresent (cmd)) {  				throw;  			}  			else {  				// QTZ-386 Trigger has been deleted  				return null;  			}  		}  		TriggerBuilder tb = TriggerBuilder.Create ().WithDescription (description).WithPriority (priority).StartAt (startTimeUtc).EndAt (endTimeUtc).WithIdentity (triggerKey).ModifiedByCalendar (calendarName).WithSchedule (triggerProps.ScheduleBuilder).ForJob (new JobKey (jobName' jobGroup));  		if (map != null) {  			tb.UsingJobData (map as JobDataMap ?? new JobDataMap (map));  		}  		trigger = (IOperableTrigger)tb.Build ();  		trigger.MisfireInstruction = misFireInstr;  		trigger.SetNextFireTimeUtc (nextFireTimeUtc);  		trigger.SetPreviousFireTimeUtc (previousFireTimeUtc);  		SetTriggerStateProperties (trigger' triggerProps);  		//Added  		if (trigger is SimpleTriggerImpl)  			trigger = new SimpleTriggerWrapper ((SimpleTriggerImpl)trigger) {  				DateCreated = dateCreated'  				CreatedBy = createdBy  			};  		else if (trigger is CronTriggerImpl)  			trigger = new CronTriggerWrapper ((CronTriggerImpl)trigger) {  				DateCreated = dateCreated'  				CreatedBy = createdBy  			};  		else if (trigger is CalendarIntervalTriggerImpl)  			trigger = new CalendarIntervalTriggerWrapper ((CalendarIntervalTriggerImpl)trigger) {  				DateCreated = dateCreated'  				CreatedBy = createdBy  			};  		else if (trigger is DailyTimeIntervalTriggerImpl)  			trigger = new DailyTimeIntervalTriggerWrapper ((DailyTimeIntervalTriggerImpl)trigger) {  				DateCreated = dateCreated'  				CreatedBy = createdBy  			};  	}  }  
Magic Number,BAF.Scheduler.AdoDelegates,BAFAdoDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\BAFAdoDelegate.cs,SelectTrigger,The following statement contains a magic number: using (var rs = cmd.ExecuteReader ()) {  	if (!rs.Read ())  		return null;  	string jobName = rs.GetString (ColumnJobName);  	string jobGroup = rs.GetString (ColumnJobGroup);  	string description = rs.GetString (ColumnDescription);  	string triggerType = rs.GetString (ColumnTriggerType);  	string calendarName = rs.GetString (ColumnCalendarName);  	int misFireInstr = rs.GetInt32 (ColumnMifireInstruction);  	int priority = rs.GetInt32 (ColumnPriority);  	var dateCreated = GetDateTimeFromDbValue (rs [ColumnDateCreated]).GetValueOrDefault ();  	var createdBy = rs.GetString (ColumnCreatedBy);  	IDictionary map = CanUseProperties ? GetMapFromProperties (rs' 11) : GetObjectFromBlob<IDictionary> (rs' 11);  	DateTimeOffset? nextFireTimeUtc = GetDateTimeFromDbValue (rs [ColumnNextFireTime]);  	DateTimeOffset? previousFireTimeUtc = GetDateTimeFromDbValue (rs [ColumnPreviousFireTime]);  	DateTimeOffset startTimeUtc = GetDateTimeFromDbValue (rs [ColumnStartTime]) ?? DateTimeOffset.MinValue;  	DateTimeOffset? endTimeUtc = GetDateTimeFromDbValue (rs [ColumnEndTime]);  	// done reading  	rs.Close ();  	if (triggerType.Equals (TriggerTypeBlob)) {  		using (IDbCommand cmd2 = PrepareCommand (conn' ReplaceTablePrefix (SqlSelectBlobTrigger))) {  			AddCommandParameter (cmd2' "triggerName"' triggerKey.Name);  			AddCommandParameter (cmd2' "triggerGroup"' triggerKey.Group);  			using (IDataReader rs2 = cmd2.ExecuteReader ()) {  				if (rs2.Read ()) {  					trigger = GetObjectFromBlob<IOperableTrigger> (rs2' 0);  				}  			}  		}  	}  	else {  		ITriggerPersistenceDelegate tDel = FindTriggerPersistenceDelegate (triggerType);  		if (tDel == null) {  			throw new JobPersistenceException ("No TriggerPersistenceDelegate for trigger discriminator type: " + triggerType);  		}  		TriggerPropertyBundle triggerProps;  		try {  			triggerProps = tDel.LoadExtendedTriggerProperties (conn' triggerKey);  		}  		catch (InvalidOperationException) {  			if (IsTriggerStillPresent (cmd)) {  				throw;  			}  			else {  				// QTZ-386 Trigger has been deleted  				return null;  			}  		}  		TriggerBuilder tb = TriggerBuilder.Create ().WithDescription (description).WithPriority (priority).StartAt (startTimeUtc).EndAt (endTimeUtc).WithIdentity (triggerKey).ModifiedByCalendar (calendarName).WithSchedule (triggerProps.ScheduleBuilder).ForJob (new JobKey (jobName' jobGroup));  		if (map != null) {  			tb.UsingJobData (map as JobDataMap ?? new JobDataMap (map));  		}  		trigger = (IOperableTrigger)tb.Build ();  		trigger.MisfireInstruction = misFireInstr;  		trigger.SetNextFireTimeUtc (nextFireTimeUtc);  		trigger.SetPreviousFireTimeUtc (previousFireTimeUtc);  		SetTriggerStateProperties (trigger' triggerProps);  		//Added  		if (trigger is SimpleTriggerImpl)  			trigger = new SimpleTriggerWrapper ((SimpleTriggerImpl)trigger) {  				DateCreated = dateCreated'  				CreatedBy = createdBy  			};  		else if (trigger is CronTriggerImpl)  			trigger = new CronTriggerWrapper ((CronTriggerImpl)trigger) {  				DateCreated = dateCreated'  				CreatedBy = createdBy  			};  		else if (trigger is CalendarIntervalTriggerImpl)  			trigger = new CalendarIntervalTriggerWrapper ((CalendarIntervalTriggerImpl)trigger) {  				DateCreated = dateCreated'  				CreatedBy = createdBy  			};  		else if (trigger is DailyTimeIntervalTriggerImpl)  			trigger = new DailyTimeIntervalTriggerWrapper ((DailyTimeIntervalTriggerImpl)trigger) {  				DateCreated = dateCreated'  				CreatedBy = createdBy  			};  	}  }  
Magic Number,BAF.Scheduler.AdoDelegates,SqlServerDelegate,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\AdoDelegates\SqlServerDelegate.cs,GetSelectNextTriggerToAcquireSql,The following statement contains a magic number: sqlSelectNextTriggerToAcquire = "SELECT TOP " + maxCount + " " + sqlSelectNextTriggerToAcquire.Substring (6);  
Magic Number,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,GetExcludedDaysOfMonth,The following statement contains a magic number: for (var i = 0; i < 31; i++) {  	result.Add (hashSet.Contains ((i + 1)));  }  
Magic Number,BAF.Scheduler.Mappings,CalendarMapping,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Scheduler\Mappings\CalendarMapping.cs,GetExcludedDaysOfweek,The following statement contains a magic number: for (var i = 0; i < 7; i++) {  	result.Add (hashSet.Contains ((DayOfWeek)i));  }  
