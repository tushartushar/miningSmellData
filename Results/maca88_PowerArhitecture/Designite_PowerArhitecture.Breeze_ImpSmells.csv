Implementation smell,Namespace,Class,File,Method,Description
Long Method,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The method has 183 lines of code.
Complex Method,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,SetFluentValidators,Cyclomatic complexity of the method is 10
Long Parameter List,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,SetFluentValidators,The method has 5 parameters.
Long Parameter List,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The method has 22 parameters.
Long Parameter List,PowerArhitecture.Breeze,EntityModelConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\EntityModelConfigurator.cs,Configure,The method has 12 parameters.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,SetFluentValidators,The length of the statement  "			if (entityType != null && !string.IsNullOrEmpty (dataProp.NameOnServer) && entityType.NavigationProperties.Any (o => o.ForeignKeyNamesOnServer != null && o.ForeignKeyNamesOnServer.Any (fk => fk == dataProp.NameOnServer))) { " is 223.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "		var clientModelTypes = assemblies.Where (a => a.GetTypes ().Any (t => typeof(IClientModel).IsAssignableFrom (t))).SelectMany (a => a.GetTypes ().Where (t => !t.IsAbstract && t.IsClass && !t.IsGenericType && typeof(IClientModel).IsAssignableFrom (t))).ToList (); " is 261.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "		var serverModelTypes = assemblies.Where (a => a.GetTypes ().Any (t => typeof(IEntity).IsAssignableFrom (t) || t.GetCustomAttribute<IncludeAttribute> () != null)).SelectMany (a => a.GetTypes ().Where (t => typeof(IEntity).IsAssignableFrom (t) || t.GetCustomAttribute<IncludeAttribute> () != null)).ToList (); " is 307.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "			var structType = clientModelType.GetCustomAttribute<ComplexTypeAttribute> () != null ? (StructuralType)getOrCreateComplexType (clientModelType) : getOrCreateEntityType (clientModelType); " is 186.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "						throw new PowerArhitectureException ("Invalid definition of property '{0}' inside complex type '{1}'. Complex types can not have navigation properties as it is not supported by breeze"' prop.Name' clientModelType.FullName); " is 223.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "				else if (typeof(IEnumerable).IsAssignableFrom (prop.PropertyType) && prop.PropertyType.IsGenericType && prop.PropertyType.GetGenericArguments ().Length == 1) { " is 159.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "					var invProperties = string.IsNullOrEmpty (invPropName) ? invEntityType.GetProperties ().Where (o => o.PropertyType == clientModelType).ToList () : invEntityType.GetProperties ().Where (o => o.Name == invPropName).ToList (); " is 223.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "						throw new PowerArhitectureException ("Inverse property name '{0}' was not found in type '{1}'."' invPropName' invEntityType.FullName); " is 134.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "						throw new PowerArhitectureException ("Invalid definition of property '{0}' inside type '{1}'. Generic argument '{2}' must not be a Complex type"' prop.Name' clientModelType.FullName' invEntityType.FullName); " is 207.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "			var membersRules = modelValidator.OfType<PropertyRule> ().Where (o => o.PropertyName != null).ToLookup (o => o.PropertyName' o => o); " is 133.
Long Statement,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,Configure,The length of the statement  "				foreach (var propRule in propRules.Where (o => o.RuleSet == null || ValidationRuleSet.AttributeInsertUpdateDefault.Contains (o.RuleSet))) { " is 139.
Long Statement,PowerArhitecture.Breeze,EntityModelConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\EntityModelConfigurator.cs,Configure,The length of the statement  "	BreezeModelConfigurator.Configure<IVersionedEntity> ().ForMember (o => o.Version' o => o.Writable (true)).ForMember (o => o.LastModifiedDate' o => o.Writable (true)).ForMember (o => o.CreatedDate' o => o.Writable (true)); " is 221.
Long Statement,PowerArhitecture.Breeze,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\NinjectRegistration.cs,Load,The length of the statement  "	Kernel.Bind (o => o.From (AppDomain.CurrentDomain.GetAssemblies ().Where (a => a.GetTypes ().Any (t => typeof(IBreezeModelConfigurator).IsAssignableFrom (t)))).IncludingNonePublicTypes ().SelectAllClasses ().InheritedFrom<IBreezeModelConfigurator> ().WhichAreNotGeneric ().BindAllInterfaces ().Configure (c => c.InSingletonScope ())); " is 334.
Long Statement,PowerArhitecture.Breeze,PABreezeNHQueryableAttribute,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\PABreezeNHQueryableAttribute.cs,ApplyQuery,The length of the statement  "		queryable = (IQueryable)DistinctMethodInfo.MakeGenericMethod (qType.GenericTypeArguments.First ()).Invoke (null' new[] { " is 120.
Complex Conditional,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,SetFluentValidators,The conditional expression  "entityType != null && !string.IsNullOrEmpty (dataProp.NameOnServer) && entityType.NavigationProperties.Any (o => o.ForeignKeyNamesOnServer != null && o.ForeignKeyNamesOnServer.Any (fk => fk == dataProp.NameOnServer))"  is complex.
Virtual Method Call from Constructor,PowerArhitecture.Breeze.Metadata,MetadataList,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\Metadata\MetadataList.cs,MetadataList,The constructor "MetadataList" calls a virtual method "Convert".
Missing Default,PowerArhitecture.Breeze,BreezeMetadataConfigurator,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Breeze\BreezeMetadataConfigurator.cs,SetFluentValidators,The following switch statement is missing a default case: switch (name) {  case "required":  	//Check if the property is a foreignKey if it is then default type value is not valid  	if (entityType != null && !string.IsNullOrEmpty (dataProp.NameOnServer) && entityType.NavigationProperties.Any (o => o.ForeignKeyNamesOnServer != null && o.ForeignKeyNamesOnServer.Any (fk => fk == dataProp.NameOnServer))) {  		newValidator = new Validator {  			Name = "fvNotEmpty"  		};  		var defVal = dataProp.PropertyInfo != null ? dataProp.PropertyInfo.PropertyType.GetDefaultValue () : null;  		newValidator.MergeLeft (FluentValidators.GetParamaters (new NotEmptyValidator (defVal)));  	}  	else {  		newValidator = new Validator {  			Name = "fvNotNull"  		};  		newValidator.MergeLeft (FluentValidators.GetParamaters (new NotNullValidator ()));  	}  	break;  case "maxLength":  	newValidator = new Validator {  		Name = "fvLength"  	};  	newValidator.MergeLeft (FluentValidators.GetParamaters (new LengthValidator (0' dataProp.MaxLength)));  	break;  }  
