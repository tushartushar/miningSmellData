Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PowerArhitecture.DataAccess.Conventions,FetchModeAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\FetchModeAttributeConvention.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,PowerArhitecture.DataAccess.Conventions,FetchModeAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\FetchModeAttributeConvention.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,PowerArhitecture.DataAccess.Conventions,FetchModeAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\FetchModeAttributeConvention.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,NHibernate,ConfigurationExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\ConfigurationExtensions.cs,GenerateSchemaUpdateScript,Cyclomatic complexity of the method is 17
Complex Method,NHibernate,LockModeExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\LockModeExtensions.cs,GetNhLockMode,Cyclomatic complexity of the method is 8
Complex Method,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,PowerArhitecture.DataAccess.Providers,AuditUserProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\AuditUserProvider.cs,GetCurrentUser,Cyclomatic complexity of the method is 18
Complex Method,PowerArhitecture.DataAccess.Visitors,NHibernateMappingVisitor,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Visitors\NHibernateMappingVisitor.cs,VisitClassBase,Cyclomatic complexity of the method is 8
Complex Method,NHibernate.Tool.hbm2ddl,SchemaExportExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaExportExt.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,Cyclomatic complexity of the method is 9
Complex Method,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Execute,Cyclomatic complexity of the method is 10
Long Parameter List,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateSessionFactory,The method has 14 parameters.
Long Parameter List,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,RegisterSessionFactory,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateAutomappings,The method has 16 parameters.
Long Parameter List,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,RecreateOrUpdateSchema,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,RecreateSchema,The method has 6 parameters.
Long Parameter List,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,UpdateSchema,The method has 6 parameters.
Long Parameter List,PowerArhitecture.DataAccess,SessionFactoryInfo,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\SessionFactoryInfo.cs,SessionFactoryInfo,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess,UnitOfWork,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\UnitOfWork.cs,UnitOfWork,The method has 6 parameters.
Long Parameter List,PowerArhitecture.DataAccess,UnitOfWork,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\UnitOfWork.cs,GetMappedProperties,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,NhConfigurationEventListener,The method has 12 parameters.
Long Parameter List,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,MergeListeners,The method has 6 parameters.
Long Parameter List,PowerArhitecture.DataAccess.EventListeners,SessionEventProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\SessionEventListener.cs,AddAListener,The method has 5 parameters.
Long Parameter List,NHibernate,ConfigurationExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\ConfigurationExtensions.cs,GenerateSchemaUpdateScript,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess.MappingSteps,PACollectionStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\PACollectionStep.cs,SetRelationship,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess.MappingSteps,PAPropertyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\PAPropertyStep.cs,GetPropertyMapping,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess.MappingSteps,CustomHasManyToManyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\CustomHasManyToManyStep.cs,ConfigureModel,The method has 8 parameters.
Long Parameter List,PowerArhitecture.DataAccess.MappingSteps,CustomHasManyToManyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\CustomHasManyToManyStep.cs,CreateManyToMany,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess.MappingSteps,CustomHasManyToManyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\CustomHasManyToManyStep.cs,SetKey,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess.NHEventListeners,AuditEntityEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\AuditEntityEventListener.cs,Set,The method has 5 parameters.
Long Parameter List,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,Validate,The method has 6 parameters.
Long Parameter List,NHibernate.Tool.hbm2ddl,SchemaExportExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaExportExt.cs,Execute,The method has 7 parameters.
Long Parameter List,NHibernate.Tool.hbm2ddl,SchemaExportExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaExportExt.cs,Execute,The method has 5 parameters.
Long Parameter List,NHibernate.Tool.hbm2ddl,SchemaExportExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaExportExt.cs,Execute,The method has 6 parameters.
Long Parameter List,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Execute,The method has 7 parameters.
Long Identifier,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,NhConfigurationEventListener,The length of the parameter preCollectionUpdateEventListeners is 33.
Long Identifier,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,NhConfigurationEventListener,The length of the parameter postCollectionUpdateEventListeners is 34.
Long Statement,PowerArhitecture.DataAccess.Configurations,ConventionsConfiguration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Configurations\ConventionsConfiguration.cs,FillFromConfig,The length of the statement  "	UniqueWithMultipleNulls = AppConfiguration.GetSetting<bool> (DatabaseConfigurationKeys.ConventionsUniqueWithMultipleNulls); " is 123.
Long Statement,PowerArhitecture.DataAccess.Configurations,ConventionsConfiguration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Configurations\ConventionsConfiguration.cs,FillFromConfig,The length of the statement  "	RequiredLastModifiedProperty = AppConfiguration.GetSetting<bool> (DatabaseConfigurationKeys.ConventionsRequiredLastModifiedProperty); " is 133.
Long Statement,PowerArhitecture.DataAccess.Configurations,DatabaseConfiguration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Configurations\DatabaseConfiguration.cs,FillFromConfig,The length of the statement  "	AllowOneToOneWithoutLazyLoading = AppConfiguration.GetSetting<bool> (DatabaseConfigurationKeys.AllowOneToOneWithoutLazyLoading); " is 128.
Long Statement,PowerArhitecture.DataAccess.Configurations,AutomappingConfiguration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Configurations\AutomappingConfiguration.cs,ShouldMap,The length of the statement  "	return base.ShouldMap (type) && typeof(IEntity).IsAssignableFrom (type) && type.GetCustomAttribute<IgnoreAttribute> (false) == null; " is 132.
Long Statement,PowerArhitecture.DataAccess.Configurations,AutomappingConfiguration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Configurations\AutomappingConfiguration.cs,GetAdditionalMappingSteps,The length of the statement  "	var stepTypes = _mappingStepsAssembiles.SelectMany (o => o.GetTypes ().Where (t => typeof(IAutomappingStep).IsAssignableFrom (t))); " is 131.
Long Statement,PowerArhitecture.DataAccess.Conventions,ForeignKeyNameConvenction,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\ForeignKeyNameConvenction.cs,Apply,The length of the statement  "	instance.Relationship.ForeignKey (string.Format ("FK_{0}{1}_{2}"' instance.EntityType.Name' instance.OtherSide.EntityType.Name' ((ICollectionInspector)instance).Name)); " is 168.
Long Statement,PowerArhitecture.DataAccess.Conventions,IndexedAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\IndexedAttributeConvention.cs,Apply,The length of the statement  "	instance.Index (attribute.IsKeySet ? GetIndexName (instance.EntityType.Name' attribute.KeyName) : GetIndexName (instance.EntityType.Name' instance.Name)); " is 154.
Long Statement,PowerArhitecture.DataAccess.Conventions,IndexedAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\IndexedAttributeConvention.cs,Apply,The length of the statement  "	instance.Index (attribute.IsKeySet ? GetIndexName (instance.EntityType.Name' attribute.KeyName) : GetIndexName (instance.EntityType.Name' instance.Name)); " is 154.
Long Statement,PowerArhitecture.DataAccess.Conventions,LengthAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\LengthAttributeConvention.cs,Apply,The length of the statement  "	//http://stackoverflow.com/questions/2343105/override-for-fluent-nhibernate-for-long-text-strings-nvarcharmax-not-nvarchar " is 122.
Long Statement,PowerArhitecture.DataAccess.Conventions,VersionedEntityConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\VersionedEntityConvention.cs,Apply,The length of the statement  "	if (_configuration.RequiredLastModifiedProperty && typeof(IVersionedEntity).IsAssignableFrom (instance.EntityType) && instance.Property.Name == "LastModifiedDate") { " is 165.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlIdDescendingConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlIdDescendingConvention.cs,ApplyBeforeExecutingQuery,The length of the statement  "	var match = Regex.Match (dbCommand.CommandText' @"create[\s]+table[\s]+([\[\]\w]+)[\s\w\('\)[\[\]]+((?:primary\s+key\s+)\(([^\)]+)\))"); " is 136.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlIdDescendingConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlIdDescendingConvention.cs,ApplyBeforeExecutingQuery,The length of the statement  "	var pkConstraintNew = string.Format ("CONSTRAINT {0} PRIMARY KEY ({1})"' GetPrimaryKeyName (tableName)' string.Join ("' "' columns)); " is 133.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlHiLoIdConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlHiLoIdConvention.cs,Apply,The length of the statement  "	instance.GeneratedBy.HiLo (_hiLoIdentityTableName' NextHiValueColumnName' _maxLo' builder => builder.AddParam ("where"' string.Format ("{0} = '[{1}]'"' TableColumnName' instance.EntityType.Name))); " is 197.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlHiLoIdConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlHiLoIdConvention.cs,Setup,The length of the statement  "	createScript.AppendFormat ("CREATE NONCLUSTERED INDEX IX_{0}_{1} ON {0} ({1} DESC);"' _hiLoIdentityTableName' TableColumnName); " is 127.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlHiLoIdConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlHiLoIdConvention.cs,Setup,The length of the statement  "	foreach (var entityName in config.ClassMappings.Select (m => m.MappedClass != null ? m.MappedClass.Name : m.Table.Name).Distinct ()) { " is 134.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlHiLoIdConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlHiLoIdConvention.cs,Setup,The length of the statement  "		createScript.AppendFormat ("INSERT INTO [{0}] ({1}' {2}) VALUES ('[{3}]'' 0);"' _hiLoIdentityTableName' TableColumnName' NextHiValueColumnName' entityName); " is 156.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlIndexNamingConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlIndexNamingConvention.cs,ApplyBeforeExecutingQuery,The length of the statement  "	var indexMatch = Regex.Match (dbCommand.CommandText' @"create\s+index\s+([\w\d]+)\s+on\s+([\w\d\[\]]+)\s+\(([\w\d\s\[\]']+)\)"); " is 128.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlIndexNamingConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlIndexNamingConvention.cs,GetUniqueKeyName,The length of the statement  "	return string.Format ("IX_{0}_{1}"' tableName' string.Join ("_"' columnNames.Select (o => o.TrimEnd (']').TrimStart ('[')))); " is 125.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The length of the statement  "	var matches = Regex.Matches (dbCommand.CommandText' @"(([\[\]\w_]+)\s+([\w\(\)]+)\s+(not null|null) unique)|(unique\s+\(([^\)]+))\)"); " is 134.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The length of the statement  "			uniqueKeySql = string.Format ("CONSTRAINT {0} UNIQUE ({1})"' GetUniqueKeyName (tableName' columns)' string.Join ("' "' columns)); " is 129.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The length of the statement  "				script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column); " is 152.
Long Statement,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,GetUniqueKeyName,The length of the statement  "	return string.Format ("UQ_{0}_{1}"' tableName' string.Join ("_"' columnNames.Select (o => o.TrimEnd (']').TrimStart ('[')))); " is 125.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateSessionFactory,The length of the statement  "	var entityAssemblies = dbConfiguration.EntityAssemblies.Any () ? dbConfiguration.EntityAssemblies : AppDomain.CurrentDomain.GetAssemblies ().Where (assembly => assembly.GetTypes ().Any (o => (typeof(IEntity)).IsAssignableFrom (o))).ToList (); " is 242.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateSessionFactory,The length of the statement  "	var conventionAssemblies = dbConfiguration.ConventionAssemblies.Any () ? dbConfiguration.ConventionAssemblies : AppDomain.CurrentDomain.GetAssemblies ().Where (assembly => assembly != Assembly.GetAssembly (typeof(IAutomappingConfiguration))).Where (assembly => assembly.GetTypes ().Any (o => (typeof(IConvention)).IsAssignableFrom (o))).ToList (); " is 347.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateSessionFactory,The length of the statement  "	var automappingConfiguration = dbConfiguration.AutomappingConfiguration ?? new AutomappingConfiguration ().AddStepAssemblies (AppDomain.CurrentDomain.GetAssemblies ().Where (assembly => assembly != Assembly.GetAssembly (typeof(IAutomappingConfiguration))).Where (assembly => assembly != Assembly.GetExecutingAssembly ()).Where (assembly => assembly.GetTypes ().Any (o => (typeof(IAutomappingStep)).IsAssignableFrom (o))).ToList ()); " is 432.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateSessionFactory,The length of the statement  "		var autoPestModel = CreateAutomappings (automappingConfiguration' entityAssemblies' dbConfiguration.Conventions' conventionAssemblies' dialect' eventAggregator); " is 161.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,RecreateTables,The length of the statement  "	SetupSchema (info.AutoPersistenceModel' info.Configuration' (dbConnection' conventions) => RecreateSchema (info.Configuration' dbConnection' conventions)); " is 155.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,RegisterSessionFactory,The length of the statement  "	var sessionFactoryInfo = new SessionFactoryInfo (sessionFactory' configuration' autoPersistenceModel' dbConfiguration' name); " is 125.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateAutomappings,The length of the statement  "		Order = a.GetCustomAttribute<ConventionAttribute> () != null ? a.GetCustomAttribute<ConventionAttribute> ().Order : int.MaxValue " is 128.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateAutomappings,The length of the statement  "	}).OrderBy (a => a.Order).SelectMany (a => a.Assembly.GetTypes ().Where (t => typeof(IConvention).IsAssignableFrom (t)).Where (t => !t.IsInterface && !t.IsAbstract).Select (t => new { " is 183.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateAutomappings,The length of the statement  "		Order = t.GetCustomAttribute<ConventionAttribute> () != null ? t.GetCustomAttribute<ConventionAttribute> ().Order : int.MaxValue " is 128.
Long Statement,PowerArhitecture.DataAccess,Database,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Database.cs,CreateAutomappings,The length of the statement  "	return GetAutoPersistenceModel (eventAggregator' automappingConfiguration' assemblies).UseOverridesFromAssemblies (assemblies).AddConventions (conventions).AddFilters (GetFilterDefinitions (assemblies)).Conventions.Add (PrimaryKey.Name.Is (o => "Id"))//.Conventions.Add(ForeignKey.EndsWith("Id")) " is 296.
Long Statement,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The length of the statement  "	Bind (typeof(IRepository<>)).To (typeof(Repository<>)).WhenAnyAncestorOrCurrentNamed (ResolutionScopes.UnitOfWork).InNamedScope (ResolutionScopes.UnitOfWork); " is 158.
Long Statement,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The length of the statement  "	Bind (typeof(IRepository<>)).To (typeof(Repository<>)).WhenNoAncestorOrCurrentNamed (ResolutionScopes.UnitOfWork).InRequestScope (); " is 132.
Long Statement,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The length of the statement  "	Bind (typeof(IRepository<' >)).To (typeof(Repository<' >)).WhenAnyAncestorOrCurrentNamed (ResolutionScopes.UnitOfWork).InNamedScope (ResolutionScopes.UnitOfWork); " is 162.
Long Statement,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The length of the statement  "	Bind (typeof(IRepository<' >)).To (typeof(Repository<' >)).WhenNoAncestorOrCurrentNamed (ResolutionScopes.UnitOfWork).InRequestScope (); " is 136.
Long Statement,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The length of the statement  "	Bind<IRepositoryFactory> ().To<RepositoryFactory> ().WhenAnyAncestorOrCurrentNamed (ResolutionScopes.UnitOfWork).InNamedScope (ResolutionScopes.UnitOfWork); " is 156.
Long Statement,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The length of the statement  "	Bind<IRepositoryFactory> ().To<RepositoryFactory> ().WhenNoAncestorOrCurrentNamed (ResolutionScopes.UnitOfWork).InSingletonScope (); " is 132.
Long Statement,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The length of the statement  "	Kernel.Bind (o => o.From (AppDomain.CurrentDomain.GetAssemblies ().Where (a => a.GetTypes ().Any (t => typeof(IRepository).IsAssignableFrom (t)))).IncludingNonePublicTypes ().Select (t =>  { " is 190.
Long Statement,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The length of the statement  "	Bind<IPreInsertEventListener' IPreUpdateEventListener> ().To<EntityPreUpdateInsertEventListener> ().InSingletonScope (); " is 120.
Long Statement,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The length of the statement  "	Bind<IPreUpdateEventListener' IPreInsertEventListener> ().To<RootAggregatePreUpdateInsertEventListener> ().InSingletonScope (); " is 127.
Long Statement,PowerArhitecture.DataAccess,SessionFactoryInfo,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\SessionFactoryInfo.cs,IsLazyLoadEnabled,The length of the statement  "	return !OneToOneWithoutLazyLoading.ContainsKey (type.FullName) || !OneToOneWithoutLazyLoading [type.FullName].Contains (propertyName); " is 134.
Long Statement,PowerArhitecture.DataAccess,SessionFactoryInfo,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\SessionFactoryInfo.cs,ValidateSettings,The length of the statement  "		throw new HibernateException ("One to one relation without lazy loading is not permitted. " + "Lazy loading is disabled for: " + string.Join ("'\r\n"' OneToOneWithoutLazyLoading.Select (o => String.Format ("Type: {0} Properties: {1}"' o.Key' string.Join ("' "' o.Value)))) + "\r\nHint: Use Constrained one to one or allow one to one without lazy loading in config"); " is 366.
Long Statement,PowerArhitecture.DataAccess,UnitOfWork,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\UnitOfWork.cs,FindMappedTypes,The length of the statement  "	return Database.GetSessionFactoryInfo (_session.SessionFactory).Configuration.ClassMappings.Select (o => o.MappedClass).Where (condition); " is 138.
Long Statement,PowerArhitecture.DataAccess,UnitOfWork,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\UnitOfWork.cs,GetMappedProperties,The length of the statement  "	return Database.GetSessionFactoryInfo (_session.SessionFactory).Configuration.ClassMappings.Where (o => o.MappedClass == typeof(TModel)).SelectMany (o => o.PropertyIterator).Where (o => typeProps.ContainsKey (o.Name)).Select (o => typeProps [o.Name]); " is 251.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.SetListeners (ListenerType.SaveUpdate' MergeListeners (eventListeners.SaveOrUpdateEventListeners' _saveOrUpdateEventListeners)); " is 135.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.SetListeners (ListenerType.Save' MergeListeners (eventListeners.SaveEventListeners' _saveOrUpdateEventListeners)); " is 121.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.SetListeners (ListenerType.Update' MergeListeners (eventListeners.UpdateEventListeners' _saveOrUpdateEventListeners)); " is 125.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.SetListeners (ListenerType.Autoflush' MergeListeners (eventListeners.AutoFlushEventListeners' _autoFlushEventListeners)); " is 128.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.AppendListeners (ListenerType.PreInsert' MergeListeners (eventListeners.PreInsertEventListeners' _preInsertEventListeners)); " is 131.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.AppendListeners (ListenerType.PreUpdate' MergeListeners (eventListeners.PreUpdateEventListeners' _preUpdateEventListeners)); " is 131.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.AppendListeners (ListenerType.PreCollectionUpdate' MergeListeners (eventListeners.PreCollectionUpdateEventListeners' _preCollectionUpdateEventListeners)); " is 161.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.AppendListeners (ListenerType.PreDelete' MergeListeners (eventListeners.PreDeleteEventListeners' _preDeleteEventListeners)); " is 131.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.AppendListeners (ListenerType.PostInsert' MergeListeners (eventListeners.PostInsertEventListeners' _postInsertEventListeners)); " is 134.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.AppendListeners (ListenerType.PostUpdate' MergeListeners (eventListeners.PostUpdateEventListeners' _postUpdateEventListeners)); " is 134.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.AppendListeners (ListenerType.PostCollectionUpdate' MergeListeners (eventListeners.PostCollectionUpdateEventListeners' _postCollectionUpdateEventListeners)); " is 164.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,Handle,The length of the statement  "	config.AppendListeners (ListenerType.PostDelete' MergeListeners (eventListeners.PostDeleteEventListeners' _postDeleteEventListeners)); " is 134.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,MergeListeners,The length of the statement  "		var evntListnrTypeAttr = newListener.GetType ().GetCustomAttributes<NhEventListenerTypeAttribute> (false).FirstOrDefault (o => o.Type == typeof(T)); " is 148.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,MergeListeners,The length of the statement  "		var evntListnrAttr = newListener.GetType ().GetCustomAttribute<NhEventListenerAttribute> (false) ?? new NhEventListenerAttribute (); " is 132.
Long Statement,PowerArhitecture.DataAccess.EventListeners,NhConfigurationEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\EventListeners\NhConfigurationEventListener.cs,MergeListeners,The length of the statement  "		var evntListnrTypeAttr = type.GetCustomAttributes<NhEventListenerTypeAttribute> (false).FirstOrDefault (a => a.Type == typeof(T)); " is 130.
Long Statement,NHibernate,ConfigurationExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\ConfigurationExtensions.cs,GenerateSchemaUpdateScript,The length of the statement  "	var properties = type.GetField ("properties"' BindingFlags.Instance | BindingFlags.NonPublic).GetValue (cfg) as IDictionary<string' string>; " is 140.
Long Statement,NHibernate,ConfigurationExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\ConfigurationExtensions.cs,GenerateSchemaUpdateScript,The length of the statement  "	var TableMappings = type.GetProperty ("TableMappings"' BindingFlags.Instance | BindingFlags.NonPublic).GetGetMethod (true).Invoke (cfg' null) as ICollection<Table>; " is 164.
Long Statement,NHibernate,ConfigurationExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\ConfigurationExtensions.cs,GenerateSchemaUpdateScript,The length of the statement  "			ITableMetadata tableInfo = databaseMetadata.GetTableMetadata (table.Name' table.Schema ?? defaultSchema' table.Catalog ?? defaultCatalog' table.IsQuoted); " is 154.
Long Statement,NHibernate,ConfigurationExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\ConfigurationExtensions.cs,GenerateSchemaUpdateScript,The length of the statement  "						bool create = tableInfo == null || (tableInfo.GetForeignKeyMetadata (fk.Name) == null && (!(dialect is MySQLDialect) || tableInfo.GetIndexMetadata (fk.Name) == null)); " is 167.
Long Statement,PowerArhitecture.DataAccess.Extensions,NinjectModuleExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\NinjectModuleExtensions.cs,RegisterDatabaseConfiguration,The length of the statement  "	var syntaxBinding = bindingBuilder.ToConstant (dbConfiguration).When (CheckSessionFactoryName (name)).InSingletonScope (); " is 122.
Long Statement,PowerArhitecture.DataAccess.Extensions,NinjectModuleExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\NinjectModuleExtensions.cs,RegisterSession,The length of the statement  "	var syntaxBinding = bindingBuilder.ToProvider<SessionProvider> ().WhenRequestScopeExistsAndNoAncestorOrCurrentNamedAnd (ResolutionScopes.UnitOfWork' CheckSessionFactoryName (name)).InRequestScope (); " is 199.
Long Statement,PowerArhitecture.DataAccess.Extensions,NinjectModuleExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\NinjectModuleExtensions.cs,RegisterSession,The length of the statement  "	var syntaxBinding2 = bindingBuilder2.ToProvider<SessionProvider> ().WhenRequestScopeNotExistsAndNoAncestorOrCurrentNamedAnd (ResolutionScopes.UnitOfWork' CheckSessionFactoryName (name)).InCallScope (); " is 201.
Long Statement,PowerArhitecture.DataAccess.Extensions,NinjectModuleExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\NinjectModuleExtensions.cs,RegisterSession,The length of the statement  "	var syntaxBinding3 = bindingBuilder3.ToProvider<SessionProvider> ().WhenAnyAncestorOrCurrentNamedAnd (ResolutionScopes.UnitOfWork' CheckSessionFactoryNameForContext (name)).InNamedScope (ResolutionScopes.UnitOfWork); " is 216.
Long Statement,PowerArhitecture.DataAccess.Extensions,NinjectModuleExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\NinjectModuleExtensions.cs,RegisterSessionFactory,The length of the statement  "	var syntaxBinding = bindingBuilder.ToProvider<SessionFactoryProvider> ().When (CheckSessionFactoryName (name)).InSingletonScope ().OnActivation (SessionFactoryProvider.PopulateData); " is 182.
Long Statement,PowerArhitecture.DataAccess.Extensions,NinjectModuleExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\NinjectModuleExtensions.cs,CheckSessionFactoryName,The length of the statement  "			var attr = (NamedSessionFactoryAttribute)r.Target.GetCustomAttributes (typeof(NamedSessionFactoryAttribute)' true).FirstOrDefault (); " is 133.
Long Statement,PowerArhitecture.DataAccess.Factories,UnitOfWorkFactory,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Factories\UnitOfWorkFactory.cs,GetNew,The length of the statement  "		return _resolutionRoot.Get<IUnitOfWork> (new ConstructorArgument ("isolationLevel"' isolationLevel)' new NamedSessionFactoryParameter (sessionFactoryName)); " is 156.
Long Statement,PowerArhitecture.DataAccess.MappingSteps,PACollectionStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\PACollectionStep.cs,ShouldMap,The length of the statement  "	if (FluentNHibernate.Utils.Extensions.In (member.PropertyType.Namespace' "System.Collections.Generic"' "Iesi.Collections.Generic") && !FluentNHibernate.Utils.Extensions.HasInterface (member.PropertyType' typeof(IDictionary)) && !FluentNHibernate.Utils.Extensions.ClosesInterface (member.PropertyType' typeof(IDictionary<' >))) " is 326.
Long Statement,PowerArhitecture.DataAccess.MappingSteps,PACollectionStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\PACollectionStep.cs,Map,The length of the statement  "	//Added additional contraint ShouldMap so now we are able to map a collection in a ignored base class within a derivered one " is 124.
Long Statement,PowerArhitecture.DataAccess.MappingSteps,PAHasManyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\PAHasManyStep.cs,Map,The length of the statement  "	//Added additional contraint ShouldMap so now we are able to map a collection in a ignored base class within a derivered one " is 124.
Long Statement,PowerArhitecture.DataAccess.MappingSteps,PAPropertyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\PAPropertyStep.cs,IsMappableToColumnType,The length of the statement  "	return property.PropertyType.Namespace == "System" || property.PropertyType.FullName == "System.Drawing.Bitmap" || property.PropertyType.IsEnum; " is 144.
Long Statement,PowerArhitecture.DataAccess.MappingSteps,PAPropertyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\PAPropertyStep.cs,Map,The length of the statement  "		var declaredMember = classMap.Type.GetMember (member.Name' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly | BindingFlags.NonPublic); " is 157.
Long Statement,PowerArhitecture.DataAccess.MappingSteps,PAPropertyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\PAPropertyStep.cs,GetDefaultType,The length of the statement  "		type = new TypeReference (typeof(GenericEnumMapper<>).MakeGenericType (property.PropertyType.GetGenericArguments () [0])); " is 122.
Long Statement,PowerArhitecture.DataAccess.MappingSteps,CustomHasManyToManyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\CustomHasManyToManyStep.cs,ShouldMap,The length of the statement  "	if (type.HasInterface (typeof(IDictionary)) || type.ClosesInterface (typeof(IDictionary<' >)) || type.Closes (typeof(IDictionary<' >))) " is 135.
Long Statement,PowerArhitecture.DataAccess.MappingSteps,CustomHasManyToManyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\CustomHasManyToManyStep.cs,GetInverseProperty,The length of the statement  "	return argument.GetProperties (BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Select (x => x.ToMember ()).FirstOrDefault (x => x.PropertyType == expectedInversePropertyType && x != member); " is 212.
Long Statement,PowerArhitecture.DataAccess.MappingSteps,CustomHasManyToManyStep,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\MappingSteps\CustomHasManyToManyStep.cs,ConfigureModel,The length of the statement  "	mapping.Set (x => x.Relationship' Layer.Defaults' CreateManyToMany (member' member.PropertyType.GetGenericArguments () [0]' classMap.Type)); " is 140.
Long Statement,PowerArhitecture.DataAccess.NHEventListeners,NhSaveOrUpdateEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\NhSaveOrUpdateEventListener.cs,EntityIsTransient,The length of the statement  "		//for persistent entites we will update the audit properties in the preupdate listener (here we dont know if the entity is dirty) " is 129.
Long Statement,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,Validate,The length of the statement  "	if ((ruleSets.Contains (ValidationRuleSet.Update) && !validableEntity.ValidateOnUpdate) || (ruleSets.Contains (ValidationRuleSet.Delete) && !validableEntity.ValidateOnDelete) || (ruleSets.Contains (ValidationRuleSet.Insert) && !validableEntity.ValidateOnInsert)) { " is 264.
Long Statement,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,Validate,The length of the statement  "	//For validation we want to have a clean session (cache lvl 1) that share the same connection and transaction from the current one " is 130.
Long Statement,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,Validate,The length of the statement  "	var validator = (IValidator)sessionContext.ResolutionRoot.Get (typeof(IValidator<>).MakeGenericType (type)' new TypeMatchingConstructorArgument (typeof(ISession)' (context' target) => childSession' true)); " is 205.
Long Statement,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,Validate,The length of the statement  "	var validationResult = await validator.ValidateAsync (GetValidationContext (type' entity' ruleSets)).ConfigureAwait (false); " is 124.
Long Statement,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,GetValidationContext,The length of the statement  "	return typeof(ValidationContext<>).MakeGenericType (type).GetConstructors ().First (c => c.GetParameters ().Length == 3).Invoke (new[] { " is 136.
Long Statement,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,OnPreUpdateCollection,The length of the statement  "		await Validate (owner' @event.Session' @event.Session.EntityMode' ValidationRuleSet.AttributeUpdate).ConfigureAwait (false); " is 124.
Long Statement,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,OnPreUpdate,The length of the statement  "	await Validate (@event.Entity' @event.Session' @event.Session.EntityMode' ValidationRuleSet.AttributeUpdate).ConfigureAwait (false); " is 132.
Long Statement,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,OnPreDelete,The length of the statement  "	await Validate (@event.Entity' @event.Session' @event.Session.EntityMode' ValidationRuleSet.Delete).ConfigureAwait (false); " is 123.
Long Statement,PowerArhitecture.DataAccess.Providers,AuditUserProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\AuditUserProvider.cs,GetCurrentUser,The length of the statement  "			if (userMetaData.PropertyNames [i] == UserNamePropertyName && userMetaData.PropertyTypes [i].ReturnedClass == typeof(string)) { " is 127.
Long Statement,PowerArhitecture.DataAccess.Providers,AuditUserProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\AuditUserProvider.cs,GetCurrentUser,The length of the statement  "				if (userMetaData.HasNaturalIdentifier && userMetaData.NaturalIdentifierProperties.Length == 1 && userMetaData.NaturalIdentifierProperties.Contains (i)) { " is 153.
Long Statement,PowerArhitecture.DataAccess.Providers,AuditUserProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\AuditUserProvider.cs,GetCurrentUser,The length of the statement  "					user = (IEntity)await session.CreateCriteria (userType).Add (Restrictions.NaturalId ().Set (UserNamePropertyName' userName)).SetCacheable (true).UniqueResultAsync ().ConfigureAwait (false); " is 189.
Long Statement,PowerArhitecture.DataAccess.Providers,AuditUserProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\AuditUserProvider.cs,GetCurrentUser,The length of the statement  "					user = (IEntity)await session.CreateCriteria (userType).Add (Restrictions.Eq (UserNamePropertyName' userName)).SetCacheable (true).UniqueResultAsync ().ConfigureAwait (false); " is 175.
Long Statement,PowerArhitecture.DataAccess.Providers,AuditUserProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\AuditUserProvider.cs,GetCurrentUser,The length of the statement  "	throw new NotSupportedException (string.Format ("Unsupported user type: {0}. Hint: Register a custom IAuditUserProvider"' userType)); " is 133.
Long Statement,PowerArhitecture.DataAccess.Providers,SessionFactoryProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\SessionFactoryProvider.cs,Create,The length of the statement  "		var attr = (NamedSessionFactoryAttribute)context.Request.Target.GetCustomAttributes (typeof(NamedSessionFactoryAttribute)' true).FirstOrDefault (); " is 147.
Long Statement,PowerArhitecture.DataAccess.Providers,SessionFactoryProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\SessionFactoryProvider.cs,PopulateData,The length of the statement  "	var settings = string.IsNullOrEmpty (name) ? context.Kernel.Get<DatabaseConfiguration> () : context.Kernel.Get<DatabaseConfiguration> (new NamedSessionFactoryParameter (name)); " is 176.
Long Statement,PowerArhitecture.DataAccess.Providers,SessionProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\SessionProvider.cs,Create,The length of the statement  "		var attr = (NamedSessionFactoryAttribute)context.Request.Target.GetCustomAttributes (typeof(NamedSessionFactoryAttribute)' true).FirstOrDefault (); " is 147.
Long Statement,PowerArhitecture.DataAccess.Providers,SessionProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\SessionProvider.cs,Create,The length of the statement  "	var session = (ISession)new SessionWrapper ((IEventSource)sessionFactory.OpenSession (sessionContext)' _eventAggregator); " is 121.
Long Statement,PowerArhitecture.DataAccess.Providers,SessionProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\SessionProvider.cs,Create,The length of the statement  "	else//If a session is created when HttpContext is not available tell SessionManager that the session must be manually disposed " is 126.
Long Statement,NHibernate.Tool.hbm2ddl,SchemaExportExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaExportExt.cs,Initialize,The length of the statement  "	formatter = (PropertiesHelper.GetBoolean (Environment.FormatSql' configProperties' true) ? FormatStyle.Ddl : FormatStyle.None).Formatter; " is 137.
Long Statement,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The length of the statement  "					cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9)))); " is 154.
Long Statement,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Execute,The length of the statement  "	string autoKeyWordsImport = PropertiesHelper.GetString (Environment.Hbm2ddlKeyWords' configuration.Properties' "not-defined"); " is 126.
Complex Conditional,PowerArhitecture.DataAccess,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NinjectRegistration.cs,Load,The conditional expression  "!t.IsClass || t.IsAbstract || t.IsGenericType || !typeof(IRepository).IsAssignableFrom (t)"  is complex.
Complex Conditional,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,Validate,The conditional expression  "(ruleSets.Contains (ValidationRuleSet.Update) && !validableEntity.ValidateOnUpdate) || (ruleSets.Contains (ValidationRuleSet.Delete) && !validableEntity.ValidateOnDelete) || (ruleSets.Contains (ValidationRuleSet.Insert) && !validableEntity.ValidateOnInsert)"  is complex.
Empty Catch Block,PowerArhitecture.DataAccess.Providers,AuditUserProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Providers\AuditUserProvider.cs,GetCurrentUser,The method has an empty catch block.
Magic Number,PowerArhitecture.DataAccess.Attributes,NhEventListenerTypeAttribute,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Attributes\NhEventListenerTypeAttribute.cs,NhEventListenerTypeAttribute,The following statement contains a magic number: Order = 100;  
Magic Number,PowerArhitecture.DataAccess.Attributes,NhEventListenerAttribute,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Attributes\NhEventListenerAttribute.cs,NhEventListenerAttribute,The following statement contains a magic number: Order = 100;  
Magic Number,PowerArhitecture.DataAccess.Conventions,LengthAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\LengthAttributeConvention.cs,Apply,The following statement contains a magic number: instance.Length (attribute.Max == int.MaxValue ? 10000 : attribute.Max);  
Magic Number,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The following statement contains a magic number: foreach (var match in matches.Cast<Match> ().Where (match => match.Success)) {  	string uniqueKeySql;  	if (string.IsNullOrEmpty (match.Groups [2].Value))//named unique key  	 {  		var columns = match.Groups [6].Value.Split (''').Select (o => o.Trim ()).ToList ();  		uniqueKeySql = string.Format ("CONSTRAINT {0} UNIQUE ({1})"' GetUniqueKeyName (tableName' columns)' string.Join ("' "' columns));  		dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  	}  	else {  		var column = match.Groups [2].Value;  		uniqueKeySql = match.Groups [0].Value.Replace ("unique"' "");  		dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  		if (match.Groups [4].Value == "null")//create filtered unique index  		 {  			script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column);  			script.AppendLine ();  		}  		else {  			dbCommand.CommandText = dbCommand.CommandText.Remove (dbCommand.CommandText.LastIndexOf (')')' 1);  			dbCommand.CommandText += string.Format ("'CONSTRAINT {0} UNIQUE ({1}))"' GetUniqueKeyName (tableName' column)' column);  		}  	}  }  
Magic Number,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The following statement contains a magic number: foreach (var match in matches.Cast<Match> ().Where (match => match.Success)) {  	string uniqueKeySql;  	if (string.IsNullOrEmpty (match.Groups [2].Value))//named unique key  	 {  		var columns = match.Groups [6].Value.Split (''').Select (o => o.Trim ()).ToList ();  		uniqueKeySql = string.Format ("CONSTRAINT {0} UNIQUE ({1})"' GetUniqueKeyName (tableName' columns)' string.Join ("' "' columns));  		dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  	}  	else {  		var column = match.Groups [2].Value;  		uniqueKeySql = match.Groups [0].Value.Replace ("unique"' "");  		dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  		if (match.Groups [4].Value == "null")//create filtered unique index  		 {  			script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column);  			script.AppendLine ();  		}  		else {  			dbCommand.CommandText = dbCommand.CommandText.Remove (dbCommand.CommandText.LastIndexOf (')')' 1);  			dbCommand.CommandText += string.Format ("'CONSTRAINT {0} UNIQUE ({1}))"' GetUniqueKeyName (tableName' column)' column);  		}  	}  }  
Magic Number,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The following statement contains a magic number: foreach (var match in matches.Cast<Match> ().Where (match => match.Success)) {  	string uniqueKeySql;  	if (string.IsNullOrEmpty (match.Groups [2].Value))//named unique key  	 {  		var columns = match.Groups [6].Value.Split (''').Select (o => o.Trim ()).ToList ();  		uniqueKeySql = string.Format ("CONSTRAINT {0} UNIQUE ({1})"' GetUniqueKeyName (tableName' columns)' string.Join ("' "' columns));  		dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  	}  	else {  		var column = match.Groups [2].Value;  		uniqueKeySql = match.Groups [0].Value.Replace ("unique"' "");  		dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  		if (match.Groups [4].Value == "null")//create filtered unique index  		 {  			script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column);  			script.AppendLine ();  		}  		else {  			dbCommand.CommandText = dbCommand.CommandText.Remove (dbCommand.CommandText.LastIndexOf (')')' 1);  			dbCommand.CommandText += string.Format ("'CONSTRAINT {0} UNIQUE ({1}))"' GetUniqueKeyName (tableName' column)' column);  		}  	}  }  
Magic Number,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The following statement contains a magic number: foreach (var match in matches.Cast<Match> ().Where (match => match.Success)) {  	string uniqueKeySql;  	if (string.IsNullOrEmpty (match.Groups [2].Value))//named unique key  	 {  		var columns = match.Groups [6].Value.Split (''').Select (o => o.Trim ()).ToList ();  		uniqueKeySql = string.Format ("CONSTRAINT {0} UNIQUE ({1})"' GetUniqueKeyName (tableName' columns)' string.Join ("' "' columns));  		dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  	}  	else {  		var column = match.Groups [2].Value;  		uniqueKeySql = match.Groups [0].Value.Replace ("unique"' "");  		dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  		if (match.Groups [4].Value == "null")//create filtered unique index  		 {  			script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column);  			script.AppendLine ();  		}  		else {  			dbCommand.CommandText = dbCommand.CommandText.Remove (dbCommand.CommandText.LastIndexOf (')')' 1);  			dbCommand.CommandText += string.Format ("'CONSTRAINT {0} UNIQUE ({1}))"' GetUniqueKeyName (tableName' column)' column);  		}  	}  }  
Magic Number,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The following statement contains a magic number: if (string.IsNullOrEmpty (match.Groups [2].Value))//named unique key   {  	var columns = match.Groups [6].Value.Split (''').Select (o => o.Trim ()).ToList ();  	uniqueKeySql = string.Format ("CONSTRAINT {0} UNIQUE ({1})"' GetUniqueKeyName (tableName' columns)' string.Join ("' "' columns));  	dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  }  else {  	var column = match.Groups [2].Value;  	uniqueKeySql = match.Groups [0].Value.Replace ("unique"' "");  	dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  	if (match.Groups [4].Value == "null")//create filtered unique index  	 {  		script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column);  		script.AppendLine ();  	}  	else {  		dbCommand.CommandText = dbCommand.CommandText.Remove (dbCommand.CommandText.LastIndexOf (')')' 1);  		dbCommand.CommandText += string.Format ("'CONSTRAINT {0} UNIQUE ({1}))"' GetUniqueKeyName (tableName' column)' column);  	}  }  
Magic Number,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The following statement contains a magic number: if (string.IsNullOrEmpty (match.Groups [2].Value))//named unique key   {  	var columns = match.Groups [6].Value.Split (''').Select (o => o.Trim ()).ToList ();  	uniqueKeySql = string.Format ("CONSTRAINT {0} UNIQUE ({1})"' GetUniqueKeyName (tableName' columns)' string.Join ("' "' columns));  	dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  }  else {  	var column = match.Groups [2].Value;  	uniqueKeySql = match.Groups [0].Value.Replace ("unique"' "");  	dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  	if (match.Groups [4].Value == "null")//create filtered unique index  	 {  		script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column);  		script.AppendLine ();  	}  	else {  		dbCommand.CommandText = dbCommand.CommandText.Remove (dbCommand.CommandText.LastIndexOf (')')' 1);  		dbCommand.CommandText += string.Format ("'CONSTRAINT {0} UNIQUE ({1}))"' GetUniqueKeyName (tableName' column)' column);  	}  }  
Magic Number,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The following statement contains a magic number: if (string.IsNullOrEmpty (match.Groups [2].Value))//named unique key   {  	var columns = match.Groups [6].Value.Split (''').Select (o => o.Trim ()).ToList ();  	uniqueKeySql = string.Format ("CONSTRAINT {0} UNIQUE ({1})"' GetUniqueKeyName (tableName' columns)' string.Join ("' "' columns));  	dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  }  else {  	var column = match.Groups [2].Value;  	uniqueKeySql = match.Groups [0].Value.Replace ("unique"' "");  	dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  	if (match.Groups [4].Value == "null")//create filtered unique index  	 {  		script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column);  		script.AppendLine ();  	}  	else {  		dbCommand.CommandText = dbCommand.CommandText.Remove (dbCommand.CommandText.LastIndexOf (')')' 1);  		dbCommand.CommandText += string.Format ("'CONSTRAINT {0} UNIQUE ({1}))"' GetUniqueKeyName (tableName' column)' column);  	}  }  
Magic Number,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The following statement contains a magic number: if (string.IsNullOrEmpty (match.Groups [2].Value))//named unique key   {  	var columns = match.Groups [6].Value.Split (''').Select (o => o.Trim ()).ToList ();  	uniqueKeySql = string.Format ("CONSTRAINT {0} UNIQUE ({1})"' GetUniqueKeyName (tableName' columns)' string.Join ("' "' columns));  	dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  }  else {  	var column = match.Groups [2].Value;  	uniqueKeySql = match.Groups [0].Value.Replace ("unique"' "");  	dbCommand.CommandText = dbCommand.CommandText.Replace (match.Groups [0].Value' uniqueKeySql);  	if (match.Groups [4].Value == "null")//create filtered unique index  	 {  		script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column);  		script.AppendLine ();  	}  	else {  		dbCommand.CommandText = dbCommand.CommandText.Remove (dbCommand.CommandText.LastIndexOf (')')' 1);  		dbCommand.CommandText += string.Format ("'CONSTRAINT {0} UNIQUE ({1}))"' GetUniqueKeyName (tableName' column)' column);  	}  }  
Magic Number,PowerArhitecture.DataAccess.Conventions.Mssql,MssqlUniqueMultipleNullsConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\Mssql\MssqlUniqueMultipleNullsConvention.cs,ApplyBeforeExecutingQuery,The following statement contains a magic number: if (match.Groups [4].Value == "null")//create filtered unique index   {  	script.AppendFormat ("CREATE UNIQUE NONCLUSTERED INDEX {0} ON {1}({2}) WHERE {2} IS NOT NULL"' GetUniqueKeyName (tableName' column)' tableName' column);  	script.AppendLine ();  }  else {  	dbCommand.CommandText = dbCommand.CommandText.Remove (dbCommand.CommandText.LastIndexOf (')')' 1);  	dbCommand.CommandText += string.Format ("'CONSTRAINT {0} UNIQUE ({1}))"' GetUniqueKeyName (tableName' column)' column);  }  
Magic Number,PowerArhitecture.DataAccess.NHEventListeners,ValidatePreInsertUpdateDeleteEventListener,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\NHEventListeners\ValidatePreInsertUpdateDeleteEventListener.cs,GetValidationContext,The following statement contains a magic number: return typeof(ValidationContext<>).MakeGenericType (type).GetConstructors ().First (c => c.GetParameters ().Length == 3).Invoke (new[] {  	entity'  	new PropertyChain ()'  	new PARulesetValidatorSelector (ruleSets)  }) as ValidationContext;  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: try {  	var cfg = new Configuration ();  	bool script = true;  	// If true then execute db updates' otherwise just generate and display updates  	bool doUpdate = true;  	//String propFile = null;  	for (int i = 0; i < args.Length; i++) {  		if (args [i].StartsWith ("--")) {  			if (args [i].Equals ("--quiet")) {  				script = false;  			}  			else if (args [i].StartsWith ("--properties=")) {  				throw new NotSupportedException ("No properties file for .NET' use app.config instead");  				//propFile = args[i].Substring( 13 );  			}  			else if (args [i].StartsWith ("--config=")) {  				cfg.Configure (args [i].Substring (9));  			}  			else if (args [i].StartsWith ("--text")) {  				doUpdate = false;  			}  			else if (args [i].StartsWith ("--naming=")) {  				cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  			}  		}  		else {  			cfg.AddFile (args [i]);  		}  	}  	/* NH: No props file for .NET                  * if ( propFile != null ) {                     Hashtable props = new Hashtable();                     props.putAll( cfg.Properties );                     props.load( new FileInputStream( propFile ) );                     cfg.SetProperties( props );                 }*/new SchemaUpdateExt (cfg).Execute (script' doUpdate);  }  catch (Exception e) {  	log.Error ("Error running schema update"' e);  	Console.WriteLine (e);  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: try {  	var cfg = new Configuration ();  	bool script = true;  	// If true then execute db updates' otherwise just generate and display updates  	bool doUpdate = true;  	//String propFile = null;  	for (int i = 0; i < args.Length; i++) {  		if (args [i].StartsWith ("--")) {  			if (args [i].Equals ("--quiet")) {  				script = false;  			}  			else if (args [i].StartsWith ("--properties=")) {  				throw new NotSupportedException ("No properties file for .NET' use app.config instead");  				//propFile = args[i].Substring( 13 );  			}  			else if (args [i].StartsWith ("--config=")) {  				cfg.Configure (args [i].Substring (9));  			}  			else if (args [i].StartsWith ("--text")) {  				doUpdate = false;  			}  			else if (args [i].StartsWith ("--naming=")) {  				cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  			}  		}  		else {  			cfg.AddFile (args [i]);  		}  	}  	/* NH: No props file for .NET                  * if ( propFile != null ) {                     Hashtable props = new Hashtable();                     props.putAll( cfg.Properties );                     props.load( new FileInputStream( propFile ) );                     cfg.SetProperties( props );                 }*/new SchemaUpdateExt (cfg).Execute (script' doUpdate);  }  catch (Exception e) {  	log.Error ("Error running schema update"' e);  	Console.WriteLine (e);  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	if (args [i].StartsWith ("--")) {  		if (args [i].Equals ("--quiet")) {  			script = false;  		}  		else if (args [i].StartsWith ("--properties=")) {  			throw new NotSupportedException ("No properties file for .NET' use app.config instead");  			//propFile = args[i].Substring( 13 );  		}  		else if (args [i].StartsWith ("--config=")) {  			cfg.Configure (args [i].Substring (9));  		}  		else if (args [i].StartsWith ("--text")) {  			doUpdate = false;  		}  		else if (args [i].StartsWith ("--naming=")) {  			cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  		}  	}  	else {  		cfg.AddFile (args [i]);  	}  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	if (args [i].StartsWith ("--")) {  		if (args [i].Equals ("--quiet")) {  			script = false;  		}  		else if (args [i].StartsWith ("--properties=")) {  			throw new NotSupportedException ("No properties file for .NET' use app.config instead");  			//propFile = args[i].Substring( 13 );  		}  		else if (args [i].StartsWith ("--config=")) {  			cfg.Configure (args [i].Substring (9));  		}  		else if (args [i].StartsWith ("--text")) {  			doUpdate = false;  		}  		else if (args [i].StartsWith ("--naming=")) {  			cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  		}  	}  	else {  		cfg.AddFile (args [i]);  	}  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].StartsWith ("--")) {  	if (args [i].Equals ("--quiet")) {  		script = false;  	}  	else if (args [i].StartsWith ("--properties=")) {  		throw new NotSupportedException ("No properties file for .NET' use app.config instead");  		//propFile = args[i].Substring( 13 );  	}  	else if (args [i].StartsWith ("--config=")) {  		cfg.Configure (args [i].Substring (9));  	}  	else if (args [i].StartsWith ("--text")) {  		doUpdate = false;  	}  	else if (args [i].StartsWith ("--naming=")) {  		cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  	}  }  else {  	cfg.AddFile (args [i]);  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].StartsWith ("--")) {  	if (args [i].Equals ("--quiet")) {  		script = false;  	}  	else if (args [i].StartsWith ("--properties=")) {  		throw new NotSupportedException ("No properties file for .NET' use app.config instead");  		//propFile = args[i].Substring( 13 );  	}  	else if (args [i].StartsWith ("--config=")) {  		cfg.Configure (args [i].Substring (9));  	}  	else if (args [i].StartsWith ("--text")) {  		doUpdate = false;  	}  	else if (args [i].StartsWith ("--naming=")) {  		cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  	}  }  else {  	cfg.AddFile (args [i]);  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].Equals ("--quiet")) {  	script = false;  }  else if (args [i].StartsWith ("--properties=")) {  	throw new NotSupportedException ("No properties file for .NET' use app.config instead");  	//propFile = args[i].Substring( 13 );  }  else if (args [i].StartsWith ("--config=")) {  	cfg.Configure (args [i].Substring (9));  }  else if (args [i].StartsWith ("--text")) {  	doUpdate = false;  }  else if (args [i].StartsWith ("--naming=")) {  	cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].Equals ("--quiet")) {  	script = false;  }  else if (args [i].StartsWith ("--properties=")) {  	throw new NotSupportedException ("No properties file for .NET' use app.config instead");  	//propFile = args[i].Substring( 13 );  }  else if (args [i].StartsWith ("--config=")) {  	cfg.Configure (args [i].Substring (9));  }  else if (args [i].StartsWith ("--text")) {  	doUpdate = false;  }  else if (args [i].StartsWith ("--naming=")) {  	cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].StartsWith ("--properties=")) {  	throw new NotSupportedException ("No properties file for .NET' use app.config instead");  	//propFile = args[i].Substring( 13 );  }  else if (args [i].StartsWith ("--config=")) {  	cfg.Configure (args [i].Substring (9));  }  else if (args [i].StartsWith ("--text")) {  	doUpdate = false;  }  else if (args [i].StartsWith ("--naming=")) {  	cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].StartsWith ("--properties=")) {  	throw new NotSupportedException ("No properties file for .NET' use app.config instead");  	//propFile = args[i].Substring( 13 );  }  else if (args [i].StartsWith ("--config=")) {  	cfg.Configure (args [i].Substring (9));  }  else if (args [i].StartsWith ("--text")) {  	doUpdate = false;  }  else if (args [i].StartsWith ("--naming=")) {  	cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].StartsWith ("--config=")) {  	cfg.Configure (args [i].Substring (9));  }  else if (args [i].StartsWith ("--text")) {  	doUpdate = false;  }  else if (args [i].StartsWith ("--naming=")) {  	cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].StartsWith ("--config=")) {  	cfg.Configure (args [i].Substring (9));  }  else if (args [i].StartsWith ("--text")) {  	doUpdate = false;  }  else if (args [i].StartsWith ("--naming=")) {  	cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: cfg.Configure (args [i].Substring (9));  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].StartsWith ("--text")) {  	doUpdate = false;  }  else if (args [i].StartsWith ("--naming=")) {  	cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: if (args [i].StartsWith ("--naming=")) {  	cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  }  
Magic Number,NHibernate.Tool.hbm2ddl,SchemaUpdateExt,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Tools\SchemaUpdateExt.cs,Main,The following statement contains a magic number: cfg.SetNamingStrategy ((INamingStrategy)Environment.BytecodeProvider.ObjectsFactory.CreateInstance (ReflectHelper.ClassForName (args [i].Substring (9))));  
Missing Default,PowerArhitecture.DataAccess.Conventions,FetchModeAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\FetchModeAttributeConvention.cs,Apply,The following switch statement is missing a default case: switch (attr.Mode) {  case FetchMode.Select:  	instance.Fetch.Select ();  	break;  case FetchMode.Join:  	instance.Fetch.Join ();  	break;  case FetchMode.SubSelect:  	instance.Fetch.Subselect ();  	break;  }  
Missing Default,PowerArhitecture.DataAccess.Conventions,FetchModeAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\FetchModeAttributeConvention.cs,Apply,The following switch statement is missing a default case: switch (attr.Mode) {  case FetchMode.Select:  	instance.Fetch.Select ();  	break;  case FetchMode.Join:  	instance.Fetch.Join ();  	break;  case FetchMode.SubSelect:  	instance.Fetch.Subselect ();  	break;  }  
Missing Default,PowerArhitecture.DataAccess.Conventions,FetchModeAttributeConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\FetchModeAttributeConvention.cs,Apply,The following switch statement is missing a default case: switch (attr.Mode) {  case FetchMode.Select:  	instance.Fetch.Select ();  	break;  case FetchMode.Join:  	instance.Fetch.Join ();  	break;  case FetchMode.SubSelect:  	instance.Fetch.Subselect ();  	break;  }  
Missing Default,PowerArhitecture.DataAccess.Conventions,PropertyConvention,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Conventions\PropertyConvention.cs,Apply,The following switch statement is missing a default case: switch (_configuration.DateTimeZone.ToLowerInvariant ()) {  case "local":  	instance.CustomType ("LocalDateTime");  	break;  case "utc":  	instance.CustomType ("UtcDateTime");  	break;  }  
Missing Default,NHibernate,QueryOverExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.DataAccess\Extensions\QueryOverExtensions.cs,Lock,The following switch statement is missing a default case: switch (lockMode) {  case PowerArhitecture.DataAccess.Enums.LockMode.None:  	return queryOver.Lock ().None;  case PowerArhitecture.DataAccess.Enums.LockMode.Read:  	return queryOver.Lock ().Read;  case PowerArhitecture.DataAccess.Enums.LockMode.Upgrade:  	return queryOver.Lock ().Upgrade;  case PowerArhitecture.DataAccess.Enums.LockMode.UpgradeNoWait:  	return queryOver.Lock ().UpgradeNoWait;  case PowerArhitecture.DataAccess.Enums.LockMode.Write:  	return queryOver.Lock ().Write;  case PowerArhitecture.DataAccess.Enums.LockMode.Force:  	return queryOver.Lock ().Force;  }  
