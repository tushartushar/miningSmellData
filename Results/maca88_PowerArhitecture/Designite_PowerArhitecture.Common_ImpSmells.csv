Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PowerArhitecture.Common.Cryptographics,AesCryptography,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Cryptographics\AESCryptography.cs,Encrypt,Cyclomatic complexity of the method is 8
Complex Method,PowerArhitecture.Common.Cryptographics,AesCryptography,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Cryptographics\AESCryptography.cs,Decrypt,Cyclomatic complexity of the method is 8
Complex Method,PowerArhitecture.Common.Helpers,ExpressionHelper,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Helpers\ExpressionHelper.cs,GetExpressionInfo,Cyclomatic complexity of the method is 11
Complex Method,System.Reflection,ObjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\ObjectExtensions.cs,GetMemberAndValue,Cyclomatic complexity of the method is 9
Complex Method,System,StringExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\StringExtensions.cs,GetTypeFromSimpleName,Cyclomatic complexity of the method is 67
Complex Method,System,TypeExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\TypeExtensions.cs,IsNumericType,Cyclomatic complexity of the method is 15
Long Parameter List,PowerArhitecture.Common.Extensions,NinjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\NinjectExtensions.cs,WhenRequestScopeExistsAndNoAncestorOrCurrentNamedAnd,The method has 5 parameters.
Long Parameter List,PowerArhitecture.Common.Extensions,NinjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\NinjectExtensions.cs,WhenRequestScopeNotExistsAndNoAncestorOrCurrentNamedAnd,The method has 5 parameters.
Long Parameter List,PowerArhitecture.Common.Internationalization,I18N,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\I18N.cs,TranslatePlural,The method has 5 parameters.
Long Parameter List,PowerArhitecture.Common.Internationalization,I18N,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\I18N.cs,TranslateContextualPlural,The method has 5 parameters.
Long Parameter List,PowerArhitecture.Common.Internationalization,I18N,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\I18N.cs,TranslateContextualPlural,The method has 6 parameters.
Long Parameter List,System.Reflection,ObjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\ObjectExtensions.cs,Equals,The method has 6 parameters.
Long Parameter List,PowerArhitecture.Common.Providers,EventAggregatorProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Providers\EventAggregatorProvider.cs,OnActivation,The method has 5 parameters.
Long Parameter List,PowerArhitecture.Common,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\NinjectRegistration.cs,Load,The method has 11 parameters.
Long Statement,PowerArhitecture.Common.Configuration,AppConfiguration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Configuration\AppConfiguration.cs,GetSettings,The length of the statement  "		var value = typeof(AppConfiguration).GetMethod ("GetSetting").MakeGenericMethod (type.GetTypeFromSimpleName ()).Invoke (null' new object[] { " is 140.
Long Statement,PowerArhitecture.Common.Expressions,ExpressionInfo,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Expressions\ExpressionInfo.cs,AddSubExpression,The length of the statement  "		//IsLazyLoadEnabled = sessionFactoryInfo.IsLazyLoadEnabled(memberExpression.Member.DeclaringType' memberExpression.Member.Name)' " is 128.
Long Statement,PowerArhitecture.Common.Extensions,NinjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\NinjectExtensions.cs,WhenRequestScopeExistsAndNoAncestorOrCurrentNamed,The length of the statement  "	return binding.When (request => request.ExistsRequestScope () && !DoesAnyAncestorMatch (request' context => context.AncestorOrCurrentNamed (name))); " is 148.
Long Statement,PowerArhitecture.Common.Extensions,NinjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\NinjectExtensions.cs,WhenRequestScopeExistsAndNoAncestorOrCurrentNamedAnd,The length of the statement  "	return binding.When (request => request.ExistsRequestScope () && !DoesAnyAncestorMatch (request' context => context.AncestorOrCurrentNamed (name)) && and (request)); " is 165.
Long Statement,PowerArhitecture.Common.Extensions,NinjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\NinjectExtensions.cs,WhenRequestScopeNotExistsAndNoAncestorOrCurrentNamed,The length of the statement  "	return binding.When (request => !request.ExistsRequestScope () && !DoesAnyAncestorMatch (request' context => context.AncestorOrCurrentNamed (name))); " is 149.
Long Statement,PowerArhitecture.Common.Extensions,NinjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\NinjectExtensions.cs,WhenRequestScopeNotExistsAndNoAncestorOrCurrentNamedAnd,The length of the statement  "	return binding.When (request => !request.ExistsRequestScope () && !DoesAnyAncestorMatch (request' context => context.AncestorOrCurrentNamed (name)) && and (request)); " is 166.
Long Statement,PowerArhitecture.Common.Extensions,NinjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\NinjectExtensions.cs,ExistsRequestScope,The length of the statement  "	return context.Kernel.Components.GetAll<INinjectHttpApplicationPlugin> ().Select (c => c.GetRequestScope (context)).Any (s => s != null); " is 137.
Long Statement,PowerArhitecture.Common.Helpers,ExpressionHelper,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Helpers\ExpressionHelper.cs,GetExpressionInfo,The length of the statement  "		if (memberExpression.Expression.NodeType == ExpressionType.MemberAccess || memberExpression.Expression.NodeType == ExpressionType.Call) { " is 137.
Long Statement,PowerArhitecture.Common.Helpers,ExpressionHelper,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Helpers\ExpressionHelper.cs,GetExpressionInfo,The length of the statement  "			fullPath = (GetExpressionInfo (memberExpression.Expression' expressionInfo) + "." + memberExpression.Member.Name).TrimStart ('.'); " is 130.
Long Statement,PowerArhitecture.Common.Internationalization,I18N,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\I18N.cs,Translate,The length of the statement  "	var result = Translators.ContainsKey (culture.Name) ? Translators [culture.Name].Translate (id' args) : Translator.Default.Translate (id' args); " is 144.
Long Statement,PowerArhitecture.Common.Internationalization,I18N,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\I18N.cs,TranslatePlural,The length of the statement  "	return Translators.ContainsKey (culture.Name) ? Translators [culture.Name].TranslatePlural (id' idPlural' value' args) : Translator.Default.TranslatePlural (id' idPlural' value' args); " is 184.
Long Statement,PowerArhitecture.Common.Internationalization,I18N,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\I18N.cs,TranslateContextual,The length of the statement  "	return Translators.ContainsKey (culture.Name) ? Translators [culture.Name].TranslateContextual (context' id' args) : Translator.Default.TranslateContextual (context' id' args); " is 176.
Long Statement,PowerArhitecture.Common.Internationalization,I18N,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\I18N.cs,TranslateContextualPlural,The length of the statement  "	return Translators.ContainsKey (culture.Name) ? Translators [culture.Name].TranslateContextualPlural (context' id' idPlural' value' args) : Translator.Default.TranslateContextualPlural (context' id' idPlural' value' args); " is 222.
Long Statement,PowerArhitecture.Common.JsonNet,MultipleContractResolver,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\JsonNet\MultipleContractResolver.cs,ResolveContract,The length of the statement  "	return _assemblies.ContainsKey (type.Assembly) ? _resolvers [_assemblies [type.Assembly]].ResolveContract (type) : _resolvers [_defaultResolver].ResolveContract (type); " is 168.
Long Statement,System.Reflection,AssemblyExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\AssemblyExtensions.cs,GetDependentAssemblies,The length of the statement  "	return AppDomain.CurrentDomain.GetAssemblies ().Where (a => GetNamesOfAssembliesReferencedBy (a).Contains (analyzedAssembly.FullName)); " is 135.
Long Statement,System.Reflection,ObjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\ObjectExtensions.cs,AsDictionary,The length of the statement  "	return source.GetType ().GetProperties (bindingAttr).ToDictionary (propInfo => propInfo.Name' propInfo => propInfo.GetValue (source' null)); " is 140.
Long Statement,System,TypeExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\TypeExtensions.cs,GetDefaultValue,The length of the statement  "                typeof(TypeExtensions).GetMethod("GetDefaultGeneric"' BindingFlags.Static | BindingFlags.NonPublic).MakeGenericMethod(t).Invoke(null' new object[] { });*/} " is 155.
Long Statement,System,TypeExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\TypeExtensions.cs,GetPublicProperties,The length of the statement  "			var typeProperties = subType.GetProperties (BindingFlags.FlattenHierarchy | BindingFlags.Public | BindingFlags.Instance); " is 121.
Long Statement,System,TypeExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\TypeExtensions.cs,Sort,The length of the statement  "	Array.Sort (array' (l' r) => string.Compare (l.AssemblyQualifiedName' r.AssemblyQualifiedName' StringComparison.OrdinalIgnoreCase)); " is 132.
Long Statement,PowerArhitecture.Common.Providers,EventAggregatorProvider,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Providers\EventAggregatorProvider.cs,OnActivation,The length of the statement  "	foreach (var listenerType in AppDomain.CurrentDomain.GetAssemblies ().SelectMany (assembly => assembly.GetTypes ().Where (o => !o.IsInterface && !o.IsAbstract && (o.IsAssignableToGenericType (typeof(IListener<>)) || o.IsAssignableToGenericType (typeof(IListenerAsync<>))) && o != typeof(DelegateListener<>) && o != typeof(DelegateListenerAsync<>))).OrderByDescending (o =>  { " is 375.
Long Statement,PowerArhitecture.Common,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\NinjectRegistration.cs,Load,The length of the statement  "	Bind<IEventAggregator> ().ToProvider<EventAggregatorProvider> ().InSingletonScope ().OnActivation (EventAggregatorProvider.OnActivation); " is 137.
Long Statement,PowerArhitecture.Common,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\NinjectRegistration.cs,Load,The length of the statement  "	Bind (typeof(Lazy<>)).ToMethod (ctx => GetType ().GetMethod ("GetLazyProvider"' BindingFlags.Instance | BindingFlags.NonPublic).MakeGenericMethod (ctx.GenericArguments [0]).Invoke (this' new object[] { " is 201.
Long Statement,PowerArhitecture.Common,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\NinjectRegistration.cs,Load,The length of the statement  "	Kernel.Bind (o => o.From (AppDomain.CurrentDomain.GetAssemblies ().Where (a => a.GetTypes ().Any (t => typeof(ITask).IsAssignableFrom (t)))).IncludingNonePublicTypes ().SelectAllClasses ().InheritedFrom<ITask> ().WhichAreNotGeneric ().BindDefaultInterfaces ()); " is 261.
Long Statement,PowerArhitecture.Common,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\NinjectRegistration.cs,Load,The length of the statement  "	Kernel.Bind (o => o.From (AppDomain.CurrentDomain.GetAssemblies ().Where (a => a.GetTypes ().Any (t => t.IsAssignableToGenericType (typeof(IListener<>)) || t.IsAssignableToGenericType (typeof(IListenerAsync<>))))).IncludingNonePublicTypes ().Select (t => !t.IsInterface && !t.IsAbstract && (t.IsAssignableToGenericType (typeof(IListener<>)) || t.IsAssignableToGenericType (typeof(IListenerAsync<>))) && t != typeof(DelegateListener<>) && t != typeof(DelegateListenerAsync<>) && !Kernel.GetBindings (t).Any ()).BindSelection ((type' types) => new List<Type> { " is 558.
Long Statement,PowerArhitecture.Common.Security,PasswordHasher,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Security\PasswordHasher.cs,VerifyHashedPassword,The length of the statement  "	return _cryptography.Decrypt (hashedPassword) == providedPassword ? PasswordVerificationResult.Success : PasswordVerificationResult.Failed; " is 139.
Magic Number,PowerArhitecture.Common.Cryptographics,AesCryptography,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Cryptographics\AESCryptography.cs,Encrypt,The following statement contains a magic number: try {  	// generate the key from the shared secret and the salt  	var key = new Rfc2898DeriveBytes (SecretCode' _salt);  	// Create a RijndaelManaged object  	aesAlg = new RijndaelManaged ();  	aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  	// Create a decrytor to perform the stream transform.  	var encryptor = aesAlg.CreateEncryptor (aesAlg.Key' aesAlg.IV);  	// Create the streams used for encryption.  	using (var msEncrypt = new MemoryStream ()) {  		// prepend the IV  		msEncrypt.Write (BitConverter.GetBytes (aesAlg.IV.Length)' 0' sizeof(int));  		msEncrypt.Write (aesAlg.IV' 0' aesAlg.IV.Length);  		using (var csEncrypt = new CryptoStream (msEncrypt' encryptor' CryptoStreamMode.Write)) {  			using (var swEncrypt = new StreamWriter (csEncrypt)) {  				//Write all data to the stream.  				swEncrypt.Write (value);  			}  		}  		outStr = Convert.ToBase64String (msEncrypt.ToArray ());  	}  }  finally {  	// Clear the RijndaelManaged object.  	if (aesAlg != null)  		aesAlg.Clear ();  }  
Magic Number,PowerArhitecture.Common.Cryptographics,AesCryptography,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Cryptographics\AESCryptography.cs,Encrypt,The following statement contains a magic number: aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  
Magic Number,PowerArhitecture.Common.Cryptographics,AesCryptography,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Cryptographics\AESCryptography.cs,Decrypt,The following statement contains a magic number: try {  	// generate the key from the shared secret and the salt  	var key = new Rfc2898DeriveBytes (SecretCode' _salt);  	// Create the streams used for decryption.                  	var bytes = Convert.FromBase64String (value);  	using (var msDecrypt = new MemoryStream (bytes)) {  		// Create a RijndaelManaged object  		// with the specified key and IV.  		aesAlg = new RijndaelManaged ();  		aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  		// Get the initialization vector from the encrypted stream  		aesAlg.IV = ReadByteArray (msDecrypt);  		// Create a decrytor to perform the stream transform.  		var decryptor = aesAlg.CreateDecryptor (aesAlg.Key' aesAlg.IV);  		initVector = Encoding.UTF8.GetString (aesAlg.IV);  		using (var csDecrypt = new CryptoStream (msDecrypt' decryptor' CryptoStreamMode.Read)) {  			using (var srDecrypt = new StreamReader (csDecrypt)) {  				// Read the decrypted bytes from the decrypting stream  				// and place them in a string.  				plaintext = srDecrypt.ReadToEnd ();  			}  		}  	}  }  finally {  	// Clear the RijndaelManaged object.  	if (aesAlg != null)  		aesAlg.Clear ();  }  
Magic Number,PowerArhitecture.Common.Cryptographics,AesCryptography,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Cryptographics\AESCryptography.cs,Decrypt,The following statement contains a magic number: using (var msDecrypt = new MemoryStream (bytes)) {  	// Create a RijndaelManaged object  	// with the specified key and IV.  	aesAlg = new RijndaelManaged ();  	aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  	// Get the initialization vector from the encrypted stream  	aesAlg.IV = ReadByteArray (msDecrypt);  	// Create a decrytor to perform the stream transform.  	var decryptor = aesAlg.CreateDecryptor (aesAlg.Key' aesAlg.IV);  	initVector = Encoding.UTF8.GetString (aesAlg.IV);  	using (var csDecrypt = new CryptoStream (msDecrypt' decryptor' CryptoStreamMode.Read)) {  		using (var srDecrypt = new StreamReader (csDecrypt)) {  			// Read the decrypted bytes from the decrypting stream  			// and place them in a string.  			plaintext = srDecrypt.ReadToEnd ();  		}  	}  }  
Magic Number,PowerArhitecture.Common.Cryptographics,AesCryptography,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Cryptographics\AESCryptography.cs,Decrypt,The following statement contains a magic number: aesAlg.Key = key.GetBytes (aesAlg.KeySize / 8);  
Magic Number,PowerArhitecture.Common.Extensions,Int64Extensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\Int64Extensions.cs,ToDateTime,The following statement contains a magic number: return new DateTime (1970' 01' 01).AddMilliseconds (l);  
Magic Number,PowerArhitecture.Common.Internationalization,TranslatorFormatter,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\TranslatorFormatter.cs,Custom,The following statement contains a magic number: format = Regex.Replace (format' @"((?<!{){(?!{)([\w]+)}(?!}))|({({[\w]+})})"' match =>  {  	var escape = match.Groups [3].Value;  	//If double bracers retrun the inside  	if (!string.IsNullOrEmpty (escape))  		return match.Groups [4].Value;  	var key = match.Groups [2].Value;  	return dictionary.ContainsKey (key) ? dictionary [key].ToString () : match.Groups [1].Value;  }' RegexOptions.IgnoreCase);  
Magic Number,PowerArhitecture.Common.Internationalization,TranslatorFormatter,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\TranslatorFormatter.cs,Custom,The following statement contains a magic number: format = Regex.Replace (format' @"((?<!{){(?!{)([\w]+)}(?!}))|({({[\w]+})})"' match =>  {  	var escape = match.Groups [3].Value;  	//If double bracers retrun the inside  	if (!string.IsNullOrEmpty (escape))  		return match.Groups [4].Value;  	var key = match.Groups [2].Value;  	return dictionary.ContainsKey (key) ? dictionary [key].ToString () : match.Groups [1].Value;  }' RegexOptions.IgnoreCase);  
Magic Number,PowerArhitecture.Common.Internationalization,TranslatorFormatter,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\TranslatorFormatter.cs,Custom,The following statement contains a magic number: format = Regex.Replace (format' @"((?<!{){(?!{)([\w]+)}(?!}))|({({[\w]+})})"' match =>  {  	var escape = match.Groups [3].Value;  	//If double bracers retrun the inside  	if (!string.IsNullOrEmpty (escape))  		return match.Groups [4].Value;  	var key = match.Groups [2].Value;  	return dictionary.ContainsKey (key) ? dictionary [key].ToString () : match.Groups [1].Value;  }' RegexOptions.IgnoreCase);  
Magic Number,PowerArhitecture.Common.Internationalization,TranslatorFormatter,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\TranslatorFormatter.cs,Custom,The following statement contains a magic number: if (!string.IsNullOrEmpty (escape))  	return match.Groups [4].Value;  
Magic Number,PowerArhitecture.Common.Internationalization,TranslatorFormatter,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Internationalization\TranslatorFormatter.cs,Custom,The following statement contains a magic number: return match.Groups [4].Value;  
Magic Number,System.Reflection,ObjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\ObjectExtensions.cs,GetMemberAndValue,The following statement contains a magic number: foreach (var memberName in path.Split ('.')) {  	var currentTypeDefVal = currentType.GetDefaultValue ();  	//IF type is an generic collection get the arg and set as current typw  	/*                 if(currentType.IsAssignableToGenericType(typeof(IEnumerable<>)))                 {                     currentType = currentType.GenericTypeArguments[0];                 }*///Support CollectionName[0]  	var collMath = Regex.Match (memberName' @"^([\w]+)\[(\d+)\]$");  	if (collMath.Success) {  		var memResult = GetMemberAndValue (value' collMath.Groups [1].Value);  		var coll = memResult.MemberValue as IEnumerable;  		if (coll == null)  			return memResult;  		var enumerator = coll.GetEnumerator ();  		var currIdx = 0;  		var idx = int.Parse (collMath.Groups [2].Value);  		object item = null;  		while (enumerator.MoveNext ()) {  			if (currIdx == idx) {  				item = enumerator.Current;  				break;  			}  			currIdx++;  		}  		if (item == null)  			return memResult;  		currentMember = memResult.MemberInfo;  		//Collection member  		value = item;  		//Item in the collection  		currentType = item.GetType ();  		//item type  		continue;  	}  	var property = GetProperty (currentType' memberName);  	if (property != null) {  		currentMember = property;  		var defValue = property.PropertyType.GetDefaultValue ();  		prevValue = value;  		value = property.GetValue (value' null);  		if (value == defValue)  			return new GetMemberResult (value' currentMember' prevValue);  		currentType = property.PropertyType;  		continue;  	}  	var field = GetField (currentType' memberName);  	if (field != null) {  		currentMember = field;  		var defValue = field.FieldType.GetDefaultValue ();  		prevValue = value;  		value = field.GetValue (value);  		if (value == defValue)  			return new GetMemberResult (value' currentMember' prevValue);  		currentType = field.FieldType;  		continue;  	}  	var method = GetMethod (currentType' memberName);  	if (method != null)//If we found a method just return it  	 {  		return new GetMemberResult (method.Invoke (value' new object[] {    		})' method' prevValue);  	}  	return new GetMemberResult (currentTypeDefVal' currentMember' prevValue);  }  
Magic Number,System.Reflection,ObjectExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\ObjectExtensions.cs,GetMemberAndValue,The following statement contains a magic number: if (collMath.Success) {  	var memResult = GetMemberAndValue (value' collMath.Groups [1].Value);  	var coll = memResult.MemberValue as IEnumerable;  	if (coll == null)  		return memResult;  	var enumerator = coll.GetEnumerator ();  	var currIdx = 0;  	var idx = int.Parse (collMath.Groups [2].Value);  	object item = null;  	while (enumerator.MoveNext ()) {  		if (currIdx == idx) {  			item = enumerator.Current;  			break;  		}  		currIdx++;  	}  	if (item == null)  		return memResult;  	currentMember = memResult.MemberInfo;  	//Collection member  	value = item;  	//Item in the collection  	currentType = item.GetType ();  	//item type  	continue;  }  
Magic Number,System,StringExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\StringExtensions.cs,GetTypeFromSimpleName,The following statement contains a magic number: if (typeName.IndexOf ("[]") != -1) {  	isArray = true;  	typeName = typeName.Remove (typeName.IndexOf ("[]")' 2);  }  
Magic Number,System,StringExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\StringExtensions.cs,GetTypeFromSimpleName,The following statement contains a magic number: typeName = typeName.Remove (typeName.IndexOf ("[]")' 2);  
Magic Number,PowerArhitecture.Common,NinjectRegistration,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\NinjectRegistration.cs,NinjectRegistration,The following statement contains a magic number: NinjectGetAllMethodInfo = typeof(ResolutionExtensions).GetMethods (BindingFlags.Public | BindingFlags.Static).First (o => o.Name == "GetAll" && o.IsGenericMethod && o.GetParameters ().Length == 2);  
Missing Default,System,StringExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\StringExtensions.cs,GetTypeFromSimpleName,The following switch statement is missing a default case: switch (typeName) {  case "bool":  case "boolean":  	parsedTypeName = "System.Boolean";  	break;  case "byte":  	parsedTypeName = "System.Byte";  	break;  case "char":  	parsedTypeName = "System.Char";  	break;  case "datetime":  	parsedTypeName = "System.DateTime";  	break;  case "datetimeoffset":  	parsedTypeName = "System.DateTimeOffset";  	break;  case "decimal":  	parsedTypeName = "System.Decimal";  	break;  case "double":  	parsedTypeName = "System.Double";  	break;  case "float":  	parsedTypeName = "System.Single";  	break;  case "int16":  case "short":  	parsedTypeName = "System.Int16";  	break;  case "int32":  case "int":  	parsedTypeName = "System.Int32";  	break;  case "int64":  case "long":  	parsedTypeName = "System.Int64";  	break;  case "object":  	parsedTypeName = "System.Object";  	break;  case "sbyte":  	parsedTypeName = "System.SByte";  	break;  case "string":  	parsedTypeName = "System.String";  	break;  case "timespan":  	parsedTypeName = "System.TimeSpan";  	break;  case "uint16":  case "ushort":  	parsedTypeName = "System.UInt16";  	break;  case "uint32":  case "uint":  	parsedTypeName = "System.UInt32";  	break;  case "uint64":  case "ulong":  	parsedTypeName = "System.UInt64";  	break;  }  
Missing Default,System,TypeExtensions,C:\repos\maca88_PowerArhitecture\Source\PowerArhitecture.Common\Extensions\TypeExtensions.cs,IsNumericType,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  case TypeCode.Decimal:  case TypeCode.Double:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.SByte:  case TypeCode.Single:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return true;  case TypeCode.Object:  	if (type.IsGenericType && type.GetGenericTypeDefinition () == typeof(Nullable<>)) {  		return IsNumericType (Nullable.GetUnderlyingType (type));  	}  	return false;  }  
