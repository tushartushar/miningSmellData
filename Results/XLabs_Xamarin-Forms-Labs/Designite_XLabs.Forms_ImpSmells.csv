Implementation smell,Namespace,Class,File,Method,Description
Complex Method,XLabs.Forms.Controls,ExtendedPicker,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ExtendedPicker.cs,loadItemsAndSetSelected,Cyclomatic complexity of the method is 8
Long Parameter List,XLabs.Forms.Controls,CollectionChangedHandle<TSyncType;T>,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CollectionChangedHandle.cs,CollectionChangedHandle,The method has 5 parameters. Parameters: target' source' projector' postadd' cleanup
Long Parameter List,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The method has 5 parameters. Parameters: popupView' xConstraint' yConstraint' widthConstraint' heightConstraint
Long Parameter List,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The method has 5 parameters. Parameters: popupView' presenter' location' paddingX' paddingY
Long Identifier,XLabs.Forms.Controls,AutoCompleteView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\AutoCompleteView.cs,,The length of the parameter ExecuteOnSuggestionClickProperty is 32.
Long Identifier,XLabs.Forms.Controls,AutoCompleteView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\AutoCompleteView.cs,,The length of the parameter SearchHorizontalOptionsProperty is 31.
Long Identifier,XLabs.Forms.Controls,AutoCompleteView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\AutoCompleteView.cs,,The length of the parameter SuggestionBackgroundColorProperty is 33.
Long Identifier,XLabs.Forms.Controls,AutoCompleteView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\AutoCompleteView.cs,,The length of the parameter SuggestionItemDataTemplateProperty is 34.
Long Identifier,XLabs.Forms.Controls,AutoCompleteView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\AutoCompleteView.cs,,The length of the parameter SuggestionsHeightRequestProperty is 32.
Long Identifier,XLabs.Forms.Controls,ButtonGroup,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ButtonGroup.cs,,The length of the parameter SelectedBackgroundColorProperty is 31.
Long Identifier,XLabs.Forms.Controls,ButtonGroup,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ButtonGroup.cs,,The length of the parameter SelectedFrameBackgroundColorProperty is 36.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter TodayDateForegroundColorProperty is 32.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter TodayDateBackgroundColorProperty is 32.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter InactiveDateForegroundColorProperty is 35.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter InactiveDateBackgroundColorProperty is 35.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter HighlightedDateForegroundColorProperty is 38.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter HighlightedDateBackgroundColorProperty is 38.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter SelectionBackgroundStyleProperty is 32.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter SelectedDateForegroundColorProperty is 35.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter SelectedDateBackgroundColorProperty is 35.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter DayOfWeekLabelForegroundColorProperty is 37.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter DayOfWeekLabelBackgroundColorProperty is 37.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter MonthTitleForegroundColorProperty is 33.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter MonthTitleBackgroundColorProperty is 33.
Long Identifier,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,,The length of the parameter ShouldHighlightDaysOfWeekLabelsProperty is 39.
Long Identifier,XLabs.Forms.Controls,CollectionChangedHandle<TSyncType;T>,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CollectionChangedHandle.cs,,The length of the parameter _itemsSourceCollectionChangedImplementation is 43.
Long Identifier,XLabs.Forms.Controls,ExtendedButton,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ExtendedButton.cs,,The length of the parameter VerticalContentAlignmentProperty is 32.
Long Identifier,XLabs.Forms.Controls,ExtendedButton,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ExtendedButton.cs,,The length of the parameter HorizontalContentAlignmentProperty is 34.
Long Identifier,XLabs.Forms.Controls,HybridWebView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\HybridWebView.cs,,The length of the parameter AndroidHardwareRenderingProperty is 32.
Long Identifier,XLabs.Forms.Controls,HybridWebView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\HybridWebView.cs,,The length of the parameter AndroidAdditionalTouchCallbackProperty is 38.
Long Identifier,XLabs.Forms.Controls,ImageButton,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ImageButton.cs,,The length of the parameter DisabledImageTintColorProperty is 30.
Long Statement,XLabs.Forms.Controls,AutoCompleteView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\AutoCompleteView.cs,TextValueChanged,The length of the statement  "                var cleanedNewPlaceHolderValue = Regex.Replace((newPlaceHolderValue ?? string.Empty).ToLowerInvariant()' @"\s+"' string.Empty); " is 127.
Long Statement,XLabs.Forms.Controls,BindablePicker,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\BindablePicker.cs,OnSelectedItemChanged,The length of the statement  "                var title = (picker.SourceItemLabelConverter != null) ? picker.SourceItemLabelConverter(newvalue) : newvalue.ToString(); " is 120.
Long Statement,XLabs.Forms.Controls,ExtendedPicker,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ExtendedPicker.cs,loadItemsAndSetSelected,The length of the statement  "                                throw new Exception (String.Concat (bindablePicker.DisplayProperty' " is not a property of "' obj.GetType ().FullName)); " is 120.
Long Statement,XLabs.Forms.Controls,GesturesContentView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\GesturesContentView.cs,ProcessGesture,The length of the statement  "            if (ExcludeChildren && gesture.ViewStack != null && gesture.ViewStack.Count != 0 && _viewInterests.All(x => x.View != gesture.ViewStack[0])) return false;//The innermost (source) is not an actual interested view " is 211.
Long Statement,XLabs.Forms.Controls,GesturesContentView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\GesturesContentView.cs,ProcessGesture,The length of the statement  "            gesture.Origin=new Point(Math.Max(gesture.Origin.X-interestedview.View.X'0)'Math.Max(gesture.Origin.Y-interestedview.View.Y'0)); " is 128.
Long Statement,XLabs.Forms.Controls,GesturesContentView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\GesturesContentView.cs,InterestedView,The length of the statement  "            var originview = _viewInterests.Where(v => v.View.Bounds.Contains(point)).OrderBy(v => v.View.Bounds.Width * v.View.Bounds.Height).FirstOrDefault(); " is 148.
Long Statement,XLabs.Forms.Controls,GesturesContentView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\GesturesContentView.cs,InterestedView,The length of the statement  "                    originview = candidates.Count() == 1? candidates.First(): candidates.OrderBy(v => DistanceToClosestEdge(v.View.Bounds' point)).First(); " is 135.
Long Statement,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The length of the statement  "                //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2); " is 147.
Long Statement,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The length of the statement  "                //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2); " is 147.
Long Statement,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The length of the statement  "                //    constraintY = Constraint.RelativeToView(presenter' (parent' view) => parent.Y + view.Y - this.popup.WidthRequest - paddingY); " is 131.
Long Statement,XLabs.Forms.Controls,TemplateSelector,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\TemplateSelector.cs,TemplateForImpl,The length of the statement  "			retTemplate = retTemplate ?? type.GetTypeInfo().ImplementedInterfaces.Select(x => TemplateForImpl(x' examined)).FirstOrDefault(); " is 129.
Long Statement,XLabs.Forms.Controls,WrapLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\WrapLayout.cs,OnSizeRequest,The length of the statement  "            var internalWidth = double.IsPositiveInfinity(widthConstraint) ? double.PositiveInfinity : Math.Max(0' widthConstraint); " is 120.
Long Statement,XLabs.Forms.Controls,WrapLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\WrapLayout.cs,OnSizeRequest,The length of the statement  "            var internalHeight = double.IsPositiveInfinity(heightConstraint) ? double.PositiveInfinity : Math.Max(0' heightConstraint); " is 123.
Long Statement,XLabs.Forms.Controls,WrapLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\WrapLayout.cs,DoVerticalMeasure,The length of the statement  "            foreach (var size in Children.Where(c => c.IsVisible).Select(item => item.GetSizeRequest(widthConstraint' heightConstraint))) " is 125.
Long Statement,XLabs.Forms.Mvvm,NavigationView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Mvvm\NavigationView.cs,OnNavigatingTo,The length of the statement  "			Debug.WriteLine("OnNavigatingTo: targetView={0}' nextView={1}"' targetView.GetType().Name' previousView != null ? previousView.GetType().Name : string.Empty); " is 158.
Long Statement,XLabs.Forms.Mvvm,NavigationView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Mvvm\NavigationView.cs,OnNavigatingFrom,The length of the statement  "			Debug.WriteLine("OnNavigatingFrom: targetView={0}' previousView={1}"' targetView.GetType().Name' nextView.GetType().Name); " is 122.
Complex Conditional,XLabs.Forms.Controls,GesturesContentView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\GesturesContentView.cs,ProcessGesture,The conditional expression  "ExcludeChildren && gesture.ViewStack != null && gesture.ViewStack.Count != 0 && _viewInterests.All(x => x.View != gesture.ViewStack[0])"  is complex.
Complex Conditional,XLabs.Forms.Controls,Separator,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\Separator.cs,OnPropertyChanged,The conditional expression  "propertyName == ThicknessProperty.PropertyName ||  			   propertyName == ColorProperty.PropertyName ||  			   propertyName == SpacingBeforeProperty.PropertyName ||  			   propertyName == SpacingAfterProperty.PropertyName ||  			   propertyName == StrokeTypeProperty.PropertyName ||  			   propertyName == OrientationProperty.PropertyName"  is complex.
Complex Conditional,XLabs.Forms.Validation,RuleSet,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\RuleSet.cs,CheckState,The conditional expression  "Actions == null || Actions.Count == 0 || Rules == null || Rules.Count == 0"  is complex.
Magic Number,XLabs.Forms.Controls,ButtonGroup,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ButtonGroup.cs,AddButton,The following statement contains a magic number: if (IsNumber)  			{  				button.Text = string.Format("{0}"' text);  				button.WidthRequest = Device.OnPlatform(44' 44' 72);  				button.MinimumWidthRequest = Device.OnPlatform(44' 44' 72);  			}  			else  			{  				button.Text = string.Format("  {0}  "' text);  			}
Magic Number,XLabs.Forms.Controls,ButtonGroup,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ButtonGroup.cs,AddButton,The following statement contains a magic number: if (IsNumber)  			{  				button.Text = string.Format("{0}"' text);  				button.WidthRequest = Device.OnPlatform(44' 44' 72);  				button.MinimumWidthRequest = Device.OnPlatform(44' 44' 72);  			}  			else  			{  				button.Text = string.Format("  {0}  "' text);  			}
Magic Number,XLabs.Forms.Controls,ButtonGroup,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ButtonGroup.cs,AddButton,The following statement contains a magic number: if (IsNumber)  			{  				button.Text = string.Format("{0}"' text);  				button.WidthRequest = Device.OnPlatform(44' 44' 72);  				button.MinimumWidthRequest = Device.OnPlatform(44' 44' 72);  			}  			else  			{  				button.Text = string.Format("  {0}  "' text);  			}
Magic Number,XLabs.Forms.Controls,ButtonGroup,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ButtonGroup.cs,AddButton,The following statement contains a magic number: if (IsNumber)  			{  				button.Text = string.Format("{0}"' text);  				button.WidthRequest = Device.OnPlatform(44' 44' 72);  				button.MinimumWidthRequest = Device.OnPlatform(44' 44' 72);  			}  			else  			{  				button.Text = string.Format("  {0}  "' text);  			}
Magic Number,XLabs.Forms.Controls,ButtonGroup,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ButtonGroup.cs,AddButton,The following statement contains a magic number: if (IsNumber)  			{  				button.Text = string.Format("{0}"' text);  				button.WidthRequest = Device.OnPlatform(44' 44' 72);  				button.MinimumWidthRequest = Device.OnPlatform(44' 44' 72);  			}  			else  			{  				button.Text = string.Format("  {0}  "' text);  			}
Magic Number,XLabs.Forms.Controls,ButtonGroup,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\ButtonGroup.cs,AddButton,The following statement contains a magic number: if (IsNumber)  			{  				button.Text = string.Format("{0}"' text);  				button.WidthRequest = Device.OnPlatform(44' 44' 72);  				button.MinimumWidthRequest = Device.OnPlatform(44' 44' 72);  			}  			else  			{  				button.Text = string.Format("  {0}  "' text);  			}
Magic Number,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,CalendarView,The following statement contains a magic number: if(Device.OS == TargetPlatform.iOS){  				HeightRequest = 198 + 20; //This is the size of the original iOS calendar  			}else if(Device.OS == TargetPlatform.Android){  				HeightRequest = 300; //This is the size in which Android calendar renders comfortably on most devices  			}
Magic Number,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,CalendarView,The following statement contains a magic number: if(Device.OS == TargetPlatform.iOS){  				HeightRequest = 198 + 20; //This is the size of the original iOS calendar  			}else if(Device.OS == TargetPlatform.Android){  				HeightRequest = 300; //This is the size in which Android calendar renders comfortably on most devices  			}
Magic Number,XLabs.Forms.Controls,CalendarView,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CalendarView.cs,CalendarView,The following statement contains a magic number: if(Device.OS == TargetPlatform.iOS){  				HeightRequest = 198 + 20; //This is the size of the original iOS calendar  			}else if(Device.OS == TargetPlatform.Android){  				HeightRequest = 300; //This is the size in which Android calendar renders comfortably on most devices  			}
Magic Number,XLabs.Forms.Controls,CarouselView<T>,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CarouselView.cs,CarouselView,The following statement contains a magic number: var s = new StackLayout { Orientation = StackOrientation.Vertical' Spacing = 5' HorizontalOptions = LayoutOptions.FillAndExpand' VerticalOptions = LayoutOptions.FillAndExpand };
Magic Number,XLabs.Forms.Controls,CarouselView<T>,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CarouselView.cs,CarouselView,The following statement contains a magic number: this.myGrid = new Grid { BackgroundColor = BackgroundColor' ColumnSpacing = 25' HorizontalOptions = LayoutOptions.FillAndExpand' VerticalOptions = LayoutOptions.Fill' Padding = new Thickness(35' 2.5) };
Magic Number,XLabs.Forms.Controls,CarouselView<T>,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CarouselView.cs,CarouselView,The following statement contains a magic number: this.myGrid = new Grid { BackgroundColor = BackgroundColor' ColumnSpacing = 25' HorizontalOptions = LayoutOptions.FillAndExpand' VerticalOptions = LayoutOptions.Fill' Padding = new Thickness(35' 2.5) };
Magic Number,XLabs.Forms.Controls,CarouselView<T>,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CarouselView.cs,CarouselView,The following statement contains a magic number: this.myGrid = new Grid { BackgroundColor = BackgroundColor' ColumnSpacing = 25' HorizontalOptions = LayoutOptions.FillAndExpand' VerticalOptions = LayoutOptions.Fill' Padding = new Thickness(35' 2.5) };
Magic Number,XLabs.Forms.Controls,CarouselView<T>,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CarouselView.cs,CarouselView,The following statement contains a magic number: this.myGrid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(8' GridUnitType.Absolute) });
Magic Number,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The following statement contains a magic number: this.ShowPopup(                  popupView'                  Constraint.RelativeToParent(p => (this.Width - this.popup.WidthRequest) / 2)'                  Constraint.RelativeToParent(p => (this.Height- this.popup.HeightRequest) / 2)                  );
Magic Number,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The following statement contains a magic number: this.ShowPopup(                  popupView'                  Constraint.RelativeToParent(p => (this.Width - this.popup.WidthRequest) / 2)'                  Constraint.RelativeToParent(p => (this.Height- this.popup.HeightRequest) / 2)                  );
Magic Number,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The following statement contains a magic number: switch (location)              {                  case PopupLocation.Bottom:                      constraintX = Constraint.RelativeToParent(parent => presenter.X + (presenter.Width - this.popup.WidthRequest)/2);                      constraintY = Constraint.RelativeToParent(parent => parent.Y + presenter.Y + presenter.Height + paddingY);                      break;                  case PopupLocation.Top:                      constraintX = Constraint.RelativeToParent(parent => presenter.X + (presenter.Width - this.popup.WidthRequest)/2);                      constraintY = Constraint.RelativeToParent(parent =>                          parent.Y + presenter.Y - this.popup.HeightRequest/2 - paddingY);                      break;                  //case PopupLocation.Left:                  //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2);                  //    constraintY = Constraint.RelativeToView(presenter' (parent' view) => parent.Y + view.Y + view.Width + paddingY);                  //    break;                  //case PopupLocation.Right:                  //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2);                  //    constraintY = Constraint.RelativeToView(presenter' (parent' view) => parent.Y + view.Y - this.popup.WidthRequest - paddingY);                  //    break;              }
Magic Number,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The following statement contains a magic number: switch (location)              {                  case PopupLocation.Bottom:                      constraintX = Constraint.RelativeToParent(parent => presenter.X + (presenter.Width - this.popup.WidthRequest)/2);                      constraintY = Constraint.RelativeToParent(parent => parent.Y + presenter.Y + presenter.Height + paddingY);                      break;                  case PopupLocation.Top:                      constraintX = Constraint.RelativeToParent(parent => presenter.X + (presenter.Width - this.popup.WidthRequest)/2);                      constraintY = Constraint.RelativeToParent(parent =>                          parent.Y + presenter.Y - this.popup.HeightRequest/2 - paddingY);                      break;                  //case PopupLocation.Left:                  //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2);                  //    constraintY = Constraint.RelativeToView(presenter' (parent' view) => parent.Y + view.Y + view.Width + paddingY);                  //    break;                  //case PopupLocation.Right:                  //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2);                  //    constraintY = Constraint.RelativeToView(presenter' (parent' view) => parent.Y + view.Y - this.popup.WidthRequest - paddingY);                  //    break;              }
Magic Number,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The following statement contains a magic number: switch (location)              {                  case PopupLocation.Bottom:                      constraintX = Constraint.RelativeToParent(parent => presenter.X + (presenter.Width - this.popup.WidthRequest)/2);                      constraintY = Constraint.RelativeToParent(parent => parent.Y + presenter.Y + presenter.Height + paddingY);                      break;                  case PopupLocation.Top:                      constraintX = Constraint.RelativeToParent(parent => presenter.X + (presenter.Width - this.popup.WidthRequest)/2);                      constraintY = Constraint.RelativeToParent(parent =>                          parent.Y + presenter.Y - this.popup.HeightRequest/2 - paddingY);                      break;                  //case PopupLocation.Left:                  //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2);                  //    constraintY = Constraint.RelativeToView(presenter' (parent' view) => parent.Y + view.Y + view.Width + paddingY);                  //    break;                  //case PopupLocation.Right:                  //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2);                  //    constraintY = Constraint.RelativeToView(presenter' (parent' view) => parent.Y + view.Y - this.popup.WidthRequest - paddingY);                  //    break;              }
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (ShortDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 2);  			}
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (ShortDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 2);  			}
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (ShortDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 2);  			}
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (ShortDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 2);  			}
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (ShortDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 2);  			}
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (LongDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 4);  			}
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (LongDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 4);  			}
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (LongDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 4);  			}
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (LongDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 4);  			}
Magic Number,XLabs.Forms.Validation,ValidateDateTime,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Validation\ValidateDateTime.cs,IsDateTime,The following statement contains a magic number: if (LongDate.Match(value).Success)  			{  				value = value.Substring(0' 2) + "/" + value.Substring(2' 2) + "/"  						+ value.Substring(4' 4);  			}
Missing Default,XLabs.Forms.Controls,CarouselView<T>,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\CarouselView.cs,ViewModelCollectionContentsChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Reset:                      this.currentview = -1;                      this.contentView.Content = null;                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex == this.currentview) //Well damn                          SwitchView(this.currentview == 0);                      break;                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex == this.currentview)                          SwitchView(this.currentview < ViewModels.Count);                      break;              }
Missing Default,XLabs.Forms.Controls,PopupLayout,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Controls\PopupLayout.cs,ShowPopup,The following switch statement is missing a default case: switch (location)              {                  case PopupLocation.Bottom:                      constraintX = Constraint.RelativeToParent(parent => presenter.X + (presenter.Width - this.popup.WidthRequest)/2);                      constraintY = Constraint.RelativeToParent(parent => parent.Y + presenter.Y + presenter.Height + paddingY);                      break;                  case PopupLocation.Top:                      constraintX = Constraint.RelativeToParent(parent => presenter.X + (presenter.Width - this.popup.WidthRequest)/2);                      constraintY = Constraint.RelativeToParent(parent =>                          parent.Y + presenter.Y - this.popup.HeightRequest/2 - paddingY);                      break;                  //case PopupLocation.Left:                  //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2);                  //    constraintY = Constraint.RelativeToView(presenter' (parent' view) => parent.Y + view.Y + view.Width + paddingY);                  //    break;                  //case PopupLocation.Right:                  //    constraintX = Constraint.RelativeToView(presenter' (parent' view) => ((view.X + view.Height / 2) - parent.X) + this.popup.HeightRequest / 2);                  //    constraintY = Constraint.RelativeToView(presenter' (parent' view) => parent.Y + view.Y - this.popup.WidthRequest - paddingY);                  //    break;              }
Missing Default,XLabs.Forms.Services,NavigationServiceV2,C:\repos\XLabs_Xamarin-Forms-Labs\src\Forms\XLabs.Forms\Services\NavigationServiceV2.cs,NavigateToAsync,The following switch statement is missing a default case: switch (options?.NavigationAction)              {                  case NavigationActionTypes.PopCurrentBefore:                      {                          await PopAsync(options.Animated).ConfigureAwait(true);                      }                      break;                  case NavigationActionTypes.PopToRootBefore:                      await PopToRootAsync(options.Animated).ConfigureAwait(true);                      break;              }
