Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AsanaNet,Parsing,C:\repos\acron0_AsanaNet\AsanaNet\Utils\Parsing.cs,Serialize,Cyclomatic complexity of the method is 9
Long Statement,AsanaNet,IAsanaObjectCollectionExtensions,C:\repos\acron0_AsanaNet\AsanaNet\Objects\AsanaObject.cs,RefreshAll,The length of the statement  "                    throw new NullReferenceException("This AsanaObject does not have a host associated with it so you must specify one when saving."); " is 130.
Long Statement,AsanaNet,AsanaObjectExtensions,C:\repos\acron0_AsanaNet\AsanaNet\Objects\AsanaObject.cs,Save,The length of the statement  "                throw new NullReferenceException("This AsanaObject does not have a host associated with it so you must specify one when saving."); " is 130.
Long Statement,AsanaNet,AsanaObjectExtensions,C:\repos\acron0_AsanaNet\AsanaNet\Objects\AsanaObject.cs,Save,The length of the statement  "                throw new NullReferenceException("This AsanaObject does not have a host associated with it so you must specify one when saving."); " is 130.
Long Statement,AsanaNet,AsanaObjectExtensions,C:\repos\acron0_AsanaNet\AsanaNet\Objects\AsanaObject.cs,Delete,The length of the statement  "                throw new NullReferenceException("This AsanaObject does not have a host associated with it so you must specify one when saving."); " is 130.
Long Statement,AsanaNet,AsanaTask,C:\repos\acron0_AsanaNet\AsanaNet\Objects\AsanaTask.cs,AddProject,The length of the statement  "                throw new NullReferenceException("This AsanaObject does not have a host associated with it so you must specify one when saving."); " is 130.
Long Statement,AsanaNet,AsanaTask,C:\repos\acron0_AsanaNet\AsanaNet\Objects\AsanaTask.cs,RemoveProject,The length of the statement  "                throw new NullReferenceException("This AsanaObject does not have a host associated with it so you must specify one when saving."); " is 130.
Long Statement,AsanaNet,AsanaTask,C:\repos\acron0_AsanaNet\AsanaNet\Objects\AsanaTask.cs,AddTag,The length of the statement  "                throw new NullReferenceException("This AsanaObject does not have a host associated with it so you must specify one when saving."); " is 130.
Long Statement,AsanaNet,AsanaTask,C:\repos\acron0_AsanaNet\AsanaNet\Objects\AsanaTask.cs,RemoveTag,The length of the statement  "                throw new NullReferenceException("This AsanaObject does not have a host associated with it so you must specify one when saving."); " is 130.
Long Statement,AsanaNet,Parsing,C:\repos\acron0_AsanaNet\AsanaNet\Utils\Parsing.cs,Deserialize,The length of the statement  "                            method = typeof(Parsing).GetMethod(p.PropertyType.IsArray ? "SafeAssignAsanaObjectArray" : "SafeAssignAsanaObject"' BindingFlags.NonPublic | BindingFlags.Static).MakeGenericMethod(new Type[] { t }); " is 198.
Long Statement,AsanaNet,Parsing,C:\repos\acron0_AsanaNet\AsanaNet\Utils\Parsing.cs,Deserialize,The length of the statement  "                            method = typeof(Parsing).GetMethod(p.PropertyType.IsArray ? "SafeAssignArray" : "SafeAssign"' BindingFlags.NonPublic | BindingFlags.Static).MakeGenericMethod(new Type[] { t }); " is 176.
Long Statement,AsanaNet,Parsing,C:\repos\acron0_AsanaNet\AsanaNet\Utils\Parsing.cs,ValidateSerializableValue,The length of the statement  "                        throw new CustomAttributeFormatException(string.Format("The AsanaDataAttribute for '{0}' specifies the Property '{1}' as a serialization value but this Property couldn't be found."' p.Name' ca.Fields[0])); " is 205.
Long Statement,AsanaNet,PropertyFormatProvider,C:\repos\acron0_AsanaNet\AsanaNet\Utils\PropertyFormatProvider.cs,Format,The length of the statement  "                throw new CustomAttributeFormatException(string.Format("An AsanaFunction tried to format a Property ('{0}') that couldn't be found. "' format)); " is 144.
Complex Conditional,MiniJSON,Serializer,C:\repos\acron0_AsanaNet\AsanaNet\MiniJSON.cs,SerializeOther,The conditional expression  "value is float                      || value is int                      || value is uint                      || value is long                      || value is double                      || value is sbyte                      || value is byte                      || value is short                      || value is ushort                      || value is ulong                      || value is decimal"  is complex.
Empty Catch Block,AsanaNet,Parsing,C:\repos\acron0_AsanaNet\AsanaNet\Utils\Parsing.cs,Deserialize,The method has an empty catch block.
Empty Catch Block,AsanaNet,Parsing,C:\repos\acron0_AsanaNet\AsanaNet\Utils\Parsing.cs,Serialize,The method has an empty catch block.
Magic Number,AsanaNet,AsanaRequest,C:\repos\acron0_AsanaNet\AsanaNet\AsanaRequest.cs,ThrottleFor,The following statement contains a magic number: timer = new Timer(s =>                  {                      _throttling = false;                      _throttlingWaitHandle.Set();                      _throttlingWaitHandle = new ManualResetEvent(false);                      timer.Dispose();                  }' null' 1000 * seconds' Timeout.Infinite);
Magic Number,AsanaNet,AsanaRequest,C:\repos\acron0_AsanaNet\AsanaNet\AsanaRequest.cs,GetResponseContent,The following statement contains a magic number: Encoding enc = Encoding.GetEncoding(65001);
Magic Number,MiniJSON,Parser,C:\repos\acron0_AsanaNet\AsanaNet\MiniJSON.cs,ParseString,The following statement contains a magic number: while (parsing)                  {                        if (json.Peek() == -1)                      {                          parsing = false;                          break;                      }                        c = NextChar;                      switch (c)                      {                          case '"':                              parsing = false;                              break;                          case '\\':                              if (json.Peek() == -1)                              {                                  parsing = false;                                  break;                              }                                c = NextChar;                              switch (c)                              {                                  case '"':                                  case '\\':                                  case '/':                                      s.Append(c);                                      break;                                  case 'b':                                      s.Append('\b');                                      break;                                  case 'f':                                      s.Append('\f');                                      break;                                  case 'n':                                      s.Append('\n');                                      break;                                  case 'r':                                      s.Append('\r');                                      break;                                  case 't':                                      s.Append('\t');                                      break;                                  case 'u':                                      var hex = new StringBuilder();                                        for (int i = 0; i < 4; i++)                                      {                                          hex.Append(NextChar);                                      }                                        s.Append((char)Convert.ToInt32(hex.ToString()' 16));                                      break;                              }                              break;                          default:                              s.Append(c);                              break;                      }                  }
Magic Number,MiniJSON,Parser,C:\repos\acron0_AsanaNet\AsanaNet\MiniJSON.cs,ParseString,The following statement contains a magic number: while (parsing)                  {                        if (json.Peek() == -1)                      {                          parsing = false;                          break;                      }                        c = NextChar;                      switch (c)                      {                          case '"':                              parsing = false;                              break;                          case '\\':                              if (json.Peek() == -1)                              {                                  parsing = false;                                  break;                              }                                c = NextChar;                              switch (c)                              {                                  case '"':                                  case '\\':                                  case '/':                                      s.Append(c);                                      break;                                  case 'b':                                      s.Append('\b');                                      break;                                  case 'f':                                      s.Append('\f');                                      break;                                  case 'n':                                      s.Append('\n');                                      break;                                  case 'r':                                      s.Append('\r');                                      break;                                  case 't':                                      s.Append('\t');                                      break;                                  case 'u':                                      var hex = new StringBuilder();                                        for (int i = 0; i < 4; i++)                                      {                                          hex.Append(NextChar);                                      }                                        s.Append((char)Convert.ToInt32(hex.ToString()' 16));                                      break;                              }                              break;                          default:                              s.Append(c);                              break;                      }                  }
Magic Number,MiniJSON,Serializer,C:\repos\acron0_AsanaNet\AsanaNet\MiniJSON.cs,SerializeString,The following statement contains a magic number: foreach (var c in charArray)                  {                      switch (c)                      {                          case '"':                              builder.Append("\\\"");                              break;                          case '\\':                              builder.Append("\\\\");                              break;                          case '\b':                              builder.Append("\\b");                              break;                          case '\f':                              builder.Append("\\f");                              break;                          case '\n':                              builder.Append("\\n");                              break;                          case '\r':                              builder.Append("\\r");                              break;                          case '\t':                              builder.Append("\\t");                              break;                          default:                              int codepoint = Convert.ToInt32(c);                              if ((codepoint >= 32) && (codepoint <= 126))                              {                                  builder.Append(c);                              }                              else                              {                                  builder.Append("\\u" + Convert.ToString(codepoint' 16).PadLeft(4' '0'));                              }                              break;                      }                  }
Magic Number,MiniJSON,Serializer,C:\repos\acron0_AsanaNet\AsanaNet\MiniJSON.cs,SerializeString,The following statement contains a magic number: foreach (var c in charArray)                  {                      switch (c)                      {                          case '"':                              builder.Append("\\\"");                              break;                          case '\\':                              builder.Append("\\\\");                              break;                          case '\b':                              builder.Append("\\b");                              break;                          case '\f':                              builder.Append("\\f");                              break;                          case '\n':                              builder.Append("\\n");                              break;                          case '\r':                              builder.Append("\\r");                              break;                          case '\t':                              builder.Append("\\t");                              break;                          default:                              int codepoint = Convert.ToInt32(c);                              if ((codepoint >= 32) && (codepoint <= 126))                              {                                  builder.Append(c);                              }                              else                              {                                  builder.Append("\\u" + Convert.ToString(codepoint' 16).PadLeft(4' '0'));                              }                              break;                      }                  }
Magic Number,MiniJSON,Serializer,C:\repos\acron0_AsanaNet\AsanaNet\MiniJSON.cs,SerializeString,The following statement contains a magic number: foreach (var c in charArray)                  {                      switch (c)                      {                          case '"':                              builder.Append("\\\"");                              break;                          case '\\':                              builder.Append("\\\\");                              break;                          case '\b':                              builder.Append("\\b");                              break;                          case '\f':                              builder.Append("\\f");                              break;                          case '\n':                              builder.Append("\\n");                              break;                          case '\r':                              builder.Append("\\r");                              break;                          case '\t':                              builder.Append("\\t");                              break;                          default:                              int codepoint = Convert.ToInt32(c);                              if ((codepoint >= 32) && (codepoint <= 126))                              {                                  builder.Append(c);                              }                              else                              {                                  builder.Append("\\u" + Convert.ToString(codepoint' 16).PadLeft(4' '0'));                              }                              break;                      }                  }
Magic Number,MiniJSON,Serializer,C:\repos\acron0_AsanaNet\AsanaNet\MiniJSON.cs,SerializeString,The following statement contains a magic number: foreach (var c in charArray)                  {                      switch (c)                      {                          case '"':                              builder.Append("\\\"");                              break;                          case '\\':                              builder.Append("\\\\");                              break;                          case '\b':                              builder.Append("\\b");                              break;                          case '\f':                              builder.Append("\\f");                              break;                          case '\n':                              builder.Append("\\n");                              break;                          case '\r':                              builder.Append("\\r");                              break;                          case '\t':                              builder.Append("\\t");                              break;                          default:                              int codepoint = Convert.ToInt32(c);                              if ((codepoint >= 32) && (codepoint <= 126))                              {                                  builder.Append(c);                              }                              else                              {                                  builder.Append("\\u" + Convert.ToString(codepoint' 16).PadLeft(4' '0'));                              }                              break;                      }                  }
Missing Default,MiniJSON,Parser,C:\repos\acron0_AsanaNet\AsanaNet\MiniJSON.cs,ParseString,The following switch statement is missing a default case: switch (c)                              {                                  case '"':                                  case '\\':                                  case '/':                                      s.Append(c);                                      break;                                  case 'b':                                      s.Append('\b');                                      break;                                  case 'f':                                      s.Append('\f');                                      break;                                  case 'n':                                      s.Append('\n');                                      break;                                  case 'r':                                      s.Append('\r');                                      break;                                  case 't':                                      s.Append('\t');                                      break;                                  case 'u':                                      var hex = new StringBuilder();                                        for (int i = 0; i < 4; i++)                                      {                                          hex.Append(NextChar);                                      }                                        s.Append((char)Convert.ToInt32(hex.ToString()' 16));                                      break;                              }
