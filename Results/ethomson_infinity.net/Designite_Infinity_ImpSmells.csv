Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,CreatePullRequest,The method has 6 parameters. Parameters: repositoryId' sourceRefName' targetRefName' title' description' reviewers
Long Statement,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,GetDiff,The length of the statement  "            request.AddOptionalParameter("targetVersionType"' filters.TargetRevision.Type.ToString().ToLowerInvariant()' () => { return filters.TargetRevision != null; }); " is 159.
Long Statement,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,GetDiff,The length of the statement  "            request.AddOptionalParameter("targetVersion"' filters.TargetRevision.Version' () => { return filters.TargetRevision != null; }); " is 128.
Long Statement,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,GetDiff,The length of the statement  "            request.AddOptionalParameter("baseVersionType"' filters.BaseRevision.Type.ToString().ToLowerInvariant()' () => { return filters.BaseRevision != null; }); " is 153.
Long Statement,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,GetDiff,The length of the statement  "            request.AddOptionalParameter("baseVersion"' filters.BaseRevision.Version' () => { return filters.BaseRevision != null; }); " is 122.
Long Statement,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,UpdatePullRequest,The length of the statement  "            var request = new TfsRestRequest("/_apis/git/repositories/{RepositoryId}/pullRequests/{PullRequestId}"' new HttpMethod("PATCH")); " is 129.
Long Statement,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,GetPullRequestReviewer,The length of the statement  "            var request = new TfsRestRequest("/_apis/git/repositories/{RepositoryId}/pullRequests/{PullRequestId}/reviewers/{ReviewerId}"); " is 127.
Long Statement,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,AddPullRequestReviewer,The length of the statement  "            var request = new TfsRestRequest("/_apis/git/repositories/{RepositoryId}/pullRequests/{PullRequestId}/reviewers/{ReviewerId}"' HttpMethod.Post); " is 144.
Long Statement,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,DeletePullRequestReviewer,The length of the statement  "            var request = new TfsRestRequest("/_apis/git/repositories/{RepositoryId}/pullRequests/{PullRequestId}/reviewers/{ReviewerId}"' HttpMethod.Delete); " is 146.
Long Statement,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,UpdatePullRequestReviewer,The length of the statement  "            var request = new TfsRestRequest("/_apis/git/repositories/{RepositoryId}/pullRequests/{PullRequestId}/reviewers/{ReviewerId}"' HttpMethod.Put); " is 143.
Magic Number,Infinity.Clients,GitClient,C:\repos\ethomson_infinity.net\Infinity\Clients\GitClient.cs,GetReferences,The following statement contains a magic number: if (filter != null)              {                  Assert.IsTrue(filter.StartsWith("refs/")' "filter.StartsWith(refs/)");                  filter = filter.Substring(4);              }
Magic Number,Infinity.Clients,Revision,C:\repos\ethomson_infinity.net\Infinity\Clients\Revision.cs,Revision,The following statement contains a magic number: if (refNameOrCommitId.StartsWith("refs/heads/"))              {                  type = RevisionType.Branch;                  version = refNameOrCommitId.Substring(11);              }              else if (refNameOrCommitId.StartsWith("refs/tags/"))              {                  type = RevisionType.Tag;                  version = refNameOrCommitId.Substring(10);              }              else              {                  type = RevisionType.Commit;                  version = new ObjectId(refNameOrCommitId).ToString();              }
Magic Number,Infinity.Clients,Revision,C:\repos\ethomson_infinity.net\Infinity\Clients\Revision.cs,Revision,The following statement contains a magic number: if (refNameOrCommitId.StartsWith("refs/heads/"))              {                  type = RevisionType.Branch;                  version = refNameOrCommitId.Substring(11);              }              else if (refNameOrCommitId.StartsWith("refs/tags/"))              {                  type = RevisionType.Tag;                  version = refNameOrCommitId.Substring(10);              }              else              {                  type = RevisionType.Commit;                  version = new ObjectId(refNameOrCommitId).ToString();              }
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,ObjectId,The following statement contains a magic number: if (str.Length != Length * 2)              {                  throw new ArgumentException("Invalid object id");              }
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,ObjectId,The following statement contains a magic number: for (int i = 0' j = 0; i < Length; i++' j+=2)              {                  id[i] = (byte)((byte)(HexValue(str[j]) << 4) | HexValue(str[j + 1]));              }
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,ObjectId,The following statement contains a magic number: for (int i = 0' j = 0; i < Length; i++' j+=2)              {                  id[i] = (byte)((byte)(HexValue(str[j]) << 4) | HexValue(str[j + 1]));              }
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,HexValue,The following statement contains a magic number: if (c >= 'a' && c <= 'f')              {                  return (byte)((c - 'a') + 10);              }
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,HexValue,The following statement contains a magic number: if (c >= 'A' && c <= 'F')              {                  return (byte)((c - 'a') + 10);              }
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,ToString,The following statement contains a magic number: char[] str = new char[Length * 2];
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,ToString,The following statement contains a magic number: for (int i = 0' j = 0; i < Length; i++' j+=2)              {                  str[j] = CharValue((byte)((id[i] & 0xf0) >> 4));                  str[j+1] = CharValue((byte)(id[i] & 0x0f));              }
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,ToString,The following statement contains a magic number: for (int i = 0' j = 0; i < Length; i++' j+=2)              {                  str[j] = CharValue((byte)((id[i] & 0xf0) >> 4));                  str[j+1] = CharValue((byte)(id[i] & 0x0f));              }
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,CharValue,The following statement contains a magic number: return (char)(b > 9 ? (b - 10) + 'a' : b + '0');
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,CharValue,The following statement contains a magic number: return (char)(b > 9 ? (b - 10) + 'a' : b + '0');
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,GetHashCode,The following statement contains a magic number: return id[0] << 24 | id[1] << 16 | id[2] << 8 | id[3];
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,GetHashCode,The following statement contains a magic number: return id[0] << 24 | id[1] << 16 | id[2] << 8 | id[3];
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,GetHashCode,The following statement contains a magic number: return id[0] << 24 | id[1] << 16 | id[2] << 8 | id[3];
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,GetHashCode,The following statement contains a magic number: return id[0] << 24 | id[1] << 16 | id[2] << 8 | id[3];
Magic Number,Infinity.Models,ObjectId,C:\repos\ethomson_infinity.net\Infinity\Models\ObjectId.cs,GetHashCode,The following statement contains a magic number: return id[0] << 24 | id[1] << 16 | id[2] << 8 | id[3];
