Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Infinity.Client,Program,C:\repos\ethomson_infinity.net\Infinity.Client\Program.cs,ParseCommandLine,The method has 5 parameters. Parameters: args' clientConfiguration' section' command' commandArgs
Long Statement,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,DownloadTree,The length of the statement  "                Console.Error.WriteLine("usage: {0} <url> Git.DownloadTree [repositoryId] [treeId] [--filename=filename]"' Program.ProgramName); " is 128.
Long Statement,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,DownloadBlob,The length of the statement  "                Console.Error.WriteLine("usage: {0} <url> Git.DownloadBlob [repositoryId] [blobId] [--filename=filename]"' Program.ProgramName); " is 128.
Long Statement,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,UpdatePullRequest,The length of the statement  "                Console.Error.WriteLine("usage: {0} <url> Git.UpdatePullRequest <repositoryId> <pullRequestId> <status> <lastMergeSourceCommitId>"' Program.ProgramName); " is 153.
Long Statement,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,GetItems,The length of the statement  "                Console.Error.WriteLine("usage: {0} <url> Git.GetItems <repositoryId> <pullRequestId> [paths...]"' Program.ProgramName); " is 120.
Long Statement,Infinity.Client,Program,C:\repos\ethomson_infinity.net\Infinity.Client\Program.cs,Main,The length of the statement  "                Console.Error.WriteLine("usage: {0} <url> <command> [--username=<username> [--password=<password>]] [<argument>...]"' ProgramName); " is 131.
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,GetCommits,The following statement contains a magic number: for (int i = 1; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("author"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.Author = options[1];                      }                      else if (options[0] != null &&                          options[0].Equals("committer"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.Committer = options[1];                      }                      else if (options[0] != null &&                          options[0].Equals("itempath"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.ItemPath = options[1];                      }                      else if (options[0] != null &&                          options[0].Equals("fromdate"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.FromDate = DateTime.Parse(options[1]);                      }                      else if (options[0] != null &&                          options[0].Equals("todate"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.ToDate = DateTime.Parse(options[1]);                      }                      else if (options[0] != null &&                          options[0].Equals("skip"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.Skip = int.Parse(options[1]);                      }                      else if (options[0] != null &&                          options[0].Equals("count"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.Count = int.Parse(options[1]);                      }                      else                      {                          Console.Error.WriteLine("{0}: unknown option '{1}'"' Program.ProgramName' args[i]);                          return 1;                      }                  }              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,GetCommits,The following statement contains a magic number: for (int i = 1; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("author"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.Author = options[1];                      }                      else if (options[0] != null &&                          options[0].Equals("committer"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.Committer = options[1];                      }                      else if (options[0] != null &&                          options[0].Equals("itempath"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.ItemPath = options[1];                      }                      else if (options[0] != null &&                          options[0].Equals("fromdate"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.FromDate = DateTime.Parse(options[1]);                      }                      else if (options[0] != null &&                          options[0].Equals("todate"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.ToDate = DateTime.Parse(options[1]);                      }                      else if (options[0] != null &&                          options[0].Equals("skip"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.Skip = int.Parse(options[1]);                      }                      else if (options[0] != null &&                          options[0].Equals("count"' StringComparison.InvariantCultureIgnoreCase))                      {                          filters.Count = int.Parse(options[1]);                      }                      else                      {                          Console.Error.WriteLine("{0}: unknown option '{1}'"' Program.ProgramName' args[i]);                          return 1;                      }                  }              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,GetCommit,The following statement contains a magic number: for (int i = 1; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("changeCount"' StringComparison.InvariantCultureIgnoreCase))                      {                          changeCount = int.Parse(options[1]);                      }                      else                      {                          Console.Error.WriteLine("{0}: unknown option '{1}'"' Program.ProgramName' args[i]);                          return 1;                      }                  }              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,GetCommit,The following statement contains a magic number: for (int i = 1; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("changeCount"' StringComparison.InvariantCultureIgnoreCase))                      {                          changeCount = int.Parse(options[1]);                      }                      else                      {                          Console.Error.WriteLine("{0}: unknown option '{1}'"' Program.ProgramName' args[i]);                          return 1;                      }                  }              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,GetTree,The following statement contains a magic number: if (args.Length != 2)              {                  Console.Error.WriteLine("usage: {0} <url> Git.GetTree [repositoryId] [treeId]"' Program.ProgramName);                  return 1;              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,DownloadTree,The following statement contains a magic number: if (args.Length < 2)              {                  Console.Error.WriteLine("usage: {0} <url> Git.DownloadTree [repositoryId] [treeId] [--filename=filename]"' Program.ProgramName);                  return 1;              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,DownloadTree,The following statement contains a magic number: for (int i = 1; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("filename"' StringComparison.InvariantCultureIgnoreCase))                      {                          filename = options[1];                      }                      else                      {                          Console.Error.WriteLine("{0}: unknown option '{1}'"' Program.ProgramName' args[i]);                          return 1;                      }                  }              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,DownloadTree,The following statement contains a magic number: for (int i = 1; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("filename"' StringComparison.InvariantCultureIgnoreCase))                      {                          filename = options[1];                      }                      else                      {                          Console.Error.WriteLine("{0}: unknown option '{1}'"' Program.ProgramName' args[i]);                          return 1;                      }                  }              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,DownloadBlob,The following statement contains a magic number: if (args.Length < 2)              {                  Console.Error.WriteLine("usage: {0} <url> Git.DownloadBlob [repositoryId] [blobId] [--filename=filename]"' Program.ProgramName);                  return 1;              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,DownloadBlob,The following statement contains a magic number: for (int i = 1; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("filename"' StringComparison.InvariantCultureIgnoreCase))                      {                          filename = options[1];                      }                      else if (options[0] != null &&                          options[0].Equals("format"' StringComparison.InvariantCultureIgnoreCase))                      {                          if (options[1].Equals("raw"' StringComparison.InvariantCultureIgnoreCase))                          {                              format = BlobFormat.Raw;                          }                          else if (options[1].Equals("zip"' StringComparison.InvariantCultureIgnoreCase))                          {                              format = BlobFormat.Zip;                          }                          else                          {                              Console.Error.WriteLine("{0}: unknown format '{1}'"' Program.ProgramName' options[1]);                              return 1;                          }                      }                      else                      {                          Console.Error.WriteLine("{0}: unknown option '{1}'"' Program.ProgramName' args[i]);                          return 1;                      }                  }              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,DownloadBlob,The following statement contains a magic number: for (int i = 1; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("filename"' StringComparison.InvariantCultureIgnoreCase))                      {                          filename = options[1];                      }                      else if (options[0] != null &&                          options[0].Equals("format"' StringComparison.InvariantCultureIgnoreCase))                      {                          if (options[1].Equals("raw"' StringComparison.InvariantCultureIgnoreCase))                          {                              format = BlobFormat.Raw;                          }                          else if (options[1].Equals("zip"' StringComparison.InvariantCultureIgnoreCase))                          {                              format = BlobFormat.Zip;                          }                          else                          {                              Console.Error.WriteLine("{0}: unknown format '{1}'"' Program.ProgramName' options[1]);                              return 1;                          }                      }                      else                      {                          Console.Error.WriteLine("{0}: unknown option '{1}'"' Program.ProgramName' args[i]);                          return 1;                      }                  }              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,UpdatePullRequest,The following statement contains a magic number: if (args.Length < 4)              {                  Console.Error.WriteLine("usage: {0} <url> Git.UpdatePullRequest <repositoryId> <pullRequestId> <status> <lastMergeSourceCommitId>"' Program.ProgramName);                  return 1;              }
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,UpdatePullRequest,The following statement contains a magic number: PullRequestStatus status = (PullRequestStatus)Enum.Parse(typeof(PullRequestStatus)' args[2]);
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,UpdatePullRequest,The following statement contains a magic number: string lastMergeSourceCommitId = args[3];
Magic Number,Infinity.Client,GitCommand,C:\repos\ethomson_infinity.net\Infinity.Client\GitCommand.cs,GetItems,The following statement contains a magic number: if (args.Length < 2)              {                  Console.Error.WriteLine("usage: {0} <url> Git.GetItems <repositoryId> <pullRequestId> [paths...]"' Program.ProgramName);                  return 1;              }
Magic Number,Infinity.Client,Program,C:\repos\ethomson_infinity.net\Infinity.Client\Program.cs,ParseCommandLine,The following statement contains a magic number: if (args.Length < 2)              {                  return false;              }
Magic Number,Infinity.Client,Program,C:\repos\ethomson_infinity.net\Infinity.Client\Program.cs,ParseCommandLine,The following statement contains a magic number: for (i = 0; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("username"' StringComparison.InvariantCultureIgnoreCase))                      {                          username = options[1];                      }                      else if (options[0] != null &&                           options[0].Equals("password"' StringComparison.InvariantCultureIgnoreCase))                      {                          password = options[1];                      }                      else if (options[0] != null &&                           options[0].Equals("useragent"' StringComparison.InvariantCultureIgnoreCase))                      {                          clientConfiguration.UserAgent = options[1];                      }                      else                      {                          commandArgList.Add(args[i]);                      }                  }                  else if (clientConfiguration.Url == null)                  {                      clientConfiguration.Url = new Uri(args[i]);                  }                  else if (section == null)                  {                      string[] commands = args[i].Split(new char[] { '.' }' 2);                      section = commands[0];                        if (commands.Length == 2)                      {                          command = commands[1];                      }                  }                  else                  {                      commandArgList.Add(args[i]);                  }              }
Magic Number,Infinity.Client,Program,C:\repos\ethomson_infinity.net\Infinity.Client\Program.cs,ParseCommandLine,The following statement contains a magic number: for (i = 0; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("username"' StringComparison.InvariantCultureIgnoreCase))                      {                          username = options[1];                      }                      else if (options[0] != null &&                           options[0].Equals("password"' StringComparison.InvariantCultureIgnoreCase))                      {                          password = options[1];                      }                      else if (options[0] != null &&                           options[0].Equals("useragent"' StringComparison.InvariantCultureIgnoreCase))                      {                          clientConfiguration.UserAgent = options[1];                      }                      else                      {                          commandArgList.Add(args[i]);                      }                  }                  else if (clientConfiguration.Url == null)                  {                      clientConfiguration.Url = new Uri(args[i]);                  }                  else if (section == null)                  {                      string[] commands = args[i].Split(new char[] { '.' }' 2);                      section = commands[0];                        if (commands.Length == 2)                      {                          command = commands[1];                      }                  }                  else                  {                      commandArgList.Add(args[i]);                  }              }
Magic Number,Infinity.Client,Program,C:\repos\ethomson_infinity.net\Infinity.Client\Program.cs,ParseCommandLine,The following statement contains a magic number: for (i = 0; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("username"' StringComparison.InvariantCultureIgnoreCase))                      {                          username = options[1];                      }                      else if (options[0] != null &&                           options[0].Equals("password"' StringComparison.InvariantCultureIgnoreCase))                      {                          password = options[1];                      }                      else if (options[0] != null &&                           options[0].Equals("useragent"' StringComparison.InvariantCultureIgnoreCase))                      {                          clientConfiguration.UserAgent = options[1];                      }                      else                      {                          commandArgList.Add(args[i]);                      }                  }                  else if (clientConfiguration.Url == null)                  {                      clientConfiguration.Url = new Uri(args[i]);                  }                  else if (section == null)                  {                      string[] commands = args[i].Split(new char[] { '.' }' 2);                      section = commands[0];                        if (commands.Length == 2)                      {                          command = commands[1];                      }                  }                  else                  {                      commandArgList.Add(args[i]);                  }              }
Magic Number,Infinity.Client,Program,C:\repos\ethomson_infinity.net\Infinity.Client\Program.cs,ParseCommandLine,The following statement contains a magic number: for (i = 0; i < args.Length; i++)              {                  if (args[i].StartsWith("--") || args[i].StartsWith("/"))                  {                      string arg = args[i].Substring(args[i].StartsWith("--") ? 2 : 1);                      string[] options = arg.Split(new char[] { '=' }' 2);                        if (options[0] != null &&                          options[0].Equals("username"' StringComparison.InvariantCultureIgnoreCase))                      {                          username = options[1];                      }                      else if (options[0] != null &&                           options[0].Equals("password"' StringComparison.InvariantCultureIgnoreCase))                      {                          password = options[1];                      }                      else if (options[0] != null &&                           options[0].Equals("useragent"' StringComparison.InvariantCultureIgnoreCase))                      {                          clientConfiguration.UserAgent = options[1];                      }                      else                      {                          commandArgList.Add(args[i]);                      }                  }                  else if (clientConfiguration.Url == null)                  {                      clientConfiguration.Url = new Uri(args[i]);                  }                  else if (section == null)                  {                      string[] commands = args[i].Split(new char[] { '.' }' 2);                      section = commands[0];                        if (commands.Length == 2)                      {                          command = commands[1];                      }                  }                  else                  {                      commandArgList.Add(args[i]);                  }              }
