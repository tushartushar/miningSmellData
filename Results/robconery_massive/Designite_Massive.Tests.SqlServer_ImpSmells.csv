Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,TryInvokeMember,Cyclomatic complexity of the method is 12
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,AllAsync,The method has 5 parameters. Parameters: where' orderBy' limit' columns' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,AllAsync,The method has 6 parameters. Parameters: cancellationToken' where' orderBy' limit' columns' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PagedAsync,The method has 6 parameters. Parameters: where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PagedAsync,The method has 7 parameters. Parameters: cancellationToken' where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PagedAsync,The method has 8 parameters. Parameters: sql' primaryKey' where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PagedAsync,The method has 9 parameters. Parameters: cancellationToken' sql' primaryKey' where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildPagedResultAsync,The method has 9 parameters. Parameters: cancellationToken' sql' primaryKeyField' whereClause' orderByClause' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,DynamicModel,The method has 6 parameters. Parameters: connectionStringName' tableName' primaryKeyField' descriptorField' primaryKeyFieldSequence' connectionStringProvider
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,All,The method has 5 parameters. Parameters: where' orderBy' limit' columns' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,Paged,The method has 6 parameters. Parameters: where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,Paged,The method has 8 parameters. Parameters: sql' primaryKey' where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildPagedResult,The method has 8 parameters. Parameters: sql' primaryKeyField' whereClause' orderByClause' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildPagingQueryPair,The method has 7 parameters. Parameters: sql' primaryKeyField' whereClause' orderByClause' columns' pageSize' currentPage
Long Identifier,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,,The length of the parameter _sequenceValueCallsBeforeMainInsert is 35.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,AllAsync,The length of the statement  "			return QueryAsync(string.Format(BuildSelectQueryPattern(where' orderBy' limit)' columns' TableName)' cancellationToken' args); " is 126.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PagedAsync,The length of the statement  "			return BuildPagedResultAsync(cancellationToken' whereClause: where' orderByClause: orderBy' columns: columns' pageSize: pageSize' currentPage: currentPage' args: args); " is 168.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,SingleAsync,The length of the statement  "			var singleValueSet = await AllAsync(cancellationToken' this.GetPkComparisonPredicateQueryFragment()' limit: 1' columns: columns' args: new[] { key }).ConfigureAwait(false); " is 172.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PerformInsertAsync,The length of the statement  "				((IDictionary<string' object>)toInsert)[this.PrimaryKeyField] = Convert.ToInt32(await sequenceCmd.ExecuteScalarAsync(cancellationToken).ConfigureAwait(false)); " is 159.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PerformInsertAsync,The length of the statement  "				// simply batch the identity scalar query to the main insert query and execute them as one scalar query. This will both execute the statement and  " is 145.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PerformInsertAsync,The length of the statement  "				((IDictionary<string' object>)toInsert)[this.PrimaryKeyField] = Convert.ToInt32(await cmd.ExecuteScalarAsync(cancellationToken).ConfigureAwait(false)); " is 151.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,CountAsync,The length of the statement  "			var toReturn = await ScalarAsync(string.Format(scalarQueryPattern' string.IsNullOrEmpty(tableName) ? this.TableName : tableName)' cancellationToken' args).ConfigureAwait(false); " is 177.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PerformSaveAsync,The length of the statement  "								result += await ExecuteDbCommandAsync(CreateUpdateCommand(oAsExpando' GetPrimaryKey(o))' connectionToUse' transactionToUse' cancellationToken).ConfigureAwait(false); " is 165.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildPagedResultAsync,The length of the statement  "			var queryPair = this.BuildPagingQueryPair(sql' primaryKeyField' whereClause' orderByClause' columns' pageSize' currentPage); " is 124.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildPagedResultAsync,The length of the statement  "			// first create the tasks' which will make the queries run immediately but also return immediately. As both queries don't have a correlation' this can speed up " is 159.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildPagedResultAsync,The length of the statement  "			var queryTask = QueryAsync(string.Format(queryPair.MainQuery' columns' TableName)' cancellationToken' args).ConfigureAwait(false); " is 130.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,Paged,The length of the statement  "			return BuildPagedResult(whereClause: where' orderByClause: orderBy' columns: columns' pageSize: pageSize' currentPage: currentPage' args: args); " is 144.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,Single,The length of the statement  "			return All(this.GetPkComparisonPredicateQueryFragment()' limit: 1' columns: columns' args: new[] { key }).FirstOrDefault(); " is 123.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,KeyValues,The length of the statement  "				throw new InvalidOperationException("There's no DescriptorField set - do this in your constructor to describe the text value you want to see"); " is 143.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,KeyValues,The length of the statement  "			var results = All(orderBy: orderBy' columns: string.Format("{0}' {1}"' this.PrimaryKeyField' this.DescriptorField)).ToList().Cast<IDictionary<string' object>>(); " is 161.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,Count,The length of the statement  "			return Convert.ToInt32(Scalar(string.Format(scalarQueryPattern' string.IsNullOrEmpty(tableName) ? this.TableName : tableName)' args)); " is 134.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,TryInvokeMember,The length of the statement  "				throw new InvalidOperationException("Please use named arguments for this type of query - the column name' orderby' columns' etc"); " is 130.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,TryInvokeMember,The length of the statement  "						result = Scalar(string.Format("SELECT {0}({1}) FROM {2} {3}"' aggregate' columns' this.TableName' whereClauseFragment)' whereArguments.ToArray()); " is 146.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,TryInvokeMember,The length of the statement  "					var justOne = op.StartsWith("First") || op.StartsWith("Last") || op.StartsWith("Get") || op.StartsWith("Find") || op.StartsWith("Single"); " is 138.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,TryInvokeMember,The length of the statement  "					result = justOne ? All(whereClauseFragment' orderByClauseFragment' 1' columns' whereArguments.ToArray()).FirstOrDefault() : All(whereClauseFragment' orderByClauseFragment' 0' columns' whereArguments.ToArray()); " is 210.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,CreateInsertCommand,The length of the statement  "				result.CommandText = string.Format(insertQueryPattern' TableName' string.Join("' "' fieldNames.ToArray())' string.Join("' "' valueParameters.ToArray())); " is 153.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,CreateUpdateCommand,The length of the statement  "			return CreateUpdateWhereCommand(expando' string.Format("{0} = {1}"' this.PrimaryKeyField' this.PrefixParameterName("0"))' key); " is 127.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,PerformInsert,The length of the statement  "				// simply batch the identity scalar query to the main insert query and execute them as one scalar query. This will both execute the statement and return the sequence value " is 171.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,ColumnExists,The length of the statement  "			return this.Schema.Any(c => string.Compare(this.GetColumnName(c)' columnName' StringComparison.InvariantCultureIgnoreCase) == 0); " is 129.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildPagedResult,The length of the statement  "			var queryPair = this.BuildPagingQueryPair(sql' primaryKeyField' whereClause' orderByClause' columns' pageSize' currentPage); " is 124.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,GetColumn,The length of the statement  "			return this.Schema.FirstOrDefault(c => string.Compare(this.GetColumnName(c)' columnName' StringComparison.InvariantCultureIgnoreCase) == 0); " is 140.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildCommands,The length of the statement  "				commands.Add(HasPrimaryKey(item) ? CreateUpdateCommand(item.ToExpando()' GetPrimaryKey(item)) : CreateInsertCommand(item.ToExpando())); " is 135.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,GetIdentityRetrievalScalarStatement,The length of the statement  "			return string.IsNullOrEmpty(_primaryKeyFieldSequence) ? string.Empty : string.Format("SELECT {0} as newID"' _primaryKeyFieldSequence); " is 134.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,GetSelectQueryPattern,The length of the statement  "			return string.Format("SELECT{0} {{0}} FROM {{1}}{1}{2}"' limit > 0 ? " TOP " + limit : string.Empty' whereClause' orderByClause); " is 129.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildPagingQueryPair,The length of the statement  "				query = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {1}) AS Row' {0} FROM {2} {3}) AS Paged "' columns' orderByClauseFragment' TableName'  " is 160.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\robconery_massive\src\Massive.Shared.Async.cs,BuildPagingQueryPair,The length of the statement  "				query = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {1}) AS Row' {0} FROM ({2}) AS PagedTable {3}) AS Paged "' columns' orderByClauseFragment' sql'  " is 170.
Long Statement,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_ColumnsSpecification,The length of the statement  "			var allRows = await soh.AllAsync(columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052); " is 132.
Long Statement,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_ColumnsSpecification_LimitSpecification,The length of the statement  "			var allRows = await soh.AllAsync(limit: 2' columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052); " is 142.
Long Statement,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification_ColumnsSpecification,The length of the statement  "			var page2 = await soh.PagedAsync(columns: "CustomerID' SalesOrderID"' orderBy: "CustomerID DESC"' currentPage: 2' pageSize: 30); " is 128.
Long Statement,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Insert_SingleRow,The length of the statement  "			var inserted = categories.Insert(new {CategoryName = "Cool stuff"' Description = "You know... cool stuff! Cool. n. stuff."}); " is 125.
Long Statement,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Update_SingleRow,The length of the statement  "			var inserted = categories.Insert(new { CategoryName = "Cool stuff"' Description = "You know... cool stuff! Cool. n. stuff." }); " is 127.
Long Statement,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Delete_MultiRow,The length of the statement  "			Assert.AreEqual(2' categories.Delete(where:"CategoryName=@0"' args:(string)insertedCategory1.CategoryName)' "Delete should affect 2 rows"); " is 139.
Long Statement,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ColumnsSpecification,The length of the statement  "			var allRows = soh.All(columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052).ToList(); " is 130.
Long Statement,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ColumnsSpecification_LimitSpecification,The length of the statement  "			var allRows = soh.All(limit: 2' columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052).ToList(); " is 140.
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_NoParameters,The following statement contains a magic number: Assert.AreEqual(31465' allRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_NoParameters_Streaming,The following statement contains a magic number: Assert.AreEqual(26' ((IDictionary<string' object>)r).Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_NoParameters_Streaming,The following statement contains a magic number: Assert.AreEqual(31465' count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_LimitSpecification,The following statement contains a magic number: var allRows = await soh.AllAsync(limit: 10);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_LimitSpecification,The following statement contains a magic number: Assert.AreEqual(10' allRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_ColumnSpecification,The following statement contains a magic number: Assert.AreEqual(31465' allRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_ColumnSpecification,The following statement contains a magic number: Assert.AreEqual(3' firstRow.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_OrderBySpecification,The following statement contains a magic number: Assert.AreEqual(31465' allRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification,The following statement contains a magic number: var allRows = await soh.AllAsync(where: "WHERE CustomerId=@0"' args: 30052);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification,The following statement contains a magic number: Assert.AreEqual(4' allRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_OrderBySpecification,The following statement contains a magic number: var allRows = await soh.AllAsync(orderBy: "SalesOrderID DESC"' where: "WHERE CustomerId=@0"' args: 30052);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_OrderBySpecification,The following statement contains a magic number: Assert.AreEqual(4' allRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_ColumnsSpecification,The following statement contains a magic number: var allRows = await soh.AllAsync(columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(4' allRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(3' firstRow.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_ColumnsSpecification_LimitSpecification,The following statement contains a magic number: var allRows = await soh.AllAsync(limit: 2' columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_ColumnsSpecification_LimitSpecification,The following statement contains a magic number: var allRows = await soh.AllAsync(limit: 2' columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_ColumnsSpecification_LimitSpecification,The following statement contains a magic number: Assert.AreEqual(2' allRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,AllAsync_WhereSpecification_ColumnsSpecification_LimitSpecification,The following statement contains a magic number: Assert.AreEqual(3' firstRow.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,QueryAsync_AllRows,The following statement contains a magic number: Assert.AreEqual(31465' allRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,QueryAsync_Filter,The following statement contains a magic number: var filteredRows = await soh.QueryAsync("SELECT * FROM Sales.SalesOrderHeader WHERE CustomerID=@0"' 30052);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,QueryAsync_Filter,The following statement contains a magic number: Assert.AreEqual(4' filteredRows.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_NoSpecification,The following statement contains a magic number: var page2 = await soh.PagedAsync(currentPage:2' pageSize: 30);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_NoSpecification,The following statement contains a magic number: var page2 = await soh.PagedAsync(currentPage:2' pageSize: 30);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_NoSpecification,The following statement contains a magic number: Assert.AreEqual(30' pageItems.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_NoSpecification,The following statement contains a magic number: Assert.AreEqual(31465' page2.TotalRecords);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification,The following statement contains a magic number: var page2 = await soh.PagedAsync(orderBy: "CustomerID DESC"' currentPage: 2' pageSize: 30);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification,The following statement contains a magic number: var page2 = await soh.PagedAsync(orderBy: "CustomerID DESC"' currentPage: 2' pageSize: 30);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification,The following statement contains a magic number: Assert.AreEqual(30' pageItems.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification,The following statement contains a magic number: Assert.AreEqual(31465' page2.TotalRecords);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: var page2 = await soh.PagedAsync(columns: "CustomerID' SalesOrderID"' orderBy: "CustomerID DESC"' currentPage: 2' pageSize: 30);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: var page2 = await soh.PagedAsync(columns: "CustomerID' SalesOrderID"' orderBy: "CustomerID DESC"' currentPage: 2' pageSize: 30);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(30' pageItems.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(31465' page2.TotalRecords);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,PagedAsync_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(2' firstRow.Count);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,CountAsync_NoSpecification,The following statement contains a magic number: Assert.AreEqual(31465' total);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,CountAsync_WhereSpecification,The following statement contains a magic number: var total = await soh.CountAsync(where: "WHERE CustomerId=@0"' args:30052);
Magic Number,Massive.Tests,AsyncReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\AsyncReadTests.cs,CountAsync_WhereSpecification,The following statement contains a magic number: Assert.AreEqual(4' total);
Magic Number,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Insert_MultipleRows,The following statement contains a magic number: Assert.AreEqual(2' categories.SaveAsNew(toInsert.ToArray()));
Magic Number,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Insert_MultipleRows,The following statement contains a magic number: Assert.AreEqual(2' inserted.Count);
Magic Number,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Update_MultipleRows,The following statement contains a magic number: var category = i % 2 == 0 ? insertedCategory1 : insertedCategory2;
Magic Number,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Update_MultipleRows,The following statement contains a magic number: i < 4
Magic Number,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Update_MultipleRows,The following statement contains a magic number: Assert.AreEqual(2' allCat1Products.Length);
Magic Number,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Update_MultipleRows,The following statement contains a magic number: Assert.AreEqual(2' products.Save(allCat1Products));
Magic Number,Massive.Tests,WriteTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\WriteTests.cs,Delete_MultiRow,The following statement contains a magic number: Assert.AreEqual(2' categories.Delete(where:"CategoryName=@0"' args:(string)insertedCategory1.CategoryName)' "Delete should affect 2 rows");
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,MaxOnFilteredSet,The following statement contains a magic number: Assert.AreEqual(75123' result);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,MaxOnFilteredSet2,The following statement contains a magic number: var result = ((dynamic)soh).Max(columns: "SalesOrderID"' TerritoryID:10);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,MaxOnFilteredSet2,The following statement contains a magic number: Assert.AreEqual(75117' result);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,SchemaMetaDataRetrieval,The following statement contains a magic number: Assert.AreEqual(26' schema.Count());
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_NoParameters,The following statement contains a magic number: Assert.AreEqual(31465' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_NoParameters_Streaming,The following statement contains a magic number: Assert.AreEqual(26' ((IDictionary<string' object>)r).Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_NoParameters_Streaming,The following statement contains a magic number: Assert.AreEqual(31465' count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_LimitSpecification,The following statement contains a magic number: var allRows = soh.All(limit: 10).ToList();
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_LimitSpecification,The following statement contains a magic number: Assert.AreEqual(10' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_ColumnSpecification,The following statement contains a magic number: Assert.AreEqual(31465' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_ColumnSpecification,The following statement contains a magic number: Assert.AreEqual(3' firstRow.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_OrderBySpecification,The following statement contains a magic number: Assert.AreEqual(31465' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification,The following statement contains a magic number: var allRows = soh.All(where: "WHERE CustomerId=@0"' args: 30052).ToList();
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification,The following statement contains a magic number: Assert.AreEqual(4' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_OrderBySpecification,The following statement contains a magic number: var allRows = soh.All(orderBy: "SalesOrderID DESC"' where: "WHERE CustomerId=@0"' args: 30052).ToList();
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_OrderBySpecification,The following statement contains a magic number: Assert.AreEqual(4' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ColumnsSpecification,The following statement contains a magic number: var allRows = soh.All(columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052).ToList();
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(4' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(3' firstRow.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ColumnsSpecification_LimitSpecification,The following statement contains a magic number: var allRows = soh.All(limit: 2' columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052).ToList();
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ColumnsSpecification_LimitSpecification,The following statement contains a magic number: var allRows = soh.All(limit: 2' columns: "SalesOrderID as SOID' Status' SalesPersonID"' where: "WHERE CustomerId=@0"' args: 30052).ToList();
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ColumnsSpecification_LimitSpecification,The following statement contains a magic number: Assert.AreEqual(2' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ColumnsSpecification_LimitSpecification,The following statement contains a magic number: Assert.AreEqual(3' firstRow.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ToDataTable,The following statement contains a magic number: var allRows = soh.All(where: "WHERE CustomerId=@0"' args: 30052).ToList();
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ToDataTable,The following statement contains a magic number: Assert.AreEqual(4' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ToDataTable,The following statement contains a magic number: var allRowsAsDataTable = soh.All(where: "WHERE CustomerId=@0"' args: 30052).ToDataTable();
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,All_WhereSpecification_ToDataTable,The following statement contains a magic number: Assert.AreEqual(30052' allRowsAsDataTable.Rows[i]["CustomerId"]);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Find_AllColumns,The following statement contains a magic number: var singleInstance = soh.Find(SalesOrderID: 43666);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Find_AllColumns,The following statement contains a magic number: Assert.AreEqual(43666' singleInstance.SalesOrderID);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Find_OneColumn,The following statement contains a magic number: var singleInstance = soh.Find(SalesOrderID: 43666' columns:"SalesOrderID");
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Find_OneColumn,The following statement contains a magic number: Assert.AreEqual(43666' singleInstance.SalesOrderID);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Get_AllColumns,The following statement contains a magic number: var singleInstance = soh.Get(SalesOrderID: 43666);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Get_AllColumns,The following statement contains a magic number: Assert.AreEqual(43666' singleInstance.SalesOrderID);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,First_AllColumns,The following statement contains a magic number: var singleInstance = soh.First(SalesOrderID: 43666);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,First_AllColumns,The following statement contains a magic number: Assert.AreEqual(43666' singleInstance.SalesOrderID);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Single_AllColumns,The following statement contains a magic number: var singleInstance = soh.Single(SalesOrderID: 43666);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Single_AllColumns,The following statement contains a magic number: Assert.AreEqual(43666' singleInstance.SalesOrderID);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Query_AllRows,The following statement contains a magic number: Assert.AreEqual(31465' allRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Query_Filter,The following statement contains a magic number: var filteredRows = soh.Query("SELECT * FROM Sales.SalesOrderHeader WHERE CustomerID=@0"' 30052).ToList();
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Query_Filter,The following statement contains a magic number: Assert.AreEqual(4' filteredRows.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_NoSpecification,The following statement contains a magic number: var page2 = soh.Paged(currentPage:2' pageSize: 30);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_NoSpecification,The following statement contains a magic number: var page2 = soh.Paged(currentPage:2' pageSize: 30);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_NoSpecification,The following statement contains a magic number: Assert.AreEqual(30' pageItems.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_NoSpecification,The following statement contains a magic number: Assert.AreEqual(31465' page2.TotalRecords);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_OrderBySpecification,The following statement contains a magic number: var page2 = soh.Paged(orderBy: "CustomerID DESC"' currentPage: 2' pageSize: 30);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_OrderBySpecification,The following statement contains a magic number: var page2 = soh.Paged(orderBy: "CustomerID DESC"' currentPage: 2' pageSize: 30);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_OrderBySpecification,The following statement contains a magic number: Assert.AreEqual(30' pageItems.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_OrderBySpecification,The following statement contains a magic number: Assert.AreEqual(31465' page2.TotalRecords);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: var page2 = soh.Paged(columns: "CustomerID' SalesOrderID"' orderBy: "CustomerID DESC"' currentPage: 2' pageSize: 30);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: var page2 = soh.Paged(columns: "CustomerID' SalesOrderID"' orderBy: "CustomerID DESC"' currentPage: 2' pageSize: 30);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(30' pageItems.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(31465' page2.TotalRecords);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Paged_OrderBySpecification_ColumnsSpecification,The following statement contains a magic number: Assert.AreEqual(2' firstRow.Count);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Count_NoSpecification,The following statement contains a magic number: Assert.AreEqual(31465' total);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Count_WhereSpecification,The following statement contains a magic number: var total = soh.Count(where: "WHERE CustomerId=@0"' args:30052);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,Count_WhereSpecification,The following statement contains a magic number: Assert.AreEqual(4' total);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,IsValid_SalesPersonIDCheck,The following statement contains a magic number: var toValidate = soh.Find(SalesOrderID: 45816);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,IsValid_SalesPersonIDCheck,The following statement contains a magic number: toValidate = soh.Find(SalesOrderID: 45069);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,PrimaryKey_Read_Check,The following statement contains a magic number: var toValidate = soh.Find(SalesOrderID: 45816);
Magic Number,Massive.Tests,ReadTests,C:\research\architectureSmells\repos\robconery_massive\tests\SqlServer\ReadTests.cs,PrimaryKey_Read_Check,The following statement contains a magic number: Assert.AreEqual(45816' pkValue);
