Implementation smell,Namespace,Class,File,Method,Description
Complex Method,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,ValidateParameter,Cyclomatic complexity of the method is 9
Long Statement,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,ParseArguments,The length of the statement  "                Console.WriteLine("KSPModAdmin_Udpater.exe version=\"<Version x.x.x>\" process=\"<Process name of KSPModAdmin>\" archive=\"<Path to the new KSPModAdmin archive>\" dest=\"<KSPModAdmin install path>\""); " is 201.
Long Statement,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,Backup,The length of the statement  "                ////File.Copy(Path.Combine(DestinationPath' KSPMODADMINFILE)' Path.Combine(DestinationPath' KSPMODADMINFILE + BACKUPEXTENSION)); " is 128.
Long Statement,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,Backup,The length of the statement  "                ////File.Copy(Path.Combine(DestinationPath' SHARPCOMPRESSFILE)' Path.Combine(DestinationPath' SHARPCOMPRESSFILE + BACKUPEXTENSION)); " is 132.
Long Statement,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,ExtractKSPModAdmin,The length of the statement  "                    string relativePath = reader.Entry.FilePath.Replace(versiondir1' string.Empty).Replace(versiondir2' string.Empty).Replace(versiondir3' string.Empty).Replace(versiondir4' string.Empty); " is 184.
Complex Conditional,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,ExtractKSPModAdmin,The conditional expression  "!revertBackup &&                          !reader.Entry.FilePath.Contains(versiondir1) &&                          !reader.Entry.FilePath.Contains(versiondir2) &&                          !reader.Entry.FilePath.Contains(versiondir3) &&                          !reader.Entry.FilePath.Contains(versiondir4)"  is complex.
Empty Catch Block,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,ParseArguments,The method has an empty catch block.
Empty Catch Block,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,ParseArguments,The method has an empty catch block.
Magic Number,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,ParseArguments,The following statement contains a magic number: if (args.Length != 4)              {                  Console.WriteLine();                  Console.WriteLine("Error: Invalid argument count");                  Console.WriteLine("Abort update!");                  result = false;              }
Magic Number,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,ParseArguments,The following statement contains a magic number: foreach (var argValuePair in args)              {                  Console.Write(".");                  string[] arg = argValuePair.Trim(new[] { '\"' }).Split('=');                  if (arg.Length != 2)                  {                      Console.WriteLine();                      Console.WriteLine("Error: Invalid parameter count");                      Console.WriteLine("Abort update!");                      result = false;                      break;                  }                    switch (arg[0].ToLower())                  {                      case "version":                          mVersion = arg[1];                          break;                        case "process":                          mProcessName = arg[1];                          break;                        case "archive":                          try                          {                              mArchivePath = string.Empty;                              mValidArchivePath = false;                                if (System.IO.File.Exists(arg[1]))                              {                                  mArchivePath = arg[1];                                  mValidArchivePath = true;                              }                          }                          catch { }                          break;                        case "dest":                          try                          {                              mDestinationPath = string.Empty;                              mValidDestinationPath = false;                                if (System.IO.Directory.Exists(arg[1]))                              {                                  mDestinationPath = arg[1];                                  mValidDestinationPath = true;                              }                          }                          catch { }                          break;                        default:                          result = false;                              break;                  }              }
Magic Number,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,WaitTillShutDown,The following statement contains a magic number: while (exists.Length > 0)              {                  System.Threading.Thread.Sleep(500);                  Console.Write(".");                  if (watch.ElapsedMilliseconds > 50000)                  {                      Console.WriteLine();                      Console.WriteLine(mProcessName + " taks to long to shutdown. Update aborted.");                      Console.ReadKey();                      return false;                  }                    exists = System.Diagnostics.Process.GetProcessesByName(mProcessName);               }
Magic Number,KSPModAdmin.Updater,Program,C:\repos\MacTee_KSP-Mod-Admin-aOS\KSPModAdmin.Updater\_main.cs,WaitTillShutDown,The following statement contains a magic number: while (exists.Length > 0)              {                  System.Threading.Thread.Sleep(500);                  Console.Write(".");                  if (watch.ElapsedMilliseconds > 50000)                  {                      Console.WriteLine();                      Console.WriteLine(mProcessName + " taks to long to shutdown. Update aborted.");                      Console.ReadKey();                      return false;                  }                    exists = System.Diagnostics.Process.GetProcessesByName(mProcessName);               }
