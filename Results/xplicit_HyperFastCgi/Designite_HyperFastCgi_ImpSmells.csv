Implementation smell,Namespace,Class,File,Method,Description
Long Method,HyperFastCgi,MainClass,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Main.cs,Main,The method has 167 lines of code.
Long Method,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ReceiveCallback,The method has 100 lines of code.
Complex Method,HyperFastCgi,MainClass,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Main.cs,Main,Cyclomatic complexity of the method is 23
Complex Method,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,GetValue,Cyclomatic complexity of the method is 8
Complex Method,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,PrintHelp,Cyclomatic complexity of the method is 13
Complex Method,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,LoadCommandLineArgs,Cyclomatic complexity of the method is 9
Complex Method,HyperFastCgi.Configuration,ConfigUtils,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigUtils.cs,GetApplicationsFromCommandLine,Cyclomatic complexity of the method is 8
Complex Method,HyperFastCgi.Configuration,ConfigUtils,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigUtils.cs,GetConfigsFromElement,Cyclomatic complexity of the method is 9
Complex Method,HyperFastCgi.AppHosts.AspNet,AspNetNativeWebRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\AspNetNativeWebRequest.cs,GetFilePath,Cyclomatic complexity of the method is 8
Complex Method,HyperFastCgi.AppHosts.AspNet,MonoWorkerRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\MonoWorkerRequest.cs,MapPath,Cyclomatic complexity of the method is 10
Complex Method,HyperFastCgi.AppHosts.AspNet,MonoWorkerRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\MonoWorkerRequest.cs,GetServerVariable,Cyclomatic complexity of the method is 14
Complex Method,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ReceiveCallback,Cyclomatic complexity of the method is 15
Complex Method,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,Cyclomatic complexity of the method is 18
Complex Method,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,AddHeader,Cyclomatic complexity of the method is 10
Complex Method,Mono.WebServer,VPathToHost,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Mono.WebServer\VPathToHost.cs,Match,Cyclomatic complexity of the method is 11
Complex Method,HyperFastCgi.Helpers,ThreadHelper,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\ThreadHelper.cs,SetThreads,Cyclomatic complexity of the method is 10
Long Parameter List,HyperFastCgi.Interfaces,IApplicationHost,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Interfaces\IApplicationHost.cs,Configure,The method has 6 parameters. Parameters: appHostConfig' webAppConfig' appServer' listenerTransport' appHostTransportType' appHostTransportConfig
Long Parameter List,HyperFastCgi.Interfaces,IApplicationHostFactory,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Interfaces\IApplicationHostFactory.cs,CreateApplicationHost,The method has 5 parameters. Parameters: appHostType' vhost' vport' vpath' path
Long Parameter List,HyperFastCgi.Interfaces,IWebListener,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Interfaces\IWebListener.cs,Configure,The method has 6 parameters. Parameters: listenerConfig' server' listenerTransport' listenerTransportConfig' appHostTransport' appHostTransportConfig
Long Parameter List,HyperFastCgi.Interfaces,IApplicationServer,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Interfaces\IApplicationServer.cs,CreateApplicationHost,The method has 6 parameters. Parameters: appHostType' appHostConfig' webAppConfig' listenerTransport' transport' transportConfig
Long Parameter List,HyperFastCgi.AppHosts.AspNet,AspNetApplicationHost,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\AspNetApplicationHost.cs,Configure,The method has 6 parameters. Parameters: appHostConfig' webAppConfig' server' listenerTransport' appHostTransportType' transportConfig
Long Parameter List,HyperFastCgi.AppHosts.AspNet,AspNetNativeWebRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\AspNetNativeWebRequest.cs,AspNetNativeWebRequest,The method has 5 parameters. Parameters: requestId' requestNumber' appHost' transport' addTrailingSlash
Long Parameter List,HyperFastCgi.AppHosts,AppHostBase,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AppHostBase.cs,Configure,The method has 6 parameters. Parameters: appHostConfig' webAppConfig' server' listenerTransport' appHostTransportType' transportConfig
Long Parameter List,HyperFastCgi.AppHosts.Raw,RawHost,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\Raw\RawHost.cs,Configure,The method has 6 parameters. Parameters: appHostConfig' webAppConfig' server' listenerTransport' appHostTransportType' transportConfig
Long Parameter List,HyperFastCgi.ApplicationServers,SimpleApplicationServer,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\ApplicationServers\SimpleApplicationServer.cs,CreateApplicationHost,The method has 6 parameters. Parameters: appHostType' appHostConfig' webAppConfig' listenerTransport' appHostTransportType' appHostTransportConfig
Long Parameter List,HyperFastCgi.ApplicationServers,SimpleApplicationServer,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\ApplicationServers\SimpleApplicationServer.cs,CreateAppHost,The method has 6 parameters. Parameters: appHostType' appHostConfig' appConfig' listenerTransport' appHostTransportType' appHostTransportConfig
Long Parameter List,HyperFastCgi.Listeners,ManagedFastCgiListener,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\ManagedFastCgiListener.cs,Configure,The method has 6 parameters. Parameters: conf' server' listenerTransport' listenerTransportConfig' appHostTransport' appHostTransportConfig
Long Parameter List,HyperFastCgi.Listeners,NativeListener,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\NativeListener.cs,Configure,The method has 6 parameters. Parameters: config' server' listenerTransport' listenerTransportConfig' appHostTransport' appHostTransportConfig
Long Parameter List,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendStreamData,The method has 5 parameters. Parameters: listenerTag' type' requestId' data' length
Long Parameter List,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The method has 6 parameters. Parameters: listenerTag' type' requestID' bodyData' bodyIndex' bodyLength
Long Parameter List,HyperFastCgi.Transports,CombinedFastCgiListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\CombinedFastCgiListenerTransport.cs,AppHostTransportAddServerVariable,The method has 5 parameters. Parameters: host' requestId' requestNumber' name' value
Long Parameter List,HyperFastCgi.Transports,CombinedFastCgiListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\CombinedFastCgiListenerTransport.cs,AppHostTransportAddHeader,The method has 5 parameters. Parameters: host' requestId' requestNumber' name' value
Long Parameter List,HyperFastCgi.Transports,CombinedFastCgiListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\CombinedFastCgiListenerTransport.cs,AppHostTransportAddBodyPart,The method has 5 parameters. Parameters: host' requestId' requestNumber' body' final
Long Parameter List,HyperFastCgi.Helpers.FastCgiProtocol,Record,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\Record.cs,Record,The method has 6 parameters. Parameters: version' type' requestID' bodyData' bodyIndex' bodyLength
Long Parameter List,HyperFastCgi.HostFactories,SystemWebHostFactory,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\HostFactories\SystemWebHostFactory.cs,CreateApplicationHost,The method has 5 parameters. Parameters: appHostType' vhost' vport' vpath' path
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter Server_ResponderDoesNotImplement is 32.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter Server_ResponderLacksProperConstructor is 38.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter Connection_RequestAlreadyExists is 31.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter Connection_RequestDoesNotExist is 30.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter Connection_AbortRecordReceived is 30.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter NameValuePair_DuplicateParameter is 32.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter NameValuePair_DictionaryContainsNonString is 41.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter NameValuePair_LengthLessThanZero is 32.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter ResponderRequest_IncompleteInput is 32.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter ResponderRequest_NoContentLength is 32.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter ResponderRequest_NoContentLengthNotNumber is 41.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter ResponderRequest_ContentExceedsLength is 37.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter Request_ParametersAlreadyCompleted is 34.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter Request_StandardInputAlreadyCompleted is 37.
Long Identifier,HyperFastCgi.Helpers,Strings,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Strings.cs,,The length of the parameter Request_FileDataAlreadyCompleted is 32.
Long Statement,HyperFastCgi,MainClass,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Main.cs,Main,The length of the statement  "					Console.WriteLine ("Only one server is supported currently. Please remove redudant <server> node from file '{0}'"' config); " is 123.
Long Statement,HyperFastCgi,MainClass,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Main.cs,Main,The length of the statement  "					Console.WriteLine ("Only one listener is supported currently. Please remove redudant <listener> node from file '{0}'"' config); " is 127.
Long Statement,HyperFastCgi.AppHosts.AspNet,MonoWorkerRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\MonoWorkerRequest.cs,MapPath,The length of the statement  "			if (pathLen == 0 || (inThisApp && (pathLen == hostVPathLen || (pathLen == hostVPathLen + 1 && path [pathLen - 1] == '/')))) { " is 125.
Long Statement,HyperFastCgi.AppHosts,AppHostBase,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AppHostBase.cs,Configure,The length of the statement  "			Logger.Write (LogLevel.Debug' "Configured host in domain {0}' id={1}"' AppDomain.CurrentDomain.FriendlyName' AppDomain.CurrentDomain.Id); " is 137.
Long Statement,HyperFastCgi.ApplicationServers,SimpleApplicationServer,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\ApplicationServers\SimpleApplicationServer.cs,CreateApplicationHost,The length of the statement  "			return CreateAppHost (appHostType' appHostConfig' appConfig' listenerTransport' appHostTransportType' appHostTransportConfig); " is 126.
Long Statement,HyperFastCgi.ApplicationServers,SimpleApplicationServer,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\ApplicationServers\SimpleApplicationServer.cs,CreateAppHost,The length of the statement  "			Logger.Write (LogLevel.Debug' "SimpleApplicationServer.CreateAppHost vhost={0}' vport={1}"' appConfig.VHost' appConfig.VPort); " is 126.
Long Statement,HyperFastCgi.ApplicationServers,SimpleApplicationServer,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\ApplicationServers\SimpleApplicationServer.cs,CreateAppHost,The length of the statement  "				IApplicationHost host = hostFactory.CreateApplicationHost (appHostType' appConfig.VHost' appConfig.VPort' appConfig.VPath' appConfig.RealPath); " is 143.
Long Statement,HyperFastCgi.ApplicationServers,SimpleApplicationServer,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\ApplicationServers\SimpleApplicationServer.cs,OnHostUnload,The length of the statement  "					Logger.Write (LogLevel.Error' "Can't unload host {0}:{1}:{2}:{3}"' appHost.VHost' appHost.VPort' appHost.VPath' appHost.Path); " is 126.
Long Statement,HyperFastCgi.ApplicationServers,SimpleApplicationServer,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\ApplicationServers\SimpleApplicationServer.cs,OnHostUnload,The length of the statement  "					Logger.Write (LogLevel.Debug' "Domain={0} Unload host in domain {1} id={2}"' AppDomain.CurrentDomain.FriendlyName' ((IApplicationHost)sender).Domain.FriendlyName' ((IApplicationHost)sender).Domain.Id); " is 201.
Long Statement,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ProcessRecord,The length of the statement  "				Logger.Write (LogLevel.Debug' "cn={0} read header={1} reqId={2}"' cn' header [1]' (ushort)((header [2] << 8) + header [3])); " is 124.
Long Statement,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,StartSendPackets,The length of the statement  "					client.BeginSend (sendState.buffer' sendState.offset' sendState.buffer.Length' SocketFlags.None' asyncSendCallback' sendState); " is 127.
Long Statement,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,SendCallback,The length of the statement  "					client.BeginSend (sendState.buffer' sendState.offset' sendState.buffer.Length - sendState.offset' SocketFlags.None' asyncSendCallback' sendState); " is 146.
Long Statement,HyperFastCgi.Helpers,ThreadHelper,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\ThreadHelper.cs,SetThreads,The length of the statement  "			if ((maxWorkerThreads != 0 && maxWorkerThreads < minWorkerThreads) || (maxIOThreads != 0 && maxIOThreads < minIOThreads)) " is 121.
Complex Conditional,HyperFastCgi.AppHosts.AspNet,MonoWorkerRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\MonoWorkerRequest.cs,MapPath,The conditional expression  "pathLen == 0 || (inThisApp && (pathLen == hostVPathLen || (pathLen == hostVPathLen + 1 && path [pathLen - 1] == '/')))"  is complex.
Complex Conditional,HyperFastCgi.Helpers,ThreadHelper,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\ThreadHelper.cs,SetThreads,The conditional expression  "minWorkerThreads ==0 &&  minIOThreads ==0 && maxWorkerThreads ==0 && maxIOThreads == 0"  is complex.
Complex Conditional,HyperFastCgi.Helpers,ThreadHelper,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\ThreadHelper.cs,SetThreads,The conditional expression  "(maxWorkerThreads != 0 && maxWorkerThreads < minWorkerThreads) || (maxIOThreads != 0 && maxIOThreads < minIOThreads)"  is complex.
Empty Catch Block,HyperFastCgi.Listeners,ManagedFastCgiListener,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\ManagedFastCgiListener.cs,acceptCallback,The method has an empty catch block.
Empty Catch Block,HyperFastCgi.Helpers.Sockets,UnixSocket,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Sockets\UnixSocket.cs,CreateEndPoint,The method has an empty catch block.
Empty Catch Block,HyperFastCgi.Helpers.Logging,Logger,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Logging\Logger.cs,Close,The method has an empty catch block.
Magic Number,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,PrintHelp,The following statement contains a magic number: int length = 4 +  				             GetXmlValue (setting' "Name").Length +  				             (type == "BOOL" ? 14 : type.Length + 1);
Magic Number,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,PrintHelp,The following statement contains a magic number: int length = 4 +  				             GetXmlValue (setting' "Name").Length +  				             (type == "BOOL" ? 14 : type.Length + 1);
Magic Number,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,PrintHelp,The following statement contains a magic number: RenderXml (desc' values' 0' 78 - left_margin);
Magic Number,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,RenderXml,The following statement contains a magic number: switch (node.LocalName) {  				case "para":  					RenderXml (child' values' indent' length);  					values.Add (string.Empty);  					break;  				case "block":  					RenderXml (child' values' indent + 4' length);  					break;  				case "example":  					RenderXml (child' values' indent + 4' length);  					values.Add (string.Empty);  					break;  				case "code":  				case "desc":  					RenderXml (child' values' indent' length);  					break;  				case "#text":  					RenderText (node.Value' values' indent' length);  					break;  				}
Magic Number,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,RenderXml,The following statement contains a magic number: switch (node.LocalName) {  				case "para":  					RenderXml (child' values' indent' length);  					values.Add (string.Empty);  					break;  				case "block":  					RenderXml (child' values' indent + 4' length);  					break;  				case "example":  					RenderXml (child' values' indent + 4' length);  					values.Add (string.Empty);  					break;  				case "code":  				case "desc":  					RenderXml (child' values' indent' length);  					break;  				case "#text":  					RenderText (node.Value' values' indent' length);  					break;  				}
Magic Number,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,CreateBuilder,The following statement contains a magic number: StringBuilder builder = new StringBuilder (80);
Magic Number,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,LoadCommandLineArgs,The following statement contains a magic number: string[] pair = arg.Split (new char [] { '=' }'  					                 2);
Magic Number,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,LoadCommandLineArgs,The following statement contains a magic number: pair.Length == 2
Magic Number,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,PrefixLength,The following statement contains a magic number: return 2;
Magic Number,HyperFastCgi.Configuration,ConfigUtils,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigUtils.cs,GetApplicationsFromCommandLine,The following statement contains a magic number: app.Length < 2 || app.Length > 4
Magic Number,HyperFastCgi.Configuration,ConfigUtils,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigUtils.cs,GetApplicationsFromCommandLine,The following statement contains a magic number: app.Length < 2 || app.Length > 4
Magic Number,HyperFastCgi.Configuration,ConfigUtils,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigUtils.cs,GetApplicationsFromCommandLine,The following statement contains a magic number: app.Length >= 3
Magic Number,HyperFastCgi.Configuration,ConfigUtils,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigUtils.cs,GetApplicationsFromCommandLine,The following statement contains a magic number: app.Length >= 4
Magic Number,HyperFastCgi.AppHosts.AspNet,AspNetNativeWebRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\AspNetNativeWebRequest.cs,AddressFromHostName,The following statement contains a magic number: host == null || host.Length > 126
Magic Number,HyperFastCgi.AppHosts.AspNet,MonoWorkerRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\MonoWorkerRequest.cs,MapPath,The following statement contains a magic number: switch (path [0]) {  			case '~':  				if (path.Length >= 2 && path [1] == '/')  					path = path.Substring (1);  				break;    			case '/':  				if (!inThisApp)  					basePath = HostPhysicalRoot;  				break;  			}
Magic Number,HyperFastCgi.AppHosts.AspNet,MonoWorkerRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\MonoWorkerRequest.cs,ProcessRequest,The following statement contains a magic number: SendStatus (400' "Bad request");
Magic Number,HyperFastCgi.AppHosts.Raw,BaseRawRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\Raw\BaseRawRequest.cs,PrepareHeaders,The following statement contains a magic number: return Encoding.GetEncoding (28591)  				.GetBytes (responseHeadersOutput.ToString ());
Magic Number,HyperFastCgi.AppHosts.Raw,HelloWorldRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\Raw\HelloWorldRequest.cs,Process,The following statement contains a magic number: Status = 200;
Magic Number,HyperFastCgi.Listeners,ManagedFastCgiListener,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\ManagedFastCgiListener.cs,Listen,The following statement contains a magic number: listener.Listen (500);
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ReceiveCallback,The following statement contains a magic number: state.record.RequestId = (ushort)((state.header [2] << 8) + state.header [3]);
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ReceiveCallback,The following statement contains a magic number: state.record.RequestId = (ushort)((state.header [2] << 8) + state.header [3]);
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ReceiveCallback,The following statement contains a magic number: state.record.RequestId = (ushort)((state.header [2] << 8) + state.header [3]);
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ReceiveCallback,The following statement contains a magic number: state.record.BodyLength = (ushort)((state.header [4] << 8) + state.header [5]);
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ReceiveCallback,The following statement contains a magic number: state.record.BodyLength = (ushort)((state.header [4] << 8) + state.header [5]);
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ReceiveCallback,The following statement contains a magic number: state.record.BodyLength = (ushort)((state.header [4] << 8) + state.header [5]);
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ReceiveCallback,The following statement contains a magic number: state.record.PaddingLength = state.header [6];
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ProcessRecord,The following statement contains a magic number: Logger.Write (LogLevel.Debug' "cn={0} read header={1} reqId={2}"' cn' header [1]' (ushort)((header [2] << 8) + header [3]));
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ProcessRecord,The following statement contains a magic number: Logger.Write (LogLevel.Debug' "cn={0} read header={1} reqId={2}"' cn' header [1]' (ushort)((header [2] << 8) + header [3]));
Magic Number,HyperFastCgi.Listeners,FastCgiNetworkConnector,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\FastCgiNetworkConnector.cs,ProcessRecord,The following statement contains a magic number: Logger.Write (LogLevel.Debug' "cn={0} read header={1} reqId={2}"' cn' header [1]' (ushort)((header [2] << 8) + header [3]));
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: record.RequestId = (ushort)((header [2] << 8) + header [3]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: record.RequestId = (ushort)((header [2] << 8) + header [3]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: record.RequestId = (ushort)((header [2] << 8) + header [3]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: record.BodyLength = (ushort)((header [4] << 8) + header [5]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: record.BodyLength = (ushort)((header [4] << 8) + header [5]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: record.BodyLength = (ushort)((header [4] << 8) + header [5]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: record.PaddingLength = header [6];
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord0 header={1} reqId={2}"' listenerTag'  					record.Type' (ushort)((header [2] << 8) + header [3]));
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord0 header={1} reqId={2}"' listenerTag'  					record.Type' (ushort)((header [2] << 8) + header [3]));
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord0 header={1} reqId={2}"' listenerTag'  					record.Type' (ushort)((header [2] << 8) + header [3]));
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: ulong hash = ((ulong)record.RequestId << 32) ^ listenerTag;
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: req.Hash = ((ulong)record.RequestId << 32) ^ listenerTag;
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: switch (record.Type) {  				case RecordType.BeginRequest:  					break;  				case RecordType.Params:  					if (header != null) {  						if (debugEnabled) {  							Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  								header [1]' (ushort)((header [2] << 8) + header [3]));  						}  					}    					if (recordBody != null) {  						FcgiUtils.ParseParameters (recordBody' AddHeader' request);  					} else {  						//FIXME: request.Host can be null  						HeadersSent (request);  					}    					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					break;  				case RecordType.StandardInput:  						//Ready to process  					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					bool final = record.BodyLength == 0;  					AddBodyPart (request' recordBody' final);  					if (final) {  						stopReceive = true;  						Process (request);  					}  					break;  				case RecordType.Data:  					break;  				case RecordType.GetValues:  					//TODO: return server values  					break;  				// Aborts a request when the server aborts.  				//TODO: make Thread.Abort for request  				case RecordType.AbortRequest:  					//FIXME: send it to the HostTransport as is  					//TODO: send error to Connector  					//TODO: send EndRequest to Connector  					//					SendError (request.RequestId' Strings.Connection_AbortRecordReceived);  					//					EndRequest (request.RequestId' -1' ProtocolStatus.RequestComplete);  					break;    				default:  				//TODO: CgiConnector.SendRecord  				//				SendRecord (new Record (Record.ProtocolVersion'  				//					RecordType.UnknownType'  				//					request.RequestId'  				//					new UnknownTypeBody (record.Type).GetData ()));  					break;  				}
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: switch (record.Type) {  				case RecordType.BeginRequest:  					break;  				case RecordType.Params:  					if (header != null) {  						if (debugEnabled) {  							Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  								header [1]' (ushort)((header [2] << 8) + header [3]));  						}  					}    					if (recordBody != null) {  						FcgiUtils.ParseParameters (recordBody' AddHeader' request);  					} else {  						//FIXME: request.Host can be null  						HeadersSent (request);  					}    					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					break;  				case RecordType.StandardInput:  						//Ready to process  					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					bool final = record.BodyLength == 0;  					AddBodyPart (request' recordBody' final);  					if (final) {  						stopReceive = true;  						Process (request);  					}  					break;  				case RecordType.Data:  					break;  				case RecordType.GetValues:  					//TODO: return server values  					break;  				// Aborts a request when the server aborts.  				//TODO: make Thread.Abort for request  				case RecordType.AbortRequest:  					//FIXME: send it to the HostTransport as is  					//TODO: send error to Connector  					//TODO: send EndRequest to Connector  					//					SendError (request.RequestId' Strings.Connection_AbortRecordReceived);  					//					EndRequest (request.RequestId' -1' ProtocolStatus.RequestComplete);  					break;    				default:  				//TODO: CgiConnector.SendRecord  				//				SendRecord (new Record (Record.ProtocolVersion'  				//					RecordType.UnknownType'  				//					request.RequestId'  				//					new UnknownTypeBody (record.Type).GetData ()));  					break;  				}
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: switch (record.Type) {  				case RecordType.BeginRequest:  					break;  				case RecordType.Params:  					if (header != null) {  						if (debugEnabled) {  							Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  								header [1]' (ushort)((header [2] << 8) + header [3]));  						}  					}    					if (recordBody != null) {  						FcgiUtils.ParseParameters (recordBody' AddHeader' request);  					} else {  						//FIXME: request.Host can be null  						HeadersSent (request);  					}    					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					break;  				case RecordType.StandardInput:  						//Ready to process  					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					bool final = record.BodyLength == 0;  					AddBodyPart (request' recordBody' final);  					if (final) {  						stopReceive = true;  						Process (request);  					}  					break;  				case RecordType.Data:  					break;  				case RecordType.GetValues:  					//TODO: return server values  					break;  				// Aborts a request when the server aborts.  				//TODO: make Thread.Abort for request  				case RecordType.AbortRequest:  					//FIXME: send it to the HostTransport as is  					//TODO: send error to Connector  					//TODO: send EndRequest to Connector  					//					SendError (request.RequestId' Strings.Connection_AbortRecordReceived);  					//					EndRequest (request.RequestId' -1' ProtocolStatus.RequestComplete);  					break;    				default:  				//TODO: CgiConnector.SendRecord  				//				SendRecord (new Record (Record.ProtocolVersion'  				//					RecordType.UnknownType'  				//					request.RequestId'  				//					new UnknownTypeBody (record.Type).GetData ()));  					break;  				}
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: switch (record.Type) {  				case RecordType.BeginRequest:  					break;  				case RecordType.Params:  					if (header != null) {  						if (debugEnabled) {  							Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  								header [1]' (ushort)((header [2] << 8) + header [3]));  						}  					}    					if (recordBody != null) {  						FcgiUtils.ParseParameters (recordBody' AddHeader' request);  					} else {  						//FIXME: request.Host can be null  						HeadersSent (request);  					}    					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					break;  				case RecordType.StandardInput:  						//Ready to process  					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					bool final = record.BodyLength == 0;  					AddBodyPart (request' recordBody' final);  					if (final) {  						stopReceive = true;  						Process (request);  					}  					break;  				case RecordType.Data:  					break;  				case RecordType.GetValues:  					//TODO: return server values  					break;  				// Aborts a request when the server aborts.  				//TODO: make Thread.Abort for request  				case RecordType.AbortRequest:  					//FIXME: send it to the HostTransport as is  					//TODO: send error to Connector  					//TODO: send EndRequest to Connector  					//					SendError (request.RequestId' Strings.Connection_AbortRecordReceived);  					//					EndRequest (request.RequestId' -1' ProtocolStatus.RequestComplete);  					break;    				default:  				//TODO: CgiConnector.SendRecord  				//				SendRecord (new Record (Record.ProtocolVersion'  				//					RecordType.UnknownType'  				//					request.RequestId'  				//					new UnknownTypeBody (record.Type).GetData ()));  					break;  				}
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: switch (record.Type) {  				case RecordType.BeginRequest:  					break;  				case RecordType.Params:  					if (header != null) {  						if (debugEnabled) {  							Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  								header [1]' (ushort)((header [2] << 8) + header [3]));  						}  					}    					if (recordBody != null) {  						FcgiUtils.ParseParameters (recordBody' AddHeader' request);  					} else {  						//FIXME: request.Host can be null  						HeadersSent (request);  					}    					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					break;  				case RecordType.StandardInput:  						//Ready to process  					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					bool final = record.BodyLength == 0;  					AddBodyPart (request' recordBody' final);  					if (final) {  						stopReceive = true;  						Process (request);  					}  					break;  				case RecordType.Data:  					break;  				case RecordType.GetValues:  					//TODO: return server values  					break;  				// Aborts a request when the server aborts.  				//TODO: make Thread.Abort for request  				case RecordType.AbortRequest:  					//FIXME: send it to the HostTransport as is  					//TODO: send error to Connector  					//TODO: send EndRequest to Connector  					//					SendError (request.RequestId' Strings.Connection_AbortRecordReceived);  					//					EndRequest (request.RequestId' -1' ProtocolStatus.RequestComplete);  					break;    				default:  				//TODO: CgiConnector.SendRecord  				//				SendRecord (new Record (Record.ProtocolVersion'  				//					RecordType.UnknownType'  				//					request.RequestId'  				//					new UnknownTypeBody (record.Type).GetData ()));  					break;  				}
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: switch (record.Type) {  				case RecordType.BeginRequest:  					break;  				case RecordType.Params:  					if (header != null) {  						if (debugEnabled) {  							Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  								header [1]' (ushort)((header [2] << 8) + header [3]));  						}  					}    					if (recordBody != null) {  						FcgiUtils.ParseParameters (recordBody' AddHeader' request);  					} else {  						//FIXME: request.Host can be null  						HeadersSent (request);  					}    					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					break;  				case RecordType.StandardInput:  						//Ready to process  					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					bool final = record.BodyLength == 0;  					AddBodyPart (request' recordBody' final);  					if (final) {  						stopReceive = true;  						Process (request);  					}  					break;  				case RecordType.Data:  					break;  				case RecordType.GetValues:  					//TODO: return server values  					break;  				// Aborts a request when the server aborts.  				//TODO: make Thread.Abort for request  				case RecordType.AbortRequest:  					//FIXME: send it to the HostTransport as is  					//TODO: send error to Connector  					//TODO: send EndRequest to Connector  					//					SendError (request.RequestId' Strings.Connection_AbortRecordReceived);  					//					EndRequest (request.RequestId' -1' ProtocolStatus.RequestComplete);  					break;    				default:  				//TODO: CgiConnector.SendRecord  				//				SendRecord (new Record (Record.ProtocolVersion'  				//					RecordType.UnknownType'  				//					request.RequestId'  				//					new UnknownTypeBody (record.Type).GetData ()));  					break;  				}
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: switch (record.Type) {  				case RecordType.BeginRequest:  					break;  				case RecordType.Params:  					if (header != null) {  						if (debugEnabled) {  							Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  								header [1]' (ushort)((header [2] << 8) + header [3]));  						}  					}    					if (recordBody != null) {  						FcgiUtils.ParseParameters (recordBody' AddHeader' request);  					} else {  						//FIXME: request.Host can be null  						HeadersSent (request);  					}    					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					break;  				case RecordType.StandardInput:  						//Ready to process  					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					bool final = record.BodyLength == 0;  					AddBodyPart (request' recordBody' final);  					if (final) {  						stopReceive = true;  						Process (request);  					}  					break;  				case RecordType.Data:  					break;  				case RecordType.GetValues:  					//TODO: return server values  					break;  				// Aborts a request when the server aborts.  				//TODO: make Thread.Abort for request  				case RecordType.AbortRequest:  					//FIXME: send it to the HostTransport as is  					//TODO: send error to Connector  					//TODO: send EndRequest to Connector  					//					SendError (request.RequestId' Strings.Connection_AbortRecordReceived);  					//					EndRequest (request.RequestId' -1' ProtocolStatus.RequestComplete);  					break;    				default:  				//TODO: CgiConnector.SendRecord  				//				SendRecord (new Record (Record.ProtocolVersion'  				//					RecordType.UnknownType'  				//					request.RequestId'  				//					new UnknownTypeBody (record.Type).GetData ()));  					break;  				}
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: switch (record.Type) {  				case RecordType.BeginRequest:  					break;  				case RecordType.Params:  					if (header != null) {  						if (debugEnabled) {  							Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  								header [1]' (ushort)((header [2] << 8) + header [3]));  						}  					}    					if (recordBody != null) {  						FcgiUtils.ParseParameters (recordBody' AddHeader' request);  					} else {  						//FIXME: request.Host can be null  						HeadersSent (request);  					}    					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					break;  				case RecordType.StandardInput:  						//Ready to process  					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					bool final = record.BodyLength == 0;  					AddBodyPart (request' recordBody' final);  					if (final) {  						stopReceive = true;  						Process (request);  					}  					break;  				case RecordType.Data:  					break;  				case RecordType.GetValues:  					//TODO: return server values  					break;  				// Aborts a request when the server aborts.  				//TODO: make Thread.Abort for request  				case RecordType.AbortRequest:  					//FIXME: send it to the HostTransport as is  					//TODO: send error to Connector  					//TODO: send EndRequest to Connector  					//					SendError (request.RequestId' Strings.Connection_AbortRecordReceived);  					//					EndRequest (request.RequestId' -1' ProtocolStatus.RequestComplete);  					break;    				default:  				//TODO: CgiConnector.SendRecord  				//				SendRecord (new Record (Record.ProtocolVersion'  				//					RecordType.UnknownType'  				//					request.RequestId'  				//					new UnknownTypeBody (record.Type).GetData ()));  					break;  				}
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,Process,The following statement contains a magic number: switch (record.Type) {  				case RecordType.BeginRequest:  					break;  				case RecordType.Params:  					if (header != null) {  						if (debugEnabled) {  							Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  								header [1]' (ushort)((header [2] << 8) + header [3]));  						}  					}    					if (recordBody != null) {  						FcgiUtils.ParseParameters (recordBody' AddHeader' request);  					} else {  						//FIXME: request.Host can be null  						HeadersSent (request);  					}    					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					break;  				case RecordType.StandardInput:  						//Ready to process  					if (debugEnabled) {  						Logger.Write (LogLevel.Debug' "lt={0} LT::ProcessRecord header={1} reqId={2}"' listenerTag'  							header [1]' (ushort)((header [2] << 8) + header [3]));  					}  					bool final = record.BodyLength == 0;  					AddBodyPart (request' recordBody' final);  					if (final) {  						stopReceive = true;  						Process (request);  					}  					break;  				case RecordType.Data:  					break;  				case RecordType.GetValues:  					//TODO: return server values  					break;  				// Aborts a request when the server aborts.  				//TODO: make Thread.Abort for request  				case RecordType.AbortRequest:  					//FIXME: send it to the HostTransport as is  					//TODO: send error to Connector  					//TODO: send EndRequest to Connector  					//					SendError (request.RequestId' Strings.Connection_AbortRecordReceived);  					//					EndRequest (request.RequestId' -1' ProtocolStatus.RequestComplete);  					break;    				default:  				//TODO: CgiConnector.SendRecord  				//				SendRecord (new Record (Record.ProtocolVersion'  				//					RecordType.UnknownType'  				//					request.RequestId'  				//					new UnknownTypeBody (record.Type).GetData ()));  					break;  				}
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: header [2] = (byte)(requestID >> 8);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: header [2] = (byte)(requestID >> 8);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: header [3] = (byte)(requestID & 0xFF);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: header [4] = (byte)(bodyLength >> 8);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: header [4] = (byte)(bodyLength >> 8);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: header [5] = (byte)(bodyLength & 0xFF);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: header [6] = (byte)0;
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: record.RequestId = (ushort)((header [2] << 8) + header [3]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: record.RequestId = (ushort)((header [2] << 8) + header [3]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: record.RequestId = (ushort)((header [2] << 8) + header [3]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: record.BodyLength = (ushort)((header [4] << 8) + header [5]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: record.BodyLength = (ushort)((header [4] << 8) + header [5]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: record.BodyLength = (ushort)((header [4] << 8) + header [5]);
Magic Number,HyperFastCgi.Transports,BaseManagedListenerTransport,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Transports\BaseManagedListenerTransport.cs,SendRecord,The following statement contains a magic number: record.PaddingLength = header [6];
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,BeginRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\BeginRequestBody.cs,BeginRequestBody,The following statement contains a magic number: record.BodyLength != 8
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,BeginRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\BeginRequestBody.cs,BeginRequestBody,The following statement contains a magic number: flags = (BeginRequestFlags)body [2];
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,BeginRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\BeginRequestBody.cs,BeginRequestBody,The following statement contains a magic number: flags = (BeginRequestFlags)body [2];
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,EndRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\EndRequestBody.cs,GetData,The following statement contains a magic number: byte[] data = new byte [8];
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,EndRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\EndRequestBody.cs,GetData,The following statement contains a magic number: data [0] = (byte)((app >> 24) & 0xFF);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,EndRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\EndRequestBody.cs,GetData,The following statement contains a magic number: data [1] = (byte)((app >> 16) & 0xFF);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,EndRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\EndRequestBody.cs,GetData,The following statement contains a magic number: data [2] = (byte)((app >> 8) & 0xFF);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,EndRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\EndRequestBody.cs,GetData,The following statement contains a magic number: data [2] = (byte)((app >> 8) & 0xFF);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,EndRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\EndRequestBody.cs,GetData,The following statement contains a magic number: data [3] = (byte)((app) & 0xFF);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,EndRequestBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\EndRequestBody.cs,GetData,The following statement contains a magic number: data [4] = (byte)protocol_status;
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,FcgiUtils,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\FcgiUtils.cs,ReformatHttpHeader,The following statement contains a magic number: char[] header = new char[name.Length - 5];
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,FcgiUtils,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\FcgiUtils.cs,ReformatHttpHeader,The following statement contains a magic number: int i = 5;
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,FcgiUtils,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\FcgiUtils.cs,ReformatHttpHeader,The following statement contains a magic number: header [i - 5] = '-';
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,Record,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\Record.cs,ReadUInt16,The following statement contains a magic number: value = (ushort)(value << 8);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,Record,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\Record.cs,GetRecord,The following statement contains a magic number: buffer [2] = (byte)(RequestId >> 8);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,Record,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\Record.cs,GetRecord,The following statement contains a magic number: buffer [2] = (byte)(RequestId >> 8);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,Record,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\Record.cs,GetRecord,The following statement contains a magic number: buffer [3] = (byte)(RequestId & 0xff);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,Record,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\Record.cs,GetRecord,The following statement contains a magic number: buffer [4] = (byte)(BodyLength >> 8);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,Record,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\Record.cs,GetRecord,The following statement contains a magic number: buffer [4] = (byte)(BodyLength >> 8);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,Record,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\Record.cs,GetRecord,The following statement contains a magic number: buffer [5] = (byte)(BodyLength & 0xff);
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,Record,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\Record.cs,GetRecord,The following statement contains a magic number: buffer [6] = PaddingLength;
Magic Number,HyperFastCgi.Helpers.FastCgiProtocol,UnknownTypeBody,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\FastCgiProtocol\UnknownTypeBody.cs,GetData,The following statement contains a magic number: byte[] data = new byte [8];
Magic Number,Mono.WebServer,VPathToHost,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Mono.WebServer\VPathToHost.cs,VPathToHost,The following statement contains a magic number: this.vhost = this.vhost.Substring (2);
Magic Number,Mono.WebServer,VPathToHost,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Helpers\Mono.WebServer\VPathToHost.cs,VPathToHost,The following statement contains a magic number: this.vhost.Length > 2 && this.vhost [1] == '.'
Missing Default,HyperFastCgi.Configuration,ConfigurationManager,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Configuration\ConfigurationManager.cs,RenderXml,The following switch statement is missing a default case: switch (node.LocalName) {  				case "para":  					RenderXml (child' values' indent' length);  					values.Add (string.Empty);  					break;  				case "block":  					RenderXml (child' values' indent + 4' length);  					break;  				case "example":  					RenderXml (child' values' indent + 4' length);  					values.Add (string.Empty);  					break;  				case "code":  				case "desc":  					RenderXml (child' values' indent' length);  					break;  				case "#text":  					RenderText (node.Value' values' indent' length);  					break;  				}
Missing Default,HyperFastCgi.AppHosts.AspNet,MonoWorkerRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\MonoWorkerRequest.cs,MapPath,The following switch statement is missing a default case: switch (path [0]) {  			case '~':  				if (path.Length >= 2 && path [1] == '/')  					path = path.Substring (1);  				break;    			case '/':  				if (!inThisApp)  					basePath = HostPhysicalRoot;  				break;  			}
Missing Default,HyperFastCgi.AppHosts.AspNet,MonoWorkerRequest,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\AppHosts\AspNet\MonoWorkerRequest.cs,GetServerVariable,The following switch statement is missing a default case: switch (name) {  				case "CERT_COOKIE":  					if (cert_cookie == null) {  						if (client == null)  							cert_cookie = String.Empty;  						else  							cert_cookie = client.GetCertHashString ();  					}  					return cert_cookie;  				case "CERT_ISSUER":  					if (cert_issuer == null) {  						if (client == null)  							cert_issuer = String.Empty;  						else  							cert_issuer = client.Issuer;  					}  					return cert_issuer;  				case "CERT_SERIALNUMBER":  					if (cert_serial == null) {  						if (client == null)  							cert_serial = String.Empty;  						else  							cert_serial = client.GetSerialNumberString ();  					}  					return cert_serial;  				case "CERT_SUBJECT":  					if (cert_subject == null) {  						if (client == null)  							cert_subject = String.Empty;  						else  							cert_subject = client.Subject;  					}  					return cert_subject;  				}
Missing Default,HyperFastCgi.Listeners,ManagedFastCgiListener,D:\research\architectureSmells\repos\xplicit_HyperFastCgi\src\HyperFastCgi\Listeners\ManagedFastCgiListener.cs,CreateSocket,The following switch statement is missing a default case: switch (sockType) {  			case AddressFamily.Unix:  				socket = new UnixSocket (address);  				break;  			case AddressFamily.InterNetwork:  				IPEndPoint localEP = new IPEndPoint (IPAddress.Parse (address)' port);  				socket = new TcpSocket (localEP);  				break;  			}
