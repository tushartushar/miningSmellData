Implementation smell,Namespace,Class,File,Method,Description
Long Method,Modern.Provisioning.Async.Function,ModernProvisioning,C:\research\architectureSmells\repos\OfficeDev_PnP\Solutions\O365.Modern.Provisioning\Modern.Provisioning.Async.Function\Modern.Provisioning.Async.Function\ModernProvisioning.cs,Run,The method has 136 lines of code.
Complex Method,Modern.Provisioning.Async.Function,ModernProvisioning,C:\research\architectureSmells\repos\OfficeDev_PnP\Solutions\O365.Modern.Provisioning\Modern.Provisioning.Async.Function\Modern.Provisioning.Async.Function\ModernProvisioning.cs,Run,Cyclomatic complexity of the method is 9
Long Statement,Modern.Provisioning.Async.Function,ModernProvisioning,C:\research\architectureSmells\repos\OfficeDev_PnP\Solutions\O365.Modern.Provisioning\Modern.Provisioning.Async.Function\Modern.Provisioning.Async.Function\ModernProvisioning.cs,Run,The length of the statement  "                var kvClient = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(azureServiceTokenProvider.KeyVaultTokenCallback)); " is 126.
Long Statement,Modern.Provisioning.Async.Function,ModernProvisioning,C:\research\architectureSmells\repos\OfficeDev_PnP\Solutions\O365.Modern.Provisioning\Modern.Provisioning.Async.Function\Modern.Provisioning.Async.Function\ModernProvisioning.cs,Run,The length of the statement  "                                    "{ 'displayName': '" + siteInfo["title"].ToString() + "'' 'groupTypes': ['Unified']' 'mailEnabled': true' 'mailNickname': '" + siteInfo["alias"].ToString().Replace("\r\n"' "").Replace(" "'"") + "'' 'securityEnabled': false' 'owners@odata.bind': ['https://graph.microsoft.com/v1.0/users/" + userId + "']' 'visibility': 'Private' }"; " is 331.
Magic Number,Modern.Provisioning.Async.Function,ModernProvisioning,C:\research\architectureSmells\repos\OfficeDev_PnP\Solutions\O365.Modern.Provisioning\Modern.Provisioning.Async.Function\Modern.Provisioning.Async.Function\ModernProvisioning.cs,Run,The following statement contains a magic number: switch (siteType.ToLower())                      {                          case "communicationsite":                              var ctx = context.CreateSiteAsync(new CommunicationSiteCollectionCreationInformation                              {                                  Title = siteInfo["title"].ToString()'                                  Owner = siteInfo["owner"].ToString()'                                  Lcid = 1033'                                  Description = siteInfo["description"].ToString()'                                  Url = spSite + "/sites/" + siteInfo["alias"].ToString()'                              }).GetAwaiter().GetResult();                              // Add OWner                              User user = ctx.Web.EnsureUser(siteInfo["owner"].ToString());                              ctx.Web.Context.Load(user);                              ctx.Web.Context.ExecuteQueryRetry();                              ctx.Web.AssociatedOwnerGroup.Users.AddUser(user);                              ctx.Web.AssociatedOwnerGroup.Update();                              ctx.Web.Context.ExecuteQueryRetry();                              break;                          case "teamsite":                              var ctxTeamsite = context.CreateSiteAsync(new TeamSiteCollectionCreationInformation                              {                                  DisplayName = siteInfo["title"].ToString()'                                  Description = siteInfo["description"].ToString()'                                  Alias = siteInfo["alias"].ToString()'                                  IsPublic = false'                              }).GetAwaiter().GetResult();                              siteUrl = ctxTeamsite.Url;                              // Add OWner                              User userTeamSite = ctxTeamsite.Web.EnsureUser(siteInfo["owner"].ToString());                              ctxTeamsite.Web.Context.Load(userTeamSite);                              ctxTeamsite.Web.Context.ExecuteQueryRetry();                              ctxTeamsite.Web.AssociatedOwnerGroup.Users.AddUser(userTeamSite);                              ctxTeamsite.Web.AssociatedOwnerGroup.Update();                              ctxTeamsite.Web.Context.ExecuteQueryRetry();                              break;                          case "teams":                              string token = Graph.getToken();                              log.Info("Access Token: " + token);                              string userId = string.Empty;                              string groupId = string.Empty;                              if (string.IsNullOrEmpty(token) == false)                              {                                  userId = Graph.getUser(token' siteInfo["owner"].ToString());                                  log.Info("userId: " + userId);                              }                              if (string.IsNullOrEmpty(userId) == false)                              {                                  string dataPost =                                       "{ 'displayName': '" + siteInfo["title"].ToString() + "'' 'groupTypes': ['Unified']' 'mailEnabled': true' 'mailNickname': '" + siteInfo["alias"].ToString().Replace("\r\n"' "").Replace(" "'"") + "'' 'securityEnabled': false' 'owners@odata.bind': ['https://graph.microsoft.com/v1.0/users/" + userId + "']' 'visibility': 'Private' }";                                  groupId = Graph.createUnifiedGroup(token' dataPost);                                  log.Info("userId: " + groupId);                                  //Graph.addOwnerToUnifiedGroup(token' groupId' userId);                                  //removeOwnerToUnifiedGroup(token' groupId' userId);                              }                              siteUrl = siteInfo["title"].ToString();                              log.Info("Teams ready: " + siteUrl);                              break;                      }
Missing Default,Modern.Provisioning.Async.Function,ModernProvisioning,C:\research\architectureSmells\repos\OfficeDev_PnP\Solutions\O365.Modern.Provisioning\Modern.Provisioning.Async.Function\Modern.Provisioning.Async.Function\ModernProvisioning.cs,Run,The following switch statement is missing a default case: switch (siteType.ToLower())                      {                          case "communicationsite":                              var ctx = context.CreateSiteAsync(new CommunicationSiteCollectionCreationInformation                              {                                  Title = siteInfo["title"].ToString()'                                  Owner = siteInfo["owner"].ToString()'                                  Lcid = 1033'                                  Description = siteInfo["description"].ToString()'                                  Url = spSite + "/sites/" + siteInfo["alias"].ToString()'                              }).GetAwaiter().GetResult();                              // Add OWner                              User user = ctx.Web.EnsureUser(siteInfo["owner"].ToString());                              ctx.Web.Context.Load(user);                              ctx.Web.Context.ExecuteQueryRetry();                              ctx.Web.AssociatedOwnerGroup.Users.AddUser(user);                              ctx.Web.AssociatedOwnerGroup.Update();                              ctx.Web.Context.ExecuteQueryRetry();                              break;                          case "teamsite":                              var ctxTeamsite = context.CreateSiteAsync(new TeamSiteCollectionCreationInformation                              {                                  DisplayName = siteInfo["title"].ToString()'                                  Description = siteInfo["description"].ToString()'                                  Alias = siteInfo["alias"].ToString()'                                  IsPublic = false'                              }).GetAwaiter().GetResult();                              siteUrl = ctxTeamsite.Url;                              // Add OWner                              User userTeamSite = ctxTeamsite.Web.EnsureUser(siteInfo["owner"].ToString());                              ctxTeamsite.Web.Context.Load(userTeamSite);                              ctxTeamsite.Web.Context.ExecuteQueryRetry();                              ctxTeamsite.Web.AssociatedOwnerGroup.Users.AddUser(userTeamSite);                              ctxTeamsite.Web.AssociatedOwnerGroup.Update();                              ctxTeamsite.Web.Context.ExecuteQueryRetry();                              break;                          case "teams":                              string token = Graph.getToken();                              log.Info("Access Token: " + token);                              string userId = string.Empty;                              string groupId = string.Empty;                              if (string.IsNullOrEmpty(token) == false)                              {                                  userId = Graph.getUser(token' siteInfo["owner"].ToString());                                  log.Info("userId: " + userId);                              }                              if (string.IsNullOrEmpty(userId) == false)                              {                                  string dataPost =                                       "{ 'displayName': '" + siteInfo["title"].ToString() + "'' 'groupTypes': ['Unified']' 'mailEnabled': true' 'mailNickname': '" + siteInfo["alias"].ToString().Replace("\r\n"' "").Replace(" "'"") + "'' 'securityEnabled': false' 'owners@odata.bind': ['https://graph.microsoft.com/v1.0/users/" + userId + "']' 'visibility': 'Private' }";                                  groupId = Graph.createUnifiedGroup(token' dataPost);                                  log.Info("userId: " + groupId);                                  //Graph.addOwnerToUnifiedGroup(token' groupId' userId);                                  //removeOwnerToUnifiedGroup(token' groupId' userId);                              }                              siteUrl = siteInfo["title"].ToString();                              log.Info("Teams ready: " + siteUrl);                              break;                      }
