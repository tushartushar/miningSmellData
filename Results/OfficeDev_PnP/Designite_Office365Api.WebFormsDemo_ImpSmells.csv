Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Office365Api.WebFormsDemo.Account,ForgotPassword,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Account\Forgot.aspx.cs,Forgot,The length of the statement  "                // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=320771 " is 139.
Long Statement,Office365Api.WebFormsDemo.Account,ForgotPassword,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Account\Forgot.aspx.cs,Forgot,The length of the statement  "                //manager.SendEmail(user.Id' "Reset Password"' "Please reset your password by clicking <a href=\"" + callbackUrl + "\">here</a>."); " is 131.
Long Statement,Office365Api.WebFormsDemo.Account,OpenAuthProviders,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Account\OpenAuthProviders.ascx.cs,Page_Load,The length of the statement  "                string redirectUrl = ResolveUrl(String.Format(CultureInfo.InvariantCulture' "~/Account/RegisterExternalLogin?{0}={1}&returnUrl={2}"' IdentityHelper.ProviderNameKey' provider' ReturnUrl)); " is 187.
Long Statement,Office365Api.WebFormsDemo.Account,Register,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Account\Register.aspx.cs,CreateUser_Click,The length of the statement  "                // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=320771 " is 139.
Long Statement,Office365Api.WebFormsDemo.Account,Register,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Account\Register.aspx.cs,CreateUser_Click,The length of the statement  "                //manager.SendEmail(user.Id' "Confirm your account"' "Please confirm your account by clicking <a href=\"" + callbackUrl + "\">here</a>."); " is 138.
Long Statement,Office365Api.WebFormsDemo.Account,RegisterExternalLogin,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Account\RegisterExternalLogin.aspx.cs,Page_Load,The length of the statement  "                    var verifiedloginInfo = Context.GetOwinContext().Authentication.GetExternalLoginInfo(IdentityHelper.XsrfKey' User.Identity.GetUserId()); " is 136.
Long Statement,Office365Api.WebFormsDemo.Account,RegisterExternalLogin,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Account\RegisterExternalLogin.aspx.cs,CreateAndLoginUser,The length of the statement  "                    // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=320771 " is 139.
Long Statement,Office365Api.WebFormsDemo.Account,TwoFactorAuthenticationSignIn,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Account\TwoFactorAuthenticationSignIn.aspx.cs,CodeSubmit_Click,The length of the statement  "            var result = signinManager.TwoFactorSignIn<ApplicationUser' string>(SelectedProvider.Value' Code.Text' isPersistent: rememberMe' rememberBrowser: RememberBrowser.Checked); " is 171.
Long Statement,Office365Api.WebFormsDemo,ApplicationUserManager,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\App_Start\IdentityConfig.cs,Create,The length of the statement  "            // Register two factor authentication providers. This application uses Phone and Emails as a step of receiving a code for verifying the user " is 140.
Long Statement,Office365Api.WebFormsDemo,ApplicationUserManager,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\App_Start\IdentityConfig.cs,Create,The length of the statement  "                manager.UserTokenProvider = new DataProtectorTokenProvider<ApplicationUser>(dataProtectionProvider.Create("ASP.NET Identity")); " is 127.
Long Statement,Office365Api.WebFormsDemo,Startup,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\App_Start\Startup.Auth.cs,ConfigureAuth,The length of the statement  "                        // If there is a code in the OpenID Connect response' redeem it for an access token and refresh token' and store those away. " is 124.
Long Statement,Office365Api.WebFormsDemo,Startup,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\App_Start\Startup.Auth.cs,ConfigureAuth,The length of the statement  "                            String tenantId = context.AuthenticationTicket.Identity.FindFirst("http://schemas.microsoft.com/identity/claims/tenantid").Value; " is 129.
Long Statement,Office365Api.WebFormsDemo,Startup,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\App_Start\Startup.Auth.cs,ConfigureAuth,The length of the statement  "                            AuthenticationContext authContext = new AuthenticationContext(String.Format("{0}/{1}"' AuthenticationHelper.AuthorizationUri' tenantId)' new ADALTokenCache(userObjectId)); " is 171.
Long Statement,Office365Api.WebFormsDemo,Startup,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\App_Start\Startup.Auth.cs,ConfigureAuth,The length of the statement  "                            AuthenticationResult result = authContext.AcquireTokenByAuthorizationCode(code' new Uri(HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Path))' credential' Office365ServicesUris.AADGraphAPIResourceId); " is 208.
Long Statement,Office365Api.WebFormsDemo,IdentityHelper,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Models\IdentityModels.cs,GetUserConfirmationRedirectUrl,The length of the statement  "            var absoluteUri = "/Account/Confirm?" + CodeKey + "=" + HttpUtility.UrlEncode(code) + "&" + UserIdKey + "=" + HttpUtility.UrlEncode(userId); " is 140.
Long Statement,Office365Api.WebFormsDemo,IdentityHelper,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Models\IdentityModels.cs,IsLocalUrl,The length of the statement  "            return !string.IsNullOrEmpty(url) && ((url[0] == '/' && (url.Length == 1 || (url[1] != '/' && url[1] != '\\'))) || (url.Length > 1 && url[0] == '~' && url[1] == '/')); " is 167.
Long Statement,Office365Api.WebFormsDemo,OnBoarding,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Onboarding\OnBoarding.aspx.cs,SignUpCommand_Click,The length of the statement  "            // this is necessary if we want to prevent attackers from provisioning themselves to access our app without having gone through our onboarding process (e.g. payments' etc) " is 171.
Long Statement,Office365Api.WebFormsDemo,OnBoarding,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Onboarding\OnBoarding.aspx.cs,SignUpCommand_Click,The length of the statement  "                "https://login.windows.net/common/oauth2/authorize?response_type=code&client_id={0}&resource={1}&redirect_uri={2}&state={3}"' " is 125.
Long Statement,Office365Api.WebFormsDemo,OnBoarding,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Onboarding\OnBoarding.aspx.cs,SignUpCommand_Click,The length of the statement  "            //if the prospect customer wants to provision the app for all users in his/her tenant' the request must be modified accordingly " is 127.
Long Statement,Office365Api.WebFormsDemo.Models,IdentityHelper,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Models\IdentityModels.cs,GetUserConfirmationRedirectUrl,The length of the statement  "            var absoluteUri = "/Account/Confirm?" + CodeKey + "=" + HttpUtility.UrlEncode(code) + "&" + UserIdKey + "=" + HttpUtility.UrlEncode(userId); " is 140.
Long Statement,Office365Api.WebFormsDemo.Models,IdentityHelper,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Models\IdentityModels.cs,IsLocalUrl,The length of the statement  "            return !string.IsNullOrEmpty(url) && ((url[0] == '/' && (url.Length == 1 || (url[1] != '/' && url[1] != '\\'))) || (url.Length > 1 && url[0] == '~' && url[1] == '/')); " is 167.
Magic Number,Office365Api.WebFormsDemo.Account,OpenAuthProviders,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Account\OpenAuthProviders.ascx.cs,Page_Load,The following statement contains a magic number: if (IsPostBack)              {                  var provider = Request.Form["provider"];                  if (provider == null)                  {                      return;                  }                  // Request a redirect to the external login provider                  string redirectUrl = ResolveUrl(String.Format(CultureInfo.InvariantCulture' "~/Account/RegisterExternalLogin?{0}={1}&returnUrl={2}"' IdentityHelper.ProviderNameKey' provider' ReturnUrl));                  var properties = new AuthenticationProperties() { RedirectUri = redirectUrl };                  // Add xsrf verification when linking accounts                  if (Context.User.Identity.IsAuthenticated)                  {                      properties.Dictionary[IdentityHelper.XsrfKey] = Context.User.Identity.GetUserId();                  }                  Context.GetOwinContext().Authentication.Challenge(properties' provider);                  Response.StatusCode = 401;                  Response.End();              }
Magic Number,Office365Api.WebFormsDemo,ApplicationUserManager,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\App_Start\IdentityConfig.cs,Create,The following statement contains a magic number: manager.PasswordValidator = new PasswordValidator              {                  RequiredLength = 6'                  RequireNonLetterOrDigit = true'                  RequireDigit = true'                  RequireLowercase = true'                  RequireUppercase = true'              };
Magic Number,Office365Api.WebFormsDemo,ApplicationUserManager,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\App_Start\IdentityConfig.cs,Create,The following statement contains a magic number: manager.DefaultAccountLockoutTimeSpan = TimeSpan.FromMinutes(5);
Magic Number,Office365Api.WebFormsDemo,ApplicationUserManager,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\App_Start\IdentityConfig.cs,Create,The following statement contains a magic number: manager.MaxFailedAccessAttemptsBeforeLockout = 5;
Magic Number,Office365Api.WebFormsDemo.Office365API,Default,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Office365API\Default.aspx.cs,ListFilesCommand_Click,The following statement contains a magic number: foreach (var item in myFiles.Take(10))              {                  results.Add(String.Format(                      "URL: {0}"'                      !String.IsNullOrEmpty(item.WebUrl) ? item.WebUrl : String.Empty));              }
Magic Number,Office365Api.WebFormsDemo.Office365API,Default,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Office365API\Default.aspx.cs,ListContactsCommand_Click,The following statement contains a magic number: foreach (var item in contacts.Take(10))              {                  results.Add(String.Format(                      "Name: {0} - Email: {1}"'                      !String.IsNullOrEmpty(item.DisplayName) ? item.DisplayName : String.Empty'                      item.EmailAddresses != null ? item.EmailAddresses.First().Address : String.Empty));              }
Magic Number,Office365Api.WebFormsDemo.Office365API,Default,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Office365API\Default.aspx.cs,ListEmailsCommand_Click,The following statement contains a magic number: foreach (var item in mails.Take(10))              {                  results.Add(String.Format(                      "From: {0} - Subject: {1}"'                      item.From != null ? item.From.EmailAddress.Address : ""'                      !String.IsNullOrEmpty(item.Subject) ? item.Subject : String.Empty));              }
Magic Number,Office365Api.WebFormsDemo.Onboarding,ProcessCode,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.WebFormsDemo\Onboarding\ProcessCode.aspx.cs,Page_Load,The following statement contains a magic number: if (db.Tenants.FirstOrDefault(a => a.IssValue == state) == null)              {                  failedOnBoarding.Visible = true;                  errorMessage.Text = error_description;                  errorDescription.Text = error_description;              }              else              {                  successedOnBoarding.Visible = true;                    // ---if the response is indeed from a request we generated                  // ------get a token for the Graph' that will provide us with information abut the caller                  ClientCredential credential = new ClientCredential(AuthenticationHelper.ClientId' AuthenticationHelper.SharedSecret);                    AuthenticationContext authContext = new AuthenticationContext(AuthenticationHelper.AuthorityMultitenant);                  AuthenticationResult result = authContext.AcquireTokenByAuthorizationCode(                      code' new Uri(Request.Url.GetLeftPart(UriPartial.Path))' credential);                    var myTenant = db.Tenants.FirstOrDefault(a => a.IssValue == state);                  // if this was an admin consent' save the tenant                  if (myTenant.AdminConsented)                  {                      // ------read the tenantID out of the Graph token and use it to create the issuer string                      string issuer = String.Format("https://sts.windows.net/{0}/"' result.TenantId);                      myTenant.IssValue = issuer;                  }                  else                  //otherwise' remove the temporary entry and save just the user                  {                      if (db.Users.FirstOrDefault(a => (a.UPN == result.UserInfo.DisplayableId) && (a.TenantID == result.TenantId)) == null)                      {                          db.Users.Add(new User { UPN = result.UserInfo.DisplayableId' TenantID = result.TenantId });                      }                      db.Tenants.Remove(myTenant);                  }                    // remove older' unclaimed entries                  DateTime tenMinsAgo = DateTime.Now.Subtract(new TimeSpan(0' 10' 0)); // workaround for Linq to entities                  var garbage = db.Tenants.Where(a => (!a.IssValue.StartsWith("https") && (a.Created < tenMinsAgo)));                  foreach (Tenant t in garbage)                      db.Tenants.Remove(t);                    db.SaveChanges();              }
