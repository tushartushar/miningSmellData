Implementation smell,Namespace,Class,File,Method,Description
Long Method,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The method has 158 lines of code.
Long Method,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,rdbList_SelectedIndexChanged,The method has 139 lines of code.
Complex Method,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,rdbList_SelectedIndexChanged,Cyclomatic complexity of the method is 8
Long Parameter List,Contoso.Office365.common,SharePointContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,SharePointContext,The method has 5 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber
Long Parameter List,Contoso.Office365.common,SharePointContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Contoso.Office365.common,SharePointAcsContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,SharePointAcsContext,The method has 7 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextToken' contextTokenObj
Long Parameter List,Contoso.Office365.common,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Contoso.Office365.common,SharePointHighTrustContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,SharePointHighTrustContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity
Long Parameter List,Contoso.Office365.common,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,GetAccessToken,The method has 5 parameters. Parameters: authorizationCode' targetPrincipalName' targetHost' targetRealm' redirectUri
Long Parameter List,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,GetClientContextWithAuthorizationCode,The method has 5 parameters. Parameters: targetUrl' targetPrincipalName' authorizationCode' targetRealm' redirectUri
Long Parameter List,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,IssueToken,The method has 9 parameters. Parameters: sourceApplication' issuerApplication' sourceRealm' targetApplication' targetRealm' targetApplicationHostName' trustedForDelegation' claims' appOnly
Long Parameter List,Contoso.Office365.common,SharePointContextToken,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,SharePointContextToken,The method has 5 parameters. Parameters: issuer' audience' validFrom' validTo' claims
Long Parameter List,Contoso.Office365.common,SharePointContextToken,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,SharePointContextToken,The method has 7 parameters. Parameters: issuer' audience' validFrom' validTo' claims' issuerToken' actorToken
Long Parameter List,Contoso.Office365.common,SharePointContextToken,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,SharePointContextToken,The method has 6 parameters. Parameters: issuer' audience' validFrom' validTo' claims' signingCredentials
Long Parameter List,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,SendEmailNotification,The method has 6 parameters. Parameters: siteURL' oldOwnerName' newOwnerName' oldSiteOwnerEmail' newSiteOwnerEmail' usersSecondary
Long Identifier,Contoso.Office365.common,EmailConfig,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Email\EmailConfig.cs,,The length of the parameter CONFIG_SITEOWNERCHANGETEMPLATE is 30.
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_CurrentUserName is 34.
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_CurrentUserEmail is 35.
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_CurrentSiteUrl is 33.
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_CurrentSiteTitle is 35.
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_ShortPageTitle is 33.
Long Identifier,Contoso.Office365.common,SharePointContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,GetDatabaseConnectionString,The length of the parameter LocalDBInstanceForDebuggingKey is 30.
Long Identifier,Contoso.Office365.common,SharePointContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the parameter SPHasRedirectedToSharePointKey is 30.
Long Identifier,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,,The length of the parameter AcsMetadataEndPointRelativeUrl is 30.
Long Identifier,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,,The length of the parameter TrustedForImpersonationClaimType is 32.
Long Identifier,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,,The length of the parameter ClientSigningCertificatePassword is 32.
Long Identifier,Contoso.Office365.common,AcsMetadataParser,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,GetMetadataDocument,The length of the parameter acsMetadataEndpointUrlWithRealm is 31.
Long Statement,Contoso.Office365.common,EmailHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Email\EmailHelper.cs,SendSiteOwnerChangeEmail,The length of the statement  "                        AlternateView htmlView = AlternateView.CreateAlternateViewFromString(_emailConfig.GetSiteOwnerChangeEmailTemplateContent(message)' null' "text/html"); " is 150.
Long Statement,Contoso.Office365.common,JsonHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\JsonHelper.cs,Serialize,The length of the statement  "            System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer(obj.GetType()); " is 154.
Long Statement,Contoso.Office365.common,JsonHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\JsonHelper.cs,Deserialize,The length of the statement  "            System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer(obj.GetType()); " is 154.
Long Statement,Contoso.Office365.common,PeoplePickerHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\PeoplePickerHelper.cs,GetPeoplePickerSearchData,The length of the statement  "            ClientResult<string> clientResult = Microsoft.SharePoint.ApplicationPages.ClientPickerQuery.ClientPeoplePickerWebServiceInterface.ClientPeoplePickerSearchUser(context' querryParams); " is 182.
Long Statement,Contoso.Office365.common,EncryptionUtility,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Security\EncryptionUtility.cs,Encrypt,The length of the statement  "            X509Certificate2 certificate = X509CertificateUtility.LoadCertificate(StoreName.My' StoreLocation.LocalMachine' thumbPrint); " is 124.
Long Statement,Contoso.Office365.common,EncryptionUtility,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Security\EncryptionUtility.cs,Decrypt,The length of the statement  "            X509Certificate2 certificate = X509CertificateUtility.LoadCertificate(StoreName.My' StoreLocation.LocalMachine' thumbPrint); " is 124.
Long Statement,Contoso.Office365.common,SharePointContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            // Removes the values that are included in {StandardTokens}' as {StandardTokens} will be inserted at the beginning of the query string. " is 135.
Long Statement,Contoso.Office365.common,SharePointContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            string redirectUrlString = TokenHelper.GetAppContextTokenRequestUrl(spHostUrl.AbsoluteUri' Uri.EscapeDataString(returnUrlString)); " is 130.
Long Statement,Contoso.Office365.common,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointAcsContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextTokenString' contextToken); " is 132.
Long Statement,Contoso.Office365.common,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            if (logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null) " is 131.
Long Statement,Contoso.Office365.common,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointHighTrustContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity); " is 123.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,GetAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithRefreshToken(clientId' ClientSecret' refreshToken' resource); " is 151.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,GetAppOnlyAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithClientCredentials(clientId' ClientSecret' resource); " is 142.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,CreateAppEventClientContext,The length of the statement  "            Uri sharepointUrl = useAppWeb ? properties.AppEventProperties.AppWebFullUrl : properties.AppEventProperties.HostWebFullUrl; " is 123.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,GetClientContextWithAuthorizationCode,The length of the statement  "            return GetClientContextWithAuthorizationCode(targetUrl' SharePointPrincipal' authorizationCode' GetRealmFromTargetUrl(new Uri(targetUrl))' redirectUri); " is 152.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,CreateAcsClientContextForUrl,The length of the statement  "            SharePointContextToken contextToken = ReadAndValidateContextToken(contextTokenString' OperationContext.Current.IncomingMessageHeaders.To.Host); " is 143.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,IssueToken,The length of the statement  "            string issuer = string.IsNullOrEmpty(sourceRealm) ? issuerApplication : string.Format("{0}@{1}"' issuerApplication' sourceRealm); " is 129.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,IssueToken,The length of the statement  "            string nameid = string.IsNullOrEmpty(sourceRealm) ? sourceApplication : string.Format("{0}@{1}"' sourceApplication' sourceRealm); " is 129.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,IssueToken,The length of the statement  "            List<JsonWebTokenClaim> outerClaims = null == claims ? new List<JsonWebTokenClaim>() : new List<JsonWebTokenClaim>(claims); " is 123.
Long Statement,Contoso.Office365.common,SharePointContextToken,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,Create,The length of the statement  "            return new SharePointContextToken(contextToken.Issuer' contextToken.Audience' contextToken.ValidFrom' contextToken.ValidTo' contextToken.Claims); " is 145.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,Page_Load,The length of the statement  "                Log.LogFileSystem(string.Format("Started changing ownership for Site Collection - {0}  "' GetCurrentSiteCollectionURL())); " is 122.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,Page_Load,The length of the statement  "                    EventLog.WriteEntry(source' string.Format("Started changing ownership for Site Collection {0}"' GetCurrentSiteCollectionURL())' EventLogEntryType.Information' 7000); " is 165.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,Page_Load,The length of the statement  "                    SCALink.HRef = (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL) + "/_layouts/15/mngsiteadmin.aspx"; " is 124.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                                Log.LogFileSystem(string.Format("Error happened in setting access request for Site Collection - {0}  "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL))); " is 180.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                                SendEmailNotification(GetCurrentSiteCollectionURL()' _oldSiteOwnerName' clientContext.Site.Owner.Title' _oldSiteOwnerEmail' clientContext.Site.Owner.Email' peoplePickerSecondaryUsers); " is 184.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                            EventLog.WriteEntry(source' string.Format("Completed changing ownership for Site Collection")' EventLogEntryType.Information' 7000); " is 132.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                            Log.LogFileSystem(string.Format("Changed the ownership from {0} to {1}  "' _oldSiteOwnerEmail' clientContext.Site.Owner.Email)); " is 128.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                            Log.LogFileSystem(string.Format("Site Collection Ownership is changed successfully for Site Collection - {0}  "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL))); " is 189.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                            ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessage"' "alert('Site Collection Ownership is changed successfully!!'); window.location='" + " is 159.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                    Response.Redirect((string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL) + "/_layouts/15/settings.aspx"' false); " is 131.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                    Log.LogFileSystem(string.Format("Error Occurred in changing ownership for Site Collection - {0}' error is {1} - {2}  "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL)' ex.Message' ex.StackTrace)); " is 223.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                    EventLog.WriteEntry(source' string.Format("Error Occurred in changing ownership for Site Collection' error is {0}"' ex.Message)' EventLogEntryType.Error' 7001); " is 160.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The length of the statement  "                    ScriptManager.RegisterStartupScript(this' GetType()' "Exception"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true); " is 140.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,GetPeoplePickerData,The length of the statement  "            //peoplepickerhelper will get the needed values from the querrystring' get data from sharepoint' and return a result in Json format " is 131.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCancel_Click,The length of the statement  "            EventLog.WriteEntry(source' string.Format("Canceled changing ownership for Site Collection")' EventLogEntryType.Information' 7000); " is 131.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCancel_Click,The length of the statement  "            Response.Redirect((string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL) + "/_layouts/15/settings.aspx"' false); " is 131.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,rdbList_SelectedIndexChanged,The length of the statement  "            ScriptManager.RegisterStartupScript(this' GetType()' "NoSCADefault"' "document.getElementById('spanChangeOwnerOption').style.display = 'none';"' true); " is 151.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,rdbList_SelectedIndexChanged,The length of the statement  "                                ScriptManager.RegisterStartupScript(this' GetType()' "NoSCA"' "document.getElementById('spanChangeOwnerOption').style.display = 'block';"' true); " is 145.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,rdbList_SelectedIndexChanged,The length of the statement  "                    Log.LogFileSystem(string.Format("Error occurred for Site Collection {0} in getting site collection administrators.  Error is {1} "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL)' ex.Message)); " is 220.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,ddlistSCA_SelectedIndexChanged,The length of the statement  "                Log.LogFileSystem(string.Format("Error occurred for Site Collection {0} in choosing a site collection administrator.  Error is {1} "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL)' ex.Message)); " is 222.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,GetContext,The length of the statement  "            var adminToken = TokenHelper.GetAppOnlyAccessToken(TokenHelper.SharePointPrincipal' tenantUri.Authority' adminRealm).AccessToken; " is 129.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,IsRealUser,The length of the statement  "                    UserProfilePropertiesForUser userForUser = new UserProfilePropertiesForUser(ctxTenant' user.LoginName' profilePropertyNames); " is 125.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,IsRealUser,The length of the statement  "                Log.LogFileSystem(string.Format("Error happened in validating if the user is real - {0}"' ex.Message) + DateTime.Now.ToString()); " is 129.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,IsUserSiteAdmin,The length of the statement  "                Log.LogFileSystem(string.Format("Error happened in checking if the user is a site admin - {0}"' ex.Message) + DateTime.Now.ToString()); " is 135.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,IsUserTheSiteOwner,The length of the statement  "                Log.LogFileSystem(string.Format("Error happened in checking if the user is same as site owner - {0}"' ex.Message) + DateTime.Now.ToString()); " is 141.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,IsUserInSupportedDomain,The length of the statement  "                Log.LogFileSystem(string.Format("Error happened in checking if the user is in supported domain - {0}"' ex.Message) + DateTime.Now.ToString()); " is 142.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,GetCurrentUserName,The length of the statement  "                Log.LogFileSystem(string.Format("Error happened in getting logged in User's Name - {0}"' ex.Message) + DateTime.Now.ToString()); " is 128.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,GetCurrentUserEmail,The length of the statement  "                Log.LogFileSystem(string.Format("Error happened in getting logged in User's Email - {0}"' ex.Message) + DateTime.Now.ToString()); " is 129.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,GetOthersUserName,The length of the statement  "                UserProfilePropertiesForUser userForUser = new UserProfilePropertiesForUser(clientContext' user.LoginName' profilePropertyNames); " is 129.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,GetOthersUserEmail,The length of the statement  "                UserProfilePropertiesForUser userForUser = new UserProfilePropertiesForUser(clientContext' user.LoginName' profilePropertyNames); " is 129.
Long Statement,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,GetCurrentUserManager,The length of the statement  "                Log.LogFileSystem(string.Format("Error happened in getting Current User Manager - {0}"' ex.Message) + DateTime.Now.ToString()); " is 127.
Complex Conditional,Contoso.Office365.common,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,CreateSharePointContext,The conditional expression  "logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null"  is complex.
Empty Catch Block,Contoso.Office365.common,EmailHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Email\EmailHelper.cs,SendSiteOwnerChangeEmail,The method has an empty catch block.
Empty Catch Block,Contoso.Office365.common,Log,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Log.cs,LogFileSystem,The method has an empty catch block.
Empty Catch Block,Contoso.Office365.common,Log,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Log.cs,CheckLogFiles,The method has an empty catch block.
Empty Catch Block,Contoso.Office365.common,SharePointAcsContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\SharePointContext.cs,RenewAccessTokenIfNeeded,The method has an empty catch block.
Empty Catch Block,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,SendEmailNotification,The method has an empty catch block.
Magic Number,Contoso.Office365.common,Log,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Log.cs,CheckLogFiles,The following statement contains a magic number: try              {                  var logFolder = ConfigurationManager.AppSettings["OutputFileLocation"];                    var logFiles = Directory.GetFiles(logFolder' "*.log"' SearchOption.TopDirectoryOnly);                  if (logFiles == null || logFiles.Length == 0) return;                    //var assemblyName = GetAppAssembly().GetName().Name;                  var assemblyName = APP_NAME;                    foreach (string logFile in logFiles)                  {                      if (logFile.Contains(assemblyName + "_"))                      {                          if (File.GetCreationTime(logFile) < DateTime.Now.AddDays(-3))                          {                              File.Delete(logFile);                          }                      }                  }              }              catch { }
Magic Number,Contoso.Office365.common,PeoplePickerHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\PeoplePickerHelper.cs,GetPeoplePickerSearchData,The following statement contains a magic number: querryParams.MaximumEntitySuggestions = 2000;
Magic Number,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
Magic Number,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
Magic Number,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  Log.LogFileSystem(string.Format("Started changing ownership for Site Collection - {0}  "' GetCurrentSiteCollectionURL()));                    // prefill people pickers with current user                  var spContext = SharePointContextProvider.Current.GetSharePointContext(Context);                  using (var clientContext = spContext.CreateUserClientContextForSPHost())                  {                      clientContext.Load(clientContext.Site' siteurl => siteurl.Url);                      clientContext.ExecuteQuery();                        EventLog.WriteEntry(source' string.Format("Started changing ownership for Site Collection {0}"' GetCurrentSiteCollectionURL())' EventLogEntryType.Information' 7000);                      Master.Hdn_Master_CurrentSiteUrl.Value = GetCurrentSiteCollectionURL();                        clientContext.Load(clientContext.Web' web => web.Title);                      clientContext.ExecuteQuery();                      Master.Hdn_Master_CurrentSiteTitle.Value = clientContext.Web.Title;                        //Only Site Owner or SCA can change                      clientContext.Load(clientContext.Web' user => user.CurrentUser);                      clientContext.ExecuteQuery();                      User currentUser = clientContext.Web.CurrentUser;                      if (!currentUser.IsSiteAdmin)                          btnCreate.Enabled = false;                        string userName = currentUser.Title;                      Master.Hdn_Master_CurrentUserName.Value = GetCurrentUserName();                      Master.Hdn_Master_CurrentUserEmail.Value = GetCurrentUserEmail();                        //Site Owner                      clientContext.Load(clientContext.Web);                      clientContext.ExecuteQuery();                      siteURL = GetCurrentSiteCollectionURL();                      lblsitename.Text = siteURL;                        clientContext.Load(clientContext.Site' user => user.Owner);                      clientContext.ExecuteQuery();                      User siteOwner = clientContext.Site.Owner;                        _oldSiteOwnerName = GetOthersUserName(siteOwner);                      _oldSiteOwnerEmail = GetOthersUserEmail(siteOwner);                        if (siteOwner.Title != _unLicensedOwner)                      {                          lblSiteOwner.Text = _oldSiteOwnerName;                          var email = _oldSiteOwnerEmail;                          if (!string.IsNullOrEmpty(email))                          {                              hyperlinkSiteOwnerEmail.Text = email;                              hyperlinkSiteOwnerEmail.NavigateUrl = "mailto:" + _oldSiteOwnerEmail;                          }                      }                      else                      {                          lblSiteOwner.Text = "Owner not defined' please choose one from below";                      }                        if (GetCurrentUserEmail() == _oldSiteOwnerEmail)                      {                          rdbList.Items[0].Enabled = false;                          rdbList.Items[0].Attributes.Add("style"' "color:grey");                      }                        //Check if Manager is null                      var currentUserManager = GetCurrentUserManager();                      if (currentUserManager == null || currentUserManager == string.Empty || currentUserManager == siteOwner.LoginName)                      {                          rdbList.Items[1].Enabled = false;                          rdbList.Items[1].Attributes.Add("style"' "color:grey");                      }                        //SCA Link                      SCALink.HRef = (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL) + "/_layouts/15/mngsiteadmin.aspx";                  }              }
Magic Number,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The following statement contains a magic number: if (rdbList.SelectedIndex == -1)              {                }                else              {                  siteURL = GetCurrentSiteCollectionURL();                  try                  {                      User owner = null;                      bool isValidDomainAccount = false;                      using (var clientContext = GetContext(siteURL))                      {                          if (rdbList.SelectedItem.Value == "myself" || rdbList.SelectedItem.Value == "manager")                          {                              owner = clientContext.Web.EnsureUser(ddSelectedUser.Text);                              var userSelected = clientContext.Web.EnsureUser(ddSelectedUser.Text);                                clientContext.Load(userSelected);                              clientContext.ExecuteQuery();                              if (IsUserInSupportedDomain(userSelected.Email))                                  isValidDomainAccount = true;                          }                            else if (rdbList.SelectedItem.Value == "sca")                          {                              owner = clientContext.Web.EnsureUser(ddlistSCA.SelectedValue);                              var userSelectedSCA = clientContext.Web.EnsureUser(ddlistSCA.SelectedValue);                              clientContext.Load(userSelectedSCA);                              clientContext.ExecuteQuery();                              if (IsUserInSupportedDomain(userSelectedSCA.Email))                                  isValidDomainAccount = true;                          }                          else                          {                              List<PeoplePickerUser> users = JsonHelper.Deserialize<List<PeoplePickerUser>>(hdnAdministrators.Value);                              foreach (var user in users)                              {                                  owner = clientContext.Web.EnsureUser(user.Name);                                    var userSelectedOther = clientContext.Web.EnsureUser(user.Name);                                  clientContext.Load(userSelectedOther);                                  clientContext.ExecuteQuery();                                  if (IsUserInSupportedDomain(owner.Email))                                      isValidDomainAccount = true;                              }                              }                            if (isValidDomainAccount)                          {                              clientContext.Load(clientContext.Site' user => user.Owner);                              clientContext.ExecuteQuery();                              User siteOwner = clientContext.Site.Owner;                              _oldSiteOwnerName = GetOthersUserName(siteOwner);                              _oldSiteOwnerEmail = GetOthersUserEmail(siteOwner);                                clientContext.Site.Owner = owner;                              clientContext.Site.Owner.Update();                              clientContext.Load(clientContext.Site.Owner);                              clientContext.ExecuteQuery();                                //Explicitely add OldSiteOwner to SCA                              var oldSiteOwner = clientContext.Web.EnsureUser(_oldSiteOwnerEmail);                              clientContext.Load(oldSiteOwner);                              clientContext.ExecuteQuery();                              if (!oldSiteOwner.IsSiteAdmin)                              {                                  oldSiteOwner.IsSiteAdmin = true;                                  oldSiteOwner.Update();                                  clientContext.ExecuteQuery();                              }                                clientContext.Load(clientContext.Web);                              clientContext.ExecuteQuery();                                //Site Collection Administrators                              List<PeoplePickerUser> peoplePickerSecondaryUsers = new List<PeoplePickerUser>();                              UserCollection userCollection = clientContext.Web.SiteUsers;                              clientContext.Load(userCollection);                              clientContext.ExecuteQuery();                                ClientContext ctxTenant = GetContext(WebConfigurationManager.AppSettings.Get("TenantAdminUrl"));                              bool siteOwnerFound = false;                              foreach (User user in userCollection)                              {                                  if (IsRealUser(user' ctxTenant))                                  {                                      if (IsUserSiteAdmin(user))                                      {                                          if (!siteOwnerFound)                                          {                                              if (IsUserTheSiteOwner(user' _oldSiteOwnerEmail))                                              {                                                  siteOwnerFound = true;                                              }                                              else                                                  peoplePickerSecondaryUsers.Add(new PeoplePickerUser                                                  {                                                      Name = GetOthersUserName(user)'                                                      Email = GetOthersUserEmail(user)'                                                      Login = user.LoginName                                                  });                                          }                                          else                                              peoplePickerSecondaryUsers.Add(new PeoplePickerUser                                              {                                                  Name = GetOthersUserName(user)'                                                  Email = GetOthersUserEmail(user)'                                                  Login = user.LoginName                                              });                                            //if (!IsUserTheSiteOwner(user' _oldSiteOwnerEmail))                                          //{                                          //    peoplePickerSecondaryUsers.Add(new PeoplePickerUser                                          //    {                                          //        Name = GetOthersUserName(user)'                                          //        Email = GetOthersUserEmail(user)'                                          //        Login = user.LoginName                                          //    });                                          //}                                      }                                  }                              }                                try                              {                                  if (!owner.IsSiteAdmin)                                  {                                      owner.IsSiteAdmin = true;                                      owner.Update();                                      clientContext.ExecuteQuery();                                  }                                    //AccessRequestSettings                                  clientContext.Load(clientContext.Web' w => w.RequestAccessEmail);                                  clientContext.ExecuteQuery();                                  clientContext.Web.RequestAccessEmail = clientContext.Site.Owner.Email;                                  clientContext.Web.Update();                                  clientContext.Load(clientContext.Web' w => w.RequestAccessEmail);                                  clientContext.ExecuteQuery();                              }                              catch (Exception ex)                              {                                  Log.LogFileSystem(string.Format("Error happened in setting access request for Site Collection - {0}  "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL)));                              }                                if (_oldSiteOwnerEmail != owner.Email)                                  SendEmailNotification(GetCurrentSiteCollectionURL()' _oldSiteOwnerName' clientContext.Site.Owner.Title' _oldSiteOwnerEmail' clientContext.Site.Owner.Email' peoplePickerSecondaryUsers);                                EventLog.WriteEntry(source' string.Format("Completed changing ownership for Site Collection")' EventLogEntryType.Information' 7000);                                Log.LogFileSystem(string.Format("Changed the ownership from {0} to {1}  "' _oldSiteOwnerEmail' clientContext.Site.Owner.Email));                              Log.LogFileSystem(string.Format("Site Collection Ownership is changed successfully for Site Collection - {0}  "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL)));                              Log.LogFileSystem(string.Empty);                                ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessage"' "alert('Site Collection Ownership is changed successfully!!'); window.location='" +                                                                   (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL) + "/_layouts/15/settings.aspx';"' true);                            }                      }                    }                  catch (System.Threading.ThreadAbortException ex)                  {                      Response.Redirect((string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL) + "/_layouts/15/settings.aspx"' false);                  }                  catch (Exception ex)                  {                      Log.LogFileSystem(string.Format("Error Occurred in changing ownership for Site Collection - {0}' error is {1} - {2}  "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL)' ex.Message' ex.StackTrace));                      Log.LogFileSystem(string.Empty);                        EventLog.WriteEntry(source' string.Format("Error Occurred in changing ownership for Site Collection' error is {0}"' ex.Message)' EventLogEntryType.Error' 7001);                      ScriptManager.RegisterStartupScript(this' GetType()' "Exception"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true);                  }              }
Magic Number,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCreate_Click,The following statement contains a magic number: if (rdbList.SelectedIndex == -1)              {                }                else              {                  siteURL = GetCurrentSiteCollectionURL();                  try                  {                      User owner = null;                      bool isValidDomainAccount = false;                      using (var clientContext = GetContext(siteURL))                      {                          if (rdbList.SelectedItem.Value == "myself" || rdbList.SelectedItem.Value == "manager")                          {                              owner = clientContext.Web.EnsureUser(ddSelectedUser.Text);                              var userSelected = clientContext.Web.EnsureUser(ddSelectedUser.Text);                                clientContext.Load(userSelected);                              clientContext.ExecuteQuery();                              if (IsUserInSupportedDomain(userSelected.Email))                                  isValidDomainAccount = true;                          }                            else if (rdbList.SelectedItem.Value == "sca")                          {                              owner = clientContext.Web.EnsureUser(ddlistSCA.SelectedValue);                              var userSelectedSCA = clientContext.Web.EnsureUser(ddlistSCA.SelectedValue);                              clientContext.Load(userSelectedSCA);                              clientContext.ExecuteQuery();                              if (IsUserInSupportedDomain(userSelectedSCA.Email))                                  isValidDomainAccount = true;                          }                          else                          {                              List<PeoplePickerUser> users = JsonHelper.Deserialize<List<PeoplePickerUser>>(hdnAdministrators.Value);                              foreach (var user in users)                              {                                  owner = clientContext.Web.EnsureUser(user.Name);                                    var userSelectedOther = clientContext.Web.EnsureUser(user.Name);                                  clientContext.Load(userSelectedOther);                                  clientContext.ExecuteQuery();                                  if (IsUserInSupportedDomain(owner.Email))                                      isValidDomainAccount = true;                              }                              }                            if (isValidDomainAccount)                          {                              clientContext.Load(clientContext.Site' user => user.Owner);                              clientContext.ExecuteQuery();                              User siteOwner = clientContext.Site.Owner;                              _oldSiteOwnerName = GetOthersUserName(siteOwner);                              _oldSiteOwnerEmail = GetOthersUserEmail(siteOwner);                                clientContext.Site.Owner = owner;                              clientContext.Site.Owner.Update();                              clientContext.Load(clientContext.Site.Owner);                              clientContext.ExecuteQuery();                                //Explicitely add OldSiteOwner to SCA                              var oldSiteOwner = clientContext.Web.EnsureUser(_oldSiteOwnerEmail);                              clientContext.Load(oldSiteOwner);                              clientContext.ExecuteQuery();                              if (!oldSiteOwner.IsSiteAdmin)                              {                                  oldSiteOwner.IsSiteAdmin = true;                                  oldSiteOwner.Update();                                  clientContext.ExecuteQuery();                              }                                clientContext.Load(clientContext.Web);                              clientContext.ExecuteQuery();                                //Site Collection Administrators                              List<PeoplePickerUser> peoplePickerSecondaryUsers = new List<PeoplePickerUser>();                              UserCollection userCollection = clientContext.Web.SiteUsers;                              clientContext.Load(userCollection);                              clientContext.ExecuteQuery();                                ClientContext ctxTenant = GetContext(WebConfigurationManager.AppSettings.Get("TenantAdminUrl"));                              bool siteOwnerFound = false;                              foreach (User user in userCollection)                              {                                  if (IsRealUser(user' ctxTenant))                                  {                                      if (IsUserSiteAdmin(user))                                      {                                          if (!siteOwnerFound)                                          {                                              if (IsUserTheSiteOwner(user' _oldSiteOwnerEmail))                                              {                                                  siteOwnerFound = true;                                              }                                              else                                                  peoplePickerSecondaryUsers.Add(new PeoplePickerUser                                                  {                                                      Name = GetOthersUserName(user)'                                                      Email = GetOthersUserEmail(user)'                                                      Login = user.LoginName                                                  });                                          }                                          else                                              peoplePickerSecondaryUsers.Add(new PeoplePickerUser                                              {                                                  Name = GetOthersUserName(user)'                                                  Email = GetOthersUserEmail(user)'                                                  Login = user.LoginName                                              });                                            //if (!IsUserTheSiteOwner(user' _oldSiteOwnerEmail))                                          //{                                          //    peoplePickerSecondaryUsers.Add(new PeoplePickerUser                                          //    {                                          //        Name = GetOthersUserName(user)'                                          //        Email = GetOthersUserEmail(user)'                                          //        Login = user.LoginName                                          //    });                                          //}                                      }                                  }                              }                                try                              {                                  if (!owner.IsSiteAdmin)                                  {                                      owner.IsSiteAdmin = true;                                      owner.Update();                                      clientContext.ExecuteQuery();                                  }                                    //AccessRequestSettings                                  clientContext.Load(clientContext.Web' w => w.RequestAccessEmail);                                  clientContext.ExecuteQuery();                                  clientContext.Web.RequestAccessEmail = clientContext.Site.Owner.Email;                                  clientContext.Web.Update();                                  clientContext.Load(clientContext.Web' w => w.RequestAccessEmail);                                  clientContext.ExecuteQuery();                              }                              catch (Exception ex)                              {                                  Log.LogFileSystem(string.Format("Error happened in setting access request for Site Collection - {0}  "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL)));                              }                                if (_oldSiteOwnerEmail != owner.Email)                                  SendEmailNotification(GetCurrentSiteCollectionURL()' _oldSiteOwnerName' clientContext.Site.Owner.Title' _oldSiteOwnerEmail' clientContext.Site.Owner.Email' peoplePickerSecondaryUsers);                                EventLog.WriteEntry(source' string.Format("Completed changing ownership for Site Collection")' EventLogEntryType.Information' 7000);                                Log.LogFileSystem(string.Format("Changed the ownership from {0} to {1}  "' _oldSiteOwnerEmail' clientContext.Site.Owner.Email));                              Log.LogFileSystem(string.Format("Site Collection Ownership is changed successfully for Site Collection - {0}  "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL)));                              Log.LogFileSystem(string.Empty);                                ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessage"' "alert('Site Collection Ownership is changed successfully!!'); window.location='" +                                                                   (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL) + "/_layouts/15/settings.aspx';"' true);                            }                      }                    }                  catch (System.Threading.ThreadAbortException ex)                  {                      Response.Redirect((string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL) + "/_layouts/15/settings.aspx"' false);                  }                  catch (Exception ex)                  {                      Log.LogFileSystem(string.Format("Error Occurred in changing ownership for Site Collection - {0}' error is {1} - {2}  "' (string.IsNullOrEmpty(siteURL) ? GetCurrentSiteCollectionURL() : siteURL)' ex.Message' ex.StackTrace));                      Log.LogFileSystem(string.Empty);                        EventLog.WriteEntry(source' string.Format("Error Occurred in changing ownership for Site Collection' error is {0}"' ex.Message)' EventLogEntryType.Error' 7001);                      ScriptManager.RegisterStartupScript(this' GetType()' "Exception"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true);                  }              }
Magic Number,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,btnCancel_Click,The following statement contains a magic number: EventLog.WriteEntry(source' string.Format("Canceled changing ownership for Site Collection")' EventLogEntryType.Information' 7000);
Missing Default,Governance.ChangeOwnershipWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ChangeOwnership\Governance.ChangeOwnershipWeb\Pages\Default.aspx.cs,Page_PreInit,The following switch statement is missing a default case: switch (SharePointContextProvider.CheckRedirectionStatus(Context' out redirectUrl))              {                  case RedirectionStatus.Ok:                      return;                  case RedirectionStatus.ShouldRedirect:                      Response.Redirect(redirectUrl.AbsoluteUri' endResponse: true);                      break;                  case RedirectionStatus.CanNotRedirect:                      Response.Write("An error occurred while processing your request.");                      Response.End();                      break;              }
