Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,RecurrenceHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\RecurrenceHelper.cs,AppendWeekly,Cyclomatic complexity of the method is 9
Complex Method,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,RecurrenceHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\RecurrenceHelper.cs,AppendMonthlyByDay,Cyclomatic complexity of the method is 12
Complex Method,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,RecurrenceHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\RecurrenceHelper.cs,AppendYearlyByDay,Cyclomatic complexity of the method is 14
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,SharePointContext,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,SharePointContext,The method has 5 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,SharePointAcsContext,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,SharePointAcsContext,The method has 7 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextToken' contextTokenObj
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,SharePointHighTrustContext,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,SharePointHighTrustContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,GetAccessToken,The method has 5 parameters. Parameters: authorizationCode' targetPrincipalName' targetHost' targetRealm' redirectUri
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,GetClientContextWithAuthorizationCode,The method has 5 parameters. Parameters: targetUrl' targetPrincipalName' authorizationCode' targetRealm' redirectUri
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,IssueToken,The method has 9 parameters. Parameters: sourceApplication' issuerApplication' sourceRealm' targetApplication' targetRealm' targetApplicationHostName' trustedForDelegation' claims' appOnly
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,SharePointContextToken,The method has 5 parameters. Parameters: issuer' audience' validFrom' validTo' claims
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,SharePointContextToken,The method has 7 parameters. Parameters: issuer' audience' validFrom' validTo' claims' issuerToken' actorToken
Long Parameter List,BusinessApps.RemoteCalendarAccessWeb,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,SharePointContextToken,The method has 6 parameters. Parameters: issuer' audience' validFrom' validTo' claims' signingCredentials
Long Identifier,BusinessApps.RemoteCalendarAccessWeb,SharePointContext,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,GetDatabaseConnectionString,The length of the parameter LocalDBInstanceForDebuggingKey is 30.
Long Identifier,BusinessApps.RemoteCalendarAccessWeb,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the parameter SPHasRedirectedToSharePointKey is 30.
Long Identifier,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,,The length of the parameter AcsMetadataEndPointRelativeUrl is 30.
Long Identifier,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,,The length of the parameter TrustedForImpersonationClaimType is 32.
Long Identifier,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,,The length of the parameter ClientSigningCertificatePassword is 32.
Long Identifier,BusinessApps.RemoteCalendarAccessWeb,AcsMetadataParser,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,GetMetadataDocument,The length of the parameter acsMetadataEndpointUrlWithRealm is 31.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            // Removes the values that are included in {StandardTokens}' as {StandardTokens} will be inserted at the beginning of the query string. " is 135.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            string redirectUrlString = TokenHelper.GetAppContextTokenRequestUrl(spHostUrl.AbsoluteUri' Uri.EscapeDataString(returnUrlString)); " is 130.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointAcsContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextTokenString' contextToken); " is 132.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            if (logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null) " is 131.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointHighTrustContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity); " is 123.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,GetAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithRefreshToken(clientId' ClientSecret' refreshToken' resource); " is 151.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,GetAppOnlyAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithClientCredentials(clientId' ClientSecret' resource); " is 142.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,CreateAppEventClientContext,The length of the statement  "            Uri sharepointUrl = useAppWeb ? properties.AppEventProperties.AppWebFullUrl : properties.AppEventProperties.HostWebFullUrl; " is 123.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,GetClientContextWithAuthorizationCode,The length of the statement  "            return GetClientContextWithAuthorizationCode(targetUrl' SharePointPrincipal' authorizationCode' GetRealmFromTargetUrl(new Uri(targetUrl))' redirectUri); " is 152.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,CreateAcsClientContextForUrl,The length of the statement  "            SharePointContextToken contextToken = ReadAndValidateContextToken(contextTokenString' OperationContext.Current.IncomingMessageHeaders.To.Host); " is 143.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,IssueToken,The length of the statement  "            string issuer = string.IsNullOrEmpty(sourceRealm) ? issuerApplication : string.Format("{0}@{1}"' issuerApplication' sourceRealm); " is 129.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,IssueToken,The length of the statement  "            string nameid = string.IsNullOrEmpty(sourceRealm) ? sourceApplication : string.Format("{0}@{1}"' sourceApplication' sourceRealm); " is 129.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,IssueToken,The length of the statement  "            List<JsonWebTokenClaim> outerClaims = null == claims ? new List<JsonWebTokenClaim>() : new List<JsonWebTokenClaim>(claims); " is 123.
Long Statement,BusinessApps.RemoteCalendarAccessWeb,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,Create,The length of the statement  "            return new SharePointContextToken(contextToken.Issuer' contextToken.Audience' contextToken.ValidFrom' contextToken.ValidTo' contextToken.Claims); " is 145.
Long Statement,BusinessApps.RemoteCalendarAccessWeb.BusinessLayer.Logic,RemoteCalendarAccessManager,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\BusinessLayer\Logic\RemoteCalendarAccessManager.cs,UpdateLastAccessTime,The length of the statement  "            remoteCalendarAccess = new BLM.RemoteCalendarAccess(repository.UpdateRemoteCalendarAccess(remoteCalendarAccess.ToDataModel<DLM.RemoteCalendarAccess>())); " is 153.
Long Statement,BusinessApps.RemoteCalendarAccessWeb.Controllers,HomeController,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Controllers\HomeController.cs,Index,The length of the statement  "            FileContentResult result = File(System.Text.Encoding.Default.GetBytes(calendar.ToString())' "text/calendar"' "calendar.ics"); " is 125.
Long Statement,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Event,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Event.cs,Parse,The length of the statement  "                RecurrenceID = sharepointListItem["RecurrenceID"] != null ? DateTime.Parse(sharepointListItem["RecurrenceID"].ToString()) : DateTime.MinValue' " is 142.
Long Statement,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Event,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Event.cs,Parse,The length of the statement  "                MasterSeriesItemID = sharepointListItem["MasterSeriesItemID"] == null ? -1 : (int)sharepointListItem["MasterSeriesItemID"]' " is 123.
Long Statement,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Event,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Event.cs,ToString,The length of the statement  "                List<Event> exceptions = Events.Where(e => e.MasterSeriesItemID == MasterSeriesItemID).OrderBy(e => e.Created).ToList<Event>(); " is 127.
Long Statement,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,RecurrenceHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\RecurrenceHelper.cs,AppendWeekly,The length of the statement  "            builder.Append("WEEKLY;INTERVAL=" + weekly.weekFrequency + ";WKST=" + ((string)json.recurrence.rule.firstDayOfWeek).ToUpperInvariant()); " is 136.
Long Statement,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Timezone,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Timezone.cs,Parse,The length of the statement  "            tz._timeZoneInfo = TimeZoneInfo.GetSystemTimeZones().Where(t => t.DisplayName.Replace("&"' "and") == timeZoneInfoDescription).First(); " is 134.
Long Statement,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Timezone,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Timezone.cs,ToString,The length of the statement  "                    builder.AppendLine("DTSTART:" + dateStart.ToString("yyyyMMddT") + rule.DaylightTransitionEnd.TimeOfDay.ToString("HHmmssZ")); " is 124.
Long Statement,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Timezone,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Timezone.cs,ToString,The length of the statement  "                    builder.AppendLine("DTEND:" + dateEnd.ToString("yyyyMMddT") + rule.DaylightTransitionEnd.TimeOfDay.ToString("HHmmssZ")); " is 120.
Long Statement,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Timezone,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Timezone.cs,ToString,The length of the statement  "                    builder.AppendLine("DTSTART:" + dateStart.ToString("yyyyMMddT") + rule.DaylightTransitionStart.TimeOfDay.ToString("HHmmssZ")); " is 126.
Long Statement,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Timezone,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Timezone.cs,ToString,The length of the statement  "                    builder.AppendLine("DTEND:" + dateEnd.ToString("yyyyMMddT") + rule.DaylightTransitionStart.TimeOfDay.ToString("HHmmssZ")); " is 122.
Long Statement,BusinessApps.RemoteCalendarAccessWeb.Utils,AzureActiveDirectory,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Utils\AzureActiveDirectory.cs,GetClient,The length of the statement  "            ActiveDirectoryClient activeDirectoryClient = new ActiveDirectoryClient(new Uri(baseServiceUri' ConfigurationManager.AppSettings["O365Domain"])'  " is 144.
Long Statement,BusinessApps.RemoteCalendarAccessWeb.Utils,AzureActiveDirectory,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Utils\AzureActiveDirectory.cs,GetUser,The length of the statement  "            IPagedCollection<IUser> users = await _client.Users.Where(u => u.UserPrincipalName == userPrincipalName).ExecuteAsync().ConfigureAwait(false); " is 142.
Complex Conditional,BusinessApps.RemoteCalendarAccessWeb,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,CreateSharePointContext,The conditional expression  "logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null"  is complex.
Complex Conditional,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,RecurrenceHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\RecurrenceHelper.cs,AppendWeekly,The conditional expression  "weekly.su == "TRUE" || weekly.mo == "TRUE" || weekly.tu == "TRUE" || weekly.we == "TRUE" ||                  weekly.th == "TRUE" || weekly.fr == "TRUE" || weekly.sa == "TRUE""  is complex.
Complex Conditional,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,RecurrenceHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\RecurrenceHelper.cs,AppendMonthlyByDay,The conditional expression  "monthlyByDay.su == "TRUE" || monthlyByDay.mo == "TRUE" || monthlyByDay.tu == "TRUE" || monthlyByDay.we == "TRUE" ||                  monthlyByDay.th == "TRUE" || monthlyByDay.fr == "TRUE" || monthlyByDay.sa == "TRUE""  is complex.
Complex Conditional,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,RecurrenceHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\RecurrenceHelper.cs,AppendYearlyByDay,The conditional expression  "yearlyByDay.su == "TRUE" || yearlyByDay.mo == "TRUE" || yearlyByDay.tu == "TRUE" || yearlyByDay.we == "TRUE" ||                  yearlyByDay.th == "TRUE" || yearlyByDay.fr == "TRUE" || yearlyByDay.sa == "TRUE""  is complex.
Empty Catch Block,BusinessApps.RemoteCalendarAccessWeb,SharePointAcsContext,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\SharePointContext.cs,RenewAccessTokenIfNeeded,The method has an empty catch block.
Magic Number,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
Magic Number,BusinessApps.RemoteCalendarAccessWeb,TokenHelper,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
Magic Number,BusinessApps.RemoteCalendarAccessWeb.Controllers,HomeController,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Controllers\HomeController.cs,AccessDenied,The following statement contains a magic number: Response.StatusCode = 403;
Magic Number,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Event,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Event.cs,ToString,The following statement contains a magic number: if(AllDayEvent)              {                  builder.AppendLine("DTSTART;VALUE=DATE:" + EventDate.ToString("yyyyMMdd"));                    double days = Math.Round(((Double)Duration / (double)(60 * 60 * 24)));                  builder.AppendLine("DTEND;VALUE=DATE:" + EventDate.AddDays(days).ToString("yyyyMMdd"));              }              else              {                  builder.AppendLine("DTSTART:" + EventDate.ToString("yyyyMMddTHHmmssZ"));                  builder.AppendLine("DTEND:" + EventDate.AddSeconds(Duration).ToString("yyyyMMddTHHmmssZ"));              }
Magic Number,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Event,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Event.cs,ToString,The following statement contains a magic number: if(AllDayEvent)              {                  builder.AppendLine("DTSTART;VALUE=DATE:" + EventDate.ToString("yyyyMMdd"));                    double days = Math.Round(((Double)Duration / (double)(60 * 60 * 24)));                  builder.AppendLine("DTEND;VALUE=DATE:" + EventDate.AddDays(days).ToString("yyyyMMdd"));              }              else              {                  builder.AppendLine("DTSTART:" + EventDate.ToString("yyyyMMddTHHmmssZ"));                  builder.AppendLine("DTEND:" + EventDate.AddSeconds(Duration).ToString("yyyyMMddTHHmmssZ"));              }
Magic Number,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Event,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Event.cs,ToString,The following statement contains a magic number: if(AllDayEvent)              {                  builder.AppendLine("DTSTART;VALUE=DATE:" + EventDate.ToString("yyyyMMdd"));                    double days = Math.Round(((Double)Duration / (double)(60 * 60 * 24)));                  builder.AppendLine("DTEND;VALUE=DATE:" + EventDate.AddDays(days).ToString("yyyyMMdd"));              }              else              {                  builder.AppendLine("DTSTART:" + EventDate.ToString("yyyyMMddTHHmmssZ"));                  builder.AppendLine("DTEND:" + EventDate.AddSeconds(Duration).ToString("yyyyMMddTHHmmssZ"));              }
Magic Number,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Timezone,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Timezone.cs,ToString,The following statement contains a magic number: if (!_timeZoneInfo.SupportsDaylightSavingTime)              {                  builder.AppendLine("BEGIN:STANDARD");                  builder.AppendLine("DTSTART:19000101T000000Z");                  builder.AppendLine("TZOFFSETFROM:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset));                  builder.AppendLine("TZOFFSETTO:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset));                  builder.AppendLine("TZNAME:" + _timeZoneInfo.StandardName);                  builder.AppendLine("END:STANDARD");              }              else              {                  foreach (System.TimeZoneInfo.AdjustmentRule rule in _timeZoneInfo.GetAdjustmentRules())                  {                      DateTime dateStart = rule.DateStart.Date == DateTime.MinValue.Date ? new DateTime(1900' 1' 1) : rule.DateStart;                      DateTime dateEnd = rule.DateEnd.Date == DateTime.MaxValue.Date ? new DateTime(2100' 1' 1) : rule.DateEnd;                        builder.AppendLine("BEGIN:STANDARD");                      builder.AppendLine("DTSTART:" + dateStart.ToString("yyyyMMddT") + rule.DaylightTransitionEnd.TimeOfDay.ToString("HHmmssZ"));                      builder.AppendLine("DTEND:" + dateEnd.ToString("yyyyMMddT") + rule.DaylightTransitionEnd.TimeOfDay.ToString("HHmmssZ"));                      builder.AppendLine("TZOFFSETFROM:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset.Add(rule.DaylightDelta)));                      builder.AppendLine("TZOFFSETTO:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset));                      builder.AppendLine("TZNAME:" + _timeZoneInfo.StandardName);                      builder.AppendLine("RRULE:FREQ=YEARLY;BYMONTH=" + rule.DaylightTransitionEnd.Month +                                                          ";BYWEEK=" + rule.DaylightTransitionEnd.Week +                                                          ";BYDAY=" + rule.DaylightTransitionEnd.Day +                                                              GetDayOfWeekCode(rule.DaylightTransitionEnd.DayOfWeek));                      builder.AppendLine("END:STANDARD");                                            builder.AppendLine("BEGIN:DAYLIGHT");                      builder.AppendLine("DTSTART:" + dateStart.ToString("yyyyMMddT") + rule.DaylightTransitionStart.TimeOfDay.ToString("HHmmssZ"));                      builder.AppendLine("DTEND:" + dateEnd.ToString("yyyyMMddT") + rule.DaylightTransitionStart.TimeOfDay.ToString("HHmmssZ"));                      builder.AppendLine("TZOFFSETFROM:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset));                      builder.AppendLine("TZOFFSETTO:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset.Add(rule.DaylightDelta)));                      builder.AppendLine("TZNAME:" + _timeZoneInfo.DaylightName);                      builder.AppendLine("RRULE:FREQ=YEARLY;BYMONTH=" + rule.DaylightTransitionStart.Month +                                                          ";BYWEEK=" + rule.DaylightTransitionStart.Week +                                                          ";BYDAY=" + rule.DaylightTransitionStart.Day +                                                              GetDayOfWeekCode(rule.DaylightTransitionStart.DayOfWeek));                      builder.AppendLine("END:DAYLIGHT");                  }              }
Magic Number,BusinessApps.RemoteCalendarAccess.Models.CalendarModel,Timezone,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Models\CalendarModel\Timezone.cs,ToString,The following statement contains a magic number: if (!_timeZoneInfo.SupportsDaylightSavingTime)              {                  builder.AppendLine("BEGIN:STANDARD");                  builder.AppendLine("DTSTART:19000101T000000Z");                  builder.AppendLine("TZOFFSETFROM:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset));                  builder.AppendLine("TZOFFSETTO:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset));                  builder.AppendLine("TZNAME:" + _timeZoneInfo.StandardName);                  builder.AppendLine("END:STANDARD");              }              else              {                  foreach (System.TimeZoneInfo.AdjustmentRule rule in _timeZoneInfo.GetAdjustmentRules())                  {                      DateTime dateStart = rule.DateStart.Date == DateTime.MinValue.Date ? new DateTime(1900' 1' 1) : rule.DateStart;                      DateTime dateEnd = rule.DateEnd.Date == DateTime.MaxValue.Date ? new DateTime(2100' 1' 1) : rule.DateEnd;                        builder.AppendLine("BEGIN:STANDARD");                      builder.AppendLine("DTSTART:" + dateStart.ToString("yyyyMMddT") + rule.DaylightTransitionEnd.TimeOfDay.ToString("HHmmssZ"));                      builder.AppendLine("DTEND:" + dateEnd.ToString("yyyyMMddT") + rule.DaylightTransitionEnd.TimeOfDay.ToString("HHmmssZ"));                      builder.AppendLine("TZOFFSETFROM:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset.Add(rule.DaylightDelta)));                      builder.AppendLine("TZOFFSETTO:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset));                      builder.AppendLine("TZNAME:" + _timeZoneInfo.StandardName);                      builder.AppendLine("RRULE:FREQ=YEARLY;BYMONTH=" + rule.DaylightTransitionEnd.Month +                                                          ";BYWEEK=" + rule.DaylightTransitionEnd.Week +                                                          ";BYDAY=" + rule.DaylightTransitionEnd.Day +                                                              GetDayOfWeekCode(rule.DaylightTransitionEnd.DayOfWeek));                      builder.AppendLine("END:STANDARD");                                            builder.AppendLine("BEGIN:DAYLIGHT");                      builder.AppendLine("DTSTART:" + dateStart.ToString("yyyyMMddT") + rule.DaylightTransitionStart.TimeOfDay.ToString("HHmmssZ"));                      builder.AppendLine("DTEND:" + dateEnd.ToString("yyyyMMddT") + rule.DaylightTransitionStart.TimeOfDay.ToString("HHmmssZ"));                      builder.AppendLine("TZOFFSETFROM:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset));                      builder.AppendLine("TZOFFSETTO:" + FormatTimeZoneOffset(_timeZoneInfo.BaseUtcOffset.Add(rule.DaylightDelta)));                      builder.AppendLine("TZNAME:" + _timeZoneInfo.DaylightName);                      builder.AppendLine("RRULE:FREQ=YEARLY;BYMONTH=" + rule.DaylightTransitionStart.Month +                                                          ";BYWEEK=" + rule.DaylightTransitionStart.Week +                                                          ";BYDAY=" + rule.DaylightTransitionStart.Day +                                                              GetDayOfWeekCode(rule.DaylightTransitionStart.DayOfWeek));                      builder.AppendLine("END:DAYLIGHT");                  }              }
Missing Default,BusinessApps.RemoteCalendarAccessWeb,SharePointContextFilterAttribute,C:\repos\OfficeDev_PnP\Samples\BusinessApps.RemoteCalendarAccess\BusinessApps.RemoteCalendarAccessWeb\Filters\SharePointContextFilterAttribute.cs,OnActionExecuting,The following switch statement is missing a default case: switch (SharePointContextProvider.CheckRedirectionStatus(filterContext.HttpContext' out redirectUrl))              {                  case RedirectionStatus.Ok:                      return;                  case RedirectionStatus.ShouldRedirect:                      filterContext.Result = new RedirectResult(redirectUrl.AbsoluteUri);                      break;                  case RedirectionStatus.CanNotRedirect:                      filterContext.Result = new ViewResult { ViewName = "Error" };                      break;              }
