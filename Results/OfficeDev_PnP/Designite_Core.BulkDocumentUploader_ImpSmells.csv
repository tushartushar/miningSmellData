Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Contoso.Core,CsvProcessor,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Utilities\CsvProcessor.cs,ParseLineIntoEntries,Cyclomatic complexity of the method is 8
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "            logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Establishing context object to: '{0}'"' entries[this.SiteIndex])); " is 127.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                        FileInfo theFileToUpload = new FileInfo(Path.Combine(this.DirectoryLocation + "\\"' entries[this.FileIndex] + ".xlsx")); " is 120.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                        logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Attempting to {0} file {1}"' this.DocumentAction' theFileToUpload)); " is 129.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                                string cookie = ((SharePointOnlineCredentials)context.Credentials).GetAuthenticationCookie(new Uri(entries[this.SiteIndex])).TrimStart("SPOIDCRL=".ToCharArray()); " is 162.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                                    string theTargetUri = string.Format(CultureInfo.CurrentCulture' "{0}/_api/web/lists/getByTitle('Documents')/RootFolder/Files/add(url='{1}''overwrite='true')?"' entries[this.SiteIndex]' this.FileUploadName); " is 206.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                                        logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "There was a problem with the HTTP request in DocumentAction attribute of XML file")); " is 146.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                                        throw new Exception("The HTTP Request operation is not supported' please check the value of DocumentAction in the XML file"); " is 125.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                                    SPORequest.CookieContainer.Add(new Cookie("SPOIDCRL"' cookie' string.Empty' new Uri(entries[this.SiteIndex]).Authority)); " is 121.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                                    logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Successfully '{0}' file {1}"' this.DocumentAction' theFileToUpload)); " is 130.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "There was an issue performing '{0}' on to the URL '{1}' with exception: {2}"' this.DocumentAction' entries[this.SiteIndex]' ex.Message)); " is 198.
Long Statement,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The length of the statement  "                logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Completed processing URL:'{0}' in {1} seconds"' entries[this.SiteIndex]' IterationSW.ElapsedMilliseconds/1000)); " is 173.
Long Statement,Contoso.Core,Program,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Program.cs,GetPropertyMappingTypes,The length of the statement  "            return Assembly.GetExecutingAssembly().GetExportedTypes().Where(p => p.IsSubclassOf(baseActionType) || p.IsSubclassOf(baseLoggerType)).ToArray(); " is 145.
Long Statement,Contoso.Core,Program,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Program.cs,Main,The length of the statement  "                    logHelper.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Operation completed. Execution time (s) {0}"' sw.Elapsed.TotalSeconds)); " is 136.
Magic Number,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The following statement contains a magic number: try              {                  // Use context of current iteration URL for current user item                  using (ClientContext context = new ClientContext(entries[this.SiteIndex]))                  {                      using (SecureString password = new SecureString())                      {                          foreach (char c in this.Password.ToCharArray())                          {                              password.AppendChar(c);                          }                            context.Credentials = new SharePointOnlineCredentials(this.UserName' password);                            // Get file to upload from directory                          FileInfo theFileToUpload = new FileInfo(Path.Combine(this.DirectoryLocation + "\\"' entries[this.FileIndex] + ".xlsx"));                            logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Attempting to {0} file {1}"' this.DocumentAction' theFileToUpload));                            // Ensure account has permissions to access                          BasePermissions perm = new BasePermissions();                          perm.Set(PermissionKind.AddListItems);                            ConditionalScope scope = new ConditionalScope(context' () => context.Web.DoesUserHavePermissions(perm).Value);                            using(scope.StartScope())                          {                              Stopwatch tempSW = new Stopwatch();                              tempSW.Start();                                int success = 0;                                while(tempSW.Elapsed.TotalSeconds < 20)                              {                                  var digest = context.GetFormDigestDirect();                                    string cookie = ((SharePointOnlineCredentials)context.Credentials).GetAuthenticationCookie(new Uri(entries[this.SiteIndex])).TrimStart("SPOIDCRL=".ToCharArray());                                    using (Stream s = theFileToUpload.OpenRead())                                  {                                      // Define REST string request to upload document to context                                      string theTargetUri = string.Format(CultureInfo.CurrentCulture' "{0}/_api/web/lists/getByTitle('Documents')/RootFolder/Files/add(url='{1}''overwrite='true')?"' entries[this.SiteIndex]' this.FileUploadName);                                        // Define REST HTTP request obkect                                      HttpWebRequest SPORequest = (HttpWebRequest)HttpWebRequest.Create(theTargetUri);                                        // Define HTTP request action method                                      if (this.DocumentAction == "Upload")                                      {                                          SPORequest.Method = "POST";                                      }                                      else if (this.DocumentAction == "Delete")                                      {                                          SPORequest.Method = "DELETE";                                      }                                      else                                      {                                          logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "There was a problem with the HTTP request in DocumentAction attribute of XML file"));                                          throw new Exception("The HTTP Request operation is not supported' please check the value of DocumentAction in the XML file");                                      }                                        // Build out additional HTTP request details                                      SPORequest.Accept = "application/json;odata=verbose";                                      SPORequest.Headers.Add("X-RequestDigest"' digest.DigestValue);                                      SPORequest.ContentLength = s.Length;                                      SPORequest.ContentType = "application/octet-stream";                                        // Handle authentication to context through cookie                                      SPORequest.CookieContainer = new CookieContainer();                                      SPORequest.CookieContainer.Add(new Cookie("SPOIDCRL"' cookie' string.Empty' new Uri(entries[this.SiteIndex]).Authority));                                        // Perform file upload/deletion                                      using (Stream requestStream = SPORequest.GetRequestStream())                                      {                                          s.CopyTo(requestStream);                                      }                                        // Get HTTP response to determine success of operation                                      HttpWebResponse SPOResponse = (HttpWebResponse)SPORequest.GetResponse();                                        logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Successfully '{0}' file {1}"' this.DocumentAction' theFileToUpload));                                      logger.LogOutcome(entries[this.SiteIndex]' "SUCCCESS");                                        success = 1;                                        // Dispose of the HTTP response                                      SPOResponse.Close();                                        break;                                  }                                                                                       }                                tempSW.Stop();                                if (success != 1)                              {                                  throw new Exception("The HTTP Request operation exceeded the timeout of 20 seconds");                              }                            }                      }                  }                }              catch(Exception ex)              {                  logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "There was an issue performing '{0}' on to the URL '{1}' with exception: {2}"' this.DocumentAction' entries[this.SiteIndex]' ex.Message));                  logger.LogOutcome(entries[this.SiteIndex]' "FAILURE");              }              finally              {                  IterationSW.Stop();                  logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Completed processing URL:'{0}' in {1} seconds"' entries[this.SiteIndex]' IterationSW.ElapsedMilliseconds/1000));              }
Magic Number,Contoso.Core,OneDriveMapper,C:\repos\OfficeDev_PnP\Samples\Core.BulkDocumentUploader\Mappers\OneDriveMapper.cs,IterateCollection,The following statement contains a magic number: try              {                  // Use context of current iteration URL for current user item                  using (ClientContext context = new ClientContext(entries[this.SiteIndex]))                  {                      using (SecureString password = new SecureString())                      {                          foreach (char c in this.Password.ToCharArray())                          {                              password.AppendChar(c);                          }                            context.Credentials = new SharePointOnlineCredentials(this.UserName' password);                            // Get file to upload from directory                          FileInfo theFileToUpload = new FileInfo(Path.Combine(this.DirectoryLocation + "\\"' entries[this.FileIndex] + ".xlsx"));                            logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Attempting to {0} file {1}"' this.DocumentAction' theFileToUpload));                            // Ensure account has permissions to access                          BasePermissions perm = new BasePermissions();                          perm.Set(PermissionKind.AddListItems);                            ConditionalScope scope = new ConditionalScope(context' () => context.Web.DoesUserHavePermissions(perm).Value);                            using(scope.StartScope())                          {                              Stopwatch tempSW = new Stopwatch();                              tempSW.Start();                                int success = 0;                                while(tempSW.Elapsed.TotalSeconds < 20)                              {                                  var digest = context.GetFormDigestDirect();                                    string cookie = ((SharePointOnlineCredentials)context.Credentials).GetAuthenticationCookie(new Uri(entries[this.SiteIndex])).TrimStart("SPOIDCRL=".ToCharArray());                                    using (Stream s = theFileToUpload.OpenRead())                                  {                                      // Define REST string request to upload document to context                                      string theTargetUri = string.Format(CultureInfo.CurrentCulture' "{0}/_api/web/lists/getByTitle('Documents')/RootFolder/Files/add(url='{1}''overwrite='true')?"' entries[this.SiteIndex]' this.FileUploadName);                                        // Define REST HTTP request obkect                                      HttpWebRequest SPORequest = (HttpWebRequest)HttpWebRequest.Create(theTargetUri);                                        // Define HTTP request action method                                      if (this.DocumentAction == "Upload")                                      {                                          SPORequest.Method = "POST";                                      }                                      else if (this.DocumentAction == "Delete")                                      {                                          SPORequest.Method = "DELETE";                                      }                                      else                                      {                                          logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "There was a problem with the HTTP request in DocumentAction attribute of XML file"));                                          throw new Exception("The HTTP Request operation is not supported' please check the value of DocumentAction in the XML file");                                      }                                        // Build out additional HTTP request details                                      SPORequest.Accept = "application/json;odata=verbose";                                      SPORequest.Headers.Add("X-RequestDigest"' digest.DigestValue);                                      SPORequest.ContentLength = s.Length;                                      SPORequest.ContentType = "application/octet-stream";                                        // Handle authentication to context through cookie                                      SPORequest.CookieContainer = new CookieContainer();                                      SPORequest.CookieContainer.Add(new Cookie("SPOIDCRL"' cookie' string.Empty' new Uri(entries[this.SiteIndex]).Authority));                                        // Perform file upload/deletion                                      using (Stream requestStream = SPORequest.GetRequestStream())                                      {                                          s.CopyTo(requestStream);                                      }                                        // Get HTTP response to determine success of operation                                      HttpWebResponse SPOResponse = (HttpWebResponse)SPORequest.GetResponse();                                        logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Successfully '{0}' file {1}"' this.DocumentAction' theFileToUpload));                                      logger.LogOutcome(entries[this.SiteIndex]' "SUCCCESS");                                        success = 1;                                        // Dispose of the HTTP response                                      SPOResponse.Close();                                        break;                                  }                                                                                       }                                tempSW.Stop();                                if (success != 1)                              {                                  throw new Exception("The HTTP Request operation exceeded the timeout of 20 seconds");                              }                            }                      }                  }                }              catch(Exception ex)              {                  logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "There was an issue performing '{0}' on to the URL '{1}' with exception: {2}"' this.DocumentAction' entries[this.SiteIndex]' ex.Message));                  logger.LogOutcome(entries[this.SiteIndex]' "FAILURE");              }              finally              {                  IterationSW.Stop();                  logger.LogVerbose(string.Format(CultureInfo.CurrentCulture' "Completed processing URL:'{0}' in {1} seconds"' entries[this.SiteIndex]' IterationSW.ElapsedMilliseconds/1000));              }
