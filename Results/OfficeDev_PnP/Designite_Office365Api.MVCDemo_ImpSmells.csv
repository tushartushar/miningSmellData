Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Office365Api.MVCDemo.Controllers,OnboardingController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\OnboardingController.cs,ProcessCode,The method has 5 parameters. Parameters: code' error' error_description' resource' state
Long Statement,Office365Api.MVCDemo,ApplicationUserManager,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\App_Start\IdentityConfig.cs,Create,The length of the statement  "            // Register two factor authentication providers. This application uses Phone and Emails as a step of receiving a code for verifying the user " is 140.
Long Statement,Office365Api.MVCDemo,Startup,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\App_Start\Startup.Auth.cs,ConfigureAuth,The length of the statement  "                        // If there is a code in the OpenID Connect response' redeem it for an access token and refresh token' and store those away. " is 124.
Long Statement,Office365Api.MVCDemo,Startup,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\App_Start\Startup.Auth.cs,ConfigureAuth,The length of the statement  "                            String tenantId = context.AuthenticationTicket.Identity.FindFirst("http://schemas.microsoft.com/identity/claims/tenantid").Value; " is 129.
Long Statement,Office365Api.MVCDemo,Startup,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\App_Start\Startup.Auth.cs,ConfigureAuth,The length of the statement  "                            AuthenticationContext authContext = new AuthenticationContext(String.Format("{0}/{1}"' AuthenticationHelper.AuthorizationUri' tenantId)' new ADALTokenCache(userObjectId)); " is 171.
Long Statement,Office365Api.MVCDemo,Startup,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\App_Start\Startup.Auth.cs,ConfigureAuth,The length of the statement  "                            AuthenticationResult result = authContext.AcquireTokenByAuthorizationCode(code' new Uri(HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Path))' credential' Office365ServicesUris.AADGraphAPIResourceId); " is 208.
Long Statement,Office365Api.MVCDemo.Controllers,AccountController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\AccountController.cs,Login,The length of the statement  "            var result = await SignInManager.PasswordSignInAsync(model.Email' model.Password' model.RememberMe' shouldLockout: false); " is 122.
Long Statement,Office365Api.MVCDemo.Controllers,AccountController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\AccountController.cs,VerifyCode,The length of the statement  "            var result = await SignInManager.TwoFactorSignInAsync(model.Provider' model.Code' isPersistent: model.RememberMe' rememberBrowser: model.RememberBrowser); " is 154.
Long Statement,Office365Api.MVCDemo.Controllers,AccountController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\AccountController.cs,Register,The length of the statement  "                    // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=320771 " is 139.
Long Statement,Office365Api.MVCDemo.Controllers,AccountController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\AccountController.cs,Register,The length of the statement  "                    // var callbackUrl = Url.Action("ConfirmEmail"' "Account"' new { userId = user.Id' code = code }' protocol: Request.Url.Scheme); " is 128.
Long Statement,Office365Api.MVCDemo.Controllers,AccountController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\AccountController.cs,Register,The length of the statement  "                    // await UserManager.SendEmailAsync(user.Id' "Confirm your account"' "Please confirm your account by clicking <a href=\"" + callbackUrl + "\">here</a>"); " is 153.
Long Statement,Office365Api.MVCDemo.Controllers,AccountController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\AccountController.cs,ForgotPassword,The length of the statement  "                // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=320771 " is 139.
Long Statement,Office365Api.MVCDemo.Controllers,AccountController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\AccountController.cs,ForgotPassword,The length of the statement  "                // var callbackUrl = Url.Action("ResetPassword"' "Account"' new { userId = user.Id' code = code }' protocol: Request.Url.Scheme);		 " is 129.
Long Statement,Office365Api.MVCDemo.Controllers,AccountController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\AccountController.cs,ForgotPassword,The length of the statement  "                // await UserManager.SendEmailAsync(user.Id' "Reset Password"' "Please reset your password by clicking <a href=\"" + callbackUrl + "\">here</a>"); " is 146.
Long Statement,Office365Api.MVCDemo.Controllers,AccountController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\AccountController.cs,SendCode,The length of the statement  "            return RedirectToAction("VerifyCode"' new { Provider = model.SelectedProvider' ReturnUrl = model.ReturnUrl' RememberMe = model.RememberMe }); " is 141.
Long Statement,Office365Api.MVCDemo.Controllers,OnboardingController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\OnboardingController.cs,SignUp,The length of the statement  "            // this is necessary if we want to prevent attackers from provisioning themselves to access our app without having gone through our onboarding process (e.g. payments' etc) " is 171.
Long Statement,Office365Api.MVCDemo.Controllers,OnboardingController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\OnboardingController.cs,SignUp,The length of the statement  "                "https://login.windows.net/common/oauth2/authorize?response_type=code&client_id={0}&resource={1}&redirect_uri={2}&state={3}"' " is 125.
Long Statement,Office365Api.MVCDemo.Controllers,OnboardingController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\OnboardingController.cs,SignUp,The length of the statement  "            //if the prospect customer wants to provision the app for all users in his/her tenant' the request must be modified accordingly " is 127.
Magic Number,Office365Api.MVCDemo,ApplicationUserManager,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\App_Start\IdentityConfig.cs,Create,The following statement contains a magic number: manager.PasswordValidator = new PasswordValidator              {                  RequiredLength = 6'                  RequireNonLetterOrDigit = true'                  RequireDigit = true'                  RequireLowercase = true'                  RequireUppercase = true'              };
Magic Number,Office365Api.MVCDemo,ApplicationUserManager,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\App_Start\IdentityConfig.cs,Create,The following statement contains a magic number: manager.DefaultAccountLockoutTimeSpan = TimeSpan.FromMinutes(5);
Magic Number,Office365Api.MVCDemo,ApplicationUserManager,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\App_Start\IdentityConfig.cs,Create,The following statement contains a magic number: manager.MaxFailedAccessAttemptsBeforeLockout = 5;
Magic Number,Office365Api.MVCDemo.Controllers,HomeController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\HomeController.cs,ListMyFiles,The following statement contains a magic number: foreach (var item in myFiles.Take(10))              {                  model.Items.Add(String.Format(                      "URL: {0}"'                      !String.IsNullOrEmpty(item.WebUrl) ? item.WebUrl : String.Empty));              }
Magic Number,Office365Api.MVCDemo.Controllers,HomeController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\HomeController.cs,ListMyContacts,The following statement contains a magic number: foreach (var item in contacts.Take(10))              {                  model.Items.Add(String.Format(                      "Name: {0} - Email: {1}"'                      !String.IsNullOrEmpty(item.DisplayName) ? item.DisplayName : String.Empty'                      item.EmailAddresses != null ? item.EmailAddresses.First().Address : String.Empty));              }
Magic Number,Office365Api.MVCDemo.Controllers,HomeController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\HomeController.cs,ListMyMessages,The following statement contains a magic number: foreach (var item in mails.Take(10))              {                  model.Items.Add(String.Format(                      "From: {0} - Subject: {1}"'                      item.From != null ? item.From.EmailAddress.Address : ""'                      !String.IsNullOrEmpty(item.Subject) ? item.Subject : String.Empty));              }
Magic Number,Office365Api.MVCDemo.Controllers,OnboardingController,C:\repos\OfficeDev_PnP\Samples\Office365Api.Overview\Office365Api.MVCDemo\Controllers\OnboardingController.cs,ProcessCode,The following statement contains a magic number: if (db.Tenants.FirstOrDefault(a => a.IssValue == state) == null)              {                  // TODO: prettify                  return View("Error");              }              else              {                  // ---if the response is indeed from a request we generated                  // ------get a token for the Graph' that will provide us with information abut the caller                  ClientCredential credential = new ClientCredential(AuthenticationHelper.ClientId' AuthenticationHelper.SharedSecret);                    AuthenticationContext authContext = new AuthenticationContext(AuthenticationHelper.AuthorityMultitenant);                  AuthenticationResult result = authContext.AcquireTokenByAuthorizationCode(                      code' new Uri(Request.Url.GetLeftPart(UriPartial.Path))' credential);                    var myTenant = db.Tenants.FirstOrDefault(a => a.IssValue == state);                  // if this was an admin consent' save the tenant                  if (myTenant.AdminConsented)                  {                      // ------read the tenantID out of the Graph token and use it to create the issuer string                      string issuer = String.Format("https://sts.windows.net/{0}/"' result.TenantId);                      myTenant.IssValue = issuer;                  }                  else                  //otherwise' remove the temporary entry and save just the user                  {                      if (db.Users.FirstOrDefault(a => (a.UPN == result.UserInfo.DisplayableId) && (a.TenantID == result.TenantId)) == null)                      {                          db.Users.Add(new User { UPN = result.UserInfo.DisplayableId' TenantID = result.TenantId });                      }                      db.Tenants.Remove(myTenant);                  }                    // remove older' unclaimed entries                  DateTime tenMinsAgo = DateTime.Now.Subtract(new TimeSpan(0' 10' 0)); // workaround for Linq to entities                  var garbage = db.Tenants.Where(a => (!a.IssValue.StartsWith("https") && (a.Created < tenMinsAgo)));                  foreach (Tenant t in garbage)                      db.Tenants.Remove(t);                    db.SaveChanges();                  // ------return a view claiming success' inviting the user to sign in                  return View();              }
