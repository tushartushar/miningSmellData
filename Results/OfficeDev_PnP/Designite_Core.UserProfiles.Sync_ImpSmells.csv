Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Core.UserProfiles.Sync,SharePointContext,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,SharePointContext,The method has 5 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber
Long Parameter List,Core.UserProfiles.Sync,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Core.UserProfiles.Sync,SharePointAcsContext,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,SharePointAcsContext,The method has 7 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextToken' contextTokenObj
Long Parameter List,Core.UserProfiles.Sync,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Core.UserProfiles.Sync,SharePointHighTrustContext,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,SharePointHighTrustContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity
Long Parameter List,Core.UserProfiles.Sync,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,GetAccessToken,The method has 5 parameters. Parameters: authorizationCode' targetPrincipalName' targetHost' targetRealm' redirectUri
Long Parameter List,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,GetClientContextWithAuthorizationCode,The method has 5 parameters. Parameters: targetUrl' targetPrincipalName' authorizationCode' targetRealm' redirectUri
Long Parameter List,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,IssueToken,The method has 9 parameters. Parameters: sourceApplication' issuerApplication' sourceRealm' targetApplication' targetRealm' targetApplicationHostName' trustedForDelegation' claims' appOnly
Long Parameter List,Core.UserProfiles.Sync,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,SharePointContextToken,The method has 5 parameters. Parameters: issuer' audience' validFrom' validTo' claims
Long Parameter List,Core.UserProfiles.Sync,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,SharePointContextToken,The method has 7 parameters. Parameters: issuer' audience' validFrom' validTo' claims' issuerToken' actorToken
Long Parameter List,Core.UserProfiles.Sync,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,SharePointContextToken,The method has 6 parameters. Parameters: issuer' audience' validFrom' validTo' claims' signingCredentials
Long Identifier,Core.UserProfiles.Sync,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CheckRedirectionStatus,The length of the parameter SPHasRedirectedToSharePointKey is 30.
Long Identifier,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,,The length of the parameter AcsMetadataEndPointRelativeUrl is 30.
Long Identifier,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,,The length of the parameter TrustedForImpersonationClaimType is 32.
Long Identifier,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,,The length of the parameter ClientSigningCertificatePassword is 32.
Long Identifier,Core.UserProfiles.Sync,AcsMetadataParser,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,GetMetadataDocument,The length of the parameter acsMetadataEndpointUrlWithRealm is 31.
Long Statement,Core.UserProfiles.Sync,Program,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\Program.cs,GetUsersFromActiveDirectory,The length of the statement  "                    //Otherwise' the pagedCollection.MorePagesAvailable fails in the while condition and the loop misses the last batch of users. " is 125.
Long Statement,Core.UserProfiles.Sync,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            // Removes the values that are included in {StandardTokens}' as {StandardTokens} will be inserted at the beginning of the query string. " is 135.
Long Statement,Core.UserProfiles.Sync,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            string redirectUrlString = TokenHelper.GetAppContextTokenRequestUrl(spHostUrl.AbsoluteUri' Uri.EscapeDataString(returnUrlString)); " is 130.
Long Statement,Core.UserProfiles.Sync,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointAcsContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextTokenString' contextToken); " is 132.
Long Statement,Core.UserProfiles.Sync,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            if (logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null) " is 131.
Long Statement,Core.UserProfiles.Sync,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointHighTrustContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity); " is 123.
Long Statement,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,GetAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithRefreshToken(clientId' ClientSecret' refreshToken' resource); " is 151.
Long Statement,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,GetAppOnlyAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithClientCredentials(clientId' ClientSecret' resource); " is 142.
Long Statement,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,CreateAppEventClientContext,The length of the statement  "            Uri sharepointUrl = useAppWeb ? properties.AppEventProperties.AppWebFullUrl : properties.AppEventProperties.HostWebFullUrl; " is 123.
Long Statement,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,GetClientContextWithAuthorizationCode,The length of the statement  "            return GetClientContextWithAuthorizationCode(targetUrl' SharePointPrincipal' authorizationCode' GetRealmFromTargetUrl(new Uri(targetUrl))' redirectUri); " is 152.
Long Statement,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,CreateAcsClientContextForUrl,The length of the statement  "            SharePointContextToken contextToken = ReadAndValidateContextToken(contextTokenString' OperationContext.Current.IncomingMessageHeaders.To.Host); " is 143.
Long Statement,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,IssueToken,The length of the statement  "            string issuer = string.IsNullOrEmpty(sourceRealm) ? issuerApplication : string.Format("{0}@{1}"' issuerApplication' sourceRealm); " is 129.
Long Statement,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,IssueToken,The length of the statement  "            string nameid = string.IsNullOrEmpty(sourceRealm) ? sourceApplication : string.Format("{0}@{1}"' sourceApplication' sourceRealm); " is 129.
Long Statement,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,IssueToken,The length of the statement  "            List<JsonWebTokenClaim> outerClaims = null == claims ? new List<JsonWebTokenClaim>() : new List<JsonWebTokenClaim>(claims); " is 123.
Long Statement,Core.UserProfiles.Sync,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,Create,The length of the statement  "            return new SharePointContextToken(contextToken.Issuer' contextToken.Audience' contextToken.ValidFrom' contextToken.ValidTo' contextToken.Claims); " is 145.
Long Statement,Core.UserProfiles.Sync.Extensions,ClientContextExtension,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\Extensions\ClientContextExtension.cs,ExecuteQueryWithExponentialRetry,The length of the statement  "                        Console.WriteLine(string.Format("CSOM request frequency exceeded usage limits. Sleeping for {0} seconds before retrying."' " is 122.
Complex Conditional,Core.UserProfiles.Sync,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,CreateSharePointContext,The conditional expression  "logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null"  is complex.
Empty Catch Block,Core.UserProfiles.Sync,SharePointAcsContext,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\SharePointContext.cs,RenewAccessTokenIfNeeded,The method has an empty catch block.
Magic Number,Core.UserProfiles.Sync,Program,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\Program.cs,SetUserProfileDataWithUserContext,The following statement contains a magic number: using (ClientContext clientContext = new ClientContext(sharePointAdminUri.ToString()))              {                  //authenticate with SPOCredentials                  SecureString password = new SecureString();                  foreach (char c in tenantAdminPassword.ToCharArray()) password.AppendChar(c);                  clientContext.Credentials = new SharePointOnlineCredentials(tenantAdminLoginName' password);                  clientContext.ExecuteQuery();                    // Get the people manager instance for tenant context                  PeopleManager peopleManager = new PeopleManager(clientContext);                    foreach (GraphApi.User user in users)                  {                      foreach (Property prop in configuration.Properties)                      {                          try                          {                              UpdateProperty(peopleManager' user' prop);                          }                          catch (Exception ex)                          {                              Console.WriteLine(ex.Message);                          }                      }                        clientContext.ExecuteQueryWithExponentialRetry(10' 30000); //implemented with throttling                  }              }
Magic Number,Core.UserProfiles.Sync,Program,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\Program.cs,SetUserProfileDataWithUserContext,The following statement contains a magic number: using (ClientContext clientContext = new ClientContext(sharePointAdminUri.ToString()))              {                  //authenticate with SPOCredentials                  SecureString password = new SecureString();                  foreach (char c in tenantAdminPassword.ToCharArray()) password.AppendChar(c);                  clientContext.Credentials = new SharePointOnlineCredentials(tenantAdminLoginName' password);                  clientContext.ExecuteQuery();                    // Get the people manager instance for tenant context                  PeopleManager peopleManager = new PeopleManager(clientContext);                    foreach (GraphApi.User user in users)                  {                      foreach (Property prop in configuration.Properties)                      {                          try                          {                              UpdateProperty(peopleManager' user' prop);                          }                          catch (Exception ex)                          {                              Console.WriteLine(ex.Message);                          }                      }                        clientContext.ExecuteQueryWithExponentialRetry(10' 30000); //implemented with throttling                  }              }
Magic Number,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
Magic Number,Core.UserProfiles.Sync,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
Magic Number,Core.UserProfiles.Sync.Extensions,ClientContextExtension,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\Extensions\ClientContextExtension.cs,ExecuteQueryWithExponentialRetry,The following statement contains a magic number: while (retryAttempts < retryCount)              {                  try                  {                      context.ExecuteQuery();                      return;                    }                  catch (WebException wex)                  {                      var response = wex.Response as HttpWebResponse;                      // Check if request was throttled - http status code 429                      if (response != null && response.StatusCode == (HttpStatusCode)429)                      {                          // Output status to console. Should be changed as Debug.WriteLine for production usage.                          Console.WriteLine(string.Format("CSOM request frequency exceeded usage limits. Sleeping for {0} seconds before retrying."'                                          backoffInterval));                            //Add delay for retry                          System.Threading.Thread.Sleep(backoffInterval);                            //Add to retry count and increase delay.                          retryAttempts++;                          backoffInterval = backoffInterval * 2;                      }                  }              }
Magic Number,Core.UserProfiles.Sync.Extensions,ClientContextExtension,C:\repos\OfficeDev_PnP\Samples\Core.UserProfiles.Sync\Core.UserProfiles.Sync\Extensions\ClientContextExtension.cs,ExecuteQueryWithExponentialRetry,The following statement contains a magic number: while (retryAttempts < retryCount)              {                  try                  {                      context.ExecuteQuery();                      return;                    }                  catch (WebException wex)                  {                      var response = wex.Response as HttpWebResponse;                      // Check if request was throttled - http status code 429                      if (response != null && response.StatusCode == (HttpStatusCode)429)                      {                          // Output status to console. Should be changed as Debug.WriteLine for production usage.                          Console.WriteLine(string.Format("CSOM request frequency exceeded usage limits. Sleeping for {0} seconds before retrying."'                                          backoffInterval));                            //Add delay for retry                          System.Threading.Thread.Sleep(backoffInterval);                            //Add to retry count and increase delay.                          retryAttempts++;                          backoffInterval = backoffInterval * 2;                      }                  }              }
