Implementation smell,Namespace,Class,File,Method,Description
Long Method,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The method has 177 lines of code.
Long Parameter List,Contoso.Office365.common,SharePointContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,SharePointContext,The method has 5 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber
Long Parameter List,Contoso.Office365.common,SharePointContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Contoso.Office365.common,SharePointAcsContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,SharePointAcsContext,The method has 7 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextToken' contextTokenObj
Long Parameter List,Contoso.Office365.common,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Contoso.Office365.common,SharePointHighTrustContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,SharePointHighTrustContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity
Long Parameter List,Contoso.Office365.common,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,GetAccessToken,The method has 5 parameters. Parameters: authorizationCode' targetPrincipalName' targetHost' targetRealm' redirectUri
Long Parameter List,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,GetClientContextWithAuthorizationCode,The method has 5 parameters. Parameters: targetUrl' targetPrincipalName' authorizationCode' targetRealm' redirectUri
Long Parameter List,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,IssueToken,The method has 9 parameters. Parameters: sourceApplication' issuerApplication' sourceRealm' targetApplication' targetRealm' targetApplicationHostName' trustedForDelegation' claims' appOnly
Long Parameter List,Contoso.Office365.common,SharePointContextToken,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,SharePointContextToken,The method has 5 parameters. Parameters: issuer' audience' validFrom' validTo' claims
Long Parameter List,Contoso.Office365.common,SharePointContextToken,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,SharePointContextToken,The method has 7 parameters. Parameters: issuer' audience' validFrom' validTo' claims' issuerToken' actorToken
Long Parameter List,Contoso.Office365.common,SharePointContextToken,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,SharePointContextToken,The method has 6 parameters. Parameters: issuer' audience' validFrom' validTo' claims' signingCredentials
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_CurrentUserName is 34.
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_CurrentUserEmail is 35.
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_CurrentSiteUrl is 33.
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_CurrentSiteTitle is 35.
Long Identifier,Contoso.Office365.common,contoso_o365,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\contoso.office365.template\contoso.o365.master.cs,,The length of the parameter HiddenField_Master_ShortPageTitle is 33.
Long Identifier,Contoso.Office365.common,SharePointContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,GetDatabaseConnectionString,The length of the parameter LocalDBInstanceForDebuggingKey is 30.
Long Identifier,Contoso.Office365.common,SharePointContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the parameter SPHasRedirectedToSharePointKey is 30.
Long Identifier,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,,The length of the parameter AcsMetadataEndPointRelativeUrl is 30.
Long Identifier,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,,The length of the parameter TrustedForImpersonationClaimType is 32.
Long Identifier,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,,The length of the parameter ClientSigningCertificatePassword is 32.
Long Identifier,Contoso.Office365.common,AcsMetadataParser,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,GetMetadataDocument,The length of the parameter acsMetadataEndpointUrlWithRealm is 31.
Long Identifier,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,,The length of the parameter HiddenField_Init_ExternalSharing_Enabled is 40.
Long Statement,Contoso.Office365.common,EncryptionUtility,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Security\EncryptionUtility.cs,Encrypt,The length of the statement  "            X509Certificate2 certificate = X509CertificateUtility.LoadCertificate(StoreName.My' StoreLocation.LocalMachine' thumbPrint); " is 124.
Long Statement,Contoso.Office365.common,EncryptionUtility,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Security\EncryptionUtility.cs,Decrypt,The length of the statement  "            X509Certificate2 certificate = X509CertificateUtility.LoadCertificate(StoreName.My' StoreLocation.LocalMachine' thumbPrint); " is 124.
Long Statement,Contoso.Office365.common,SharePointContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            // Removes the values that are included in {StandardTokens}' as {StandardTokens} will be inserted at the beginning of the query string. " is 135.
Long Statement,Contoso.Office365.common,SharePointContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            string redirectUrlString = TokenHelper.GetAppContextTokenRequestUrl(spHostUrl.AbsoluteUri' Uri.EscapeDataString(returnUrlString)); " is 130.
Long Statement,Contoso.Office365.common,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointAcsContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextTokenString' contextToken); " is 132.
Long Statement,Contoso.Office365.common,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            if (logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null) " is 131.
Long Statement,Contoso.Office365.common,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointHighTrustContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity); " is 123.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,GetAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithRefreshToken(clientId' ClientSecret' refreshToken' resource); " is 151.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,GetAppOnlyAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithClientCredentials(clientId' ClientSecret' resource); " is 142.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,CreateAppEventClientContext,The length of the statement  "            Uri sharepointUrl = useAppWeb ? properties.AppEventProperties.AppWebFullUrl : properties.AppEventProperties.HostWebFullUrl; " is 123.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,GetClientContextWithAuthorizationCode,The length of the statement  "            return GetClientContextWithAuthorizationCode(targetUrl' SharePointPrincipal' authorizationCode' GetRealmFromTargetUrl(new Uri(targetUrl))' redirectUri); " is 152.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,CreateAcsClientContextForUrl,The length of the statement  "            SharePointContextToken contextToken = ReadAndValidateContextToken(contextTokenString' OperationContext.Current.IncomingMessageHeaders.To.Host); " is 143.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,IssueToken,The length of the statement  "            string issuer = string.IsNullOrEmpty(sourceRealm) ? issuerApplication : string.Format("{0}@{1}"' issuerApplication' sourceRealm); " is 129.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,IssueToken,The length of the statement  "            string nameid = string.IsNullOrEmpty(sourceRealm) ? sourceApplication : string.Format("{0}@{1}"' sourceApplication' sourceRealm); " is 129.
Long Statement,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,IssueToken,The length of the statement  "            List<JsonWebTokenClaim> outerClaims = null == claims ? new List<JsonWebTokenClaim>() : new List<JsonWebTokenClaim>(claims); " is 123.
Long Statement,Contoso.Office365.common,SharePointContextToken,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,Create,The length of the statement  "            return new SharePointContextToken(contextToken.Issuer' contextToken.Audience' contextToken.ValidFrom' contextToken.ValidTo' contextToken.Claims); " is 145.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,Page_Load,The length of the statement  "                Log.LogFileSystem(string.Format("Started changing External Sharing Settings for Site Collection - {0}  "' Page.Request["SPHostUrl"])); " is 134.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,Page_Load,The length of the statement  "                    EventLog.WriteEntry(source' string.Format("Started changing External Sharing Settings for Site Collection {0}"' clientContext.Site.Url)' EventLogEntryType.Information' 6000); " is 174.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,GetContext,The length of the statement  "            var adminToken = TokenHelper.GetAppOnlyAccessToken(TokenHelper.SharePointPrincipal' tenantUri.Authority' adminRealm).AccessToken; " is 129.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                            targetAction.ScriptBlock = "var headID = document.getElementsByTagName('head')[0]; var externalSharingTag = document.createElement('script'); externalSharingTag.type = 'text/javascript'; externalSharingTag.src = '" + JavaScriptFile + "';headID.appendChild(externalSharingTag);"; " is 278.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                            EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is externally shared and the banner is enabled.")' EventLogEntryType.Information' 6000); " is 214.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                        EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001); " is 161.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                        EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is not externally shared and the banner is disabled.")' EventLogEntryType.Information' 6000); " is 219.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                        EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001); " is 161.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                Log.LogFileSystem(string.Format("External Sharing setting is changed successfully for Site Collection - {0}  "' Page.Request["SPHostUrl"])); " is 140.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                //Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"); " is 122.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessageBanner"' "alert('External Sharing setting is changed successfully!!'); window.location='" + " is 164.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"' false); " is 127.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                Log.LogFileSystem(string.Format("Error occured in changing External Sharing Settings for Site Collection - {0}' error is {1}  "' (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL)' ex.Message)); " is 213.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                EventLog.WriteEntry(source' string.Format("Error occured in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001); " is 160.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The length of the statement  "                ScriptManager.RegisterStartupScript(this' GetType()' "ErrorMessageBanner"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true); " is 149.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnCancel_Click,The length of the statement  "            EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is canceled.")' EventLogEntryType.Information' 6000); " is 131.
Long Statement,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnCancel_Click,The length of the statement  "            Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"' false); " is 127.
Complex Conditional,Contoso.Office365.common,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,CreateSharePointContext,The conditional expression  "logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null"  is complex.
Empty Catch Block,Contoso.Office365.common,Log,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Log.cs,LogFileSystem,The method has an empty catch block.
Empty Catch Block,Contoso.Office365.common,Log,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Log.cs,CheckLogFiles,The method has an empty catch block.
Empty Catch Block,Contoso.Office365.common,SharePointAcsContext,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\SharePointContext.cs,RenewAccessTokenIfNeeded,The method has an empty catch block.
Empty Catch Block,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,GetCurrentUserName,The method has an empty catch block.
Empty Catch Block,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,GetCurrentUserEmail,The method has an empty catch block.
Magic Number,Contoso.Office365.common,Log,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Log.cs,CheckLogFiles,The following statement contains a magic number: try              {                  var logFolder = ConfigurationManager.AppSettings["OutputFileLocation"];                    var logFiles = Directory.GetFiles(logFolder' "*.log"' SearchOption.TopDirectoryOnly);                  if (logFiles == null || logFiles.Length == 0) return;                    //var assemblyName = GetAppAssembly().GetName().Name;                  var assemblyName = APP_NAME;                    foreach (string logFile in logFiles)                  {                      if (logFile.Contains(assemblyName + "_"))                      {                          if (File.GetCreationTime(logFile) < DateTime.Now.AddDays(-3))                          {                              File.Delete(logFile);                          }                      }                  }              }              catch { }
Magic Number,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
Magic Number,Contoso.Office365.common,TokenHelper,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
Magic Number,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  Log.LogFileSystem(string.Format("Started changing External Sharing Settings for Site Collection - {0}  "' Page.Request["SPHostUrl"]));                    var spContext = SharePointContextProvider.Current.GetSharePointContext(Context);                  using (var clientContext = spContext.CreateUserClientContextForSPHost())                  {                      clientContext.Load(clientContext.Site' siteurl => siteurl.Url);                      clientContext.ExecuteQuery();                      EventLog.WriteEntry(source' string.Format("Started changing External Sharing Settings for Site Collection {0}"' clientContext.Site.Url)' EventLogEntryType.Information' 6000);                      Master.Hdn_Master_CurrentSiteUrl.Value = clientContext.Site.Url;                        clientContext.Load(clientContext.Web' web => web.Title);                      clientContext.ExecuteQuery();                      Master.Hdn_Master_CurrentSiteTitle.Value = clientContext.Web.Title;                        clientContext.Load(clientContext.Web' user => user.CurrentUser);                      clientContext.ExecuteQuery();                      User currentUser = clientContext.Web.CurrentUser;                      string userName = currentUser.Title;                      Master.Hdn_Master_CurrentUserName.Value = GetCurrentUserName();                      Master.Hdn_Master_CurrentUserEmail.Value = GetCurrentUserEmail();                        clientContext.Load(clientContext.Site);                      clientContext.ExecuteQuery();                      siteURL = clientContext.Site.Url;                      lblSiteURL.Text = "https://contoso.sharepoint.com/teams/NCS";//siteURL;                        if (clientContext.Site.ShareByEmailEnabled)                      {                          //lblSharing.Text = _shared;                          rdbList.Items[1].Selected = true;                          initialSharingSetting = _shared;                          HiddenField_Init_ExternalSharing_Enabled.Value = "true";                      }                      else                      {                          //lblSharing.Text = _notshared;                          rdbList.Items[0].Selected = true;                          initialSharingSetting = _notshared;                          HiddenField_Init_ExternalSharing_Enabled.Value = "false";                      }                  }              }
Magic Number,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (rdbList.SelectedValue == "allowed" && initialSharingSetting == _notshared)                  {                      Log.LogFileSystem(string.Format("Start enabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                                                  SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            //if (siteInfo.EnableExternalSharing && _tenantSharingCapability != SharingCapabilities.Disabled)                          //{                          _targetSharingCapability = SharingCapabilities.ExternalUserSharingOnly;                          _shouldBeUpdated = true;                          //}                          if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Enabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                                Log.LogFileSystem(string.Format("\t" + "Update completed!"));                          }                      }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start enabling the banner..."));                            //Enable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                UserCustomAction targetAction = existingActions.Add();                              targetAction.Name = "External_Sharing_Banner";                              targetAction.Description = "External_Sharing_Banner";                              targetAction.Location = "ScriptLink";                                                            targetAction.ScriptBlock = "var headID = document.getElementsByTagName('head')[0]; var externalSharingTag = document.createElement('script'); externalSharingTag.type = 'text/javascript'; externalSharingTag.src = '" + JavaScriptFile + "';headID.appendChild(externalSharingTag);";                              targetAction.ScriptSrc = "";                              targetAction.Update();                              clientContextSC.ExecuteQuery();                                Log.LogFileSystem(string.Format("\t" + "Banner successfully enabled!"));                              EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is externally shared and the banner is enabled.")' EventLogEntryType.Information' 6000);                          }                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                  }                  else if (rdbList.SelectedValue == "notallowed" && initialSharingSetting == _shared)                  {                      Log.LogFileSystem(string.Format("Start disabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                          SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            _targetSharingCapability = SharingCapabilities.Disabled;                          _shouldBeUpdated = true;                            if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Disabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                          }                        }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start disabling the banner..."));                          //Disable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                var actions = existingActions.ToArray();                              foreach (var action in actions)                              {                                  if (action.Name == "External_Sharing_Banner" &&                                      action.Location == "ScriptLink")                                  {                                      action.DeleteObject();                                      clientContextSC.ExecuteQuery();                                      Log.LogFileSystem(string.Format("\t" + "Banner successfully disabled!"));                                      break;                                  }                              }                          }                            EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is not externally shared and the banner is disabled.")' EventLogEntryType.Information' 6000);                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                    }                    Log.LogFileSystem(string.Format(string.Format("External Sharing is now {0}  "' rdbList.SelectedValue)));                  Log.LogFileSystem(string.Format("External Sharing setting is changed successfully for Site Collection - {0}  "' Page.Request["SPHostUrl"]));                  Log.LogFileSystem(string.Empty);                    //Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx");                  ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessageBanner"' "alert('External Sharing setting is changed successfully!!'); window.location='" +                                                                 (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx';"' true);              }              catch (System.Threading.ThreadAbortException ex)              {                  Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"' false);              }              catch (Exception ex)              {                  Log.LogFileSystem(string.Format("Error occured in changing External Sharing Settings for Site Collection - {0}' error is {1}  "' (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL)' ex.Message));                  Log.LogFileSystem(string.Empty);                  EventLog.WriteEntry(source' string.Format("Error occured in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorMessageBanner"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorCursor"' "  document.body.style.cursor = 'default';"' true);              }
Magic Number,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (rdbList.SelectedValue == "allowed" && initialSharingSetting == _notshared)                  {                      Log.LogFileSystem(string.Format("Start enabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                                                  SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            //if (siteInfo.EnableExternalSharing && _tenantSharingCapability != SharingCapabilities.Disabled)                          //{                          _targetSharingCapability = SharingCapabilities.ExternalUserSharingOnly;                          _shouldBeUpdated = true;                          //}                          if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Enabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                                Log.LogFileSystem(string.Format("\t" + "Update completed!"));                          }                      }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start enabling the banner..."));                            //Enable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                UserCustomAction targetAction = existingActions.Add();                              targetAction.Name = "External_Sharing_Banner";                              targetAction.Description = "External_Sharing_Banner";                              targetAction.Location = "ScriptLink";                                                            targetAction.ScriptBlock = "var headID = document.getElementsByTagName('head')[0]; var externalSharingTag = document.createElement('script'); externalSharingTag.type = 'text/javascript'; externalSharingTag.src = '" + JavaScriptFile + "';headID.appendChild(externalSharingTag);";                              targetAction.ScriptSrc = "";                              targetAction.Update();                              clientContextSC.ExecuteQuery();                                Log.LogFileSystem(string.Format("\t" + "Banner successfully enabled!"));                              EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is externally shared and the banner is enabled.")' EventLogEntryType.Information' 6000);                          }                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                  }                  else if (rdbList.SelectedValue == "notallowed" && initialSharingSetting == _shared)                  {                      Log.LogFileSystem(string.Format("Start disabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                          SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            _targetSharingCapability = SharingCapabilities.Disabled;                          _shouldBeUpdated = true;                            if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Disabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                          }                        }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start disabling the banner..."));                          //Disable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                var actions = existingActions.ToArray();                              foreach (var action in actions)                              {                                  if (action.Name == "External_Sharing_Banner" &&                                      action.Location == "ScriptLink")                                  {                                      action.DeleteObject();                                      clientContextSC.ExecuteQuery();                                      Log.LogFileSystem(string.Format("\t" + "Banner successfully disabled!"));                                      break;                                  }                              }                          }                            EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is not externally shared and the banner is disabled.")' EventLogEntryType.Information' 6000);                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                    }                    Log.LogFileSystem(string.Format(string.Format("External Sharing is now {0}  "' rdbList.SelectedValue)));                  Log.LogFileSystem(string.Format("External Sharing setting is changed successfully for Site Collection - {0}  "' Page.Request["SPHostUrl"]));                  Log.LogFileSystem(string.Empty);                    //Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx");                  ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessageBanner"' "alert('External Sharing setting is changed successfully!!'); window.location='" +                                                                 (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx';"' true);              }              catch (System.Threading.ThreadAbortException ex)              {                  Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"' false);              }              catch (Exception ex)              {                  Log.LogFileSystem(string.Format("Error occured in changing External Sharing Settings for Site Collection - {0}' error is {1}  "' (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL)' ex.Message));                  Log.LogFileSystem(string.Empty);                  EventLog.WriteEntry(source' string.Format("Error occured in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorMessageBanner"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorCursor"' "  document.body.style.cursor = 'default';"' true);              }
Magic Number,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (rdbList.SelectedValue == "allowed" && initialSharingSetting == _notshared)                  {                      Log.LogFileSystem(string.Format("Start enabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                                                  SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            //if (siteInfo.EnableExternalSharing && _tenantSharingCapability != SharingCapabilities.Disabled)                          //{                          _targetSharingCapability = SharingCapabilities.ExternalUserSharingOnly;                          _shouldBeUpdated = true;                          //}                          if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Enabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                                Log.LogFileSystem(string.Format("\t" + "Update completed!"));                          }                      }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start enabling the banner..."));                            //Enable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                UserCustomAction targetAction = existingActions.Add();                              targetAction.Name = "External_Sharing_Banner";                              targetAction.Description = "External_Sharing_Banner";                              targetAction.Location = "ScriptLink";                                                            targetAction.ScriptBlock = "var headID = document.getElementsByTagName('head')[0]; var externalSharingTag = document.createElement('script'); externalSharingTag.type = 'text/javascript'; externalSharingTag.src = '" + JavaScriptFile + "';headID.appendChild(externalSharingTag);";                              targetAction.ScriptSrc = "";                              targetAction.Update();                              clientContextSC.ExecuteQuery();                                Log.LogFileSystem(string.Format("\t" + "Banner successfully enabled!"));                              EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is externally shared and the banner is enabled.")' EventLogEntryType.Information' 6000);                          }                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                  }                  else if (rdbList.SelectedValue == "notallowed" && initialSharingSetting == _shared)                  {                      Log.LogFileSystem(string.Format("Start disabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                          SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            _targetSharingCapability = SharingCapabilities.Disabled;                          _shouldBeUpdated = true;                            if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Disabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                          }                        }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start disabling the banner..."));                          //Disable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                var actions = existingActions.ToArray();                              foreach (var action in actions)                              {                                  if (action.Name == "External_Sharing_Banner" &&                                      action.Location == "ScriptLink")                                  {                                      action.DeleteObject();                                      clientContextSC.ExecuteQuery();                                      Log.LogFileSystem(string.Format("\t" + "Banner successfully disabled!"));                                      break;                                  }                              }                          }                            EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is not externally shared and the banner is disabled.")' EventLogEntryType.Information' 6000);                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                    }                    Log.LogFileSystem(string.Format(string.Format("External Sharing is now {0}  "' rdbList.SelectedValue)));                  Log.LogFileSystem(string.Format("External Sharing setting is changed successfully for Site Collection - {0}  "' Page.Request["SPHostUrl"]));                  Log.LogFileSystem(string.Empty);                    //Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx");                  ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessageBanner"' "alert('External Sharing setting is changed successfully!!'); window.location='" +                                                                 (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx';"' true);              }              catch (System.Threading.ThreadAbortException ex)              {                  Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"' false);              }              catch (Exception ex)              {                  Log.LogFileSystem(string.Format("Error occured in changing External Sharing Settings for Site Collection - {0}' error is {1}  "' (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL)' ex.Message));                  Log.LogFileSystem(string.Empty);                  EventLog.WriteEntry(source' string.Format("Error occured in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorMessageBanner"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorCursor"' "  document.body.style.cursor = 'default';"' true);              }
Magic Number,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (rdbList.SelectedValue == "allowed" && initialSharingSetting == _notshared)                  {                      Log.LogFileSystem(string.Format("Start enabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                                                  SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            //if (siteInfo.EnableExternalSharing && _tenantSharingCapability != SharingCapabilities.Disabled)                          //{                          _targetSharingCapability = SharingCapabilities.ExternalUserSharingOnly;                          _shouldBeUpdated = true;                          //}                          if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Enabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                                Log.LogFileSystem(string.Format("\t" + "Update completed!"));                          }                      }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start enabling the banner..."));                            //Enable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                UserCustomAction targetAction = existingActions.Add();                              targetAction.Name = "External_Sharing_Banner";                              targetAction.Description = "External_Sharing_Banner";                              targetAction.Location = "ScriptLink";                                                            targetAction.ScriptBlock = "var headID = document.getElementsByTagName('head')[0]; var externalSharingTag = document.createElement('script'); externalSharingTag.type = 'text/javascript'; externalSharingTag.src = '" + JavaScriptFile + "';headID.appendChild(externalSharingTag);";                              targetAction.ScriptSrc = "";                              targetAction.Update();                              clientContextSC.ExecuteQuery();                                Log.LogFileSystem(string.Format("\t" + "Banner successfully enabled!"));                              EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is externally shared and the banner is enabled.")' EventLogEntryType.Information' 6000);                          }                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                  }                  else if (rdbList.SelectedValue == "notallowed" && initialSharingSetting == _shared)                  {                      Log.LogFileSystem(string.Format("Start disabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                          SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            _targetSharingCapability = SharingCapabilities.Disabled;                          _shouldBeUpdated = true;                            if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Disabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                          }                        }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start disabling the banner..."));                          //Disable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                var actions = existingActions.ToArray();                              foreach (var action in actions)                              {                                  if (action.Name == "External_Sharing_Banner" &&                                      action.Location == "ScriptLink")                                  {                                      action.DeleteObject();                                      clientContextSC.ExecuteQuery();                                      Log.LogFileSystem(string.Format("\t" + "Banner successfully disabled!"));                                      break;                                  }                              }                          }                            EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is not externally shared and the banner is disabled.")' EventLogEntryType.Information' 6000);                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                    }                    Log.LogFileSystem(string.Format(string.Format("External Sharing is now {0}  "' rdbList.SelectedValue)));                  Log.LogFileSystem(string.Format("External Sharing setting is changed successfully for Site Collection - {0}  "' Page.Request["SPHostUrl"]));                  Log.LogFileSystem(string.Empty);                    //Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx");                  ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessageBanner"' "alert('External Sharing setting is changed successfully!!'); window.location='" +                                                                 (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx';"' true);              }              catch (System.Threading.ThreadAbortException ex)              {                  Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"' false);              }              catch (Exception ex)              {                  Log.LogFileSystem(string.Format("Error occured in changing External Sharing Settings for Site Collection - {0}' error is {1}  "' (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL)' ex.Message));                  Log.LogFileSystem(string.Empty);                  EventLog.WriteEntry(source' string.Format("Error occured in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorMessageBanner"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorCursor"' "  document.body.style.cursor = 'default';"' true);              }
Magic Number,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (rdbList.SelectedValue == "allowed" && initialSharingSetting == _notshared)                  {                      Log.LogFileSystem(string.Format("Start enabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                                                  SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            //if (siteInfo.EnableExternalSharing && _tenantSharingCapability != SharingCapabilities.Disabled)                          //{                          _targetSharingCapability = SharingCapabilities.ExternalUserSharingOnly;                          _shouldBeUpdated = true;                          //}                          if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Enabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                                Log.LogFileSystem(string.Format("\t" + "Update completed!"));                          }                      }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start enabling the banner..."));                            //Enable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                UserCustomAction targetAction = existingActions.Add();                              targetAction.Name = "External_Sharing_Banner";                              targetAction.Description = "External_Sharing_Banner";                              targetAction.Location = "ScriptLink";                                                            targetAction.ScriptBlock = "var headID = document.getElementsByTagName('head')[0]; var externalSharingTag = document.createElement('script'); externalSharingTag.type = 'text/javascript'; externalSharingTag.src = '" + JavaScriptFile + "';headID.appendChild(externalSharingTag);";                              targetAction.ScriptSrc = "";                              targetAction.Update();                              clientContextSC.ExecuteQuery();                                Log.LogFileSystem(string.Format("\t" + "Banner successfully enabled!"));                              EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is externally shared and the banner is enabled.")' EventLogEntryType.Information' 6000);                          }                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                  }                  else if (rdbList.SelectedValue == "notallowed" && initialSharingSetting == _shared)                  {                      Log.LogFileSystem(string.Format("Start disabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                          SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            _targetSharingCapability = SharingCapabilities.Disabled;                          _shouldBeUpdated = true;                            if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Disabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                          }                        }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start disabling the banner..."));                          //Disable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                var actions = existingActions.ToArray();                              foreach (var action in actions)                              {                                  if (action.Name == "External_Sharing_Banner" &&                                      action.Location == "ScriptLink")                                  {                                      action.DeleteObject();                                      clientContextSC.ExecuteQuery();                                      Log.LogFileSystem(string.Format("\t" + "Banner successfully disabled!"));                                      break;                                  }                              }                          }                            EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is not externally shared and the banner is disabled.")' EventLogEntryType.Information' 6000);                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                    }                    Log.LogFileSystem(string.Format(string.Format("External Sharing is now {0}  "' rdbList.SelectedValue)));                  Log.LogFileSystem(string.Format("External Sharing setting is changed successfully for Site Collection - {0}  "' Page.Request["SPHostUrl"]));                  Log.LogFileSystem(string.Empty);                    //Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx");                  ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessageBanner"' "alert('External Sharing setting is changed successfully!!'); window.location='" +                                                                 (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx';"' true);              }              catch (System.Threading.ThreadAbortException ex)              {                  Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"' false);              }              catch (Exception ex)              {                  Log.LogFileSystem(string.Format("Error occured in changing External Sharing Settings for Site Collection - {0}' error is {1}  "' (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL)' ex.Message));                  Log.LogFileSystem(string.Empty);                  EventLog.WriteEntry(source' string.Format("Error occured in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorMessageBanner"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorCursor"' "  document.body.style.cursor = 'default';"' true);              }
Magic Number,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (rdbList.SelectedValue == "allowed" && initialSharingSetting == _notshared)                  {                      Log.LogFileSystem(string.Format("Start enabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                                                  SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            //if (siteInfo.EnableExternalSharing && _tenantSharingCapability != SharingCapabilities.Disabled)                          //{                          _targetSharingCapability = SharingCapabilities.ExternalUserSharingOnly;                          _shouldBeUpdated = true;                          //}                          if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Enabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                                Log.LogFileSystem(string.Format("\t" + "Update completed!"));                          }                      }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start enabling the banner..."));                            //Enable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                UserCustomAction targetAction = existingActions.Add();                              targetAction.Name = "External_Sharing_Banner";                              targetAction.Description = "External_Sharing_Banner";                              targetAction.Location = "ScriptLink";                                                            targetAction.ScriptBlock = "var headID = document.getElementsByTagName('head')[0]; var externalSharingTag = document.createElement('script'); externalSharingTag.type = 'text/javascript'; externalSharingTag.src = '" + JavaScriptFile + "';headID.appendChild(externalSharingTag);";                              targetAction.ScriptSrc = "";                              targetAction.Update();                              clientContextSC.ExecuteQuery();                                Log.LogFileSystem(string.Format("\t" + "Banner successfully enabled!"));                              EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is externally shared and the banner is enabled.")' EventLogEntryType.Information' 6000);                          }                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                  }                  else if (rdbList.SelectedValue == "notallowed" && initialSharingSetting == _shared)                  {                      Log.LogFileSystem(string.Format("Start disabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                          SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            _targetSharingCapability = SharingCapabilities.Disabled;                          _shouldBeUpdated = true;                            if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Disabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                          }                        }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start disabling the banner..."));                          //Disable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                var actions = existingActions.ToArray();                              foreach (var action in actions)                              {                                  if (action.Name == "External_Sharing_Banner" &&                                      action.Location == "ScriptLink")                                  {                                      action.DeleteObject();                                      clientContextSC.ExecuteQuery();                                      Log.LogFileSystem(string.Format("\t" + "Banner successfully disabled!"));                                      break;                                  }                              }                          }                            EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is not externally shared and the banner is disabled.")' EventLogEntryType.Information' 6000);                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                    }                    Log.LogFileSystem(string.Format(string.Format("External Sharing is now {0}  "' rdbList.SelectedValue)));                  Log.LogFileSystem(string.Format("External Sharing setting is changed successfully for Site Collection - {0}  "' Page.Request["SPHostUrl"]));                  Log.LogFileSystem(string.Empty);                    //Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx");                  ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessageBanner"' "alert('External Sharing setting is changed successfully!!'); window.location='" +                                                                 (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx';"' true);              }              catch (System.Threading.ThreadAbortException ex)              {                  Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"' false);              }              catch (Exception ex)              {                  Log.LogFileSystem(string.Format("Error occured in changing External Sharing Settings for Site Collection - {0}' error is {1}  "' (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL)' ex.Message));                  Log.LogFileSystem(string.Empty);                  EventLog.WriteEntry(source' string.Format("Error occured in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorMessageBanner"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorCursor"' "  document.body.style.cursor = 'default';"' true);              }
Magic Number,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (rdbList.SelectedValue == "allowed" && initialSharingSetting == _notshared)                  {                      Log.LogFileSystem(string.Format("Start enabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                                                  SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            //if (siteInfo.EnableExternalSharing && _tenantSharingCapability != SharingCapabilities.Disabled)                          //{                          _targetSharingCapability = SharingCapabilities.ExternalUserSharingOnly;                          _shouldBeUpdated = true;                          //}                          if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Enabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                                Log.LogFileSystem(string.Format("\t" + "Update completed!"));                          }                      }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start enabling the banner..."));                            //Enable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                UserCustomAction targetAction = existingActions.Add();                              targetAction.Name = "External_Sharing_Banner";                              targetAction.Description = "External_Sharing_Banner";                              targetAction.Location = "ScriptLink";                                                            targetAction.ScriptBlock = "var headID = document.getElementsByTagName('head')[0]; var externalSharingTag = document.createElement('script'); externalSharingTag.type = 'text/javascript'; externalSharingTag.src = '" + JavaScriptFile + "';headID.appendChild(externalSharingTag);";                              targetAction.ScriptSrc = "";                              targetAction.Update();                              clientContextSC.ExecuteQuery();                                Log.LogFileSystem(string.Format("\t" + "Banner successfully enabled!"));                              EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is externally shared and the banner is enabled.")' EventLogEntryType.Information' 6000);                          }                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                  }                  else if (rdbList.SelectedValue == "notallowed" && initialSharingSetting == _shared)                  {                      Log.LogFileSystem(string.Format("Start disabling external sharing..."));                      Log.LogFileSystem(string.Format("\t" + "Start getting Context..."));                        var ctx = GetContext(TenantAdminUrl);                      using (ctx)                      {                          Tenant _tenant = new Tenant(ctx);                          Log.LogFileSystem(string.Format("\t" + "Loading site properties..."));                          SiteProperties _siteProps = _tenant.GetSitePropertiesByUrl(siteURL' false);                          ctx.Load(_tenant);                          ctx.Load(_siteProps);                          ctx.ExecuteQuery();                          bool _shouldBeUpdated = false;                            var _tenantSharingCapability = _tenant.SharingCapability;                          var _siteSharingCapability = _siteProps.SharingCapability;                          var _targetSharingCapability = SharingCapabilities.Disabled;                            _targetSharingCapability = SharingCapabilities.Disabled;                          _shouldBeUpdated = true;                            if (_siteSharingCapability != _targetSharingCapability && _shouldBeUpdated)                          {                              Log.LogFileSystem(string.Format("\t" + "Disabling sharing setting..."));                              _siteProps.SharingCapability = _targetSharingCapability;                              ctx.Load(_siteProps);                              SpoOperation op = _siteProps.Update();                              ctx.Load(op' i => i.IsComplete);                              ctx.ExecuteQuery();                                while (!op.IsComplete)                              {                                  Log.LogFileSystem(string.Format("\t" + "Refreshing update..."));                                  //wait 30seconds and try again                                  System.Threading.Thread.Sleep(3000);                                  op.RefreshLoad();                                  ctx.ExecuteQuery();                              }                          }                        }                        try                      {                          Log.LogFileSystem(string.Format("\t" + "Start disabling the banner..."));                          //Disable Banner                          var clientContextSC = GetContext(siteURL);                          using (clientContextSC)                          {                              Site site = clientContextSC.Site;                              clientContextSC.Load(site);                              clientContextSC.ExecuteQuery();                                var existingActions = site.UserCustomActions;                              clientContextSC.Load(existingActions);                              clientContextSC.ExecuteQuery();                                var actions = existingActions.ToArray();                              foreach (var action in actions)                              {                                  if (action.Name == "External_Sharing_Banner" &&                                      action.Location == "ScriptLink")                                  {                                      action.DeleteObject();                                      clientContextSC.ExecuteQuery();                                      Log.LogFileSystem(string.Format("\t" + "Banner successfully disabled!"));                                      break;                                  }                              }                          }                            EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is completed successfully.  The Site Collection is not externally shared and the banner is disabled.")' EventLogEntryType.Information' 6000);                      }                      catch (Exception ex)                      {                          EventLog.WriteEntry(source' string.Format("Error occurred in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                      }                    }                    Log.LogFileSystem(string.Format(string.Format("External Sharing is now {0}  "' rdbList.SelectedValue)));                  Log.LogFileSystem(string.Format("External Sharing setting is changed successfully for Site Collection - {0}  "' Page.Request["SPHostUrl"]));                  Log.LogFileSystem(string.Empty);                    //Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx");                  ScriptManager.RegisterStartupScript(this' this.GetType()' "successMessageBanner"' "alert('External Sharing setting is changed successfully!!'); window.location='" +                                                                 (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx';"' true);              }              catch (System.Threading.ThreadAbortException ex)              {                  Response.Redirect((string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL) + "/_layouts/15/settings.aspx"' false);              }              catch (Exception ex)              {                  Log.LogFileSystem(string.Format("Error occured in changing External Sharing Settings for Site Collection - {0}' error is {1}  "' (string.IsNullOrEmpty(siteURL) ? Page.Request["SPHostUrl"] : siteURL)' ex.Message));                  Log.LogFileSystem(string.Empty);                  EventLog.WriteEntry(source' string.Format("Error occured in changing External Sharing Settings.  The error is {0}"' ex.Message)' EventLogEntryType.Error' 6001);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorMessageBanner"' "document.getElementById('spanErrorMsg').style.display = 'block';"' true);                  ScriptManager.RegisterStartupScript(this' GetType()' "ErrorCursor"' "  document.body.style.cursor = 'default';"' true);              }
Magic Number,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,btnCancel_Click,The following statement contains a magic number: EventLog.WriteEntry(source' string.Format("Changing External Sharing Settings is canceled.")' EventLogEntryType.Information' 6000);
Missing Default,Governance.ExternalSharingWeb.Pages,Default,C:\repos\OfficeDev_PnP\Solutions\Governance.ExternalSharing\Governance.ExternalSharingWeb\Pages\Default.aspx.cs,Page_PreInit,The following switch statement is missing a default case: switch (SharePointContextProvider.CheckRedirectionStatus(Context' out redirectUrl))              {                  case RedirectionStatus.Ok:                      return;                  case RedirectionStatus.ShouldRedirect:                      Response.Redirect(redirectUrl.AbsoluteUri' endResponse: true);                      break;                  case RedirectionStatus.CanNotRedirect:                      Response.Write("An error occurred while processing your request.");                      Response.End();                      break;              }
