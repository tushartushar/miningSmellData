Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Core.Throttling,SharePointContext,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,SharePointContext,The method has 5 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber
Long Parameter List,Core.Throttling,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Core.Throttling,SharePointAcsContext,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,SharePointAcsContext,The method has 7 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextToken' contextTokenObj
Long Parameter List,Core.Throttling,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Core.Throttling,SharePointHighTrustContext,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,SharePointHighTrustContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity
Long Parameter List,Core.Throttling,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,GetAccessToken,The method has 5 parameters. Parameters: authorizationCode' targetPrincipalName' targetHost' targetRealm' redirectUri
Long Parameter List,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,GetClientContextWithAuthorizationCode,The method has 5 parameters. Parameters: targetUrl' targetPrincipalName' authorizationCode' targetRealm' redirectUri
Long Parameter List,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,IssueToken,The method has 9 parameters. Parameters: sourceApplication' issuerApplication' sourceRealm' targetApplication' targetRealm' targetApplicationHostName' trustedForDelegation' claims' appOnly
Long Parameter List,Core.Throttling,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,SharePointContextToken,The method has 5 parameters. Parameters: issuer' audience' validFrom' validTo' claims
Long Parameter List,Core.Throttling,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,SharePointContextToken,The method has 7 parameters. Parameters: issuer' audience' validFrom' validTo' claims' issuerToken' actorToken
Long Parameter List,Core.Throttling,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,SharePointContextToken,The method has 6 parameters. Parameters: issuer' audience' validFrom' validTo' claims' signingCredentials
Long Identifier,Core.Throttling,SharePointContext,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,GetDatabaseConnectionString,The length of the parameter LocalDBInstanceForDebuggingKey is 30.
Long Identifier,Core.Throttling,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CheckRedirectionStatus,The length of the parameter SPHasRedirectedToSharePointKey is 30.
Long Identifier,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,,The length of the parameter AcsMetadataEndPointRelativeUrl is 30.
Long Identifier,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,,The length of the parameter TrustedForImpersonationClaimType is 32.
Long Identifier,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,,The length of the parameter ClientSigningCertificatePassword is 32.
Long Identifier,Core.Throttling,AcsMetadataParser,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,GetMetadataDocument,The length of the parameter acsMetadataEndpointUrlWithRealm is 31.
Long Statement,Core.Throttling,ClientContextExtension,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\ClientContextExtensions.cs,ExecuteQueryWithIncrementalRetry,The length of the statement  "                        Console.WriteLine(string.Format("CSOM request frequency exceeded usage limits. Sleeping for {0} seconds before retrying."'  " is 122.
Long Statement,Core.Throttling,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            // Removes the values that are included in {StandardTokens}' as {StandardTokens} will be inserted at the beginning of the query string. " is 135.
Long Statement,Core.Throttling,SharePointContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            string redirectUrlString = TokenHelper.GetAppContextTokenRequestUrl(spHostUrl.AbsoluteUri' Uri.EscapeDataString(returnUrlString)); " is 130.
Long Statement,Core.Throttling,SharePointAcsContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointAcsContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextTokenString' contextToken); " is 132.
Long Statement,Core.Throttling,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            if (logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null) " is 131.
Long Statement,Core.Throttling,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointHighTrustContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity); " is 123.
Long Statement,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,GetAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithRefreshToken(clientId' ClientSecret' refreshToken' resource); " is 151.
Long Statement,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,GetAppOnlyAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithClientCredentials(clientId' ClientSecret' resource); " is 142.
Long Statement,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,CreateAppEventClientContext,The length of the statement  "            Uri sharepointUrl = useAppWeb ? properties.AppEventProperties.AppWebFullUrl : properties.AppEventProperties.HostWebFullUrl; " is 123.
Long Statement,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,GetClientContextWithAuthorizationCode,The length of the statement  "            return GetClientContextWithAuthorizationCode(targetUrl' SharePointPrincipal' authorizationCode' GetRealmFromTargetUrl(new Uri(targetUrl))' redirectUri); " is 152.
Long Statement,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,CreateAcsClientContextForUrl,The length of the statement  "            SharePointContextToken contextToken = ReadAndValidateContextToken(contextTokenString' OperationContext.Current.IncomingMessageHeaders.To.Host); " is 143.
Long Statement,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,IssueToken,The length of the statement  "            string issuer = string.IsNullOrEmpty(sourceRealm) ? issuerApplication : string.Format("{0}@{1}"' issuerApplication' sourceRealm); " is 129.
Long Statement,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,IssueToken,The length of the statement  "            string nameid = string.IsNullOrEmpty(sourceRealm) ? sourceApplication : string.Format("{0}@{1}"' sourceApplication' sourceRealm); " is 129.
Long Statement,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,IssueToken,The length of the statement  "            List<JsonWebTokenClaim> outerClaims = null == claims ? new List<JsonWebTokenClaim>() : new List<JsonWebTokenClaim>(claims); " is 123.
Long Statement,Core.Throttling,SharePointContextToken,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,Create,The length of the statement  "            return new SharePointContextToken(contextToken.Issuer' contextToken.Audience' contextToken.ValidFrom' contextToken.ValidTo' contextToken.Claims); " is 145.
Complex Conditional,Core.Throttling,SharePointHighTrustContextProvider,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,CreateSharePointContext,The conditional expression  "logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null"  is complex.
Empty Catch Block,Core.Throttling,SharePointAcsContext,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\SharePointContext.cs,RenewAccessTokenIfNeeded,The method has an empty catch block.
Magic Number,Core.Throttling,ClientContextExtension,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\ClientContextExtensions.cs,ExecuteQueryWithIncrementalRetry,The following statement contains a magic number: while (retryAttempts < retryCount)              {                  try                  {                      context.ExecuteQuery();                      return;                    }                  catch (WebException wex)                  {                      var response = wex.Response as HttpWebResponse;                      // Check if request was throttled - http status code 429                      // Check is request failed due to server unavailable - http status code 503                      if (response != null && (response.StatusCode == (HttpStatusCode)429 || response.StatusCode == (HttpStatusCode)503))                      {                          // Output status to console. Should be changed as Debug.WriteLine for production usage.                          Console.WriteLine(string.Format("CSOM request frequency exceeded usage limits. Sleeping for {0} seconds before retrying."'                                           backoffInterval));                            //Add delay for retry                          System.Threading.Thread.Sleep(backoffInterval);                            //Add to retry count and increase delay.                          retryAttempts++;                          backoffInterval = backoffInterval * 2;                      }                      else                      {                          throw;                      }                  }              }
Magic Number,Core.Throttling,ClientContextExtension,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\ClientContextExtensions.cs,ExecuteQueryWithIncrementalRetry,The following statement contains a magic number: while (retryAttempts < retryCount)              {                  try                  {                      context.ExecuteQuery();                      return;                    }                  catch (WebException wex)                  {                      var response = wex.Response as HttpWebResponse;                      // Check if request was throttled - http status code 429                      // Check is request failed due to server unavailable - http status code 503                      if (response != null && (response.StatusCode == (HttpStatusCode)429 || response.StatusCode == (HttpStatusCode)503))                      {                          // Output status to console. Should be changed as Debug.WriteLine for production usage.                          Console.WriteLine(string.Format("CSOM request frequency exceeded usage limits. Sleeping for {0} seconds before retrying."'                                           backoffInterval));                            //Add delay for retry                          System.Threading.Thread.Sleep(backoffInterval);                            //Add to retry count and increase delay.                          retryAttempts++;                          backoffInterval = backoffInterval * 2;                      }                      else                      {                          throw;                      }                  }              }
Magic Number,Core.Throttling,ClientContextExtension,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\ClientContextExtensions.cs,ExecuteQueryWithIncrementalRetry,The following statement contains a magic number: while (retryAttempts < retryCount)              {                  try                  {                      context.ExecuteQuery();                      return;                    }                  catch (WebException wex)                  {                      var response = wex.Response as HttpWebResponse;                      // Check if request was throttled - http status code 429                      // Check is request failed due to server unavailable - http status code 503                      if (response != null && (response.StatusCode == (HttpStatusCode)429 || response.StatusCode == (HttpStatusCode)503))                      {                          // Output status to console. Should be changed as Debug.WriteLine for production usage.                          Console.WriteLine(string.Format("CSOM request frequency exceeded usage limits. Sleeping for {0} seconds before retrying."'                                           backoffInterval));                            //Add delay for retry                          System.Threading.Thread.Sleep(backoffInterval);                            //Add to retry count and increase delay.                          retryAttempts++;                          backoffInterval = backoffInterval * 2;                      }                      else                      {                          throw;                      }                  }              }
Magic Number,Core.Throttling,Program,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\Program.cs,Main,The following statement contains a magic number: using (var ctx = new ClientContext(serverUrl))              {                  //Provide account and pwd for connecting to the source                  var passWord = new SecureString();                  foreach (char c in password.ToCharArray()) passWord.AppendChar(c);                  ctx.Credentials = new SharePointOnlineCredentials(login' passWord);                    try                  {                      int number = 0;                      // This loop will be executed 1000 times' which will cause throttling to occur                      while (number < 1000)                      {                          // Let's try to create new folder based on Ticks to the given list as an example process                          var folder = ctx.Site.RootWeb.GetFolderByServerRelativeUrl(listUrlName);                          ctx.Load(folder);                          folder = folder.Folders.Add(DateTime.Now.Ticks.ToString());                          // Extension method for executing query with throttling checks                          ctx.ExecuteQueryWithIncrementalRetry(5' 30000); //5 retries' with a base delay of 30 seconds.                          // Status indication for execution.                          Console.WriteLine("CSOM request successful.");                          // For loop handling.                          number = number + 1;                      }                  }                  catch (MaximumRetryAttemptedException mex)                  {                      // Exception handling for the Maximum Retry Attempted                      Console.WriteLine(mex.Message);                  }              }
Magic Number,Core.Throttling,Program,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\Program.cs,Main,The following statement contains a magic number: using (var ctx = new ClientContext(serverUrl))              {                  //Provide account and pwd for connecting to the source                  var passWord = new SecureString();                  foreach (char c in password.ToCharArray()) passWord.AppendChar(c);                  ctx.Credentials = new SharePointOnlineCredentials(login' passWord);                    try                  {                      int number = 0;                      // This loop will be executed 1000 times' which will cause throttling to occur                      while (number < 1000)                      {                          // Let's try to create new folder based on Ticks to the given list as an example process                          var folder = ctx.Site.RootWeb.GetFolderByServerRelativeUrl(listUrlName);                          ctx.Load(folder);                          folder = folder.Folders.Add(DateTime.Now.Ticks.ToString());                          // Extension method for executing query with throttling checks                          ctx.ExecuteQueryWithIncrementalRetry(5' 30000); //5 retries' with a base delay of 30 seconds.                          // Status indication for execution.                          Console.WriteLine("CSOM request successful.");                          // For loop handling.                          number = number + 1;                      }                  }                  catch (MaximumRetryAttemptedException mex)                  {                      // Exception handling for the Maximum Retry Attempted                      Console.WriteLine(mex.Message);                  }              }
Magic Number,Core.Throttling,Program,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\Program.cs,Main,The following statement contains a magic number: using (var ctx = new ClientContext(serverUrl))              {                  //Provide account and pwd for connecting to the source                  var passWord = new SecureString();                  foreach (char c in password.ToCharArray()) passWord.AppendChar(c);                  ctx.Credentials = new SharePointOnlineCredentials(login' passWord);                    try                  {                      int number = 0;                      // This loop will be executed 1000 times' which will cause throttling to occur                      while (number < 1000)                      {                          // Let's try to create new folder based on Ticks to the given list as an example process                          var folder = ctx.Site.RootWeb.GetFolderByServerRelativeUrl(listUrlName);                          ctx.Load(folder);                          folder = folder.Folders.Add(DateTime.Now.Ticks.ToString());                          // Extension method for executing query with throttling checks                          ctx.ExecuteQueryWithIncrementalRetry(5' 30000); //5 retries' with a base delay of 30 seconds.                          // Status indication for execution.                          Console.WriteLine("CSOM request successful.");                          // For loop handling.                          number = number + 1;                      }                  }                  catch (MaximumRetryAttemptedException mex)                  {                      // Exception handling for the Maximum Retry Attempted                      Console.WriteLine(mex.Message);                  }              }
Magic Number,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
Magic Number,Core.Throttling,TokenHelper,C:\repos\OfficeDev_PnP\Samples\Core.Throttling\Core.Throttling\TokenHelper.cs,GetRealmFromTargetUrl,The following statement contains a magic number: try              {                  using (request.GetResponse())                  {                  }              }              catch (WebException e)              {                  if (e.Response == null)                  {                      return null;                  }                    string bearerResponseHeader = e.Response.Headers["WWW-Authenticate"];                  if (string.IsNullOrEmpty(bearerResponseHeader))                  {                      return null;                  }                    const string bearer = "Bearer realm=\"";                  int bearerIndex = bearerResponseHeader.IndexOf(bearer' StringComparison.Ordinal);                  if (bearerIndex < 0)                  {                      return null;                  }                    int realmIndex = bearerIndex + bearer.Length;                    if (bearerResponseHeader.Length >= realmIndex + 36)                  {                      string targetRealm = bearerResponseHeader.Substring(realmIndex' 36);                        Guid realmGuid;                        if (Guid.TryParse(targetRealm' out realmGuid))                      {                          return targetRealm;                      }                  }              }
