Implementation smell,Namespace,Class,File,Method,Description
Long Method,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button3_Click,The method has 107 lines of code.
Complex Method,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button2_Click,Cyclomatic complexity of the method is 8
Complex Method,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button3_Click,Cyclomatic complexity of the method is 9
Complex Method,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button4_Click,Cyclomatic complexity of the method is 9
Complex Method,Core.ODataBatchWeb.ODataHelpers,ODataRequest,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\ODataHelpers\ODataRequest.cs,SetHeader,Cyclomatic complexity of the method is 13
Long Parameter List,Core.ODataBatchWeb,SharePointContext,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,SharePointContext,The method has 5 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber
Long Parameter List,Core.ODataBatchWeb,SharePointContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Core.ODataBatchWeb,SharePointAcsContext,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,SharePointAcsContext,The method has 7 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextToken' contextTokenObj
Long Parameter List,Core.ODataBatchWeb,SharePointAcsContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Core.ODataBatchWeb,SharePointHighTrustContext,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,SharePointHighTrustContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity
Long Parameter List,Core.ODataBatchWeb,SharePointHighTrustContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CreateSharePointContext,The method has 6 parameters. Parameters: spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' httpRequest
Long Parameter List,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,GetAccessToken,The method has 5 parameters. Parameters: authorizationCode' targetPrincipalName' targetHost' targetRealm' redirectUri
Long Parameter List,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,GetClientContextWithAuthorizationCode,The method has 5 parameters. Parameters: targetUrl' targetPrincipalName' authorizationCode' targetRealm' redirectUri
Long Parameter List,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,IssueToken,The method has 9 parameters. Parameters: sourceApplication' issuerApplication' sourceRealm' targetApplication' targetRealm' targetApplicationHostName' trustedForDelegation' claims' appOnly
Long Parameter List,Core.ODataBatchWeb,SharePointContextToken,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,SharePointContextToken,The method has 5 parameters. Parameters: issuer' audience' validFrom' validTo' claims
Long Parameter List,Core.ODataBatchWeb,SharePointContextToken,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,SharePointContextToken,The method has 7 parameters. Parameters: issuer' audience' validFrom' validTo' claims' issuerToken' actorToken
Long Parameter List,Core.ODataBatchWeb,SharePointContextToken,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,SharePointContextToken,The method has 6 parameters. Parameters: issuer' audience' validFrom' validTo' claims' signingCredentials
Long Identifier,Core.ODataBatchWeb,SharePointContext,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,GetDatabaseConnectionString,The length of the parameter LocalDBInstanceForDebuggingKey is 30.
Long Identifier,Core.ODataBatchWeb,SharePointContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the parameter SPHasRedirectedToSharePointKey is 30.
Long Identifier,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,,The length of the parameter AcsMetadataEndPointRelativeUrl is 30.
Long Identifier,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,,The length of the parameter TrustedForImpersonationClaimType is 32.
Long Identifier,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,,The length of the parameter ClientSigningCertificatePassword is 32.
Long Identifier,Core.ODataBatchWeb,AcsMetadataParser,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,GetMetadataDocument,The length of the parameter acsMetadataEndpointUrlWithRealm is 31.
Long Statement,Core.ODataBatchWeb,SharePointContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            // Removes the values that are included in {StandardTokens}' as {StandardTokens} will be inserted at the beginning of the query string. " is 135.
Long Statement,Core.ODataBatchWeb,SharePointContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CheckRedirectionStatus,The length of the statement  "            string redirectUrlString = TokenHelper.GetAppContextTokenRequestUrl(spHostUrl.AbsoluteUri' Uri.EscapeDataString(returnUrlString)); " is 130.
Long Statement,Core.ODataBatchWeb,SharePointAcsContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointAcsContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' contextTokenString' contextToken); " is 132.
Long Statement,Core.ODataBatchWeb,SharePointHighTrustContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            if (logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null) " is 131.
Long Statement,Core.ODataBatchWeb,SharePointHighTrustContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CreateSharePointContext,The length of the statement  "            return new SharePointHighTrustContext(spHostUrl' spAppWebUrl' spLanguage' spClientTag' spProductNumber' logonUserIdentity); " is 123.
Long Statement,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,GetAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithRefreshToken(clientId' ClientSecret' refreshToken' resource); " is 151.
Long Statement,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,GetAppOnlyAccessToken,The length of the statement  "            OAuth2AccessTokenRequest oauth2Request = OAuth2MessageFactory.CreateAccessTokenRequestWithClientCredentials(clientId' ClientSecret' resource); " is 142.
Long Statement,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,CreateAppEventClientContext,The length of the statement  "            Uri sharepointUrl = useAppWeb ? properties.AppEventProperties.AppWebFullUrl : properties.AppEventProperties.HostWebFullUrl; " is 123.
Long Statement,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,GetClientContextWithAuthorizationCode,The length of the statement  "            return GetClientContextWithAuthorizationCode(targetUrl' SharePointPrincipal' authorizationCode' GetRealmFromTargetUrl(new Uri(targetUrl))' redirectUri); " is 152.
Long Statement,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,CreateAcsClientContextForUrl,The length of the statement  "            SharePointContextToken contextToken = ReadAndValidateContextToken(contextTokenString' OperationContext.Current.IncomingMessageHeaders.To.Host); " is 143.
Long Statement,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,IssueToken,The length of the statement  "            string issuer = string.IsNullOrEmpty(sourceRealm) ? issuerApplication : string.Format("{0}@{1}"' issuerApplication' sourceRealm); " is 129.
Long Statement,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,IssueToken,The length of the statement  "            string nameid = string.IsNullOrEmpty(sourceRealm) ? sourceApplication : string.Format("{0}@{1}"' sourceApplication' sourceRealm); " is 129.
Long Statement,Core.ODataBatchWeb,TokenHelper,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,IssueToken,The length of the statement  "            List<JsonWebTokenClaim> outerClaims = null == claims ? new List<JsonWebTokenClaim>() : new List<JsonWebTokenClaim>(claims); " is 123.
Long Statement,Core.ODataBatchWeb,SharePointContextToken,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\TokenHelper.cs,Create,The length of the statement  "            return new SharePointContextToken(contextToken.Issuer' contextToken.Audience' contextToken.ValidFrom' contextToken.ValidTo' contextToken.Claims); " is 145.
Complex Conditional,Core.ODataBatchWeb,SharePointHighTrustContextProvider,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,CreateSharePointContext,The conditional expression  "logonUserIdentity == null || !logonUserIdentity.IsAuthenticated || logonUserIdentity.IsGuest || logonUserIdentity.User == null"  is complex.
Empty Catch Block,Core.ODataBatchWeb,SharePointAcsContext,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\SharePointContext.cs,RenewAccessTokenIfNeeded,The method has an empty catch block.
Magic Number,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button2_Click,The following statement contains a magic number: switch (oDataBatchReader.State)                      {                          case ODataBatchReaderState.Initial:                                // Optionally' handle the start of a batch payload.                              break;                          case ODataBatchReaderState.Operation:                                // Start of an operation (either top-level or in a changeset)                              var operationResponse = oDataBatchReader.CreateOperationResponseMessage();                                // Response's ATOM markup parsing and presentation section                              using (var stream = operationResponse.GetStream())                              {                                  List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                    var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                    // Bind data to the grid on the page.                                     // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                     // For simplicity' this sample assumes status 200 (the list items are returned).                                  switch (listRetrievalCount)                                  {                                      case 2:                                          GridView2.DataSource = itemTitles;                                          GridView2.DataBind();                                          listRetrievalCount--;                                          break;                                        case 1:                                          GridView1.DataSource = itemTitles;                                          GridView1.DataBind();                                          listRetrievalCount--;                                          break;                                  }                              };                              break;                          case ODataBatchReaderState.ChangesetStart:                              // Optionally' handle the start of a change set.                              break;                            case ODataBatchReaderState.ChangesetEnd:                              // When this sample was created' SharePoint did not support "all or nothing" transactions.                               // If that changes in the future this is where you would commit the transaction.                              break;                            case ODataBatchReaderState.Exception:                              // In a producition app handle exeception. Omitted for simplicity in this sample app.                              break;                      }
Magic Number,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button3_Click,The following statement contains a magic number: switch (oDataBatchReader.State)                      {                          case ODataBatchReaderState.Initial:                              // Optionally' handle the start of a batch payload.                              break;                            case ODataBatchReaderState.Operation:                              // Encountered an operation (either top-level or in a changeset)                              var operationResponse = oDataBatchReader.CreateOperationResponseMessage();                                // Response ATOM markup parsing and presentation                              using (var stream = operationResponse.GetStream())                              {                                    switch (operationCount)                                  {                                      case 2: // The "add new list" operation                                                                                    if (operationResponse.StatusCode == 201)                                          {                                              AddListResponse.Text = "Your list was created!";                                          }                                          else                                          {                                              AddListResponse.Text = "Your list was not created. Status returned: " + operationResponse.StatusCode.ToString();                                          }                                            operationCount--;                                          break;                                        case 1: // The "List of Lists" operation                                            // Bind data to the grid on the page.                                             // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                             // For simplicity' this sample assumes status 200 (the list items are returned).                                          List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                          var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                          GridView3.DataSource = itemTitles;                                          GridView3.DataBind();                                          operationCount--;                                          break;                                  }                              };                              break;                            case ODataBatchReaderState.ChangesetStart:                              // Optionally' handle the start of a change set.                              break;                            case ODataBatchReaderState.ChangesetEnd:                              // When this sample was created' SharePoint did not support "all or nothing" transactions.                               // If that changes in the future this is where you would commit the transaction.                              break;                            case ODataBatchReaderState.Exception:                              // In a producition app handle exeception. Omitted for simplicity in this sample app.                              break;                      }
Magic Number,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button3_Click,The following statement contains a magic number: switch (oDataBatchReader.State)                      {                          case ODataBatchReaderState.Initial:                              // Optionally' handle the start of a batch payload.                              break;                            case ODataBatchReaderState.Operation:                              // Encountered an operation (either top-level or in a changeset)                              var operationResponse = oDataBatchReader.CreateOperationResponseMessage();                                // Response ATOM markup parsing and presentation                              using (var stream = operationResponse.GetStream())                              {                                    switch (operationCount)                                  {                                      case 2: // The "add new list" operation                                                                                    if (operationResponse.StatusCode == 201)                                          {                                              AddListResponse.Text = "Your list was created!";                                          }                                          else                                          {                                              AddListResponse.Text = "Your list was not created. Status returned: " + operationResponse.StatusCode.ToString();                                          }                                            operationCount--;                                          break;                                        case 1: // The "List of Lists" operation                                            // Bind data to the grid on the page.                                             // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                             // For simplicity' this sample assumes status 200 (the list items are returned).                                          List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                          var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                          GridView3.DataSource = itemTitles;                                          GridView3.DataBind();                                          operationCount--;                                          break;                                  }                              };                              break;                            case ODataBatchReaderState.ChangesetStart:                              // Optionally' handle the start of a change set.                              break;                            case ODataBatchReaderState.ChangesetEnd:                              // When this sample was created' SharePoint did not support "all or nothing" transactions.                               // If that changes in the future this is where you would commit the transaction.                              break;                            case ODataBatchReaderState.Exception:                              // In a producition app handle exeception. Omitted for simplicity in this sample app.                              break;                      }
Magic Number,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button4_Click,The following statement contains a magic number: switch (oDataBatchReader.State)                      {                          case ODataBatchReaderState.Initial:                              // Optionally' handle the start of a batch payload.                              break;                            case ODataBatchReaderState.Operation:                              // Encountered an operation (either top-level or in a changeset)                              var operationResponse = oDataBatchReader.CreateOperationResponseMessage();                                // Response ATOM markup parsing and presentation                              using (var stream = operationResponse.GetStream())                              {                                    switch (operationCount)                                  {                                      case 2: // The "delete list" operation                                            if (operationResponse.StatusCode == 200)                                          {                                              DeleteListResponse.Text = "Your list was deleted!";                                          }                                          else                                          {                                              DeleteListResponse.Text = "Your list was not deleted. Status returned: " + operationResponse.StatusCode.ToString();                                          }                                            operationCount--;                                          break;                                        case 1: // The "List of Lists" operation                                            // Bind data to the grid on the page.                                             // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                             // For simplicity' this sample assumes status 200 (the list items are returned).                                          List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                          var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                          GridView4.DataSource = itemTitles;                                          GridView4.DataBind();                                          operationCount--;                                          break;                                  }                              };                              break;                            case ODataBatchReaderState.ChangesetStart:                              // Optionally' handle the start of a change set.                              break;                            case ODataBatchReaderState.ChangesetEnd:                              // When this sample was created' SharePoint did not support "all or nothing" transactions.                               // If that changes in the future this is where you would commit the transaction.                              break;                            case ODataBatchReaderState.Exception:                              // In a producition app handle exeception. Omitted for simplicity in this sample app.                              break;                      }
Magic Number,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button4_Click,The following statement contains a magic number: switch (oDataBatchReader.State)                      {                          case ODataBatchReaderState.Initial:                              // Optionally' handle the start of a batch payload.                              break;                            case ODataBatchReaderState.Operation:                              // Encountered an operation (either top-level or in a changeset)                              var operationResponse = oDataBatchReader.CreateOperationResponseMessage();                                // Response ATOM markup parsing and presentation                              using (var stream = operationResponse.GetStream())                              {                                    switch (operationCount)                                  {                                      case 2: // The "delete list" operation                                            if (operationResponse.StatusCode == 200)                                          {                                              DeleteListResponse.Text = "Your list was deleted!";                                          }                                          else                                          {                                              DeleteListResponse.Text = "Your list was not deleted. Status returned: " + operationResponse.StatusCode.ToString();                                          }                                            operationCount--;                                          break;                                        case 1: // The "List of Lists" operation                                            // Bind data to the grid on the page.                                             // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                             // For simplicity' this sample assumes status 200 (the list items are returned).                                          List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                          var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                          GridView4.DataSource = itemTitles;                                          GridView4.DataBind();                                          operationCount--;                                          break;                                  }                              };                              break;                            case ODataBatchReaderState.ChangesetStart:                              // Optionally' handle the start of a change set.                              break;                            case ODataBatchReaderState.ChangesetEnd:                              // When this sample was created' SharePoint did not support "all or nothing" transactions.                               // If that changes in the future this is where you would commit the transaction.                              break;                            case ODataBatchReaderState.Exception:                              // In a producition app handle exeception. Omitted for simplicity in this sample app.                              break;                      }
Missing Default,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Page_PreInit,The following switch statement is missing a default case: switch (SharePointContextProvider.CheckRedirectionStatus(Context' out redirectUrl))              {                  case RedirectionStatus.Ok:                      return;                  case RedirectionStatus.ShouldRedirect:                      Response.Redirect(redirectUrl.AbsoluteUri' endResponse: true);                      break;                  case RedirectionStatus.CanNotRedirect:                      Response.Write("An error occurred while processing your request.");                      Response.End();                      break;              }
Missing Default,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button2_Click,The following switch statement is missing a default case: switch (oDataBatchReader.State)                      {                          case ODataBatchReaderState.Initial:                                // Optionally' handle the start of a batch payload.                              break;                          case ODataBatchReaderState.Operation:                                // Start of an operation (either top-level or in a changeset)                              var operationResponse = oDataBatchReader.CreateOperationResponseMessage();                                // Response's ATOM markup parsing and presentation section                              using (var stream = operationResponse.GetStream())                              {                                  List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                    var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                    // Bind data to the grid on the page.                                     // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                     // For simplicity' this sample assumes status 200 (the list items are returned).                                  switch (listRetrievalCount)                                  {                                      case 2:                                          GridView2.DataSource = itemTitles;                                          GridView2.DataBind();                                          listRetrievalCount--;                                          break;                                        case 1:                                          GridView1.DataSource = itemTitles;                                          GridView1.DataBind();                                          listRetrievalCount--;                                          break;                                  }                              };                              break;                          case ODataBatchReaderState.ChangesetStart:                              // Optionally' handle the start of a change set.                              break;                            case ODataBatchReaderState.ChangesetEnd:                              // When this sample was created' SharePoint did not support "all or nothing" transactions.                               // If that changes in the future this is where you would commit the transaction.                              break;                            case ODataBatchReaderState.Exception:                              // In a producition app handle exeception. Omitted for simplicity in this sample app.                              break;                      }
Missing Default,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button2_Click,The following switch statement is missing a default case: switch (listRetrievalCount)                                  {                                      case 2:                                          GridView2.DataSource = itemTitles;                                          GridView2.DataBind();                                          listRetrievalCount--;                                          break;                                        case 1:                                          GridView1.DataSource = itemTitles;                                          GridView1.DataBind();                                          listRetrievalCount--;                                          break;                                  }
Missing Default,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button3_Click,The following switch statement is missing a default case: switch (oDataBatchReader.State)                      {                          case ODataBatchReaderState.Initial:                              // Optionally' handle the start of a batch payload.                              break;                            case ODataBatchReaderState.Operation:                              // Encountered an operation (either top-level or in a changeset)                              var operationResponse = oDataBatchReader.CreateOperationResponseMessage();                                // Response ATOM markup parsing and presentation                              using (var stream = operationResponse.GetStream())                              {                                    switch (operationCount)                                  {                                      case 2: // The "add new list" operation                                                                                    if (operationResponse.StatusCode == 201)                                          {                                              AddListResponse.Text = "Your list was created!";                                          }                                          else                                          {                                              AddListResponse.Text = "Your list was not created. Status returned: " + operationResponse.StatusCode.ToString();                                          }                                            operationCount--;                                          break;                                        case 1: // The "List of Lists" operation                                            // Bind data to the grid on the page.                                             // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                             // For simplicity' this sample assumes status 200 (the list items are returned).                                          List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                          var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                          GridView3.DataSource = itemTitles;                                          GridView3.DataBind();                                          operationCount--;                                          break;                                  }                              };                              break;                            case ODataBatchReaderState.ChangesetStart:                              // Optionally' handle the start of a change set.                              break;                            case ODataBatchReaderState.ChangesetEnd:                              // When this sample was created' SharePoint did not support "all or nothing" transactions.                               // If that changes in the future this is where you would commit the transaction.                              break;                            case ODataBatchReaderState.Exception:                              // In a producition app handle exeception. Omitted for simplicity in this sample app.                              break;                      }
Missing Default,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button3_Click,The following switch statement is missing a default case: switch (operationCount)                                  {                                      case 2: // The "add new list" operation                                                                                    if (operationResponse.StatusCode == 201)                                          {                                              AddListResponse.Text = "Your list was created!";                                          }                                          else                                          {                                              AddListResponse.Text = "Your list was not created. Status returned: " + operationResponse.StatusCode.ToString();                                          }                                            operationCount--;                                          break;                                        case 1: // The "List of Lists" operation                                            // Bind data to the grid on the page.                                             // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                             // For simplicity' this sample assumes status 200 (the list items are returned).                                          List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                          var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                          GridView3.DataSource = itemTitles;                                          GridView3.DataBind();                                          operationCount--;                                          break;                                  }
Missing Default,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button4_Click,The following switch statement is missing a default case: switch (oDataBatchReader.State)                      {                          case ODataBatchReaderState.Initial:                              // Optionally' handle the start of a batch payload.                              break;                            case ODataBatchReaderState.Operation:                              // Encountered an operation (either top-level or in a changeset)                              var operationResponse = oDataBatchReader.CreateOperationResponseMessage();                                // Response ATOM markup parsing and presentation                              using (var stream = operationResponse.GetStream())                              {                                    switch (operationCount)                                  {                                      case 2: // The "delete list" operation                                            if (operationResponse.StatusCode == 200)                                          {                                              DeleteListResponse.Text = "Your list was deleted!";                                          }                                          else                                          {                                              DeleteListResponse.Text = "Your list was not deleted. Status returned: " + operationResponse.StatusCode.ToString();                                          }                                            operationCount--;                                          break;                                        case 1: // The "List of Lists" operation                                            // Bind data to the grid on the page.                                             // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                             // For simplicity' this sample assumes status 200 (the list items are returned).                                          List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                          var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                          GridView4.DataSource = itemTitles;                                          GridView4.DataBind();                                          operationCount--;                                          break;                                  }                              };                              break;                            case ODataBatchReaderState.ChangesetStart:                              // Optionally' handle the start of a change set.                              break;                            case ODataBatchReaderState.ChangesetEnd:                              // When this sample was created' SharePoint did not support "all or nothing" transactions.                               // If that changes in the future this is where you would commit the transaction.                              break;                            case ODataBatchReaderState.Exception:                              // In a producition app handle exeception. Omitted for simplicity in this sample app.                              break;                      }
Missing Default,Core.ODataBatchWeb,Default,C:\research\architectureSmells\repos\OfficeDev_PnP\Samples\Core.ODataBatch\Core.ODataBatchWeb\Pages\Default.aspx.cs,Button4_Click,The following switch statement is missing a default case: switch (operationCount)                                  {                                      case 2: // The "delete list" operation                                            if (operationResponse.StatusCode == 200)                                          {                                              DeleteListResponse.Text = "Your list was deleted!";                                          }                                          else                                          {                                              DeleteListResponse.Text = "Your list was not deleted. Status returned: " + operationResponse.StatusCode.ToString();                                          }                                            operationCount--;                                          break;                                        case 1: // The "List of Lists" operation                                            // Bind data to the grid on the page.                                             // In a production app' check operationResponse.StatusCode and handle non-200 statuses.                                             // For simplicity' this sample assumes status 200 (the list items are returned).                                          List<XElement> entries = SharePointDataHelpers.ListDataHelper.ExtractListItemsFromATOMResponse(stream);                                          var itemTitles = SharePointDataHelpers.ListDataHelper.GetItemTitles(entries);                                          GridView4.DataSource = itemTitles;                                          GridView4.DataBind();                                          operationCount--;                                          break;                                  }
