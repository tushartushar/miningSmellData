Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,Cyclomatic complexity of the method is 8
Complex Method,ProBuilder2.Actions,RebuildSharedIndices,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Repair\RebuildSharedIndices.cs,Rebuild,Cyclomatic complexity of the method is 8
Long Statement,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The length of the statement  "					if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) { " is 162.
Long Statement,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The length of the statement  "				faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group " is 122.
Long Statement,ProBuilder2.Actions,ExtrudeFace,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Geometry\ExtrudeFace.cs,VerifyExtrudeFace,The length of the statement  "	return pb_Editor.instance != null && (pb_Editor.instance.selectedEdgeCount > 0 || pb_Editor.instance.selectedFaceCount > 0); " is 124.
Long Statement,ProBuilder2.Actions,CleanUpLeakedMeshes,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Repair\CleanUpLeakedMeshes.cs,CleanUp,The length of the statement  "	if (EditorUtility.DisplayDialog ("Clean Up Leaked Meshes?"' "Cleaning leaked meshes will permenantly delete any deleted pb_Objects' are you sure you don't want to undo?"' "Clean Up"' "Stay Dirty")) { " is 199.
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int n = 0; n < m.subMeshCount; n++) {  	int[] tris = m.GetTriangles (n);  	for (int i = 0; i < tris.Length; i += 3) {  		int index = -1;  		if (preserveFaces) {  			for (int j = 0; j < faces.Count; j++) {  				if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  					index = j;  					break;  				}  			}  		}  		if (index > -1 && preserveFaces) {  			int len = faces [index].indices.Length;  			int[] arr = new int[len + 3];  			System.Array.Copy (faces [index].indices' 0' arr' 0' len);  			arr [len + 0] = tris [i + 0];  			arr [len + 1] = tris [i + 1];  			arr [len + 2] = tris [i + 2];  			faces [index].SetIndices (arr);  			faces [index].RebuildCaches ();  		}  		else {  			int[] faceTris;  			if (preserveFaces) {  				faceTris = new int[3] {  					tris [i + 0]'  					tris [i + 1]'  					tris [i + 2]  				};  			}  			else {  				verts.Add (m_vertices [tris [i + 0]]);  				verts.Add (m_vertices [tris [i + 1]]);  				verts.Add (m_vertices [tris [i + 2]]);  				faceTris = new int[3] {  					i + 0'  					i + 1'  					i + 2  				};  			}  			faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  			-1' // texture group  			-1' // element group  			false' // manualUV   			Color.white));  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int i = 0; i < tris.Length; i += 3) {  	int index = -1;  	if (preserveFaces) {  		for (int j = 0; j < faces.Count; j++) {  			if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  				index = j;  				break;  			}  		}  	}  	if (index > -1 && preserveFaces) {  		int len = faces [index].indices.Length;  		int[] arr = new int[len + 3];  		System.Array.Copy (faces [index].indices' 0' arr' 0' len);  		arr [len + 0] = tris [i + 0];  		arr [len + 1] = tris [i + 1];  		arr [len + 2] = tris [i + 2];  		faces [index].SetIndices (arr);  		faces [index].RebuildCaches ();  	}  	else {  		int[] faceTris;  		if (preserveFaces) {  			faceTris = new int[3] {  				tris [i + 0]'  				tris [i + 1]'  				tris [i + 2]  			};  		}  		else {  			verts.Add (m_vertices [tris [i + 0]]);  			verts.Add (m_vertices [tris [i + 1]]);  			verts.Add (m_vertices [tris [i + 2]]);  			faceTris = new int[3] {  				i + 0'  				i + 1'  				i + 2  			};  		}  		faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  		-1' // texture group  		-1' // element group  		false' // manualUV   		Color.white));  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: i += 3
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (preserveFaces) {  	for (int j = 0; j < faces.Count; j++) {  		if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  			index = j;  			break;  		}  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: for (int j = 0; j < faces.Count; j++) {  	if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  		index = j;  		break;  	}  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (faces [j].distinctIndices.Contains (tris [i + 0]) || faces [j].distinctIndices.Contains (tris [i + 1]) || faces [j].distinctIndices.Contains (tris [i + 2])) {  	index = j;  	break;  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (index > -1 && preserveFaces) {  	int len = faces [index].indices.Length;  	int[] arr = new int[len + 3];  	System.Array.Copy (faces [index].indices' 0' arr' 0' len);  	arr [len + 0] = tris [i + 0];  	arr [len + 1] = tris [i + 1];  	arr [len + 2] = tris [i + 2];  	faces [index].SetIndices (arr);  	faces [index].RebuildCaches ();  }  else {  	int[] faceTris;  	if (preserveFaces) {  		faceTris = new int[3] {  			tris [i + 0]'  			tris [i + 1]'  			tris [i + 2]  		};  	}  	else {  		verts.Add (m_vertices [tris [i + 0]]);  		verts.Add (m_vertices [tris [i + 1]]);  		verts.Add (m_vertices [tris [i + 2]]);  		faceTris = new int[3] {  			i + 0'  			i + 1'  			i + 2  		};  	}  	faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  	-1' // texture group  	-1' // element group  	false' // manualUV   	Color.white));  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (index > -1 && preserveFaces) {  	int len = faces [index].indices.Length;  	int[] arr = new int[len + 3];  	System.Array.Copy (faces [index].indices' 0' arr' 0' len);  	arr [len + 0] = tris [i + 0];  	arr [len + 1] = tris [i + 1];  	arr [len + 2] = tris [i + 2];  	faces [index].SetIndices (arr);  	faces [index].RebuildCaches ();  }  else {  	int[] faceTris;  	if (preserveFaces) {  		faceTris = new int[3] {  			tris [i + 0]'  			tris [i + 1]'  			tris [i + 2]  		};  	}  	else {  		verts.Add (m_vertices [tris [i + 0]]);  		verts.Add (m_vertices [tris [i + 1]]);  		verts.Add (m_vertices [tris [i + 2]]);  		faceTris = new int[3] {  			i + 0'  			i + 1'  			i + 2  		};  	}  	faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  	-1' // texture group  	-1' // element group  	false' // manualUV   	Color.white));  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (index > -1 && preserveFaces) {  	int len = faces [index].indices.Length;  	int[] arr = new int[len + 3];  	System.Array.Copy (faces [index].indices' 0' arr' 0' len);  	arr [len + 0] = tris [i + 0];  	arr [len + 1] = tris [i + 1];  	arr [len + 2] = tris [i + 2];  	faces [index].SetIndices (arr);  	faces [index].RebuildCaches ();  }  else {  	int[] faceTris;  	if (preserveFaces) {  		faceTris = new int[3] {  			tris [i + 0]'  			tris [i + 1]'  			tris [i + 2]  		};  	}  	else {  		verts.Add (m_vertices [tris [i + 0]]);  		verts.Add (m_vertices [tris [i + 1]]);  		verts.Add (m_vertices [tris [i + 2]]);  		faceTris = new int[3] {  			i + 0'  			i + 1'  			i + 2  		};  	}  	faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  	-1' // texture group  	-1' // element group  	false' // manualUV   	Color.white));  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (index > -1 && preserveFaces) {  	int len = faces [index].indices.Length;  	int[] arr = new int[len + 3];  	System.Array.Copy (faces [index].indices' 0' arr' 0' len);  	arr [len + 0] = tris [i + 0];  	arr [len + 1] = tris [i + 1];  	arr [len + 2] = tris [i + 2];  	faces [index].SetIndices (arr);  	faces [index].RebuildCaches ();  }  else {  	int[] faceTris;  	if (preserveFaces) {  		faceTris = new int[3] {  			tris [i + 0]'  			tris [i + 1]'  			tris [i + 2]  		};  	}  	else {  		verts.Add (m_vertices [tris [i + 0]]);  		verts.Add (m_vertices [tris [i + 1]]);  		verts.Add (m_vertices [tris [i + 2]]);  		faceTris = new int[3] {  			i + 0'  			i + 1'  			i + 2  		};  	}  	faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  	-1' // texture group  	-1' // element group  	false' // manualUV   	Color.white));  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (index > -1 && preserveFaces) {  	int len = faces [index].indices.Length;  	int[] arr = new int[len + 3];  	System.Array.Copy (faces [index].indices' 0' arr' 0' len);  	arr [len + 0] = tris [i + 0];  	arr [len + 1] = tris [i + 1];  	arr [len + 2] = tris [i + 2];  	faces [index].SetIndices (arr);  	faces [index].RebuildCaches ();  }  else {  	int[] faceTris;  	if (preserveFaces) {  		faceTris = new int[3] {  			tris [i + 0]'  			tris [i + 1]'  			tris [i + 2]  		};  	}  	else {  		verts.Add (m_vertices [tris [i + 0]]);  		verts.Add (m_vertices [tris [i + 1]]);  		verts.Add (m_vertices [tris [i + 2]]);  		faceTris = new int[3] {  			i + 0'  			i + 1'  			i + 2  		};  	}  	faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  	-1' // texture group  	-1' // element group  	false' // manualUV   	Color.white));  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (index > -1 && preserveFaces) {  	int len = faces [index].indices.Length;  	int[] arr = new int[len + 3];  	System.Array.Copy (faces [index].indices' 0' arr' 0' len);  	arr [len + 0] = tris [i + 0];  	arr [len + 1] = tris [i + 1];  	arr [len + 2] = tris [i + 2];  	faces [index].SetIndices (arr);  	faces [index].RebuildCaches ();  }  else {  	int[] faceTris;  	if (preserveFaces) {  		faceTris = new int[3] {  			tris [i + 0]'  			tris [i + 1]'  			tris [i + 2]  		};  	}  	else {  		verts.Add (m_vertices [tris [i + 0]]);  		verts.Add (m_vertices [tris [i + 1]]);  		verts.Add (m_vertices [tris [i + 2]]);  		faceTris = new int[3] {  			i + 0'  			i + 1'  			i + 2  		};  	}  	faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  	-1' // texture group  	-1' // element group  	false' // manualUV   	Color.white));  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (index > -1 && preserveFaces) {  	int len = faces [index].indices.Length;  	int[] arr = new int[len + 3];  	System.Array.Copy (faces [index].indices' 0' arr' 0' len);  	arr [len + 0] = tris [i + 0];  	arr [len + 1] = tris [i + 1];  	arr [len + 2] = tris [i + 2];  	faces [index].SetIndices (arr);  	faces [index].RebuildCaches ();  }  else {  	int[] faceTris;  	if (preserveFaces) {  		faceTris = new int[3] {  			tris [i + 0]'  			tris [i + 1]'  			tris [i + 2]  		};  	}  	else {  		verts.Add (m_vertices [tris [i + 0]]);  		verts.Add (m_vertices [tris [i + 1]]);  		verts.Add (m_vertices [tris [i + 2]]);  		faceTris = new int[3] {  			i + 0'  			i + 1'  			i + 2  		};  	}  	faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  	-1' // texture group  	-1' // element group  	false' // manualUV   	Color.white));  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (index > -1 && preserveFaces) {  	int len = faces [index].indices.Length;  	int[] arr = new int[len + 3];  	System.Array.Copy (faces [index].indices' 0' arr' 0' len);  	arr [len + 0] = tris [i + 0];  	arr [len + 1] = tris [i + 1];  	arr [len + 2] = tris [i + 2];  	faces [index].SetIndices (arr);  	faces [index].RebuildCaches ();  }  else {  	int[] faceTris;  	if (preserveFaces) {  		faceTris = new int[3] {  			tris [i + 0]'  			tris [i + 1]'  			tris [i + 2]  		};  	}  	else {  		verts.Add (m_vertices [tris [i + 0]]);  		verts.Add (m_vertices [tris [i + 1]]);  		verts.Add (m_vertices [tris [i + 2]]);  		faceTris = new int[3] {  			i + 0'  			i + 1'  			i + 2  		};  	}  	faces.Add (new pb_Face (faceTris' t.GetComponent<MeshRenderer> ().sharedMaterials [n]' new pb_UV ()' 0' // smoothing group  	-1' // texture group  	-1' // element group  	false' // manualUV   	Color.white));  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: arr [len + 2] = tris [i + 2];  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: arr [len + 2] = tris [i + 2];  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (preserveFaces) {  	faceTris = new int[3] {  		tris [i + 0]'  		tris [i + 1]'  		tris [i + 2]  	};  }  else {  	verts.Add (m_vertices [tris [i + 0]]);  	verts.Add (m_vertices [tris [i + 1]]);  	verts.Add (m_vertices [tris [i + 2]]);  	faceTris = new int[3] {  		i + 0'  		i + 1'  		i + 2  	};  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (preserveFaces) {  	faceTris = new int[3] {  		tris [i + 0]'  		tris [i + 1]'  		tris [i + 2]  	};  }  else {  	verts.Add (m_vertices [tris [i + 0]]);  	verts.Add (m_vertices [tris [i + 1]]);  	verts.Add (m_vertices [tris [i + 2]]);  	faceTris = new int[3] {  		i + 0'  		i + 1'  		i + 2  	};  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (preserveFaces) {  	faceTris = new int[3] {  		tris [i + 0]'  		tris [i + 1]'  		tris [i + 2]  	};  }  else {  	verts.Add (m_vertices [tris [i + 0]]);  	verts.Add (m_vertices [tris [i + 1]]);  	verts.Add (m_vertices [tris [i + 2]]);  	faceTris = new int[3] {  		i + 0'  		i + 1'  		i + 2  	};  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (preserveFaces) {  	faceTris = new int[3] {  		tris [i + 0]'  		tris [i + 1]'  		tris [i + 2]  	};  }  else {  	verts.Add (m_vertices [tris [i + 0]]);  	verts.Add (m_vertices [tris [i + 1]]);  	verts.Add (m_vertices [tris [i + 2]]);  	faceTris = new int[3] {  		i + 0'  		i + 1'  		i + 2  	};  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: if (preserveFaces) {  	faceTris = new int[3] {  		tris [i + 0]'  		tris [i + 1]'  		tris [i + 2]  	};  }  else {  	verts.Add (m_vertices [tris [i + 0]]);  	verts.Add (m_vertices [tris [i + 1]]);  	verts.Add (m_vertices [tris [i + 2]]);  	faceTris = new int[3] {  		i + 0'  		i + 1'  		i + 2  	};  }  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: faceTris = new int[3] {  	tris [i + 0]'  	tris [i + 1]'  	tris [i + 2]  };  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: faceTris = new int[3] {  	tris [i + 0]'  	tris [i + 1]'  	tris [i + 2]  };  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: verts.Add (m_vertices [tris [i + 2]]);  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: faceTris = new int[3] {  	i + 0'  	i + 1'  	i + 2  };  
Magic Number,ProBuilder2.Actions,ProBuilderizeMesh,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Actions\ProBuilderizeGameObject.cs,ProBuilderize,The following statement contains a magic number: faceTris = new int[3] {  	i + 0'  	i + 1'  	i + 2  };  
Magic Number,ProBuilder2.Actions,DegenerateTris,C:\repos\LudoRathowm_Platformer-master\Platformer-master\Platformer-master\Assets\ProCore\Prototype\Editor\MenuItems\Repair\DegenerateTris.cs,MenuRemoveDegenerateTriangles,The following statement contains a magic number: pb_Editor_Utility.ShowNotification ("Removed " + (count / 3) + " degenerate triangles.");  
