Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LoreSoft.MathExpressions,ConvertExpression,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\ConvertExpression.cs,Convert,Cyclomatic complexity of the method is 8
Complex Method,LoreSoft.MathExpressions,MathEvaluator,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\MathEvaluator.cs,ParseExpressionToQueue,Cyclomatic complexity of the method is 11
Complex Method,LoreSoft.MathExpressions,OperatorExpression,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\OperatorExpression.cs,OperatorExpression,Cyclomatic complexity of the method is 27
Complex Method,LoreSoft.MathExpressions.UnitConversion,TemperatureConverter,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\UnitConversion\TemperatureConverter.cs,Convert,Cyclomatic complexity of the method is 10
Complex Method,LoreSoft.MathExpressions.UnitConversion,TimeConverter,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\UnitConversion\TimeConverter.cs,Convert,Cyclomatic complexity of the method is 27
Long Statement,LoreSoft.MathExpressions,ConvertExpression,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\ConvertExpression.cs,AddToCache,The length of the statement  "			string key = string.Format (CultureInfo.InvariantCulture' ExpressionFormat' parrentKey' AttributeReader.GetAbbreviation (info)); " is 128.
Long Statement,LoreSoft.MathExpressions,FunctionExpression,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\FunctionExpression.cs,Execute,The length of the statement  "	MethodInfo method = typeof(Math).GetMethod (function' BindingFlags.Static | BindingFlags.Public' null' desiredMethodSignatureArgs' null); " is 137.
Long Statement,LoreSoft.MathExpressions,FunctionExpression,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\FunctionExpression.cs,Execute,The length of the statement  "		throw new InvalidOperationException (string.Format (CultureInfo.CurrentCulture' Resources.InvalidFunctionName' _function)); " is 123.
Long Statement,LoreSoft.MathExpressions,FunctionExpression,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\FunctionExpression.cs,IsTwoArgumentFunction,The length of the statement  "	bool isTwoArgumentFunction = Array.BinarySearch (twoArgumentMathFunctions' function' StringComparer.OrdinalIgnoreCase) >= 0; " is 124.
Long Statement,LoreSoft.MathExpressions,FunctionExpression,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\FunctionExpression.cs,IsOneArgumentFunction,The length of the statement  "	bool isOneArgumentFunction = Array.BinarySearch (oneArgumentMathFunctions' function' StringComparer.OrdinalIgnoreCase) >= 0; " is 124.
Long Statement,LoreSoft.MathExpressions,MathEvaluator,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\MathEvaluator.cs,RegisterFunction,The length of the statement  "		throw new ArgumentException (string.Format (CultureInfo.CurrentCulture' Resources.FunctionNameRegistered' functionName)' "functionName"); " is 137.
Long Statement,LoreSoft.MathExpressions,MathEvaluator,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\MathEvaluator.cs,TryNumber,The length of the statement  "	bool isNegative = NumberExpression.IsNegativeSign (_currentChar) && (lastChar == '\0' || lastChar == '(' || OperatorExpression.IsSymbol (lastChar)); " is 148.
Long Statement,LoreSoft.MathExpressions,MathEvaluator,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\MathEvaluator.cs,CalculateFromQueue,The length of the statement  "		throw new ParseException (String.Format ("{0}Items '{1}' were remaining on calculation stack."' Resources.InvalidSymbolOnStack' string.Join ("' "' _calculationStack))); " is 168.
Complex Conditional,LoreSoft.MathExpressions,MathEvaluator,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\MathEvaluator.cs,Precedence,The conditional expression  "c.Length == 1 && (c [0] == '*' || c [0] == '/' || c [0] == '%')"  is complex.
Magic Number,LoreSoft.MathExpressions,MathEvaluator,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\MathEvaluator.cs,MathEvaluator,The following statement contains a magic number: _parameters = new Stack<double> (2);  
Magic Number,LoreSoft.MathExpressions,MathEvaluator,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\MathEvaluator.cs,Precedence,The following statement contains a magic number: if (c.Length == 1 && (c [0] == '*' || c [0] == '/' || c [0] == '%'))  	return 2;  
Magic Number,LoreSoft.MathExpressions,MathEvaluator,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\MathEvaluator.cs,Precedence,The following statement contains a magic number: return 2;  
Magic Number,LoreSoft.MathExpressions.UnitConversion,TemperatureConverter,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\UnitConversion\TemperatureConverter.cs,Convert,The following statement contains a magic number: if (fromUnit == TemperatureUnit.Celsius) {  	if (toUnit == TemperatureUnit.Kelvin)  		result = fromValue + 273.15d;  	else if (toUnit == TemperatureUnit.Fahrenheit)  		//(9/5 * C) + 32 = F  		result = (9.0d / 5.0d * fromValue) + 32d;  }  else if (fromUnit == TemperatureUnit.Kelvin) {  	if (toUnit == TemperatureUnit.Celsius)  		result = fromValue - 273.15d;  	else if (toUnit == TemperatureUnit.Fahrenheit)  		result = 5.0d / 9.0d * ((fromValue - 273.15d) + 32d);  }  else if (fromUnit == TemperatureUnit.Fahrenheit) {  	if (toUnit == TemperatureUnit.Celsius)  		//(F - 32) * 5/9 = C  		result = 5.0d / 9.0d * (fromValue - 32d);  	else if (toUnit == TemperatureUnit.Kelvin)  		result = (5.0d / 9.0d * (fromValue - 32d)) + 273.15;  }  
Magic Number,LoreSoft.MathExpressions.UnitConversion,TemperatureConverter,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\UnitConversion\TemperatureConverter.cs,Convert,The following statement contains a magic number: if (fromUnit == TemperatureUnit.Kelvin) {  	if (toUnit == TemperatureUnit.Celsius)  		result = fromValue - 273.15d;  	else if (toUnit == TemperatureUnit.Fahrenheit)  		result = 5.0d / 9.0d * ((fromValue - 273.15d) + 32d);  }  else if (fromUnit == TemperatureUnit.Fahrenheit) {  	if (toUnit == TemperatureUnit.Celsius)  		//(F - 32) * 5/9 = C  		result = 5.0d / 9.0d * (fromValue - 32d);  	else if (toUnit == TemperatureUnit.Kelvin)  		result = (5.0d / 9.0d * (fromValue - 32d)) + 273.15;  }  
Magic Number,LoreSoft.MathExpressions.UnitConversion,TemperatureConverter,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\UnitConversion\TemperatureConverter.cs,Convert,The following statement contains a magic number: if (fromUnit == TemperatureUnit.Fahrenheit) {  	if (toUnit == TemperatureUnit.Celsius)  		//(F - 32) * 5/9 = C  		result = 5.0d / 9.0d * (fromValue - 32d);  	else if (toUnit == TemperatureUnit.Kelvin)  		result = (5.0d / 9.0d * (fromValue - 32d)) + 273.15;  }  
Magic Number,LoreSoft.MathExpressions.UnitConversion,TemperatureConverter,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\UnitConversion\TemperatureConverter.cs,Convert,The following statement contains a magic number: if (toUnit == TemperatureUnit.Celsius)  	//(F - 32) * 5/9 = C  	result = 5.0d / 9.0d * (fromValue - 32d);  else if (toUnit == TemperatureUnit.Kelvin)  	result = (5.0d / 9.0d * (fromValue - 32d)) + 273.15;  
Magic Number,LoreSoft.MathExpressions.UnitConversion,TemperatureConverter,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\UnitConversion\TemperatureConverter.cs,Convert,The following statement contains a magic number: if (toUnit == TemperatureUnit.Kelvin)  	result = (5.0d / 9.0d * (fromValue - 32d)) + 273.15;  
Magic Number,LoreSoft.MathExpressions.UnitConversion,TemperatureConverter,C:\repos\loresoft_Calculator\Source\LoreSoft.MathExpressions\UnitConversion\TemperatureConverter.cs,Convert,The following statement contains a magic number: result = (5.0d / 9.0d * (fromValue - 32d)) + 273.15;  
