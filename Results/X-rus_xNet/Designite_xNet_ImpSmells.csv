Implementation smell,Namespace,Class,File,Method,Description
Complex Method,xNet,Html,C:\repos\X-rus_xNet\xNet\Html.cs,Substring,Cyclomatic complexity of the method is 10
Complex Method,xNet,Html,C:\repos\X-rus_xNet\xNet\Html.cs,LastSubstring,Cyclomatic complexity of the method is 11
Complex Method,xNet,Html,C:\repos\X-rus_xNet\xNet\Html.cs,Substrings,Cyclomatic complexity of the method is 11
Complex Method,xNet,HttpRequest,C:\repos\X-rus_xNet\xNet\~Http\HttpRequest.cs,GenerateCommonHeaders,Cyclomatic complexity of the method is 12
Complex Method,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,ReceiveMessageBody,Cyclomatic complexity of the method is 8
Complex Method,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,ReceiveMessageBodyChunked,Cyclomatic complexity of the method is 9
Long Parameter List,xNet,Html,C:\repos\X-rus_xNet\xNet\Html.cs,Substring,The method has 5 parameters. Parameters: str' left' right' startIndex' comparsion
Long Parameter List,xNet,Html,C:\repos\X-rus_xNet\xNet\Html.cs,LastSubstring,The method has 5 parameters. Parameters: str' left' right' startIndex' comparsion
Long Parameter List,xNet,Html,C:\repos\X-rus_xNet\xNet\Html.cs,Substrings,The method has 5 parameters. Parameters: str' left' right' startIndex' comparsion
Long Parameter List,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,ProxyClient,The method has 5 parameters. Parameters: proxyType' address' port' username' password
Long Parameter List,xNet,ProxyHelper,C:\repos\X-rus_xNet\xNet\~Internal\ProxyHelper.cs,CreateProxyClient,The method has 5 parameters. Parameters: proxyType' host' port' username' password
Long Identifier,xNet,HttpRequest,C:\repos\X-rus_xNet\xNet\~Http\HttpRequest.cs,,The length of the parameter _downloadProgressChangedHandler is 31.
Long Identifier,xNet,HttpRequest,C:\repos\X-rus_xNet\xNet\~Http\HttpRequest.cs,,The length of the parameter SslCertificateValidatorCallback is 31.
Long Identifier,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,,The length of the parameter AcceptAllCertificationsCallback is 31.
Long Identifier,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,,The length of the parameter CommandReplyRequestRejectedOrFailed is 35.
Long Identifier,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,,The length of the parameter CommandReplyRequestRejectedCannotConnectToIdentd is 48.
Long Identifier,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,,The length of the parameter CommandReplyRequestRejectedDifferentIdentd is 42.
Long Identifier,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,,The length of the parameter AuthMethodNoAuthenticationRequired is 34.
Long Identifier,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,,The length of the parameter AuthMethodIanaAssignedRangeBegin is 32.
Long Identifier,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,,The length of the parameter AuthMethodIanaAssignedRangeEnd is 30.
Long Identifier,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,,The length of the parameter AuthMethodReplyNoAcceptableMethods is 34.
Long Identifier,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,,The length of the parameter CommandReplyGeneralSocksServerFailure is 37.
Long Identifier,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,,The length of the parameter CommandReplyConnectionNotAllowedByRuleset is 41.
Long Identifier,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,,The length of the parameter CommandReplyNetworkUnreachable is 30.
Long Identifier,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,,The length of the parameter CommandReplyCommandNotSupported is 31.
Long Identifier,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,,The length of the parameter CommandReplyAddressTypeNotSupported is 35.
Complex Conditional,xNet,HttpRequest,C:\repos\X-rus_xNet\xNet\~Http\HttpRequest.cs,Request,The conditional expression  "KeepAlive && !_keepAliveReconnected && !createdNewConnection && ex.EmptyMessageBody"  is complex.
Complex Conditional,xNet,HttpRequest,C:\repos\X-rus_xNet\xNet\~Http\HttpRequest.cs,TryCreateConnectionOrUseExisting,The conditional expression  "!hasConnection || proxyChanged ||                  addressChanged || _response.HasError ||                  KeepAliveLimitIsReached()"  is complex.
Complex Conditional,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,LoadResponse,The conditional expression  "ContentLength == 0 ||                  Method == HttpMethod.HEAD ||                  StatusCode == HttpStatusCode.Continue ||                  StatusCode == HttpStatusCode.NoContent ||                  StatusCode == HttpStatusCode.NotModified"  is complex.
Complex Conditional,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,IsUrlSafeChar,The conditional expression  "(((c >= 'a') && (c <= 'z')) ||                  ((c >= 'A') && (c <= 'Z'))) ||                  ((c >= '0') && (c <= '9'))"  is complex.
Empty Catch Block,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,DetermineMediaType,The method has an empty catch block.
Empty Catch Block,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,DetermineMediaType,The method has an empty catch block.
Empty Catch Block,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,DetermineMediaType,The method has an empty catch block.
Empty Catch Block,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,DetermineMediaType,The method has an empty catch block.
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,MultipartContent,The following statement contains a magic number: if (boundary.Length > 70)              {                  throw ExceptionHelper.CanNotBeGreater("boundary"' 70);              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,MultipartContent,The following statement contains a magic number: if (boundary.Length > 70)              {                  throw ExceptionHelper.CanNotBeGreater("boundary"' 70);              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,CalculateContentLength,The following statement contains a magic number: foreach (var element in _elements)              {                  length += element.Content.CalculateContentLength();                    if (element.IsFieldFile())                  {                      length += FieldFileTemplateSize;                      length += element.Name.Length;                      length += element.FileName.Length;                      length += element.Content.ContentType.Length;                  }                  else                  {                      length += FieldTemplateSize;                      length += element.Name.Length;                  }                    // 2 (--) + x (boundary) + 2 (\r\n) ...элемент данных... + 2 (\r\n).                  length += _boundary.Length + 6;              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,CalculateContentLength,The following statement contains a magic number: length += _boundary.Length + 6;
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,GetRandomString,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  switch (Rand.Next(3))                  {                      case 0:                          strBuilder.Append((char)Rand.Next(48' 58));                          break;                        case 1:                          strBuilder.Append((char)Rand.Next(97' 123));                          break;                        case 2:                          strBuilder.Append((char)Rand.Next(65' 91));                          break;                  }              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,GetRandomString,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  switch (Rand.Next(3))                  {                      case 0:                          strBuilder.Append((char)Rand.Next(48' 58));                          break;                        case 1:                          strBuilder.Append((char)Rand.Next(97' 123));                          break;                        case 2:                          strBuilder.Append((char)Rand.Next(65' 91));                          break;                  }              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,GetRandomString,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  switch (Rand.Next(3))                  {                      case 0:                          strBuilder.Append((char)Rand.Next(48' 58));                          break;                        case 1:                          strBuilder.Append((char)Rand.Next(97' 123));                          break;                        case 2:                          strBuilder.Append((char)Rand.Next(65' 91));                          break;                  }              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,GetRandomString,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  switch (Rand.Next(3))                  {                      case 0:                          strBuilder.Append((char)Rand.Next(48' 58));                          break;                        case 1:                          strBuilder.Append((char)Rand.Next(97' 123));                          break;                        case 2:                          strBuilder.Append((char)Rand.Next(65' 91));                          break;                  }              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,GetRandomString,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  switch (Rand.Next(3))                  {                      case 0:                          strBuilder.Append((char)Rand.Next(48' 58));                          break;                        case 1:                          strBuilder.Append((char)Rand.Next(97' 123));                          break;                        case 2:                          strBuilder.Append((char)Rand.Next(65' 91));                          break;                  }              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,GetRandomString,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  switch (Rand.Next(3))                  {                      case 0:                          strBuilder.Append((char)Rand.Next(48' 58));                          break;                        case 1:                          strBuilder.Append((char)Rand.Next(97' 123));                          break;                        case 2:                          strBuilder.Append((char)Rand.Next(65' 91));                          break;                  }              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,GetRandomString,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  switch (Rand.Next(3))                  {                      case 0:                          strBuilder.Append((char)Rand.Next(48' 58));                          break;                        case 1:                          strBuilder.Append((char)Rand.Next(97' 123));                          break;                        case 2:                          strBuilder.Append((char)Rand.Next(65' 91));                          break;                  }              }
Magic Number,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,GetRandomString,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  switch (Rand.Next(3))                  {                      case 0:                          strBuilder.Append((char)Rand.Next(48' 58));                          break;                        case 1:                          strBuilder.Append((char)Rand.Next(97' 123));                          break;                        case 2:                          strBuilder.Append((char)Rand.Next(65' 91));                          break;                  }              }
Magic Number,xNet,ExceptionHelper,C:\repos\X-rus_xNet\xNet\~Internal\ExceptionHelper.cs,WrongTcpPort,The following statement contains a magic number: return new ArgumentOutOfRangeException("port"' string.Format(                  Resources.ArgumentOutOfRangeException_CanNotBeLessOrGreater' 1' 65535));
Magic Number,xNet,ExceptionHelper,C:\repos\X-rus_xNet\xNet\~Internal\ExceptionHelper.cs,ValidateTcpPort,The following statement contains a magic number: if (port < 1 || port > 65535)              {                  return false;              }
Magic Number,xNet,CookieDictionary,C:\repos\X-rus_xNet\xNet\~Http\CookieDictionary.cs,ToString,The following statement contains a magic number: if (strBuilder.Length > 0)              {                  strBuilder.Remove(strBuilder.Length - 2' 2);              }
Magic Number,xNet,CookieDictionary,C:\repos\X-rus_xNet\xNet\~Http\CookieDictionary.cs,ToString,The following statement contains a magic number: if (strBuilder.Length > 0)              {                  strBuilder.Remove(strBuilder.Length - 2' 2);              }
Magic Number,xNet,HttpProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\HttpProxyClient.cs,CreateConnection,The following statement contains a magic number: if (destinationPort != 80)              {                  HttpStatusCode statusCode = HttpStatusCode.OK;                    try                  {                      NetworkStream nStream = curTcpClient.GetStream();                        SendConnectionCommand(nStream' destinationHost' destinationPort);                      statusCode = ReceiveResponse(nStream);                  }                  catch (Exception ex)                  {                      curTcpClient.Close();                        if (ex is IOException || ex is SocketException)                      {                          throw NewProxyException(Resources.ProxyException_Error' ex);                      }                        throw;                  }                    if (statusCode != HttpStatusCode.OK)                  {                      curTcpClient.Close();                        throw new ProxyException(string.Format(                          Resources.ProxyException_ReceivedWrongStatusCode' statusCode' ToString())' this);                  }              }
Magic Number,xNet,HttpProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\HttpProxyClient.cs,WaitData,The following statement contains a magic number: int delay = (nStream.ReadTimeout < 10) ?                  10 : nStream.ReadTimeout;
Magic Number,xNet,HttpProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\HttpProxyClient.cs,WaitData,The following statement contains a magic number: int delay = (nStream.ReadTimeout < 10) ?                  10 : nStream.ReadTimeout;
Magic Number,xNet,HttpProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\HttpProxyClient.cs,WaitData,The following statement contains a magic number: while (!nStream.DataAvailable)              {                  if (sleepTime >= delay)                  {                      throw NewProxyException(Resources.ProxyException_WaitDataTimeout);                  }                    sleepTime += 10;                  Thread.Sleep(10);              }
Magic Number,xNet,HttpProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\HttpProxyClient.cs,WaitData,The following statement contains a magic number: while (!nStream.DataAvailable)              {                  if (sleepTime >= delay)                  {                      throw NewProxyException(Resources.ProxyException_WaitDataTimeout);                  }                    sleepTime += 10;                  Thread.Sleep(10);              }
Magic Number,xNet,HttpRequest,C:\repos\X-rus_xNet\xNet\~Http\HttpRequest.cs,CheckStatusCode,The following statement contains a magic number: if ((statusCodeNum >= 400) && (statusCodeNum < 500))              {                  throw new HttpException(string.Format(                      Resources.HttpException_ClientError' statusCodeNum)'                      HttpExceptionStatus.ProtocolError' _response.StatusCode);              }
Magic Number,xNet,HttpRequest,C:\repos\X-rus_xNet\xNet\~Http\HttpRequest.cs,CheckStatusCode,The following statement contains a magic number: if ((statusCodeNum >= 400) && (statusCodeNum < 500))              {                  throw new HttpException(string.Format(                      Resources.HttpException_ClientError' statusCodeNum)'                      HttpExceptionStatus.ProtocolError' _response.StatusCode);              }
Magic Number,xNet,HttpRequest,C:\repos\X-rus_xNet\xNet\~Http\HttpRequest.cs,CheckStatusCode,The following statement contains a magic number: if (statusCodeNum >= 500)              {                  throw new HttpException(string.Format(                      Resources.HttpException_SeverError' statusCodeNum)'                      HttpExceptionStatus.ProtocolError' _response.StatusCode);              }
Magic Number,xNet,HttpRequest,C:\repos\X-rus_xNet\xNet\~Http\HttpRequest.cs,GetLanguageHeader,The following statement contains a magic number: return string.Format("{0}'{1};q=0.8'en-US;q=0.6'en;q=0.4"'                  cultureName' cultureName.Substring(0' 2));
Magic Number,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,SetCookie,The following statement contains a magic number: if (endCookiePos == -1)              {                  cookieValue = value.Substring(separatorPos + 1);              }              else              {                  cookieValue = value.Substring(separatorPos + 1'                      (endCookiePos - separatorPos) - 1);                    #region Получаем время' которое куки будет действителен                    int expiresPos = value.IndexOf("expires=");                    if (expiresPos != -1)                  {                      string expiresStr;                      int endExpiresPos = value.IndexOf(';'' expiresPos);                        expiresPos += 8;                        if (endExpiresPos == -1)                      {                          expiresStr = value.Substring(expiresPos);                      }                      else                      {                          expiresStr = value.Substring(expiresPos' endExpiresPos - expiresPos);                      }                        DateTime expires;                        // Если время куки вышло' то удаляем её.                      if (DateTime.TryParse(expiresStr' out expires) &&                          expires < DateTime.Now)                      {                          Cookies.Remove(cookieName);                      }                  }                    #endregion              }
Magic Number,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,ReceiveMessageBodyChunked,The following statement contains a magic number: while (true)              {                  string line = _receiverHelper.ReadLine();                    // Если достигнут конец блока.                  if (line == Http.NewLine)                      continue;                    line = line.Trim(' '' '\r'' '\n');                    // Если достигнут конец тела сообщения.                  if (line == string.Empty)                      yield break;                    int blockLength;                  int totalBytesRead = 0;                    #region Задаём длину блока                    try                  {                      blockLength = Convert.ToInt32(line' 16);                  }                  catch (Exception ex)                  {                      if (ex is FormatException || ex is OverflowException)                      {                          throw NewHttpException(string.Format(                              Resources.HttpException_WrongChunkedBlockLength' line)' ex);                      }                        throw;                  }                    #endregion                    // Если достигнут конец тела сообщения.                  if (blockLength == 0)                      yield break;                    while (totalBytesRead != blockLength)                  {                      int length = blockLength - totalBytesRead;                        if (length > bufferSize)                      {                          length = bufferSize;                      }                        int bytesRead;                        if (_receiverHelper.HasData)                      {                          bytesRead = _receiverHelper.Read(buffer' 0' length);                      }                      else                      {                          bytesRead = stream.Read(buffer' 0' length);                      }                        if (bytesRead == 0)                      {                          WaitData();                      }                      else                      {                          totalBytesRead += bytesRead;                            bytesWraper.Length = bytesRead;                          yield return bytesWraper;                      }                  }              }
Magic Number,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,ReceiveMessageBodyChunkedZip,The following statement contains a magic number: using (Stream stream = GetZipStream(streamWrapper))              {                  int bufferSize = _request.TcpClient.ReceiveBufferSize;                  byte[] buffer = new byte[bufferSize];                    bytesWraper.Value = buffer;                    while (true)                  {                      string line = _receiverHelper.ReadLine();                        // Если достигнут конец блока.                      if (line == Http.NewLine)                          continue;                        line = line.Trim(' '' '\r'' '\n');                        // Если достигнут конец тела сообщения.                      if (line == string.Empty)                          yield break;                        int blockLength;                        #region Задаём длину блока                        try                      {                          blockLength = Convert.ToInt32(line' 16);                      }                      catch (Exception ex)                      {                          if (ex is FormatException || ex is OverflowException)                          {                              throw NewHttpException(string.Format(                                  Resources.HttpException_WrongChunkedBlockLength' line)' ex);                          }                            throw;                      }                        #endregion                        // Если достигнут конец тела сообщения.                      if (blockLength == 0)                          yield break;                        streamWrapper.TotalBytesRead = 0;                      streamWrapper.LimitBytesRead = blockLength;                        while (true)                      {                          int bytesRead = stream.Read(buffer' 0' bufferSize);                            if (bytesRead == 0)                          {                              if (streamWrapper.TotalBytesRead == blockLength)                              {                                  break;                              }                              else                              {                                  WaitData();                                    continue;                              }                          }                            bytesWraper.Length = bytesRead;                          yield return bytesWraper;                      }                  }              }
Magic Number,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,GetKeepAliveTimeout,The following statement contains a magic number: if (match.Success)                  return int.Parse(match.Groups["value"].Value) * 1000;
Magic Number,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,WaitData,The following statement contains a magic number: int delay = (_request.TcpClient.ReceiveTimeout < 10) ?                  10 : _request.TcpClient.ReceiveTimeout;
Magic Number,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,WaitData,The following statement contains a magic number: int delay = (_request.TcpClient.ReceiveTimeout < 10) ?                  10 : _request.TcpClient.ReceiveTimeout;
Magic Number,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,WaitData,The following statement contains a magic number: while (!_request.ClientNetworkStream.DataAvailable)              {                  if (sleepTime >= delay)                  {                      throw NewHttpException(Resources.HttpException_WaitDataTimeout);                  }                    sleepTime += 10;                  Thread.Sleep(10);              }
Magic Number,xNet,HttpResponse,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,WaitData,The following statement contains a magic number: while (!_request.ClientNetworkStream.DataAvailable)              {                  if (sleepTime >= delay)                  {                      throw NewHttpException(Resources.HttpException_WaitDataTimeout);                  }                    sleepTime += 10;                  Thread.Sleep(10);              }
Magic Number,xNet,ReceiverHelper,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,ReadLine,The following statement contains a magic number: while (true)                  {                      if (Position == Length)                      {                          Position = 0;                          Length = _stream.Read(_buffer' 0' _bufferSize);                            if (Length == 0)                          {                              break;                          }                      }                        byte b = _buffer[Position++];                        _lineBuffer[_linePosition++] = b;                        // Если считан символ '\n'.                      if (b == 10)                      {                          break;                      }                        // Если достигнут максимальный предел размера буфера линии.                      if (_linePosition == _lineBuffer.Length)                      {                          // Увеличиваем размер буфера линии в два раза.                          byte[] newLineBuffer = new byte[_lineBuffer.Length * 2];                            _lineBuffer.CopyTo(newLineBuffer' 0);                          _lineBuffer = newLineBuffer;                      }                  }
Magic Number,xNet,ReceiverHelper,C:\repos\X-rus_xNet\xNet\~Http\HttpResponse.cs,ReadLine,The following statement contains a magic number: while (true)                  {                      if (Position == Length)                      {                          Position = 0;                          Length = _stream.Read(_buffer' 0' _bufferSize);                            if (Length == 0)                          {                              break;                          }                      }                        byte b = _buffer[Position++];                        _lineBuffer[_linePosition++] = b;                        // Если считан символ '\n'.                      if (b == 10)                      {                          break;                      }                        // Если достигнут максимальный предел размера буфера линии.                      if (_linePosition == _lineBuffer.Length)                      {                          // Увеличиваем размер буфера линии в два раза.                          byte[] newLineBuffer = new byte[_lineBuffer.Length * 2];                            _lineBuffer.CopyTo(newLineBuffer' 0);                          _lineBuffer = newLineBuffer;                      }                  }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,UrlEncode,The following statement contains a magic number: byte[] buffer = new byte[bytes.Length + (otherCharCount * 2)];
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  char c = (char)bytes[i];                    if (IsUrlSafeChar(c))                  {                      buffer[bufferIndex++] = bytes[i];                  }                  else if (c == ' ')                  {                      buffer[bufferIndex++] = (byte)'+';                  }                  else                  {                      buffer[bufferIndex++] = (byte)'%';                      buffer[bufferIndex++] = (byte)IntToHex((bytes[i] >> 4) & 15);                      buffer[bufferIndex++] = (byte)IntToHex(bytes[i] & 15);                  }              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  char c = (char)bytes[i];                    if (IsUrlSafeChar(c))                  {                      buffer[bufferIndex++] = bytes[i];                  }                  else if (c == ' ')                  {                      buffer[bufferIndex++] = (byte)'+';                  }                  else                  {                      buffer[bufferIndex++] = (byte)'%';                      buffer[bufferIndex++] = (byte)IntToHex((bytes[i] >> 4) & 15);                      buffer[bufferIndex++] = (byte)IntToHex(bytes[i] & 15);                  }              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  char c = (char)bytes[i];                    if (IsUrlSafeChar(c))                  {                      buffer[bufferIndex++] = bytes[i];                  }                  else if (c == ' ')                  {                      buffer[bufferIndex++] = (byte)'+';                  }                  else                  {                      buffer[bufferIndex++] = (byte)'%';                      buffer[bufferIndex++] = (byte)IntToHex((bytes[i] >> 4) & 15);                      buffer[bufferIndex++] = (byte)IntToHex(bytes[i] & 15);                  }              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,IEUserAgent,The following statement contains a magic number: if (windowsVersion.Contains("NT 5.1"))              {                  version = "9.0";                  mozillaVersion = "5.0";                  trident = "5.0";                  otherParams = ".NET CLR 2.0.50727; .NET CLR 3.5.30729";              }              else if (windowsVersion.Contains("NT 6.0"))              {                  version = "9.0";                  mozillaVersion = "5.0";                  trident = "5.0";                  otherParams = ".NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.5.30729";              }              else              {                  switch (Rand.Next(3))                  {                      case 0:                          version = "10.0";                          trident = "6.0";                          mozillaVersion = "5.0";                          break;                        case 1:                          version = "10.6";                          trident = "6.0";                          mozillaVersion = "5.0";                          break;                        case 2:                          version = "11.0";                          trident = "7.0";                          mozillaVersion = "5.0";                          break;                  }                    otherParams = ".NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E";              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,IEUserAgent,The following statement contains a magic number: if (windowsVersion.Contains("NT 5.1"))              {                  version = "9.0";                  mozillaVersion = "5.0";                  trident = "5.0";                  otherParams = ".NET CLR 2.0.50727; .NET CLR 3.5.30729";              }              else if (windowsVersion.Contains("NT 6.0"))              {                  version = "9.0";                  mozillaVersion = "5.0";                  trident = "5.0";                  otherParams = ".NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.5.30729";              }              else              {                  switch (Rand.Next(3))                  {                      case 0:                          version = "10.0";                          trident = "6.0";                          mozillaVersion = "5.0";                          break;                        case 1:                          version = "10.6";                          trident = "6.0";                          mozillaVersion = "5.0";                          break;                        case 2:                          version = "11.0";                          trident = "7.0";                          mozillaVersion = "5.0";                          break;                  }                    otherParams = ".NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E";              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,OperaUserAgent,The following statement contains a magic number: switch (Rand.Next(4))              {                  case 0:                      version = "12.16";                      presto = "2.12.388";                      break;                    case 1:                      version = "12.14";                      presto = "2.12.388";                      break;                    case 2:                      version = "12.02";                      presto = "2.10.289";                      break;                    case 3:                      version = "12.00";                      presto = "2.10.181";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,OperaUserAgent,The following statement contains a magic number: switch (Rand.Next(4))              {                  case 0:                      version = "12.16";                      presto = "2.12.388";                      break;                    case 1:                      version = "12.14";                      presto = "2.12.388";                      break;                    case 2:                      version = "12.02";                      presto = "2.10.289";                      break;                    case 3:                      version = "12.00";                      presto = "2.10.181";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,OperaUserAgent,The following statement contains a magic number: switch (Rand.Next(4))              {                  case 0:                      version = "12.16";                      presto = "2.12.388";                      break;                    case 1:                      version = "12.14";                      presto = "2.12.388";                      break;                    case 2:                      version = "12.02";                      presto = "2.10.289";                      break;                    case 3:                      version = "12.00";                      presto = "2.10.181";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,ChromeUserAgent,The following statement contains a magic number: switch (Rand.Next(5))              {                  case 0:                      version = "41.0.2228.0";                      safari = "537.36";                      break;                    case 1:                      version = "41.0.2227.1";                      safari = "537.36";                      break;                    case 2:                      version = "41.0.2224.3";                      safari = "537.36";                      break;                    case 3:                      version = "41.0.2225.0";                      safari = "537.36";                      break;                    case 4:                      version = "41.0.2226.0";                      safari = "537.36";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,ChromeUserAgent,The following statement contains a magic number: switch (Rand.Next(5))              {                  case 0:                      version = "41.0.2228.0";                      safari = "537.36";                      break;                    case 1:                      version = "41.0.2227.1";                      safari = "537.36";                      break;                    case 2:                      version = "41.0.2224.3";                      safari = "537.36";                      break;                    case 3:                      version = "41.0.2225.0";                      safari = "537.36";                      break;                    case 4:                      version = "41.0.2226.0";                      safari = "537.36";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,ChromeUserAgent,The following statement contains a magic number: switch (Rand.Next(5))              {                  case 0:                      version = "41.0.2228.0";                      safari = "537.36";                      break;                    case 1:                      version = "41.0.2227.1";                      safari = "537.36";                      break;                    case 2:                      version = "41.0.2224.3";                      safari = "537.36";                      break;                    case 3:                      version = "41.0.2225.0";                      safari = "537.36";                      break;                    case 4:                      version = "41.0.2226.0";                      safari = "537.36";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,ChromeUserAgent,The following statement contains a magic number: switch (Rand.Next(5))              {                  case 0:                      version = "41.0.2228.0";                      safari = "537.36";                      break;                    case 1:                      version = "41.0.2227.1";                      safari = "537.36";                      break;                    case 2:                      version = "41.0.2224.3";                      safari = "537.36";                      break;                    case 3:                      version = "41.0.2225.0";                      safari = "537.36";                      break;                    case 4:                      version = "41.0.2226.0";                      safari = "537.36";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,FirefoxUserAgent,The following statement contains a magic number: switch (Rand.Next(5))              {                  case 0:                      version = "36.0";                      gecko = "20100101";                      break;                    case 1:                      version = "33.0";                      gecko = "20100101";                      break;                    case 2:                      version = "31.0";                      gecko = "20100101";                      break;                    case 3:                      version = "29.0";                      gecko = "20120101";                      break;                    case 4:                      version = "28.0";                      gecko = "20100101";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,FirefoxUserAgent,The following statement contains a magic number: switch (Rand.Next(5))              {                  case 0:                      version = "36.0";                      gecko = "20100101";                      break;                    case 1:                      version = "33.0";                      gecko = "20100101";                      break;                    case 2:                      version = "31.0";                      gecko = "20100101";                      break;                    case 3:                      version = "29.0";                      gecko = "20120101";                      break;                    case 4:                      version = "28.0";                      gecko = "20100101";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,FirefoxUserAgent,The following statement contains a magic number: switch (Rand.Next(5))              {                  case 0:                      version = "36.0";                      gecko = "20100101";                      break;                    case 1:                      version = "33.0";                      gecko = "20100101";                      break;                    case 2:                      version = "31.0";                      gecko = "20100101";                      break;                    case 3:                      version = "29.0";                      gecko = "20120101";                      break;                    case 4:                      version = "28.0";                      gecko = "20100101";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,FirefoxUserAgent,The following statement contains a magic number: switch (Rand.Next(5))              {                  case 0:                      version = "36.0";                      gecko = "20100101";                      break;                    case 1:                      version = "33.0";                      gecko = "20100101";                      break;                    case 2:                      version = "31.0";                      gecko = "20100101";                      break;                    case 3:                      version = "29.0";                      gecko = "20120101";                      break;                    case 4:                      version = "28.0";                      gecko = "20100101";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,OperaMiniUserAgent,The following statement contains a magic number: switch (Rand.Next(3))              {                  case 0:                      os = "iOS";                      miniVersion = "7.0.73345";                      version = "11.62";                      presto = "2.10.229";                      break;                    case 1:                      os = "J2ME/MIDP";                      miniVersion = "7.1.23511";                      version = "12.00";                      presto = "2.10.181";                      break;                    case 2:                      os = "Android";                      miniVersion = "7.5.54678";                      version = "12.02";                      presto = "2.10.289";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,OperaMiniUserAgent,The following statement contains a magic number: switch (Rand.Next(3))              {                  case 0:                      os = "iOS";                      miniVersion = "7.0.73345";                      version = "11.62";                      presto = "2.10.229";                      break;                    case 1:                      os = "J2ME/MIDP";                      miniVersion = "7.1.23511";                      version = "12.00";                      presto = "2.10.181";                      break;                    case 2:                      os = "Android";                      miniVersion = "7.5.54678";                      version = "12.02";                      presto = "2.10.289";                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,IntToHex,The following statement contains a magic number: if (i <= 9)              {                  return (char)(i + 48);              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,IntToHex,The following statement contains a magic number: if (i <= 9)              {                  return (char)(i + 48);              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,IntToHex,The following statement contains a magic number: return (char)((i - 10) + 65);
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,IntToHex,The following statement contains a magic number: return (char)((i - 10) + 65);
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,RandomWindowsVersion,The following statement contains a magic number: switch (Rand.Next(4))              {                  case 0:                      windowsVersion += "5.1"; // Windows XP                      break;                    case 1:                      windowsVersion += "6.0"; // Windows Vista                      break;                    case 2:                      windowsVersion += "6.1"; // Windows 7                      break;                    case 3:                      windowsVersion += "6.2"; // Windows 8                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,RandomWindowsVersion,The following statement contains a magic number: switch (Rand.Next(4))              {                  case 0:                      windowsVersion += "5.1"; // Windows XP                      break;                    case 1:                      windowsVersion += "6.0"; // Windows Vista                      break;                    case 2:                      windowsVersion += "6.1"; // Windows 7                      break;                    case 3:                      windowsVersion += "6.2"; // Windows 8                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,RandomWindowsVersion,The following statement contains a magic number: switch (Rand.Next(4))              {                  case 0:                      windowsVersion += "5.1"; // Windows XP                      break;                    case 1:                      windowsVersion += "6.0"; // Windows Vista                      break;                    case 2:                      windowsVersion += "6.1"; // Windows 7                      break;                    case 3:                      windowsVersion += "6.2"; // Windows 8                      break;              }
Magic Number,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,RandomWindowsVersion,The following statement contains a magic number: if (Rand.NextDouble() < 0.2)              {                  windowsVersion += "; WOW64"; // 64-битная версия.              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,Parse,The following statement contains a magic number: if (values.Length >= 2)              {                  #region Получение порта                    try                  {                      port = int.Parse(values[1]);                  }                  catch (Exception ex)                  {                      if (ex is FormatException || ex is OverflowException)                      {                          throw new FormatException(                              Resources.InvalidOperationException_ProxyClient_WrongPort' ex);                      }                        throw;                  }                    if (!ExceptionHelper.ValidateTcpPort(port))                  {                      throw new FormatException(                          Resources.InvalidOperationException_ProxyClient_WrongPort);                  }                    #endregion              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,Parse,The following statement contains a magic number: if (values.Length >= 3)              {                  username = values[2];              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,Parse,The following statement contains a magic number: if (values.Length >= 3)              {                  username = values[2];              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,Parse,The following statement contains a magic number: if (values.Length >= 4)              {                  password = values[3];              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,Parse,The following statement contains a magic number: if (values.Length >= 4)              {                  password = values[3];              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,TryParse,The following statement contains a magic number: if (values.Length >= 2)              {                  if (!int.TryParse(values[1]' out port) || !ExceptionHelper.ValidateTcpPort(port))                  {                      return false;                  }              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,TryParse,The following statement contains a magic number: if (values.Length >= 3)              {                  username = values[2];              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,TryParse,The following statement contains a magic number: if (values.Length >= 3)              {                  username = values[2];              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,TryParse,The following statement contains a magic number: if (values.Length >= 4)              {                  password = values[3];              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,TryParse,The following statement contains a magic number: if (values.Length >= 4)              {                  password = values[3];              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,CheckState,The following statement contains a magic number: if (_username != null && _username.Length > 255)              {                  throw new InvalidOperationException(                      Resources.InvalidOperationException_ProxyClient_WrongUsername);              }
Magic Number,xNet,ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\ProxyClient.cs,CheckState,The following statement contains a magic number: if (_password != null && _password.Length > 255)              {                  throw new InvalidOperationException(                      Resources.InvalidOperationException_ProxyClient_WrongPassword);              }
Magic Number,xNet,Socks4aProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] request = new byte[10 + userId.Length + dstAddr.Length];
Magic Number,xNet,Socks4aProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: dstPort.CopyTo(request' 2);
Magic Number,xNet,Socks4aProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: dstIp.CopyTo(request' 4);
Magic Number,xNet,Socks4aProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: userId.CopyTo(request' 8);
Magic Number,xNet,Socks4aProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: request[8 + userId.Length] = 0x00;
Magic Number,xNet,Socks4aProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: dstAddr.CopyTo(request' 9 + userId.Length);
Magic Number,xNet,Socks4aProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: request[9 + userId.Length + dstAddr.Length] = 0x00;
Magic Number,xNet,Socks4aProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] response = new byte[8];
Magic Number,xNet,Socks4aProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4aProxyClient.cs,SendCommand,The following statement contains a magic number: nStream.Read(response' 0' 8);
Magic Number,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] request = new byte[9 + userId.Length];
Magic Number,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: dstIp.CopyTo(request' 2);
Magic Number,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: dstPort.CopyTo(request' 4);
Magic Number,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: userId.CopyTo(request' 8);
Magic Number,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: request[8 + userId.Length] = 0x00;
Magic Number,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] response = new byte[8];
Magic Number,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,GetPortBytes,The following statement contains a magic number: byte[] array = new byte[2];
Magic Number,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,GetPortBytes,The following statement contains a magic number: array[0] = (byte)(port / 256);
Magic Number,xNet,Socks4ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks4ProxyClient.cs,GetPortBytes,The following statement contains a magic number: array[1] = (byte)(port % 256);
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,InitialNegotiation,The following statement contains a magic number: byte[] request = new byte[3];
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,InitialNegotiation,The following statement contains a magic number: request[2] = authMethod;
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,InitialNegotiation,The following statement contains a magic number: byte[] response = new byte[2];
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendUsernameAndPassword,The following statement contains a magic number: byte[] request = new byte[uname.Length + passwd.Length + 3];
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendUsernameAndPassword,The following statement contains a magic number: uname.CopyTo(request' 2);
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendUsernameAndPassword,The following statement contains a magic number: request[2 + uname.Length] = (byte)passwd.Length;
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendUsernameAndPassword,The following statement contains a magic number: passwd.CopyTo(request' 3 + uname.Length);
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendUsernameAndPassword,The following statement contains a magic number: byte[] response = new byte[2];
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] request = new byte[4 + dstAddr.Length + 2];
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] request = new byte[4 + dstAddr.Length + 2];
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: request[2] = Reserved;
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: request[3] = aTyp;
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: dstAddr.CopyTo(request' 4);
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: dstPort.CopyTo(request' 4 + dstAddr.Length);
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,SendCommand,The following statement contains a magic number: byte[] response = new byte[255];
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,GetPortBytes,The following statement contains a magic number: byte[] array = new byte[2];
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,GetPortBytes,The following statement contains a magic number: array[0] = (byte)(port / 256);
Magic Number,xNet,Socks5ProxyClient,C:\repos\X-rus_xNet\xNet\~Proxy\Socks5ProxyClient.cs,GetPortBytes,The following statement contains a magic number: array[1] = (byte)(port % 256);
Missing Default,xNet,MultipartContent,C:\repos\X-rus_xNet\xNet\~Http\~Content\MultipartContent.cs,GetRandomString,The following switch statement is missing a default case: switch (Rand.Next(3))                  {                      case 0:                          strBuilder.Append((char)Rand.Next(48' 58));                          break;                        case 1:                          strBuilder.Append((char)Rand.Next(97' 123));                          break;                        case 2:                          strBuilder.Append((char)Rand.Next(65' 91));                          break;                  }
Missing Default,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,IEUserAgent,The following switch statement is missing a default case: switch (Rand.Next(3))                  {                      case 0:                          version = "10.0";                          trident = "6.0";                          mozillaVersion = "5.0";                          break;                        case 1:                          version = "10.6";                          trident = "6.0";                          mozillaVersion = "5.0";                          break;                        case 2:                          version = "11.0";                          trident = "7.0";                          mozillaVersion = "5.0";                          break;                  }
Missing Default,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,OperaUserAgent,The following switch statement is missing a default case: switch (Rand.Next(4))              {                  case 0:                      version = "12.16";                      presto = "2.12.388";                      break;                    case 1:                      version = "12.14";                      presto = "2.12.388";                      break;                    case 2:                      version = "12.02";                      presto = "2.10.289";                      break;                    case 3:                      version = "12.00";                      presto = "2.10.181";                      break;              }
Missing Default,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,ChromeUserAgent,The following switch statement is missing a default case: switch (Rand.Next(5))              {                  case 0:                      version = "41.0.2228.0";                      safari = "537.36";                      break;                    case 1:                      version = "41.0.2227.1";                      safari = "537.36";                      break;                    case 2:                      version = "41.0.2224.3";                      safari = "537.36";                      break;                    case 3:                      version = "41.0.2225.0";                      safari = "537.36";                      break;                    case 4:                      version = "41.0.2226.0";                      safari = "537.36";                      break;              }
Missing Default,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,FirefoxUserAgent,The following switch statement is missing a default case: switch (Rand.Next(5))              {                  case 0:                      version = "36.0";                      gecko = "20100101";                      break;                    case 1:                      version = "33.0";                      gecko = "20100101";                      break;                    case 2:                      version = "31.0";                      gecko = "20100101";                      break;                    case 3:                      version = "29.0";                      gecko = "20120101";                      break;                    case 4:                      version = "28.0";                      gecko = "20100101";                      break;              }
Missing Default,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,OperaMiniUserAgent,The following switch statement is missing a default case: switch (Rand.Next(3))              {                  case 0:                      os = "iOS";                      miniVersion = "7.0.73345";                      version = "11.62";                      presto = "2.10.229";                      break;                    case 1:                      os = "J2ME/MIDP";                      miniVersion = "7.1.23511";                      version = "12.00";                      presto = "2.10.181";                      break;                    case 2:                      os = "Android";                      miniVersion = "7.5.54678";                      version = "12.02";                      presto = "2.10.289";                      break;              }
Missing Default,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,IsUrlSafeChar,The following switch statement is missing a default case: switch (c)              {                  case '(':                  case ')':                  case '*':                  case '-':                  case '.':                  case '_':                  case '!':                      return true;              }
Missing Default,xNet,Http,C:\repos\X-rus_xNet\xNet\~Http\Http.cs,RandomWindowsVersion,The following switch statement is missing a default case: switch (Rand.Next(4))              {                  case 0:                      windowsVersion += "5.1"; // Windows XP                      break;                    case 1:                      windowsVersion += "6.0"; // Windows Vista                      break;                    case 2:                      windowsVersion += "6.1"; // Windows 7                      break;                    case 3:                      windowsVersion += "6.2"; // Windows 8                      break;              }
