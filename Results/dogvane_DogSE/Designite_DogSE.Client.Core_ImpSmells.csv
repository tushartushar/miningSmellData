Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DogSE.Client.Core,NetController,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\BaseController.cs,NetSocket_SocketRecv,Cyclomatic complexity of the method is 11
Complex Method,DogSE.Client.Core.Timer,TimerThread,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\TimerThread.cs,RunTimerThread,Cyclomatic complexity of the method is 15
Long Parameter List,DogSE.Client.Core.Timer,DelayCallTimer,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\DelayCallTimer.cs,DelayCallTimer,The method has 5 parameters. Parameters: delayTimeSpan' intervalTimeSpan' iTimes' timeLeft' timerCallback
Long Parameter List,DogSE.Client.Core.Timer,DelayStateCallTimer<T>,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\DelayStateCallTimer.cs,DelayStateCallTimer,The method has 6 parameters. Parameters: delayTimeSpan' intervalTimeSpan' iTimes' timeLeft' timerStateCallback' tState
Long Parameter List,DogSE.Client.Core.Timer,TimeSliceUtil,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\TimeSliceUtil.cs,StartTimeSlice,The method has 5 parameters. Parameters: delayTimeSpan' intervalTimeSpan' iTimes' timeLeft' timerCallback
Long Parameter List,DogSE.Client.Core.Timer,TimeSliceUtil,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\TimeSliceUtil.cs,StartTimeSlice,The method has 5 parameters. Parameters: delayTimeSpan' intervalTimeSpan' iTimes' timerStateCallback' tState
Long Parameter List,DogSE.Client.Core.Timer,TimeSliceUtil,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\TimeSliceUtil.cs,StartTimeSlice,The method has 5 parameters. Parameters: delayTimeSpan' intervalTimeSpan' timeLeft' timerStateCallback' tState
Long Parameter List,DogSE.Client.Core.Timer,TimeSliceUtil,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\TimeSliceUtil.cs,StartTimeSlice,The method has 6 parameters. Parameters: delayTimeSpan' intervalTimeSpan' iTimes' timeLeft' timerStateCallback' tState
Long Identifier,DogSE.Client.Core.Timer,TimerThread,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\TimerThread.cs,,The length of the parameter s_LockTimerChangeEntryChangeQueue is 33.
Long Statement,DogSE.Client.Core.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\Connect\DogBuffer.cs,Release,The length of the statement  "            //Logs.Info("release buffer id = {0} counter={1}  strace = {2}"' m_id' referenceCounter' stack.GetFrame(1).GetMethod().Name); " is 125.
Long Statement,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The length of the statement  "                return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++]; " is 280.
Long Statement,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The length of the statement  "                return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56); " is 262.
Long Statement,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The length of the statement  "                return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] ); " is 287.
Long Statement,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The length of the statement  "                return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56)); " is 271.
Long Statement,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt32,The length of the statement  "                return (uint)( ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] ); " is 124.
Long Statement,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,Dequeue,The length of the statement  "                throw new Exception( string.Format("ReceiveQueue.Dequeue(...) - iSize < 0 || iSize > byteBuffer.Length error! iSize={0}"' iSize )); " is 131.
Long Statement,DogSE.Client.Core.Timer,TimeSliceUtil,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\TimeSliceUtil.cs,StartTimeSlice,The length of the statement  "            TimeSlice timeSlice = new DelayStateCallTimer<T>(delayTimeSpan' intervalTimeSpan' iTimes' timeLeft' timerStateCallback' tState); " is 128.
Magic Number,DogSE.Client.Core,NetController,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\BaseController.cs,NetSocket_SocketRecv,The following statement contains a magic number: while(netState.ReceiveBuffer.Length > 2)              {                  var len = netState.ReceiveBuffer.GetPacketLength();                  if (len == 0)                  {                      Logs.Error("get package len is zero.");                      netState.NetSocket.CloseSocket();                      return;                  }                    if (len < 4)                  {                      Logs.Error("package is min 4.");                      netState.NetSocket.CloseSocket();                      return;                  }                      if (len > MaxPackageSize)                  {                      Logs.Error("get package len is error. size:{0}"' len);                      netState.NetSocket.CloseSocket();                      return;                  }                    IsWaitCheckOnline = false;                    if (len <= netState.ReceiveBuffer.Length)                  {                        DogBuffer readBuffer;                      if (len < 1024*4)                          readBuffer = DogBuffer.GetFromPool4K();                      else                          readBuffer = DogBuffer.GetFromPool32K();                        if (len >= readBuffer.Bytes.Length)                          readBuffer.UpdateCapacity(len);                        var get = netState.ReceiveBuffer.Dequeue(readBuffer.Bytes' 0' len);                      if (get == len)                      {                          readBuffer.Length = len;                            var packageReader = PacketReader.AcquireContent(readBuffer);                          ushort id = packageReader.GetPacketID();                          Logs.Debug("msgid= {0}"' id);                            var packetHandler = PacketHandlersManger.GetHandler(id);                          if (packetHandler != null)                          {                              //  加入网络消息处理                              TaskManager.AppendTask(netState' packetHandler' packageReader);                          }                          else                          {                              Logs.Error("unknow packetid. code={0}"' id);                          }                      }                        continue;                  }                    break;              }
Magic Number,DogSE.Client.Core,NetController,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\BaseController.cs,NetSocket_SocketRecv,The following statement contains a magic number: while(netState.ReceiveBuffer.Length > 2)              {                  var len = netState.ReceiveBuffer.GetPacketLength();                  if (len == 0)                  {                      Logs.Error("get package len is zero.");                      netState.NetSocket.CloseSocket();                      return;                  }                    if (len < 4)                  {                      Logs.Error("package is min 4.");                      netState.NetSocket.CloseSocket();                      return;                  }                      if (len > MaxPackageSize)                  {                      Logs.Error("get package len is error. size:{0}"' len);                      netState.NetSocket.CloseSocket();                      return;                  }                    IsWaitCheckOnline = false;                    if (len <= netState.ReceiveBuffer.Length)                  {                        DogBuffer readBuffer;                      if (len < 1024*4)                          readBuffer = DogBuffer.GetFromPool4K();                      else                          readBuffer = DogBuffer.GetFromPool32K();                        if (len >= readBuffer.Bytes.Length)                          readBuffer.UpdateCapacity(len);                        var get = netState.ReceiveBuffer.Dequeue(readBuffer.Bytes' 0' len);                      if (get == len)                      {                          readBuffer.Length = len;                            var packageReader = PacketReader.AcquireContent(readBuffer);                          ushort id = packageReader.GetPacketID();                          Logs.Debug("msgid= {0}"' id);                            var packetHandler = PacketHandlersManger.GetHandler(id);                          if (packetHandler != null)                          {                              //  加入网络消息处理                              TaskManager.AppendTask(netState' packetHandler' packageReader);                          }                          else                          {                              Logs.Error("unknow packetid. code={0}"' id);                          }                      }                        continue;                  }                    break;              }
Magic Number,DogSE.Client.Core,NetController,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\BaseController.cs,NetSocket_SocketRecv,The following statement contains a magic number: while(netState.ReceiveBuffer.Length > 2)              {                  var len = netState.ReceiveBuffer.GetPacketLength();                  if (len == 0)                  {                      Logs.Error("get package len is zero.");                      netState.NetSocket.CloseSocket();                      return;                  }                    if (len < 4)                  {                      Logs.Error("package is min 4.");                      netState.NetSocket.CloseSocket();                      return;                  }                      if (len > MaxPackageSize)                  {                      Logs.Error("get package len is error. size:{0}"' len);                      netState.NetSocket.CloseSocket();                      return;                  }                    IsWaitCheckOnline = false;                    if (len <= netState.ReceiveBuffer.Length)                  {                        DogBuffer readBuffer;                      if (len < 1024*4)                          readBuffer = DogBuffer.GetFromPool4K();                      else                          readBuffer = DogBuffer.GetFromPool32K();                        if (len >= readBuffer.Bytes.Length)                          readBuffer.UpdateCapacity(len);                        var get = netState.ReceiveBuffer.Dequeue(readBuffer.Bytes' 0' len);                      if (get == len)                      {                          readBuffer.Length = len;                            var packageReader = PacketReader.AcquireContent(readBuffer);                          ushort id = packageReader.GetPacketID();                          Logs.Debug("msgid= {0}"' id);                            var packetHandler = PacketHandlersManger.GetHandler(id);                          if (packetHandler != null)                          {                              //  加入网络消息处理                              TaskManager.AppendTask(netState' packetHandler' packageReader);                          }                          else                          {                              Logs.Error("unknow packetid. code={0}"' id);                          }                      }                        continue;                  }                    break;              }
Magic Number,DogSE.Client.Core,NetController,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\BaseController.cs,NetSocket_SocketRecv,The following statement contains a magic number: while(netState.ReceiveBuffer.Length > 2)              {                  var len = netState.ReceiveBuffer.GetPacketLength();                  if (len == 0)                  {                      Logs.Error("get package len is zero.");                      netState.NetSocket.CloseSocket();                      return;                  }                    if (len < 4)                  {                      Logs.Error("package is min 4.");                      netState.NetSocket.CloseSocket();                      return;                  }                      if (len > MaxPackageSize)                  {                      Logs.Error("get package len is error. size:{0}"' len);                      netState.NetSocket.CloseSocket();                      return;                  }                    IsWaitCheckOnline = false;                    if (len <= netState.ReceiveBuffer.Length)                  {                        DogBuffer readBuffer;                      if (len < 1024*4)                          readBuffer = DogBuffer.GetFromPool4K();                      else                          readBuffer = DogBuffer.GetFromPool32K();                        if (len >= readBuffer.Bytes.Length)                          readBuffer.UpdateCapacity(len);                        var get = netState.ReceiveBuffer.Dequeue(readBuffer.Bytes' 0' len);                      if (get == len)                      {                          readBuffer.Length = len;                            var packageReader = PacketReader.AcquireContent(readBuffer);                          ushort id = packageReader.GetPacketID();                          Logs.Debug("msgid= {0}"' id);                            var packetHandler = PacketHandlersManger.GetHandler(id);                          if (packetHandler != null)                          {                              //  加入网络消息处理                              TaskManager.AppendTask(netState' packetHandler' packageReader);                          }                          else                          {                              Logs.Error("unknow packetid. code={0}"' id);                          }                      }                        continue;                  }                    break;              }
Magic Number,DogSE.Client.Core.Net,DogBuffer32K,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\Connect\DogBuffer.cs,DogBuffer32K,The following statement contains a magic number: m_buffer = new byte[1024 * 32];
Magic Number,DogSE.Client.Core.Net,DogBuffer32K,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\Connect\DogBuffer.cs,DogBuffer32K,The following statement contains a magic number: m_buffer = new byte[1024 * 32];
Magic Number,DogSE.Client.Core.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\Connect\DogBuffer.cs,DogBuffer,The following statement contains a magic number: m_buffer = new byte[1024*4];
Magic Number,DogSE.Client.Core.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\Connect\DogBuffer.cs,DogBuffer,The following statement contains a magic number: m_buffer = new byte[1024*4];
Magic Number,DogSE.Client.Core.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\Connect\DogBuffer.cs,UpdateCapacity,The following statement contains a magic number: if (minSize == 0)                  newSize = m_buffer.Length * 2;              else              {                  newSize = FixSize(minSize);                  Logs.Info("UpdateCapacity size={0} newsize={1}"' minSize' newSize);              }
Magic Number,DogSE.Client.Core.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\Connect\DogBuffer.cs,FixSize,The following statement contains a magic number: return (minSize / 4096 + 1) * 4096;
Magic Number,DogSE.Client.Core.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\Connect\DogBuffer.cs,FixSize,The following statement contains a magic number: return (minSize / 4096 + 1) * 4096;
Magic Number,DogSE.Client.Core.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\Connect\DogBuffer.cs,Use,The following statement contains a magic number: if (name == "GetFromPool32K" || name == "GetFromPool4K")                  UseName = stack.GetFrame(2).GetMethod().Name;
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,SetBuffer,The following statement contains a magic number: m_Index = ReceiveQueue.PacketLengthSize + 2;
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( ( m_Index + 8 ) > m_Size )                  return 0;
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadLong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)( m_Data[m_Index++] << 24 ) ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt32,The following statement contains a magic number: if ( ( m_Index + 4 ) > m_Size )                  return 0;
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++];              else                  return m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24);
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt16,The following statement contains a magic number: if ( ( m_Index + 2 ) > m_Size )                  return 0;
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt16,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (short)( m_Data[m_Index++] << 8 | ( m_Data[m_Index++] ) );              else                  return (short)(m_Data[m_Index++] | (m_Data[m_Index++] << 8));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadInt16,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (short)( m_Data[m_Index++] << 8 | ( m_Data[m_Index++] ) );              else                  return (short)(m_Data[m_Index++] | (m_Data[m_Index++] << 8));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( ( m_Index + 8 ) > m_Size )                  return 0;
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadULong64,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                  return (ulong)( ( (long)m_Data[m_Index++] << 56 ) | ( (long)m_Data[m_Index++] << 48 ) | ( (long)m_Data[m_Index++] << 40 ) | ( (long)m_Data[m_Index++] << 32 ) | ( (uint)m_Data[m_Index++] << 24 ) | ( (uint)m_Data[m_Index++] << 16 ) | ( (uint)m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ulong)(m_Data[m_Index++] | ((long)m_Data[m_Index++] << 8) | ((long)m_Data[m_Index++] << 16) | ((long)m_Data[m_Index++] << 24) | ((long)m_Data[m_Index++] << 32) | ((long)m_Data[m_Index++] << 40) | ((long)m_Data[m_Index++] << 48) | ((long)m_Data[m_Index++] << 56));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt32,The following statement contains a magic number: if ( ( m_Index + 4 ) > m_Size )                  return 0;
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (uint)( ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (uint)(m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (uint)( ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (uint)(m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (uint)( ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (uint)(m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (uint)( ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (uint)(m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (uint)( ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (uint)(m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt32,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (uint)( ( m_Data[m_Index++] << 24 ) | ( m_Data[m_Index++] << 16 ) | ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (uint)(m_Data[m_Index++] | (m_Data[m_Index++] << 8) | (m_Data[m_Index++] << 16) | (m_Data[m_Index++] << 24));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt16,The following statement contains a magic number: if ( ( m_Index + 2 ) > m_Size )                  return 0;
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt16,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (ushort)( ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ushort)(m_Data[m_Index++] | (m_Data[m_Index++] << 8));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUInt16,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )                   return (ushort)( ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] );              else                  return (ushort)(m_Data[m_Index++] | (m_Data[m_Index++] << 8));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUnicodeStringLE,The following statement contains a magic number: while ( ( m_Index + 1 ) < m_Size && ( cChar = ( m_Data[m_Index++] | ( m_Data[m_Index++] << 8 ) ) ) != 0 )                  stringBuilder.Append( (char)cChar );
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUnicodeStringLESafe,The following statement contains a magic number: while ( ( m_Index + 1 ) < m_Size && ( cChar = ( m_Data[m_Index++] | ( m_Data[m_Index++] << 8 ) ) ) != 0 )              {                  if ( IsSafeChar( cChar ) )                      stringBuilder.Append( (char)cChar );              }
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUnicodeString,The following statement contains a magic number: while ( ( m_Index + 1 ) < m_Size && ( cChar = ( ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] ) ) != 0 )                  stringBuilder.Append( (char)cChar );
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,ReadUnicodeStringSafe,The following statement contains a magic number: while ( ( m_Index + 1 ) < m_Size && ( cChar = ( ( m_Data[m_Index++] << 8 ) | m_Data[m_Index++] ) ) != 0 )              {                  if ( IsSafeChar( cChar ) )                      stringBuilder.Append( (char)cChar );              }
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,GetPacketID,The following statement contains a magic number: if ((index + 2) > m_Size)                  return 0;
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,GetPacketID,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)                  return (ushort)((m_Data[index++] << 8) | m_Data[index]);              else                  return (ushort)(m_Data[index++] | (m_Data[index] << 8));
Magic Number,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,GetPacketID,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)                  return (ushort)((m_Data[index++] << 8) | m_Data[index]);              else                  return (ushort)(m_Data[index++] | (m_Data[index] << 8));
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: FixBuffer(2);
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(shortValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)shortValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)shortValue;                  buffer.Bytes[buffer.Length++] = (byte)(shortValue >> 8);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(shortValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)shortValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)shortValue;                  buffer.Bytes[buffer.Length++] = (byte)(shortValue >> 8);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: FixBuffer(2);
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(ushortValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)ushortValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)ushortValue;                  buffer.Bytes[buffer.Length++] = (byte)(ushortValue >> 8);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(ushortValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)ushortValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)ushortValue;                  buffer.Bytes[buffer.Length++] = (byte)(ushortValue >> 8);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: FixBuffer(4);
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)intValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)intValue;                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)intValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)intValue;                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)intValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)intValue;                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)intValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)intValue;                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)intValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)intValue;                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)intValue;              }              else              {                  buffer.Bytes[buffer.Length++] = (byte)intValue;                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: FixBuffer(4);
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;              }              else              {                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;              }              else              {                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;              }              else              {                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;              }              else              {                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;              }              else              {                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if ( m_Endian == Endian.LITTLE_ENDIAN )              {                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;              }              else              {                  buffer.Bytes[buffer.Length++]  = (byte)uintValue;                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 8 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 16 );                  buffer.Bytes[buffer.Length++]  = (byte)( uintValue >> 24 );              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: FixBuffer(4);
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: FixBuffer(8);
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) longValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) longValue;                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (longValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: FixBuffer(8);
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                }              else              {                  buffer.Bytes[buffer.Length++] = (byte) ulongValue;                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 8);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 16);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 24);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 32);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 40);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 48);                  buffer.Bytes[buffer.Length++] = (byte) (ulongValue >> 56);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,Write,The following statement contains a magic number: FixBuffer(8);
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,PacketWriter,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketWriter.cs,GetBuffer,The following statement contains a magic number: if (m_Endian == Endian.LITTLE_ENDIAN)              {                  buffer.Bytes[0] = (byte)(intValue >> 24);                  buffer.Bytes[1] = (byte)(intValue >> 16);                  buffer.Bytes[2] = (byte)(intValue >> 8);                  buffer.Bytes[3] = (byte)intValue;                }              else              {                  buffer.Bytes[0] = (byte)intValue;                  buffer.Bytes[1] = (byte)(intValue >> 8);                  buffer.Bytes[2] = (byte)(intValue >> 16);                  buffer.Bytes[3] = (byte)(intValue >> 24);              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,Enqueue,The following statement contains a magic number: lock( m_LockBuffer )              {                  if ( ( m_Size + iSize ) >= m_Buffer.Length )                      SetCapacityInLock( ( m_Size + iSize + 2047 ) & ~2047 ); // 总是以2048的倍数来增大字节数' :( 弄得我老半天才明白原理呢!                    if ( m_Head < m_Tail )                  {                      long rightLength = m_Buffer.Length - m_Tail;                        if ( rightLength >= iSize )                          Buffer.BlockCopy( byteBuffer' (int)iOffset' m_Buffer' (int)m_Tail' (int)iSize );                      else                      {                          Buffer.BlockCopy( byteBuffer' (int)iOffset' m_Buffer' (int)m_Tail' (int)rightLength );                          Buffer.BlockCopy( byteBuffer' (int)( iOffset + rightLength )' m_Buffer' 0' (int)( iSize - rightLength ) );                      }                  }                  else                      Buffer.BlockCopy( byteBuffer' (int)iOffset' m_Buffer' (int)m_Tail' (int)iSize );                    m_Tail = ( m_Tail + iSize ) % m_Buffer.Length;                  m_Size += iSize;              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,Enqueue,The following statement contains a magic number: lock( m_LockBuffer )              {                  if ( ( m_Size + iSize ) >= m_Buffer.Length )                      SetCapacityInLock( ( m_Size + iSize + 2047 ) & ~2047 ); // 总是以2048的倍数来增大字节数' :( 弄得我老半天才明白原理呢!                    if ( m_Head < m_Tail )                  {                      long rightLength = m_Buffer.Length - m_Tail;                        if ( rightLength >= iSize )                          Buffer.BlockCopy( byteBuffer' (int)iOffset' m_Buffer' (int)m_Tail' (int)iSize );                      else                      {                          Buffer.BlockCopy( byteBuffer' (int)iOffset' m_Buffer' (int)m_Tail' (int)rightLength );                          Buffer.BlockCopy( byteBuffer' (int)( iOffset + rightLength )' m_Buffer' 0' (int)( iSize - rightLength ) );                      }                  }                  else                      Buffer.BlockCopy( byteBuffer' (int)iOffset' m_Buffer' (int)m_Tail' (int)iSize );                    m_Tail = ( m_Tail + iSize ) % m_Buffer.Length;                  m_Size += iSize;              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Net,ReceiveQueue,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\ReceiveQueue.cs,GetPacketLength,The following statement contains a magic number: lock (m_LockBuffer)  #endif              {                  if (PacketLengthSize > m_Size)                      return 0;                    if (m_Head + PacketLengthSize < m_Buffer.Length)                  {                      //  保证要读取的数据在字节数组里                      var index = m_Head;                        //  读四字节长度                      if (m_Endian == Endian.LITTLE_ENDIAN)                          return (m_Buffer[index] << 24) | (m_Buffer[index + 1] << 16) | (m_Buffer[index + 2] << 8) | m_Buffer[index + 3];                      else                          return m_Buffer[index] | (m_Buffer[index + 1] << 8) | (m_Buffer[index + 2] << 16) | (m_Buffer[index + 3] << 24);                        //if (m_Endian == Endian.LITTLE_ENDIAN)                      //    return (m_Buffer[index] << 8) | (m_Buffer[index + 1]);                      //else                      //    return m_Buffer[index] | (m_Buffer[index + 1] << 8);                  }              }
Magic Number,DogSE.Client.Core.Task,Unity3DTaskManager,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Task\Untity3DTaskManager.cs,WorkThread,The following statement contains a magic number: while(isRuning || taskList.Count > 0)              {                  ITask task;                  if(taskList.TryDequeue(out task))                  {                      //watch.Restart();                      watch.Reset();                      watch.Start();                        bool isError = false;                      try                      {                          task.Execute();                      }                      catch (Exception ex)                      {                          Logs.Error("{0} run task fail."' taskName_' ex);                          isError = true;                      }                      watch.Stop();                        task.TaskProfile.Append(watch.ElapsedTicks' isError);                      task.WriteLog(watch.ElapsedTicks' isError);                      task.Release();                        var now = OneServer.NowTime;                      if (now.Ticks - start.Ticks > 10000 * 1000 * 10)                      {                          start = now;                          //NetTaskCodeRuntimeWriter.Flush();                          //ActionTaskCodeRuntimeWriter.Flush();                      }                  }                  else                  {                      //  队列里没任务，则让线程先休息一小会                      Thread.Sleep(1);                  }              }
Magic Number,DogSE.Client.Core.Task,Unity3DTaskManager,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Task\Untity3DTaskManager.cs,WorkThread,The following statement contains a magic number: while(isRuning || taskList.Count > 0)              {                  ITask task;                  if(taskList.TryDequeue(out task))                  {                      //watch.Restart();                      watch.Reset();                      watch.Start();                        bool isError = false;                      try                      {                          task.Execute();                      }                      catch (Exception ex)                      {                          Logs.Error("{0} run task fail."' taskName_' ex);                          isError = true;                      }                      watch.Stop();                        task.TaskProfile.Append(watch.ElapsedTicks' isError);                      task.WriteLog(watch.ElapsedTicks' isError);                      task.Release();                        var now = OneServer.NowTime;                      if (now.Ticks - start.Ticks > 10000 * 1000 * 10)                      {                          start = now;                          //NetTaskCodeRuntimeWriter.Flush();                          //ActionTaskCodeRuntimeWriter.Flush();                      }                  }                  else                  {                      //  队列里没任务，则让线程先休息一小会                      Thread.Sleep(1);                  }              }
Magic Number,DogSE.Client.Core.Task,Unity3DTaskManager,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Task\Untity3DTaskManager.cs,WorkThread,The following statement contains a magic number: while(isRuning || taskList.Count > 0)              {                  ITask task;                  if(taskList.TryDequeue(out task))                  {                      //watch.Restart();                      watch.Reset();                      watch.Start();                        bool isError = false;                      try                      {                          task.Execute();                      }                      catch (Exception ex)                      {                          Logs.Error("{0} run task fail."' taskName_' ex);                          isError = true;                      }                      watch.Stop();                        task.TaskProfile.Append(watch.ElapsedTicks' isError);                      task.WriteLog(watch.ElapsedTicks' isError);                      task.Release();                        var now = OneServer.NowTime;                      if (now.Ticks - start.Ticks > 10000 * 1000 * 10)                      {                          start = now;                          //NetTaskCodeRuntimeWriter.Flush();                          //ActionTaskCodeRuntimeWriter.Flush();                      }                  }                  else                  {                      //  队列里没任务，则让线程先休息一小会                      Thread.Sleep(1);                  }              }
Magic Number,DogSE.Client.Core.Timer,TimerThread,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Timer\TimerThread.cs,RunTimerThread,The following statement contains a magic number: const int longTimeIndex = 3;
Missing Default,DogSE.Client.Core.Net,PacketReader,C:\repos\dogvane_DogSE\DogSE\DogSE.Client.Core\Net\PacketReader.cs,Seek,The following switch statement is missing a default case: switch ( seekOrigin )              {                  case SeekOrigin.Begin:                      m_Index = iOffset;                      break;                  case SeekOrigin.Current:                      m_Index += iOffset;                      break;                  case SeekOrigin.End:                      m_Index = m_Size - iOffset;                      break;              }
