Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DogSE.Server.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\DogBuffer.cs,Release,The length of the statement  "                //Logs.Info("release buffer id = {0} counter={1}  strace = {2}"' m_id' referenceCounter' stack.GetFrame(1).GetMethod().Name); " is 125.
Magic Number,DogSE.Server.Net,ClientSession<T>,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\ClientSession.cs,PeekSend,The following statement contains a magic number: lock (m_PendingBuffer)              {                  if (isSending || m_PendingBuffer.Count == 0)                      return;                    //  TODO 这里要不要考虑进行并报发送处理                  isSending = true;                    if (m_PendingBuffer.Count > 1)                  {                      //   2 个包以上，进行拼包后再发送                      var buffs = m_PendingBuffer.ToArray();                      m_PendingBuffer.Clear();                        int offSet = 0;                      foreach (var b in buffs)                          offSet += b.Length;                        DogBuffer sendBuff;                        if (offSet < 4000)                          sendBuff = DogBuffer.GetFromPool4K();                      else                          sendBuff = DogBuffer.GetFromPool32K();                        if (offSet >= sendBuff.Bytes.Length)                          sendBuff.UpdateCapacity(offSet);                        foreach (var buff in buffs)                      {                          Buffer.BlockCopy(buff.Bytes' 0' sendBuff.Bytes' sendBuff.Length' buff.Length);                          sendBuff.Length += buff.Length;                            buff.Release();                      }                        SendEventArgs.UserToken = sendBuff;                      SendEventArgs.SetBuffer(sendBuff.Bytes' 0' sendBuff.Length);                      Socket.SendAsync(SendEventArgs);                  }                  else                  {                      DogBuffer buff;                      buff = m_PendingBuffer.Dequeue();                      SendEventArgs.UserToken = buff;                      SendEventArgs.SetBuffer(buff.Bytes' 0' buff.Length);                      Socket.SendAsync(SendEventArgs);                  }              }
Magic Number,DogSE.Server.Net,DogBuffer32K,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\DogBuffer.cs,DogBuffer32K,The following statement contains a magic number: m_buffer = new byte[1024 * 32];
Magic Number,DogSE.Server.Net,DogBuffer32K,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\DogBuffer.cs,DogBuffer32K,The following statement contains a magic number: m_buffer = new byte[1024 * 32];
Magic Number,DogSE.Server.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\DogBuffer.cs,DogBuffer,The following statement contains a magic number: m_buffer = new byte[1024*4];
Magic Number,DogSE.Server.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\DogBuffer.cs,DogBuffer,The following statement contains a magic number: m_buffer = new byte[1024*4];
Magic Number,DogSE.Server.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\DogBuffer.cs,UpdateCapacity,The following statement contains a magic number: if (minSize == 0)                  newSize = m_buffer.Length * 2;              else              {                  newSize = FixSize(minSize);                  Logs.Info("UpdateCapacity size={0} newsize={1}"' minSize' newSize);              }
Magic Number,DogSE.Server.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\DogBuffer.cs,FixSize,The following statement contains a magic number: return (minSize/4096 + 1)*4096;
Magic Number,DogSE.Server.Net,DogBuffer,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\DogBuffer.cs,FixSize,The following statement contains a magic number: return (minSize/4096 + 1)*4096;
Magic Number,DogSE.Server.Net,Listener<T>,C:\repos\dogvane_DogSE\DogSE\DogSE.Server.Net\Listener.cs,StartServer,The following statement contains a magic number: serverSocket.Start(50);
