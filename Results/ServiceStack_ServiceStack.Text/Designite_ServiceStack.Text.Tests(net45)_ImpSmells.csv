Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The method has 182 lines of code.
Complex Method,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,MatchesUsers,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Text.Tests.DynamicModels,ModelWithAllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\ModelWithAllTypes.cs,Equals,Cyclomatic complexity of the method is 21
Long Parameter List,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\PerfTestBase.cs,CompareRuns,The method has 5 parameters. Parameters: iterations' run1Name' run1Action' run2Name' run2Action
Long Parameter List,ServiceStack.Text.Tests.JsonTests,OnDeserializationErrorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\OnDeserializationErrorTests.cs,AssertThatInvalidJsonInvokesExpectedCallback,The method has 5 parameters. Parameters: json' expectedProperty' expectedValue' expectedType' expectedExceptionMessage
Long Identifier,ServiceStack.Text.Tests,TimeSpanConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TimeSpanConverterTests.cs,,The length of the parameter oneDayHourMinuteSecondMilliSecond is 33.
Long Identifier,ServiceStack.Text.Tests,TimeSpanConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TimeSpanConverterTests.cs,,The length of the parameter threeThousandSixHundredAndFiveDays is 34.
Long Identifier,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The length of the parameter currencyNegativeParenthesesFormat is 33.
Long Identifier,ServiceStack.Stripe.Types,Currencies,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\StripeGateway.cs,,The length of the parameter BosniaAndHerzegovinaConvertibleMark is 35.
Long Identifier,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The length of the parameter dateWithoutMillisecondsUnspecified is 34.
Long Statement,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_Deserialize_text,The length of the statement  "            var dtoString = "[{Id:1'Urn:urn:post:3a944f18-920c-498a-832d-cf38fed3d0d7/1'UserId:3a944f18920c498a832dcf38fed3d0d7'DateAdded:2010-02-17T12:04:45.2845615Z'DateModified:2010-02-17T12:04:45.2845615Z'OriginUserId:3a944f18920c498a832dcf38fed3d0d7'OriginUserName:testuser1'SourceUserId:3a944f18920c498a832dcf38fed3d0d7'SourceUserName:testuser1'SubjectUrn:urn:track:1'ContentUrn:urn:track:1'TrackUrns:[]'CaptionUserId:3a944f18920c498a832dcf38fed3d0d7'CaptionSourceName:testuser1'PostType:Content}]"; " is 493.
Long Statement,ServiceStack.Text.Tests,AnonymousTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AnonymousTypes.cs,Can_serialize_anonymous_types,The length of the statement  "			Serialize(new { Id = 1' Name = "Name"' IntList = new[] { 1' 2' 3 } }' includeXml: false); // xmlserializer cannot serialize anonymous types. " is 140.
Long Statement,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_to_ValueType,The length of the statement  "            Assert.That("98ece8400be4452eb6ad7c3a4404f119".ConvertTo<Guid>()' Is.EqualTo(new Guid("98ece8400be4452eb6ad7c3a4404f119"))); " is 124.
Long Statement,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_from_ValueType_to_strings,The length of the statement  "            Assert.That(new Guid("98ECE840-0BE4-452E-B6AD-7C3A4404F119").ConvertTo<string>()' Is.EqualTo("98ece8400be4452eb6ad7c3a4404f119")); " is 130.
Long Statement,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_create_Dictionary_default_value,The length of the statement  "            var obj = (Dictionary<string' ClassWithEnum>)AutoMappingUtils.CreateDefaultValue(typeof(Dictionary<string' ClassWithEnum>)' new Dictionary<Type' int>()); " is 153.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The length of the statement  "            Assert.That(objKvp.ToObjectDictionary()' Is.EquivalentTo(new Dictionary<string' object> { {"Key"' "A" }' { "Value"' 1  } } )); " is 126.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The length of the statement  "            Assert.That(strKvp.ToObjectDictionary()' Is.EquivalentTo(new Dictionary<string' object> { {"Key"' "A" }' { "Value"' "1"} } )); " is 126.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The length of the statement  "            Assert.That(intKvp.ToObjectDictionary()' Is.EquivalentTo(new Dictionary<string' object> { {"Key"' "A" }' { "Value"' 1  } } )); " is 126.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The length of the statement  "            Assert.That(new[] { objKvp' objKvp2 }.ToObjectDictionary()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' 1}' {"B"' 2} })); " is 132.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The length of the statement  "            Assert.That(new[] { strKvp' strKvp2 }.ToObjectDictionary()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' "1"}' {"B"' "2"} })); " is 136.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The length of the statement  "            Assert.That(new[] { intKvp' intKvp2 }.ToObjectDictionary()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' 1}' {"B"' 2} })); " is 132.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The length of the statement  "            Assert.That(objKvp.ConvertTo<Dictionary<string'object>>()' Is.EquivalentTo(new Dictionary<string' object> { {"Key"' "A" }' { "Value"' 1  } } )); " is 144.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The length of the statement  "            Assert.That(strKvp.ConvertTo<Dictionary<string'object>>()' Is.EquivalentTo(new Dictionary<string' object> { {"Key"' "A" }' { "Value"' "1"} } )); " is 144.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The length of the statement  "            Assert.That(intKvp.ConvertTo<Dictionary<string'object>>()' Is.EquivalentTo(new Dictionary<string' object> { {"Key"' "A" }' { "Value"' 1  } } )); " is 144.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The length of the statement  "            Assert.That(new[] { objKvp' objKvp2 }.ConvertTo<Dictionary<string'object>>()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' 1}' {"B"' 2} })); " is 150.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The length of the statement  "            Assert.That(new[] { strKvp' strKvp2 }.ConvertTo<Dictionary<string'object>>()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' "1"}' {"B"' "2"} })); " is 154.
Long Statement,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The length of the statement  "            Assert.That(new[] { intKvp' intKvp2 }.ConvertTo<Dictionary<string'object>>()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' 1}' {"B"' 2} })); " is 150.
Long Statement,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_serialize_ObjectDictionary_list,The length of the statement  "            Assert.That(rows.ToCsv().NormalizeNewLines()' Is.EqualTo("Id'CustomerId\n1'ALFKI\n2'ANATR").Or.EqualTo("CustomerId'Id\nALFKI'1\nANATR'2")); " is 139.
Long Statement,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_serialize_StringDictionary_list,The length of the statement  "            Assert.That(rows.ToCsv().NormalizeNewLines()' Is.EqualTo("Id'CustomerId\n1'ALFKI\n2'ANATR").Or.EqualTo("CustomerId'Id\nALFKI'1\nANATR'2")); " is 139.
Long Statement,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_serialize_single_ObjectDictionary_or_ObjectKvps,The length of the statement  "            Assert.That(row.ToCsv().NormalizeNewLines()' Is.EqualTo("Id'CustomerId\n1'ALFKI").Or.EqualTo("CustomerId'Id\nALFKI'1")); " is 120.
Long Statement,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_serialize_single_ObjectDictionary_or_ObjectKvps,The length of the statement  "            Assert.That(kvps.ToCsv().NormalizeNewLines()' Is.EqualTo("Id'CustomerId\n1'ALFKI").Or.EqualTo("CustomerId'Id\nALFKI'1")); " is 121.
Long Statement,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_serialize_single_StringDictionary_or_StringKvps,The length of the statement  "            Assert.That(row.ToCsv().NormalizeNewLines()' Is.EqualTo("Id'CustomerId\n1'ALFKI").Or.EqualTo("CustomerId'Id\nALFKI'1")); " is 120.
Long Statement,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_serialize_single_StringDictionary_or_StringKvps,The length of the statement  "            Assert.That(kvps.ToCsv().NormalizeNewLines()' Is.EqualTo("Id'CustomerId\n1'ALFKI").Or.EqualTo("CustomerId'Id\nALFKI'1")); " is 121.
Long Statement,ServiceStack.Text.Tests,CustomStructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomStructTests.cs,Can_serialize_UserStats_list,The length of the statement  "                "[\"6203a3af17384cdfa3ad0f578ad198f0:0:0:0:0:0\"'\"c7c87df54821400db9f7d8eee23c5842:1:1:1:1:16\"'\"33eb45d421a041cca07d43bfab4b3e92:2:2:2:2:32\"'\"ed041f82572a41cb90d3e227786be9eb:3:3:3:3:48\"'\"d703f00c613a44a9ac2bc46ed0f23d3c:4:4:4:4:64\"]")); " is 245.
Long Statement,ServiceStack.Text.Tests,DataStressTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DataTests.cs,serialize_GetValuesResponse,The length of the statement  "            const string responseJsv = "{Values:[\"{Id:1'LastName:Davolio'FirstName:Nancy'Title:Sales Representative'TitleOfCourtesy:Ms.'BirthDate:1948-12-08'HireDate:1992-05-01'Address:507 - 20th Ave. E. Apt. 2A'City:Seattle'Region:WA'PostalCode:98122'Country:USA'HomePhone:(206) 555-9857'Extension:5467'Notes:Education includes a BA in psychology from Colorado State University in 1970.  She also completed 'The Art of the Cold Call.'  Nancy is a member of Toastmasters International.'ReportsTo:2'PhotoPath:http://accweb/emmployees/davolio.bmp}\"'\"{Id:2'LastName:Fuller'FirstName:Andrew'Title:\"\"Vice President' Sales\"\"'TitleOfCourtesy:Dr.'BirthDate:1952-02-19'HireDate:1992-08-14'Address:908 W. Capital Way'City:Tacoma'Region:WA'PostalCode:98401'Country:USA'HomePhone:(206) 555-9482'Extension:3457'Notes:\"\"Andrew received his BTS commercial in 1974 and a Ph.D. in international marketing from the University of Dallas in 1981.  He is fluent in French and Italian and reads German.  He joined the company as a sales representative' was promoted to sales manager in January 1992 and to vice president of sales in March 1993.  Andrew is a member of the Sales Management Roundtable' the Seattle Chamber of Commerce' and the Pacific Rim Importers Association.\"\"'PhotoPath:http://accweb/emmployees/fuller.bmp}\"'\"{Id:3'LastName:Leverling'FirstName:Janet'Title:Sales Representative'TitleOfCourtesy:Ms.'BirthDate:1963-08-30'HireDate:1992-04-01'Address:722 Moss Bay Blvd.'City:Kirkland'Region:WA'PostalCode:98033'Country:USA'HomePhone:(206) 555-3412'Extension:3355'Notes:Janet has a BS degree in chemistry from Boston College (1984).  She has also completed a certificate program in food retailing management.  Janet was hired as a sales associate in 1991 and promoted to sales representative in February 1992.'ReportsTo:2'PhotoPath:http://accweb/emmployees/leverling.bmp}\"'\"{Id:4'LastName:Peacock'FirstName:Margaret'Title:Sales Representative'TitleOfCourtesy:Mrs.'BirthDate:1937-09-19'HireDate:1993-05-03'Address:4110 Old Redmond Rd.'City:Redmond'Region:WA'PostalCode:98052'Country:USA'HomePhone:(206) 555-8122'Extension:5176'Notes:Margaret holds a BA in English literature from Concordia College (1958) and an MA from the American Institute of Culinary Arts (1966).  She was assigned to the London office temporarily from July through November 1992.'ReportsTo:2'PhotoPath:http://accweb/emmployees/peacock.bmp}\"'\"{Id:5'LastName:Buchanan'FirstName:Steven'Title:Sales Manager'TitleOfCourtesy:Mr.'BirthDate:1955-03-04'HireDate:1993-10-17'Address:14 Garrett Hill'City:London'PostalCode:SW1 8JR'Country:UK'HomePhone:(71) 555-4848'Extension:3453'Notes:\"\"Steven Buchanan graduated from St. Andrews University' Scotland' with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992' he spent 6 months in an orientation program at the Seattle office and then returned to his permanent post in London.  He was promoted to sales manager in March 1993.  Mr. Buchanan has completed the courses 'Successful Telemarketing' and 'International Sales Management.'  He is fluent in French.\"\"'ReportsTo:2'PhotoPath:http://accweb/emmployees/buchanan.bmp}\"'\"{Id:6'LastName:Suyama'FirstName:Michael'Title:Sales Representative'TitleOfCourtesy:Mr.'BirthDate:1963-07-02'HireDate:1993-10-17'Address:Coventry House Miner Rd.'City:London'PostalCode:EC2 7JR'Country:UK'HomePhone:(71) 555-7773'Extension:428'Notes:\"\"Michael is a graduate of Sussex University (MA' economics' 1983) and the University of California at Los Angeles (MBA' marketing' 1986).  He has also taken the courses 'Multi-Cultural Selling' and 'Time Management for the Sales Professional.'  He is fluent in Japanese and can read and write French' Portuguese' and Spanish.\"\"'ReportsTo:5'PhotoPath:http://accweb/emmployees/davolio.bmp}\"'\"{Id:7'LastName:King'FirstName:Robert'Title:Sales Representative'TitleOfCourtesy:Mr.'BirthDate:1960-05-29'HireDate:1994-01-02'Address:Edgeham Hollow Winchester Way'City:London'PostalCode:RG1 9SP'Country:UK'HomePhone:(71) 555-5598'Extension:465'Notes:\"\"Robert King served in the Peace Corps and traveled extensively before completing his degree in English at the University of Michigan in 1992' the year he joined the company.  After completing a course entitled 'Selling in Europe'' he was transferred to the London office in March 1993.\"\"'ReportsTo:5'PhotoPath:http://accweb/emmployees/davolio.bmp}\"'\"{Id:8'LastName:Callahan'FirstName:Laura'Title:Inside Sales Coordinator'TitleOfCourtesy:Ms.'BirthDate:1958-01-09'HireDate:1994-03-05'Address:4726 - 11th Ave. N.E.'City:Seattle'Region:WA'PostalCode:98105'Country:USA'HomePhone:(206) 555-1189'Extension:2344'Notes:Laura received a BA in psychology from the University of Washington.  She has also completed a course in business French.  She reads and writes French.'ReportsTo:2'PhotoPath:http://accweb/emmployees/davolio.bmp}\"'\"{Id:9'LastName:Dodsworth'FirstName:Anne'Title:Sales Representative'TitleOfCourtesy:Ms.'BirthDate:1966-01-27'HireDate:1994-11-15'Address:7 Houndstooth Rd.'City:London'PostalCode:WG2 7LT'Country:UK'HomePhone:(71) 555-4444'Extension:452'Notes:Anne has a BA degree in English from St. Lawrence College.  She is fluent in French and German.'ReportsTo:5'PhotoPath:http://accweb/emmployees/davolio.bmp}\"]'ResponseStatus:{Errors:[]}}"; " is 5319.
Long Statement,ServiceStack.Text.Tests,DdnDtoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DdnDtoTests.cs,Can_serialize_ProUserPublicProfile,The length of the statement  "                @"{Id:81ae7b3ae5404f5f827d0303949fcb2f'Alias:Mike Halliday'ProUserType:Celebrity'ProUserSalesType:OthersMusic'ProUserLink:{}'ProUserLinkHtml:""<a href=""""""""></a>""'SocialLinks:[]'BannerImageBackgroundColor:#000000'ArtistImages:[]'Genres:[]'BiographyPageHtml:""<style type=""""text/css""""> " is 292.
Long Statement,ServiceStack.Text.Tests,DdnDtoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DdnDtoTests.cs,Can_serialize_ProUserPublicProfile,The length of the statement  "</table>""'Posts:[]'FollowerUsers:[]'FollowerUsersCount:0'FollowingUsers:[{Id:89b82c7cb6b042a6b1e8ab80cdb6b387'UserType:Mflow'UserName:mflow'LanguageCode:en'FlowPostCount:1372'ClientTracksCount:0'FollowingCount:0'FollowersCount:8457'ViewCount:1627'ActivationDate:2009-11-05T20:52:11.6156Z'UserImage:{RelativePath:89/b8/89b82c7cb6b042a6b1e8ab80cdb6b387/Profile75X75.jpg'Hash:GoLberqSAvzBc7L1298Ekw=='Width:75'Height:75}}'{Id:b7c07996891941b399444733fd32810c'UserType:Channel'UserName:mflowalternative'FullName:mflow channel'FirstName:mflow'LastName:channel'LanguageCode:en'FlowPostCount:419'ClientTracksCount:0'FollowingCount:6'FollowersCount:6944'ViewCount:2167'ActivationDate:2009-11-05T20:52:11.7248Z'UserImage:{RelativePath:b7/c0/b7c07996891941b399444733fd32810c/Profile75X75.jpg'Hash:2N9IkhxXWV3TBdzmkI9tKA=='Width:75'Height:75}}'{Id:7039f393fc8d45479c11636d90979adc'UserType:Channel'UserName:mflowfrontline'FullName:mflow channel'FirstName:mflow'LastName:channel'LanguageCode:en'FlowPostCount:115'ClientTracksCount:0'FollowingCount:5'FollowersCount:6883'ViewCount:559'ActivationDate:2009-11-05T20:52:11.834Z'UserImage:{RelativePath:70/39/7039f393fc8d45479c11636d90979adc/Profile75X75.jpg'Hash:LQq2I3aykfHW4OsoMQM8Jw=='Width:75'Height:75}}'{Id:a2ba8e58e4494ee388499abe506abb06'UserType:ProUser'UserName:mojo'FullName:mojo'LanguageCode:en'FlowPostCount:0'ClientTracksCount:0'FollowingCount:0'FollowersCount:157'ViewCount:9'ActivationDate:2010-03-05T15:26:20.819008Z'UserImage:{RelativePath:a2/ba/a2ba8e58e4494ee388499abe506abb06/Profile75X75.jpg'Hash:TZ7Y5gs3fnbxT4ZtC8zkGg=='Width:75'Height:75}}'{Id:106c3757c6424007a45bc00708c572bc'UserType:ProUser'UserName:islandrecords'FullName:Island Records'FirstName:Island'LastName:Records'LanguageCode:en'FlowPostCount:1'ClientTracksCount:0'FollowingCount:0'FollowersCount:147'ViewCount:60'ActivationDate:2010-03-16T19:50:46.691695Z'UserImage:{RelativePath:10/6c/106c3757c6424007a45bc00708c572bc/Profile75X75.jpg'Hash:46bc2QtzsWPlonljLaaPng=='Width:75'Height:75}}]'FollowingUsersCount:5}"; " is 2035.
Long Statement,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Do_not_convert_Guids,The length of the statement  "              new Regex(@"^(\{){0'1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0'1}$"' RegexOptions.Compiled); " is 137.
Long Statement,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_convert_string_to_appropriate_popular_type,The length of the statement  "            Assert.That(DynamicNumber.TryParse((int.MaxValue + (long)1).ToString()' out o) && o is long l && l == int.MaxValue + (long)1); " is 126.
Long Statement,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_convert_string_to_appropriate_popular_type,The length of the statement  "            Assert.That(DynamicNumber.TryParse((long.MaxValue + (double)1).ToString(CultureInfo.InvariantCulture)' out o) && o is double d ? d : 0' Is.EqualTo(long.MaxValue + (double)1).Within(10000)); " is 189.
Long Statement,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Can_convert_string_into_number_types,The length of the statement  "            Assert.That((long.MaxValue + (double)1).ToString().ConvertTo<double>()' Is.EqualTo(long.MaxValue + (double)1).Within(10000)); " is 125.
Long Statement,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_dictionary_when_current_culture_has_decimal_comma,The length of the statement  "            var json = "{\"decimalValue\": 79228162514264337593543950335'\"floatValue\": 3.40282347E+038'\"doubleValue\": 1.79769313486231570000E+308}"; " is 140.
Long Statement,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_dictionary_with_mixed_values_and_nulls_and_empty_array,The length of the statement  "            var json = "{\"stringIntValue\": \"-13\"'\"intValue\": -13'\"nullValue\": null'\"stringDecimalValue\": \"5.9\"'\"decimalValue\": 5.9'\"emptyArrayValue\": []'\"stringValue\": \"Foo\"'\"stringWithDigitsValue\": \"OR345\"'\"dateValue\":\"\\/Date(785635200000)\\/\"}"; " is 264.
Long Statement,ServiceStack.Text.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\EnumTests.cs,Can_correctly_serialize_enums,The length of the statement  "            const string expected = "{\"FlagsEnum\":1'\"NoFlagsEnum\":\"One\"'\"NullableFlagsEnum\":2'\"NullableNoFlagsEnum\":\"Two\"}"; " is 124.
Long Statement,ServiceStack.Text.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\EnumTests.cs,Can_override_TreatEnumAsInteger,The length of the statement  "            Assert.That(new GetDayOfWeekAsInt { DayOfWeek = DayOfWeek.Tuesday }.ToJson()' Is.EqualTo("{\"DayOfWeek\":\"Tuesday\"}")); " is 121.
Long Statement,ServiceStack.Text.Tests,HttpUtilsMockTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\HttpUtilsMockTests.cs,Can_Mock_Bytes_Api_responses,The length of the statement  "                Assert.That(ExampleGoogleUrl.PostBytesToUrl(requestBody: "postdata=1".ToUtf8Bytes())' Is.EqualTo("mocked".ToUtf8Bytes())); " is 122.
Long Statement,ServiceStack.Text.Tests,HttpUtilsMockTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\HttpUtilsMockTests.cs,Can_Mock_Bytes_Api_responses_Async,The length of the statement  "                Assert.That(await ExampleGoogleUrl.PostBytesToUrlAsync(requestBody: "postdata=1".ToUtf8Bytes())' Is.EqualTo("mocked".ToUtf8Bytes())); " is 133.
Long Statement,ServiceStack.Text.Tests,HttpUtilsMockTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\HttpUtilsMockTests.cs,Can_Mock_BytesFn_Api_responses,The length of the statement  "                Assert.That(ExampleGoogleUrl.PostBytesToUrl(requestBody: "postdata=1".ToUtf8Bytes())' Is.EqualTo("mocked-google".ToUtf8Bytes())); " is 129.
Long Statement,ServiceStack.Text.Tests,HttpUtilsMockTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\HttpUtilsMockTests.cs,Can_Mock_BytesFn_Api_responses,The length of the statement  "                Assert.That(ExampleYahooUrl.PostBytesToUrl(requestBody: "postdata=1".ToUtf8Bytes())' Is.EqualTo("mocked-yahoo".ToUtf8Bytes())); " is 127.
Long Statement,ServiceStack.Text.Tests,HttpUtilsMockTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\HttpUtilsMockTests.cs,Can_Mock_BytesFn_Api_responses,The length of the statement  "                Assert.That(ExampleYahooUrl.PostBytesToUrl(requestBody: "{\"a\":1}".ToUtf8Bytes())' Is.EqualTo("mocked-by-body".ToUtf8Bytes())); " is 128.
Long Statement,ServiceStack.Text.Tests,HttpUtilsMockTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\HttpUtilsMockTests.cs,Can_Mock_BytesFn_Api_responses_Async,The length of the statement  "                Assert.That(await ExampleGoogleUrl.PostBytesToUrlAsync(requestBody: "postdata=1".ToUtf8Bytes())' Is.EqualTo("mocked-google".ToUtf8Bytes())); " is 140.
Long Statement,ServiceStack.Text.Tests,HttpUtilsMockTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\HttpUtilsMockTests.cs,Can_Mock_BytesFn_Api_responses_Async,The length of the statement  "                Assert.That(await ExampleYahooUrl.PostBytesToUrlAsync(requestBody: "postdata=1".ToUtf8Bytes())' Is.EqualTo("mocked-yahoo".ToUtf8Bytes())); " is 138.
Long Statement,ServiceStack.Text.Tests,HttpUtilsMockTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\HttpUtilsMockTests.cs,Can_Mock_BytesFn_Api_responses_Async,The length of the statement  "                Assert.That(await ExampleYahooUrl.PostBytesToUrlAsync(requestBody: "{\"a\":1}".ToUtf8Bytes())' Is.EqualTo("mocked-by-body".ToUtf8Bytes())); " is 139.
Long Statement,ServiceStack.Text.Tests,HttpUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\HttpUtilsTests.cs,Can_AddQueryParam,The length of the statement  "            Assert.That("http://example.com?s=0&f=1&s=1".AddQueryParam("f"' "2")' Is.EqualTo("http://example.com?s=0&f=1&s=1&f=2")); " is 120.
Long Statement,ServiceStack.Text.Tests,InterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\InterfaceTests.cs,Can_Serialize_User_OAuthSession_map,The length of the statement  "                    {"facebook"' new AuthTokens { Provider = "facebook"' AccessToken = "FAccessToken"' Items = { {"a"'"1"}' {"b"'"2"}' }} }' " is 120.
Long Statement,ServiceStack.Text.Tests,JsConfigCreateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsConfigTests.cs,Does_create_scope_from_string,The length of the statement  "            var scope = JsConfig.CreateScope("emitlowercaseunderscorenames'IncludeNullValues:false'ExcludeDefaultValues:0'IncludeDefaultEnums:1"); " is 134.
Long Statement,ServiceStack.Text.Tests,JsConfigCreateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsConfigTests.cs,Does_create_scope_from_string,The length of the statement  "            scope = JsConfig.CreateScope("DateHandler:ISO8601'timespanhandler:durationformat'PropertyConvention:strict'TextCase:CamelCase"); " is 128.
Long Statement,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_parse_Twitter_response,The length of the statement  "            var json = @"[{""is_translator"":false'""geo_enabled"":false'""profile_background_color"":""000000""'""protected"":false'""default_profile"":false'""profile_background_tile"":false'""created_at"":""Sun Nov 23 17:42:51 +0000 2008""'""name"":""Demis Bellot TW""'""profile_background_image_url_https"":""https:\/\/si0.twimg.com\/profile_background_images\/192991651\/twitter-bg.jpg""'""profile_sidebar_fill_color"":""2A372F""'""listed_count"":36'""notifications"":null'""utc_offset"":0'""friends_count"":267'""description"":""StackExchangarista' JavaScript' C#' Web & Mobile developer. Creator of the ServiceStack.NET projects. ""'""following"":null'""verified"":false'""profile_sidebar_border_color"":""D9D082""'""followers_count"":796'""profile_image_url"":""http:\/\/a2.twimg.com\/profile_images\/1598852740\/avatar_normal.png""'""contributors_enabled"":false'""profile_image_url_https"":""https:\/\/si0.twimg.com\/profile_images\/1598852740\/avatar_normal.png""'""status"":{""possibly_sensitive"":false'""place"":null'""retweet_count"":37'""in_reply_to_screen_name"":null'""created_at"":""Mon Nov 07 02:34:23 +0000 2011""'""retweeted"":false'""in_reply_to_status_id_str"":null'""in_reply_to_user_id_str"":null'""contributors"":null'""id_str"":""133371690876022785""'""retweeted_status"":{""possibly_sensitive"":false'""place"":null'""retweet_count"":37'""in_reply_to_screen_name"":null'""created_at"":""Mon Nov 07 02:32:15 +0000 2011""'""retweeted"":false'""in_reply_to_status_id_str"":null'""in_reply_to_user_id_str"":null'""contributors"":null'""id_str"":""133371151551447041""'""in_reply_to_user_id"":null'""in_reply_to_status_id"":null'""source"":""\u003Ca href=\""http:\/\/www.arstechnica.com\"" rel=\""nofollow\""\u003EArs auto-tweeter\u003C\/a\u003E""'""geo"":null'""favorited"":false'""id"":133371151551447041'""coordinates"":null'""truncated"":false'""text"":""Google: Microsoft uses patents when products \""stop succeeding\"": http:\/\/t.co\/50QFc1uJ by @binarybits""}'""in_reply_to_user_id"":null'""in_reply_to_status_id"":null'""source"":""web""'""geo"":null'""favorited"":false'""id"":133371690876022785'""coordinates"":null'""truncated"":false'""text"":""RT @arstechnica: Google: Microsoft uses patents when products \""stop succeeding\"": http:\/\/t.co\/50QFc1uJ by @binarybits""}'""profile_use_background_image"":true'""favourites_count"":238'""location"":""New York""'""id_str"":""17575623""'""default_profile_image"":false'""show_all_inline_media"":false'""profile_text_color"":""ABB8AF""'""screen_name"":""demisbellot""'""statuses_count"":9638'""profile_background_image_url"":""http:\/\/a0.twimg.com\/profile_background_images\/192991651\/twitter-bg.jpg""'""url"":""http:\/\/www.servicestack.net\/mythz_blog\/""'""time_zone"":""London""'""profile_link_color"":""43594A""'""id"":17575623'""follow_request_sent"":null'""lang"":""en""}]"; " is 2857.
Long Statement,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Allows_access_to_all_use_cases_with_All_License,The length of the statement  "            LicenseUtils.ApprovedUsage(LicenseFeature.All' licenseUseCase.Feature' licenseUseCase.AllowedLimit' int.MinValue' "Failed"); " is 124.
Long Statement,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Allows_access_to_all_use_cases_with_All_License,The length of the statement  "            LicenseUtils.ApprovedUsage(LicenseFeature.All' licenseUseCase.Feature' licenseUseCase.AllowedLimit' int.MaxValue' "Failed"); " is 124.
Long Statement,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Allows_access_on_all_use_cases_with_no_or_max_allowed_usage_and_no_license,The length of the statement  "            LicenseUtils.ApprovedUsage(LicenseFeature.None' licenseUseCase.Feature' licenseUseCase.AllowedLimit' int.MinValue' "Failed"); " is 125.
Long Statement,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Allows_access_on_all_use_cases_with_no_or_max_allowed_usage_and_no_license,The length of the statement  "            LicenseUtils.ApprovedUsage(LicenseFeature.None' licenseUseCase.Feature' licenseUseCase.AllowedLimit' licenseUseCase.AllowedLimit' "Failed"); " is 140.
Long Statement,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Throws_on_all_use_cases_with_exceeded_usage_and_no_license,The length of the statement  "                LicenseUtils.ApprovedUsage(LicenseFeature.None' licenseUseCase.Feature' licenseUseCase.AllowedLimit' licenseUseCase.AllowedLimit + 1' "Failed")); " is 145.
Long Statement,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Throws_on_all_use_cases_with_exceeded_usage_and_no_license,The length of the statement  "                LicenseUtils.ApprovedUsage(LicenseFeature.None' licenseUseCase.Feature' licenseUseCase.AllowedLimit' int.MaxValue' "Failed")); " is 126.
Long Statement,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Can_handle_null_in_Answer,The length of the statement  "            var json = "{\"tag_name\":null'\"question_score\":0'\"question_count\":0'\"answer_score\":17'\"answer_count\":2'\"user_id\":236255}"; " is 133.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_Serialize_Unicode_Query_String,The length of the statement  "                "%90%e9%94%97%eb%a9%ae%e1%99%92%eb%8d%83&B=%e5%85%ab%e6%95%81%e5%96%96%e4%89%ac%da%b5%e1%ba%80%eb%98%a6%e2%8c%80%e7%be%ad%e4" + " is 127.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_deserialize_query_string_nullableInt_intValues_yields_null,The length of the statement  "            Assert.That(ServiceStack.Text.Common.DeserializeBuiltin<int?>.Parse(int.MaxValue.ToString())' Is.EqualTo(int.MaxValue)); " is 120.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_deserialize_query_string_nullableInt_intValues_yields_null,The length of the statement  "            Assert.That(ServiceStack.Text.Common.DeserializeBuiltin<int?>.Parse(int.MinValue.ToString())' Is.EqualTo(int.MinValue)); " is 120.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Deos_serialize_QueryStrings,The length of the statement  "            var testPocos = new TestPocos { ListOfA = new List<A> { new A { ListOfB = new List<B> { new B { Property = "prop1" }' new B { Property = "prop2" } } } } }; " is 155.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_serialize_quoted_strings,The length of the statement  "            Assert.That(QueryStringSerializer.SerializeToString(new B { Property = "\"quoted content\"" })' Is.EqualTo("Property=%22quoted+content%22")); " is 141.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_serialize_quoted_strings,The length of the statement  "            Assert.That(QueryStringSerializer.SerializeToString(new B { Property = "\"quoted content' and with a comma\"" })' Is.EqualTo("Property=%22quoted+content'+and+with+a+comma%22")); " is 177.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_deserialize_quoted_strings,The length of the statement  "            Assert.That(StringToPoco<B>("Property=%22%22quoted%20content'%20and%20with%20a%20comma%22%22").Property' Is.EqualTo("\"\"quoted content' and with a comma\"\"")); " is 161.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_serialize_with_comma_in_property_in_list,The length of the statement  "                    ListOfA = new List<A> { new A { ListOfB = new List<B> { new B { Property = "Doe' John"' Property2 = "Doe"' Property3 = "John" } } } } " is 133.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_serialize_with_comma_in_property_in_list,The length of the statement  "            Assert.That(QueryStringSerializer.SerializeToString(testPocos)' Is.EqualTo("ListOfA={ListOfB:[{Property:%22Doe'+John%22'Property2:Doe'Property3:John}]}")); " is 155.
Long Statement,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_deserialize_with_comma_in_property_in_list_from_QueryStringSerializer,The length of the statement  "                ListOfA = new List<A> { new A { ListOfB = new List<B> { new B { Property = "Doe' John"' Property2 = "Doe"' Property3 = "John" } } } } " is 133.
Long Statement,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_Write_QueryString,The length of the statement  "                Is.EqualTo("Id=tt0110912&Title=Pulp+Fiction&Rating=8.9&Director=Quentin+Tarantino&ReleaseDate=1994-10-24&TagLine=Girls+like+me+don%27t+make+invitations+like+this+to+just+anyone%21&Genres=Crime'Drama'Thriller")); " is 211.
Long Statement,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_write_dictionary_to_QueryString,The length of the statement  "                Is.EqualTo("Id=tt0110912&Title=Pulp+Fiction&Rating=8.9&Director=Quentin+Tarantino&ReleaseDate=1994-10-24&TagLine=Girls+like+me+don%27t+make+invitations+like+this+to+just+anyone%21&Genres=%22Crime'Drama'Thriller%22")); " is 217.
Long Statement,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_write_AnonymousType_to_QueryString,The length of the statement  "                Is.EqualTo("Id=tt0110912&Title=Pulp+Fiction&Rating=8.9&Director=Quentin+Tarantino&ReleaseDate=1994-10-24&TagLine=Girls+like+me+don%27t+make+invitations+like+this+to+just+anyone%21&Genres=Crime'Drama'Thriller")); " is 211.
Long Statement,ServiceStack.Text.Tests,ReflectionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReflectionExtensionTests.cs,Can_get_method_from_type,The length of the statement  "            var helloVoidDelegate = (Action<MethodsForReflection>)helloVoidMethod.MakeDelegate(typeof(Action<MethodsForReflection>)); " is 121.
Long Statement,ServiceStack.Text.Tests,ReflectionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReflectionExtensionTests.cs,Can_get_method_from_type,The length of the statement  "            var helloVoidBoolIntMethod = typeof(MethodsForReflection).GetMethodInfo(nameof(MethodsForReflection.Hello)' new Type[] { typeof(bool)' typeof(int) }); " is 150.
Long Statement,ServiceStack.Text.Tests,ReflectionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReflectionExtensionTests.cs,Can_get_method_from_type,The length of the statement  "            var helloVoidBoolIntDelegate = (Action<MethodsForReflection' bool' int>)helloVoidBoolIntMethod.MakeDelegate(typeof(Action<MethodsForReflection' bool' int>)); " is 157.
Long Statement,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Literal_Quote_In_String_Does_Not_Ignore_Comma,The length of the statement  "            Assert.That(serialized' Is.EqualTo("{" + lf + "\tTestString: \"test\"\"\"'" + lf + "\tOtherString: \"$100'000\"" + lf + "}")); " is 126.
Long Statement,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Null_Reference_Exception_On_Inherited_Field_With_No_Setter,The length of the statement  "            Assert.DoesNotThrow(() => { parentClassResult = JsonSerializer.DeserializeFromString<InheritedFieldErrorTest>(testString); }); " is 126.
Long Statement,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Null_Reference_Exception_On_Inherited_Field_With_No_Setter,The length of the statement  "            Assert.DoesNotThrow(() => { childClassResult = JsonSerializer.DeserializeFromString<InheritedFieldErrorTestChild>(testString); }); " is 130.
Long Statement,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Null_Reference_Exception_On_Inherited_Property_With_No_Setter,The length of the statement  "            Assert.DoesNotThrow(() => { parentClassResult = JsonSerializer.DeserializeFromString<InheritedPropertyErrorTest>(testString); }); " is 129.
Long Statement,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Null_Reference_Exception_On_Inherited_Property_With_No_Setter,The length of the statement  "            Assert.DoesNotThrow(() => { childClassResult = JsonSerializer.DeserializeFromString<InheritedPropertyErrorTestChild>(testString); }); " is 133.
Long Statement,ServiceStack.Text.Tests,RuntimeSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\RuntimeSerializationTests.cs,Can_deserialize_object_with_unknown_JSON_into_object_type,The length of the statement  "                    @"""List"":[{""Int"":1'""String"":""foo""'""Bool"":true}]'""Dictionary"":{""key"":{""Int"":1'""String"":""foo""'""Bool"":true}}}}")); " is 133.
Long Statement,ServiceStack.Text.Tests,RuntimeSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\RuntimeSerializationTests.cs,Can_serialize_JS_literal_into_DTO,The length of the statement  "            var js = @"{""Object"":{ Int:1'String:'foo''Bool:true'List:[{Int:1'String:`foo`'Bool:true}]'Dictionary:{key:{Int:1'String:""foo""'Bool:true}}}}"; " is 145.
Long Statement,ServiceStack.Text.Tests,SerializationHookTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationHookTests.cs,JsonSerializer_Deserialize_hooks_set_in_cctor,The length of the statement  "            // Deserialize without serializing first' so we don't call the static constructor of HookTestCctor' which sets its own OnDeserialized callback. " is 143.
Long Statement,ServiceStack.Text.Tests,SerializationHookTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationHookTests.cs,JsonSerializer_Deserialize_hooks_set_in_cctor,The length of the statement  "            const string json = "{\"Child\":{\"OnDeserializingTouched\":false'\"OnDeserializedTouched\":false'\"OnSerializingTouched\":true'\"OnSerializedTouched\":false}}"; " is 161.
Long Statement,ServiceStack.Text.Tests,SerializationHookTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationHookTests.cs,AddSerializeHooksForType,The length of the statement  "            System.Reflection.MethodInfo[] typeMethods = type.GetMethods(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance); " is 185.
Long Statement,ServiceStack.Text.Tests,SerializationHookTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationHookTests.cs,AddSerializeHooksForType,The length of the statement  "            var onSerializingMethods = typeMethods.Where(m => m.GetCustomAttributes(typeof(OnSerializingAttribute)' true).Length > 0); " is 122.
Long Statement,ServiceStack.Text.Tests,SerializationHookTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationHookTests.cs,AddSerializeHooksForType,The length of the statement  "            var OnDeserializedMethods = typeMethods.Where(m => m.GetCustomAttributes(typeof(OnDeserializedAttribute)' true).Length > 0); " is 124.
Long Statement,ServiceStack.Text.Tests,SerializationHookTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationHookTests.cs,AddSerializeHooksForType,The length of the statement  "            var OnSerializedMethods = typeMethods.Where(m => m.GetCustomAttributes(typeof(OnSerializedAttribute)' true).Length > 0); " is 120.
Long Statement,ServiceStack.Text.Tests,SpanMemoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpanMemoryTests.cs,Can_deserialize_from_MemoryStream_using_Memory,The length of the statement  "            var to = (Person)await MemoryProvider.Instance.DeserializeAsync(ms' typeof(Person)' JsonSerializer.DeserializeFromSpan); " is 120.
Long Statement,ServiceStack.Text.Tests,SpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpanTests.cs,Can_deserialize_from_MemoryStream_using_Memory,The length of the statement  "            var to = (Person)await MemoryProvider.Instance.DeserializeAsync(ms' typeof(Person)' JsonSerializer.DeserializeFromSpan); " is 120.
Long Statement,ServiceStack.Text.Tests,StreamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StreamTests.cs,Does_escape_string_when_serializing_to_TextWriter,The length of the statement  "            var expected = @"String with backslashes '\'' 'single' and ""double quotes""' (along		with	other	special	symbols	like	tabs) wich may broke incorrect serializing/deserializing implementation ;)"; " is 194.
Long Statement,ServiceStack.Text.Tests,StreamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StreamTests.cs,Does_escape_string_when_serializing_to_TextWriter,The length of the statement  "            var json = "\"String with backslashes '\\\\'' 'single' and \\\"double quotes\\\"' (along\\t\\twith\\tother\\tspecial\\tsymbols\\tlike\\ttabs) wich may broke incorrect serializing/deserializing implementation ;)\""; " is 214.
Long Statement,ServiceStack.Text.Tests,StreamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StreamTests.cs,Does_escape_string_when_serializing_to_Stream,The length of the statement  "            var expected = @"String with backslashes '\'' 'single' and ""double quotes""' (along		with	other	special	symbols	like	tabs) wich may broke incorrect serializing/deserializing implementation ;)"; " is 194.
Long Statement,ServiceStack.Text.Tests,StreamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StreamTests.cs,Does_escape_string_when_serializing_to_Stream,The length of the statement  "            var json = "\"String with backslashes '\\\\'' 'single' and \\\"double quotes\\\"' (along\\t\\twith\\tother\\tspecial\\tsymbols\\tlike\\ttabs) wich may broke incorrect serializing/deserializing implementation ;)\""; " is 214.
Long Statement,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_Url_Encode_String,The length of the statement  "                Is.EqualTo("This+string+%26+has+%25+unsafe+%3f+characters+for+%29%5f%28%2a%26%5e%25%24%24%5e%24%40%23+a+query+string")); " is 120.
Long Statement,ServiceStack.Text.Tests,StringTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringTests.cs,SerializerTests,The length of the statement  "            string correctJSON = "\"This is a string\""; // this is what a modern browser will produce with JSON.stringify("This is a string"); " is 131.
Long Statement,ServiceStack.Text.Tests,StringTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringTests.cs,Embedded_Quotes,The length of the statement  "            string correctJSON = @"""I have \""embedded quotes\"" inside me"""; // this is what a modern browser will produce with JSON.stringify("This is a string"); " is 154.
Long Statement,ServiceStack.Text.Tests,StringTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringTests.cs,RoundTripTest,The length of the statement  "            string correctString = "This is a string"; // this is what a modern browser will produce from JSON.parse("\"This is a string\""); " is 129.
Long Statement,ServiceStack.Text.Tests,StructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,Can_TreatValueAsRefType,The length of the statement  "                Is.EqualTo("<?xml version=\"1.0\" encoding=\"utf-8\"?><UserStruct xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.datacontract.org/2004/07/ServiceStack.Text.Tests\"><Id>1</Id><Name>foo</Name></UserStruct>")); " is 237.
Long Statement,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\PerfTestBase.cs,RunAction,The length of the statement  "            Log("{0} took {1}ms ({2} ticks)' avg: {3} ticks"' actionName' timeSpan.TotalMilliseconds' timeSpan.Ticks' (timeSpan.Ticks / iterations)); " is 137.
Long Statement,ServiceStack.Text.Tests.CsvTests,CustomHeaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\CustomHeaderTests.cs,Can_serialize_custom_headers_map,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Like"' Column3Data = "To"' Column4Data = "Read"' Column5Data = "Novels" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,CustomHeaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\CustomHeaderTests.cs,Can_serialize_custom_headers_map,The length of the statement  "                new TableItem { Column1Data = "I am"' Column2Data = "Very"' Column3Data = "Cool"' Column4Data = "And"' Column5Data = "Awesome" }' " is 129.
Long Statement,ServiceStack.Text.Tests.CsvTests,CustomHeaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\CustomHeaderTests.cs,Can_serialize_custom_anonymous_type_headers,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Like"' Column3Data = "To"' Column4Data = "Read"' Column5Data = "Novels" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,CustomHeaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\CustomHeaderTests.cs,Can_serialize_custom_anonymous_type_headers,The length of the statement  "                new TableItem { Column1Data = "I am"' Column2Data = "Very"' Column3Data = "Cool"' Column4Data = "And"' Column5Data = "Awesome" }' " is 129.
Long Statement,ServiceStack.Text.Tests.CsvTests,CustomHeaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\CustomHeaderTests.cs,Can_serialize_partial_custom_headers_map,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Like"' Column3Data = "To"' Column4Data = "Read"' Column5Data = "Novels" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,CustomHeaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\CustomHeaderTests.cs,Can_serialize_partial_custom_headers_map,The length of the statement  "                new TableItem { Column1Data = "I am"' Column2Data = "Very"' Column3Data = "Cool"' Column4Data = "And"' Column5Data = "Awesome" }' " is 129.
Long Statement,ServiceStack.Text.Tests.CsvTests,CustomHeaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\CustomHeaderTests.cs,Can_serialize_without_headers,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Like"' Column3Data = "To"' Column4Data = "Read"' Column5Data = "Novels" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,CustomHeaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\CustomHeaderTests.cs,Can_serialize_without_headers,The length of the statement  "                new TableItem { Column1Data = "I am"' Column2Data = "Very"' Column3Data = "Cool"' Column4Data = "And"' Column5Data = "Awesome" }' " is 129.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_mismatched_keys_deserializes_tabular_csv,The length of the statement  "                new Dictionary<string' string> { {"Column2Data"' "Like"}' {"Column3Data"' "To"}' {"Column4Data"' "Read"}' {"Column5Data"' "Novels"}}' " is 133.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_mismatched_keys_deserializes_tabular_csv,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I am" }' {"Column3Data"' "Cool"}' {"Column4Data"' "And"}' {"Column5Data"' "Awesome"}}' " is 137.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_mismatched_keys_deserializes_tabular_csv,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' " Like "}' {"Column4Data"' null}' {"Column5Data"' null}}' " is 130.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_mismatched_keys_deserializes_tabular_csv,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Don't"}' {"Column3Data"' "Know'"}' {"Column5Data"' "You?"}}' " is 134.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_mismatched_keys_deserializes_tabular_csv,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Saw"}' {"Column3Data"' "The"}' {"Column4Data"' "Movie"}}' " is 131.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_mismatched_keys_deserializes_tabular_csv,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Went"}' {"Column3Data"' "To"}' {"Column4Data"' "Space\nCamp"}' {"Column5Data"' "Last\r\nYear"}} " is 169.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Like"}' {"Column3Data"' "To"}' {"Column4Data"' "Read"}' {"Column5Data"' "Novels"}}' " is 157.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I am" }' {"Column2Data"' "Very"}' {"Column3Data"' "Cool"}' {"Column4Data"' "And"}' {"Column5Data"' "Awesome"}}' " is 162.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' " Like "}' {"Column3Data"' "Reading"}' {"Column4Data"' null}' {"Column5Data"' null}}' " is 158.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Don't"}' {"Column3Data"' "Know'"}' {"Column4Data"' "Do"}' {"Column5Data"' "You?"}}' " is 157.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Saw"}' {"Column3Data"' "The"}' {"Column4Data"' "Movie"}' {"Column5Data"' "\"Jaws\""}}' " is 160.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Went"}' {"Column3Data"' "To"}' {"Column4Data"' "Space\nCamp"}' {"Column5Data"' "Last\r\nYear"}} " is 169.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_long_delimiter,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Like"}' {"Column3Data"' "To"}' {"Column4Data"' "Read"}' {"Column5Data"' "Novels"}}' " is 157.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_long_delimiter,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I am" }' {"Column2Data"' "Very"}' {"Column3Data"' "Cool"}' {"Column4Data"' "And"}' {"Column5Data"' "Awesome"}}' " is 162.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_long_delimiter,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' " Like "}' {"Column3Data"' "Reading"}' {"Column4Data"' null}' {"Column5Data"' null}}' " is 158.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_long_delimiter,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Don't"}' {"Column3Data"' "Know'"}' {"Column4Data"' "Do"}' {"Column5Data"' "You?"}}' " is 157.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_long_delimiter,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Saw"}' {"Column3Data"' "The"}' {"Column4Data"' "Movie"}' {"Column5Data"' "\"Jaws\""}}' " is 160.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_long_delimiter,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Went"}' {"Column3Data"' "To"}' {"Column4Data"' "Space\nCamp"}' {"Column5Data"' "Last\r\nYear"}} " is 169.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_pipe_separator,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Like"}' {"Column3Data"' "To"}' {"Column4Data"' "Read"}' {"Column5Data"' "Novels"}}' " is 157.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_pipe_separator,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I am" }' {"Column2Data"' "Very"}' {"Column3Data"' "Cool"}' {"Column4Data"' "And"}' {"Column5Data"' "Awesome"}}' " is 162.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_pipe_separator,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' " Like "}' {"Column3Data"' "Reading"}' {"Column4Data"' null}' {"Column5Data"' null}}' " is 158.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_pipe_separator,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Don't"}' {"Column3Data"' "Know'"}' {"Column4Data"' "Do"}' {"Column5Data"' "You?"}}' " is 157.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_pipe_separator,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Saw"}' {"Column3Data"' "The"}' {"Column4Data"' "Movie"}' {"Column5Data"' "\"Jaws\""}}' " is 160.
Long Statement,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_data_pipe_separator,The length of the statement  "                new Dictionary<string' string> { { "Column1Data"' "I" }' {"Column2Data"' "Went"}' {"Column3Data"' "To"}' {"Column4Data"' "Space\nCamp"}' {"Column5Data"' "Last\r\nYear"}} " is 169.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Like"' Column3Data = "To"' Column4Data = "Read"' Column5Data = "Novels" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data,The length of the statement  "                new TableItem { Column1Data = "I am"' Column2Data = "Very"' Column3Data = "Cool"' Column4Data = "And"' Column5Data = "Awesome" }' " is 129.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = " Like "' Column3Data = "Reading"' Column4Data = null' Column5Data = null }' " is 125.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Don't"' Column3Data = "Know'"' Column4Data = "Do"' Column5Data = "You?" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Saw"' Column3Data = "The"' Column4Data = "Movie"' Column5Data = "\"Jaws\"" }' " is 127.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Went"' Column3Data = "To"' Column4Data = "Space\nCamp"' Column5Data = "Last\r\nYear" } " is 136.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_separator,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Like"' Column3Data = "To"' Column4Data = "Read"' Column5Data = "Novels" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_separator,The length of the statement  "                new TableItem { Column1Data = "I am"' Column2Data = "Very"' Column3Data = "Cool"' Column4Data = "And"' Column5Data = "Awesome" }' " is 129.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_separator,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = " Like "' Column3Data = "Reading"' Column4Data = null' Column5Data = null }' " is 125.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_separator,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Don't"' Column3Data = "Know'"' Column4Data = "Do"' Column5Data = "You?" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_separator,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Saw"' Column3Data = "The"' Column4Data = "Movie"' Column5Data = "\"Jaws\"" }' " is 127.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_separator,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Went"' Column3Data = "To"' Column4Data = "Space\nCamp"' Column5Data = "Last\r\nYear" } " is 136.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_delimiter,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Like"' Column3Data = "To"' Column4Data = "Read"' Column5Data = "Novels" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_delimiter,The length of the statement  "                new TableItem { Column1Data = "I am"' Column2Data = "Very"' Column3Data = "Cool"' Column4Data = "And"' Column5Data = "Awesome" }' " is 129.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_delimiter,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = " Like "' Column3Data = "Reading"' Column4Data = null' Column5Data = null }' " is 125.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_delimiter,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Don't"' Column3Data = "Know'"' Column4Data = "Do"' Column5Data = "You?" }' " is 124.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_delimiter,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Saw"' Column3Data = "The"' Column4Data = "Movie"' Column5Data = "\"Jaws\"" }' " is 127.
Long Statement,ServiceStack.Text.Tests.CsvTests,NewLineTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\NewLineTests.cs,Serializes_adhoc_data_pipe_delimiter,The length of the statement  "                new TableItem { Column1Data = "I"' Column2Data = "Went"' Column3Data = "To"' Column4Data = "Space\nCamp"' Column5Data = "Last\r\nYear" } " is 136.
Long Statement,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,MidnightAndNoonTestSerialization,The length of the statement  "            // Set the format for DatTimeFormatting explicitly using DateTimeSerializer.XsdDateTimeFormat because it is ISO8601 fractional seconds " is 134.
Long Statement,ServiceStack.Text.Tests.JsonTests,AnonymousDeserializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\AnonymousDeserializationTests.cs,Deserialize_dynamic_json,The length of the statement  "            var json = "{\"Id\":\"fb1d17c7298c448cb7b91ab7041e9ff6\"'\"Name\":\"John\"'\"DateOfBirth\":\"\\/Date(317433600000-0000)\\/\"}"; " is 127.
Long Statement,ServiceStack.Text.Tests.JsonTests,AnonymousDeserializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\AnonymousDeserializationTests.cs,Deserialize_dynamic_json_with_inner_obj_and_array,The length of the statement  "            var json = @"{""obj"":{""name"":""Alex""'""address"":{""street"":""zbra st.""}'""phones"":[{""area"":""101""'""number"":""867-5309""}'{""area"":""11""'""number"":""39967""}]}}"; " is 177.
Long Statement,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_serialize_dictionary_of_int_int,The length of the statement  "            var json = JsonSerializer.SerializeToString<IntIntDictionary>(new IntIntDictionary() { Dictionary = { { 10' 100 }' { 20' 200 } } }); " is 132.
Long Statement,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Serialize_can_include_null_values,The length of the statement  "            Assert.That(s' Is.EqualTo("{\"Name\":\"Brandon\"'\"Type\":\"Programmer\"'\"SampleKey\":12'\"Nothing\":null'\"NullClass\":null'\"NullableDateTime\":null}")); " is 156.
Long Statement,ServiceStack.Text.Tests.JsonTests,CamelCaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CamelCaseTests.cs,Does_serialize_To_CamelCase,The length of the statement  "                "{\"id\":1'\"title\":\"The Shawshank Redemption\"'\"imdbId\":\"tt0111161\"'\"rating\":9.2'\"director\":\"Frank Darabont\"'\"releaseDate\":\"\\/Date(792979200000)\\/\"'\"tagLine\":\"Fear can hold you prisoner. Hope can set you free.\"'\"genres\":[\"Crime\"'\"Drama\"]}")); " is 271.
Long Statement,ServiceStack.Text.Tests.JsonTests,ContractByInterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ContractByInterfaceTests.cs,Should_be_able_to_deserialise_based_on_an_interface_with_no_concrete,The length of the statement  "                json = json.Replace("ServiceStack.Text.Tests.JsonTests.IContract"' "ServiceStack.Text.Tests.JsonTests.IIdenticalContract"); " is 123.
Long Statement,ServiceStack.Text.Tests.JsonTests,CustomSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_serialize_Entity,The length of the statement  "            var originalEntity = new EntityWithValues { id = 5' Values = new Dictionary<string' string> { { "dog"' "bark" }' { "cat"' "meow" } } }; " is 135.
Long Statement,ServiceStack.Text.Tests.JsonTests,CustomSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_serialize_arrays_of_entities,The length of the statement  "            var originalEntities = new[] { new EntityWithValues { id = 5' Values = new Dictionary<string' string> { { "dog"' "bark" } } }' new EntityWithValues { id = 6' Values = new Dictionary<string' string> { { "cat"' "meow" } } } }; " is 224.
Long Statement,ServiceStack.Text.Tests.JsonTests,DcStatus,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,ToJson,The length of the statement  "                    { "Current"' string.Format(CultureInfo.InvariantCulture' "{0:0.000} A"' Current)}' // Use $"{Current:0.000} A" if you don't care about culture " is 142.
Long Statement,ServiceStack.Text.Tests.JsonTests,EscapedCharsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\EscapedCharsTests.cs,Can_deserialize_nested_json_with_whitespace,The length of the statement  "            const string json = "\t { \"Id\" : \"Nested with space\" \n ' \r \t \"Model\" \t : \n { \t \"Id\" \t : 1 ' \t \"Name\" \t  : \t \"Simple string\" \t } \t } \n "; " is 161.
Long Statement,ServiceStack.Text.Tests.JsonTests,EscapedCharsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\EscapedCharsTests.cs,Can_deserialize_unicode_with_escape,The length of the statement  "            var fromJson = JsonSerializer.DeserializeFromString<MyModel>("{\"Name\":\"J\\u0159\\u00ED\\u0410\\u0431\\u0432\\u0100a\\u0161\\u016B\"}"); " is 138.
Long Statement,ServiceStack.Text.Tests.JsonTests,InheritAbstractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\InheritAbstractTests.cs,Can_serialize_class_with_list_that_classes_inherited_from_non_abstract_class,The length of the statement  "            var child = new MovieChild { ImdbId = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972' 3' 24)' TagLine = "An offer you can't refuse."' Genres = new List<string> { "Crime"' "Drama"' "Thriller" }' }; " is 269.
Long Statement,ServiceStack.Text.Tests.JsonTests,InheritAbstractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\InheritAbstractTests.cs,Can_serialize_class_with_list_that_classes_inherited_from_non_abstract_class,The length of the statement  "            var expected = "{\"Address\":\"Av. República do Líbano' 2175 - Indinópolis' São Paulo - SP' 04502-300\"'\"Movies\":[{\"Title\":\"The Shawshank Redemption\"'\"ImdbId\":\"tt0111161\"'\"Rating\":9.2'\"Director\":\"Frank Darabont\"'\"ReleaseDate\":" " is 245.
Long Statement,ServiceStack.Text.Tests.JsonTests,InheritAbstractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\InheritAbstractTests.cs,Can_serialize_class_with_list_that_classes_inherited_from_non_abstract_class,The length of the statement  "                + JsonSerializer.SerializeToString(MoviesData.Movies[0].ReleaseDate) + "'\"TagLine\":\"Fear can hold you prisoner. Hope can set you free.\"'\"Genres\":[\"Crime\"'\"Drama\"]}'{\"__type\":\"ServiceStack.Text.Tests.JsonTests.MovieChild' ServiceStack.Text.Tests\"'\"Oscar\":[\"Best Picture - 1972\"'\"Best Actor - 1972\"'\"Best Adapted Screenplay - 1972\"]'\"Title\":\"The Godfather\"'\"ImdbId\":\"tt0068646\"'\"Rating\":9.2'\"Director\":\"Francis Ford Coppola\"'\"ReleaseDate\":" " is 476.
Long Statement,ServiceStack.Text.Tests.JsonTests,InheritAbstractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\InheritAbstractTests.cs,Can_serialize_class_with_list_that_classes_inherited_from_non_abstract_class,The length of the statement  "                + JsonSerializer.SerializeToString(child.ReleaseDate) + "'\"TagLine\":\"An offer you can't refuse.\"'\"Genres\":[\"Crime\"'\"Drama\"'\"Thriller\"]}]}"; " is 151.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDataContractCompatibilityTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDataContractCompatibilityTests.cs,Can_serialize_a_movie,The length of the statement  "            const string clientJson = "{\"Id\":\"0110912\"'\"ImdbId\":\"tt0111161\"'\"Title\":\"Pulp Fiction\"'\"Rating\":\"8.9\"'\"Director\":\"Quentin Tarantino\"'\"ReleaseDate\":\"/Date(785635200000)/\"'\"TagLine\":\"Girls like me don't make invitations like this to just anyone!\"'\"Genres\":[\"Crime\"'\"Drama\"'\"Thriller\"]}"; " is 321.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,SetUp,The length of the statement  "            _localTimezoneOffset = TimeZoneInfo.Local.BaseUtcOffset.Hours.ToString("00") + TimeZoneInfo.Local.BaseUtcOffset.Minutes.ToString("00"); " is 135.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Local' JsonSerializer.DeserializeFromString<Utils.DateTimeISO8601Tests.TestObject>(JsonSerializer.SerializeToString<Utils.DateTimeISO8601Tests.TestObject>(testObject)).Date.Kind); " is 208.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Local' JsonSerializer.DeserializeFromString<Utils.DateTimeISO8601Tests.TestObject>(JsonSerializer.SerializeToString<Utils.DateTimeISO8601Tests.TestObject>(testObject)).Date.Kind); " is 208.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' JsonSerializer.DeserializeFromString<Utils.DateTimeISO8601Tests.TestObject>(JsonSerializer.SerializeToString<Utils.DateTimeISO8601Tests.TestObject>(testObject)).Date.Kind); " is 206.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Local' JsonSerializer.DeserializeFromString<Utils.DateTimeISO8601Tests.TestObject>(JsonSerializer.SerializeToString<Utils.DateTimeISO8601Tests.TestObject>(testObject)).Date.Kind); " is 208.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' JsonSerializer.DeserializeFromString<Utils.DateTimeISO8601Tests.TestObject>(JsonSerializer.SerializeToString<Utils.DateTimeISO8601Tests.TestObject>(testObject)).Date.Kind); " is 206.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Unspecified' JsonSerializer.DeserializeFromString<Utils.DateTimeISO8601Tests.TestObject>(JsonSerializer.SerializeToString<Utils.DateTimeISO8601Tests.TestObject>(testObject)).Date.Kind); " is 214.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' JsonSerializer.DeserializeFromString<Utils.DateTimeISO8601Tests.TestObject>(JsonSerializer.SerializeToString<Utils.DateTimeISO8601Tests.TestObject>(testObject)).Date.Kind); " is 206.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The length of the statement  "            dates.ForEach(x => "{0} == {1} :: {2}".Print(x.ToUnixTimeMs()' x.ToUnixTimeMsAlt()' x.ToUnixTimeMs() == x.ToUnixTimeMsAlt())); " is 126.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_unknown_ObjectDictionary,The length of the statement  "            Assert.That("{\"Properties\":{\"a\":[\"1\"'\"2\"]}}".FromJson<HasObjectDictionary>().Properties["a"]' Is.EquivalentTo(new[]{"1"'"2"})); " is 135.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_unknown_ObjectDictionary,The length of the statement  "            Assert.That("{\"Properties\":{\"a\":[1'2]}}".FromJson<HasObjectDictionary>().Properties["a"]' Is.EquivalentTo(new[]{1'2})); " is 123.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_unknown_ObjectList,The length of the statement  "            Assert.That("{\"Properties\":[[\"1\"'\"2\"]]}".FromJson<HasObjectList>().Properties[0]' Is.EquivalentTo(new[]{"1"'"2"})); " is 121.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_unknown_ObjectList,The length of the statement  "            Assert.That("{\"Properties\":[{\"a\":1}]".FromJson<HasObjectList>().Properties[0]' Is.EquivalentTo(new Dictionary<string'object> { " is 130.
Long Statement,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_JSV_List_object_when_ObjectDeserializer_is_configured,The length of the statement  "            var json = @"{ ProtocolTemplateId:d7f0aa3afd834e90aaa9a97b7efd0c03'Name: Rendezvényszervezés'Title: Test'Description: Rendezvényszervezés'ProtocolBusinessObjects:[[{ Oid: 3c229e70345f11e9bf726dd67bf32ebd'ObjectType: AwaitObject'Flags: 18'Name: AwaitObject1'Title: AwaitObject1'SecondaryTitle: AwaitObject1'Description: ""'OwnerType: 1'Owner: { UserId: 2'DisplayName: System}'DeadlineType: 2'DeadlineOffsetDays: 1'Priority: 2'PriorityToData: False'DeadlineToData: False'CompletedDateToData: False'OwnerToData: False'Visible: False'ProtocolTemplateId: d7f0aa3afd834e90aaa9a97b7efd0c03'ProtocolTemplateGroupId: e44dfc5da20942fe8532d6446ef0b76c'CreatedBy: { UserId: 4'DisplayName: Wiszt Máté}'CreatedDateTime: 2019 - 03 - 21T15: 05:41.0929542 + 01:00}]]}"; " is 752.
Long Statement,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Does_serialize_To_lowercase_underscore,The length of the statement  "                "{\"id\":1'\"title\":\"The Shawshank Redemption\"'\"imdb_id\":\"tt0111161\"'\"rating\":9.2'\"director\":\"Frank Darabont\"'\"release_date\":\"\\/Date(792979200000)\\/\"'\"tag_line\":\"Fear can hold you prisoner. Hope can set you free.\"'\"genres\":[\"Crime\"'\"Drama\"]}")); " is 274.
Long Statement,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Can_override_name,The length of the statement  "            Assert.That(JsonSerializer.SerializeToString(person)' Is.EqualTo("{\"MyID\":123'\"name\":\"Abc\"'\"sur_name\":\"Xyz\"}")); " is 122.
Long Statement,ServiceStack.Text.Tests.JsonTests,OnDeserializationErrorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\OnDeserializationErrorTests.cs,Invokes_callback_on_protected_setter,The length of the statement  "            AssertThatInvalidJsonInvokesExpectedCallback<TestDto>(json' "idBadProt"' "value"' typeof(int)' "Input string was not in a correct format."); " is 140.
Long Statement,ServiceStack.Text.Tests.JsonTests,OnDeserializationErrorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\OnDeserializationErrorTests.cs,Invokes_callback_on_incorrect_type,The length of the statement  "            AssertThatInvalidJsonInvokesExpectedCallback<TestDto>(json' "idBad"' "abc"' typeof(int)' "Input string was not in a correct format."); " is 134.
Long Statement,ServiceStack.Text.Tests.JsonTests,OnDeserializationErrorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\OnDeserializationErrorTests.cs,Invokes_callback_on_incorrect_type_with_data_set,The length of the statement  "            AssertThatInvalidJsonInvokesExpectedCallback<TestDto>(json' "idBad"' "abc"' typeof(int)' "Input string was not in a correct format."); " is 134.
Long Statement,ServiceStack.Text.Tests.JsonTests,OnDeserializationErrorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\OnDeserializationErrorTests.cs,Invokes_callback_on_value_out_of_range,The length of the statement  "            AssertThatInvalidJsonInvokesExpectedCallback<TestDto>(json' "idBad"' "4700000007"' typeof(int)' "Value was either too large or too small for an Int32."); " is 153.
Long Statement,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Can_deserialise_polymorphic_list_serialized_by_datacontractjsonserializer,The length of the statement  "                var dataContractJsonSerializer = new DataContractJsonSerializer(typeof(List<Animal>)' new[] { typeof(Dog)' typeof(Cat) }' int.MaxValue' true' null' true); " is 154.
Long Statement,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Can_deserialise_an_entity_containing_a_polymorphic_property_serialized_by_datacontractjsonserializer,The length of the statement  "                var dataContractJsonSerializer = new DataContractJsonSerializer(typeof(Pets)' new[] { typeof(Dog)' typeof(Cat) }' int.MaxValue' true' null' true); " is 146.
Long Statement,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Can_force_specific_TypeInfo,The length of the statement  "            //This configuration has to be set before first usage of WriteType<OtherDog>' otherwise this setting change will not be applied " is 127.
Long Statement,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Can_force_specific_TypeInfo,The length of the statement  "                @"{""Cat"":{""Name"":""Cat""}'""Dog"":{""__type"":""ServiceStack.Text.Tests.JsonTests.PolymorphicListTests+OtherDog' " + assemblyName + @"""'""Name"":""Dog""}}")); " is 163.
Long Statement,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Can_force_specific_TypeInfo,The length of the statement  "                @"{""__type"":""ServiceStack.Text.Tests.JsonTests.PolymorphicListTests+OtherDog' " + assemblyName + @"""'""Name"":""Dog""}")); " is 126.
Long Statement,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Can_exclude_specific_TypeInfo,The length of the statement  "                @"{""Cat"":{""Name"":""Cat""}'""Dog"":{""__type"":""ServiceStack.Text.Tests.JsonTests.Dog' " + assemblyName + @"""'""Name"":""Dog""}}")); " is 137.
Long Statement,ServiceStack.Text.Tests.JsonTests,ThrowOnDeserializeErrorTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ThrowOnDeserializeErrorTest.cs,Throws_on_protected_setter,The length of the statement  "            Assert.Throws(typeof(SerializationException)' () => JsonSerializer.DeserializeFromString(json' typeof(TestDto))' "Failed to set property 'idBadProt' with 'abc'"); " is 162.
Long Statement,ServiceStack.Text.Tests.JsonTests,ThrowOnDeserializeErrorTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ThrowOnDeserializeErrorTest.cs,Throws_on_incorrect_type,The length of the statement  "            Assert.Throws(typeof(SerializationException)' () => JsonSerializer.DeserializeFromString(json' typeof(TestDto))' "Failed to set property 'idBad' with 'abc'"); " is 158.
Long Statement,ServiceStack.Text.Tests.JsvTests,JsvCollectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvCollectionTests.cs,Can_serialize_empty_collections,The length of the statement  "            // TB: this is not deserialized correctly => can not be added to the dictionary' because key is null instead of string.Empty (a valid distionary key) " is 149.
Long Statement,ServiceStack.Text.Tests.JsvTests,TypeSerializerToStringDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\TypeSerializerToStringDictionaryTests.cs,Can_serialize_Employee_to_StringDictionary,The length of the statement  "                    {"Notes"'"Education includes a BA in psychology from Colorado State University in 1970.  She also completed 'The Art of the Cold Call.'  Nancy is a member of Toastmasters International."}' " is 188.
Long Statement,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\Movie.cs,Equals,The length of the statement  "            return Equals(other.Id' Id) && Equals(other.Title' Title) && other.Rating == Rating && Equals(other.Director' Director) && other.ReleaseDate.Equals(ReleaseDate) && Equals(other.TagLine' TagLine) && Genres.EquivalentTo(other.Genres); " is 232.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The length of the statement  "            yield return new object[] { "(100))"' NumberStyles.AllowParentheses | NumberStyles.AllowCurrencySymbol | NumberStyles.AllowTrailingSign' currencyNegativeParenthesesFormat' typeof(FormatException) }; " is 198.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The length of the statement  "            yield return new object[] { "+123+"' NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign' null' typeof(FormatException) }; " is 133.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The length of the statement  "            yield return new object[] { "+123-"' NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign' null' typeof(FormatException) }; " is 133.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The length of the statement  "            yield return new object[] { "-123+"' NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign' null' typeof(FormatException) }; " is 133.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The length of the statement  "            yield return new object[] { "-123-"' NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign' null' typeof(FormatException) }; " is 133.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The length of the statement  "            yield return new object[] { "-(1000)"' NumberStyles.AllowLeadingSign | NumberStyles.AllowParentheses' null' typeof(FormatException) }; " is 134.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The length of the statement  "            yield return new object[] { "(-1000)"' NumberStyles.AllowLeadingSign | NumberStyles.AllowParentheses' null' typeof(FormatException) }; " is 134.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The length of the statement  "            Assert.That(decimal.MaxValue.ToString(CultureInfo.InvariantCulture).AsSpan().ParseDecimal()' Is.EqualTo(decimal.MaxValue)); " is 123.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The length of the statement  "            Assert.That(decimal.MinValue.ToString(CultureInfo.InvariantCulture).AsSpan().ParseDecimal()' Is.EqualTo(decimal.MinValue)); " is 123.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The length of the statement  "            Assert.That("9.e+000027".AsSpan().ParseDecimal()' Is.EqualTo(decimal.Parse("9.e+000027"' NumberStyles.Float' CultureInfo.InvariantCulture))); " is 141.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_guid,The length of the statement  "            Assert.That("{b6170a18-3dd7-4a9b-b5d6-21033b5ad162}".AsSpan().ParseGuid()' Is.EqualTo(new Guid("{b6170a18-3dd7-4a9b-b5d6-21033b5ad162}"))); " is 139.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_guid,The length of the statement  "            Assert.That("b6170a18-3dd7-4a9b-b5d6-21033b5ad162".AsSpan().ParseGuid()' Is.EqualTo(new Guid("{b6170a18-3dd7-4a9b-b5d6-21033b5ad162}"))); " is 137.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_guid,The length of the statement  "            Assert.That("b6170a183dd74a9bb5d621033b5ad162".AsSpan().ParseGuid()' Is.EqualTo(new Guid("{b6170a18-3dd7-4a9b-b5d6-21033b5ad162}"))); " is 133.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Valid_TestData,The length of the statement  "            //yield return new object[] { "+ddddddd-+ddd-+ddd-+ddd-+ddddddddddd"' "D"' Guid.Parse("0ddddddd-0ddd-0ddd-0ddd-0ddddddddddd") }; " is 128.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Valid_TestData,The length of the statement  "            //yield return new object[] { "0xdddddd-0xdd-0xdd-0xdd-0xdddddddddd"' "D"' Guid.Parse("00dddddd-00dd-00dd-00dd-00dddddddddd") }; " is 128.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Valid_TestData,The length of the statement  "            //yield return new object[] { "+0Xddddd-+0Xd-+0Xd-+0Xd-+0Xddddddddd"' "D"' Guid.Parse("000ddddd-000d-000d-000d-000ddddddddd") }; " is 128.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Valid_TestData,The length of the statement  "            //yield return new object[] { "{+ddddddd-+ddd-+ddd-+ddd-+ddddddddddd}"' "B"' Guid.Parse("0ddddddd-0ddd-0ddd-0ddd-0ddddddddddd") }; " is 130.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Valid_TestData,The length of the statement  "            //yield return new object[] { "{0xdddddd-0xdd-0xdd-0xdd-0xdddddddddd}"' "B"' Guid.Parse("00dddddd-00dd-00dd-00dd-00dddddddddd") }; " is 130.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Valid_TestData,The length of the statement  "            //yield return new object[] { "{+0Xddddd-+0Xd-+0Xd-+0Xd-+0Xddddddddd}"' "B"' Guid.Parse("000ddddd-000d-000d-000d-000ddddddddd") }; " is 130.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{dddddddd-dddd-dddd-dddd-dddddddd"' typeof(FormatException) }; // 8-4-4-4-8 with leading brace only " is 128.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "dddddddd-dddd-dddd-dddd-dddddddd}"' typeof(FormatException) }; // 8-4-4-4-8 with trailing brace only " is 129.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "(dddddddd-dddd-dddd-dddd-dddddddd"' typeof(FormatException) }; // 8-4-4-4-8 with leading parenthesis only " is 134.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "dddddddd-dddd-dddd-dddd-dddddddd)"' typeof(FormatException) }; // 8-4-4-4-8 with trailing parenthesis only " is 135.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "(dddddddd-dddd-dddd-dddd-dddddddd}"' typeof(FormatException) }; // 8-4-4-4-8 with leading parenthesis and trailing brace " is 149.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{dddddddd-dddd-dddd-dddd-dddddddd)"' typeof(FormatException) }; // 8-4-4-4-8 with trailing parenthesis and leading brace " is 149.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} - missing group " is 166.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without a trailing brace " is 178.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without a trailing brace " is 179.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without a leading brace " is 178.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "0xdddddddd' 0xdddd'{0xdddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without a leading brace " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd'0xdddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without a leading brace " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "(0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd))"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} with parentheses " is 172.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "(0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd})"' typeof(FormatException) };// 8-4-4-{2-2-2-2-2-2-2-2} with parentheses " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            //yield return new object[] { "{0xdddddddd 0xdddd 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(OverflowException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without comma " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without comma " is 168.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without comma " is 168.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without comma " is 168.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{dddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' dddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' dddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{dd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'dd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'dd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'dd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'dd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'dd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'dd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'dd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without 0x prefix " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0x' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 171.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0x' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 175.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0x'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 175.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0x'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0x'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0x'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0x'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0x'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0x'0xdd'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0x'0xdd}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0x}}"' typeof(FormatException) }; // 8-4-4-{2-2-2-2-2-2-2-2} without string after 0x " is 177.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            //yield return new object[] { "{0xddddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(OverflowException) }; // 9-4-4-{2-2-2-2-2-2-2-2} " is 160.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            //yield return new object[] { "{0xdddddddd' 0xddddddddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(OverflowException) }; " is 137.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xddddddd' 0xdddd'{0xdd'0xddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 132.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xddddd' 0xdddd'{0xdd'0xddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 130.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            //yield return new object[] { "{0xdddddddd' 0xdddd' 0xddddddddd'{0xdd'0xddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(OverflowException) }; " is 138.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xddddddd'{0xdd'0xddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 132.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xddddd'{0xdd'0xddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 130.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdddddddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 134.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xddd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 129.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdddddddd'0xdd'0xddd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 135.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xddd'0xdd'0xddd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 130.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdddddddd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 134.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xddd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 129.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdddddddd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 134.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xddd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 129.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdddddddd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 134.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xddd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 129.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xddd'0xdd'0xdd}}"' typeof(FormatException) }; " is 129.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdddddddd'0xdd}}"' typeof(FormatException) }; " is 134.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xddd'0xdd}}"' typeof(FormatException) }; " is 129.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdddddddd}}"' typeof(FormatException) }; " is 134.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xddd}}"' typeof(FormatException) }; " is 129.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd' 0xdddd' 0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd0xdd}}"' typeof(FormatException) }; " is 127.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}abc"' typeof(FormatException) }; " is 129.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0x"' typeof(FormatException) }; " is 122.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd"' typeof(FormatException) }; " is 124.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}"' typeof(FormatException) }; " is 125.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xGddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 126.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdGdddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 126.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0x-dddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 127.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xGddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 126.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdGdd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 126.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xddddddd'0x-dddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 126.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xGddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 126.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdGdd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 126.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xddddddd'0xdddd'0x-dddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 126.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xddddddd'0xdddd'0xdddd'{0x-dd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 126.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0x-dd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 127.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0x-dd'0xdd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 127.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0x-dd'0xdd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 127.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0x-dd'0xdd'0xdd'0xdd}}"' typeof(FormatException) }; " is 127.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0x-dd'0xdd'0xdd}}"' typeof(FormatException) }; " is 127.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0x-dd'0xdd}}"' typeof(FormatException) }; " is 127.
Long Statement,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,GuidStrings_Invalid_TestData,The length of the statement  "            yield return new object[] { "{0xdddddddd'0xdddd'0xdddd'{0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0xdd'0x-dd}}"' typeof(FormatException) }; " is 127.
Long Statement,ServiceStack.Text.Tests.UseCases,GithubV3ApiGatewayTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\GithubV3ApiTests.cs,DO_ALL_THE_THINGS,The length of the statement  "            Console.WriteLine("\n-- GetUserRepo(ServiceStack'ServiceStack.Text): \n" + client.GetUserRepo("mythz"' "jquip").Dump()); " is 120.
Long Statement,ServiceStack.Text.Tests.UseCases,GithubV3ApiGatewayTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\GithubV3ApiTests.cs,DO_ALL_THE_THINGS,The length of the statement  "            Console.WriteLine("\n-- GetUserRepoContributors(ServiceStack'ServiceStack.Text): \n" + client.GetUserRepoContributors("ServiceStack"' "ServiceStack.Text").Dump()); " is 163.
Long Statement,ServiceStack.Text.Tests.UseCases,GithubV3ApiGatewayTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\GithubV3ApiTests.cs,DO_ALL_THE_THINGS,The length of the statement  "            Console.WriteLine("\n-- GetUserRepoWatchers(ServiceStack'ServiceStack.Text): \n" + client.GetUserRepoWatchers("ServiceStack"' "ServiceStack.Text").Dump()); " is 155.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintFormats,The length of the statement  "            Log("DateTimeSerializer.ToShortestXsdDateTimeString(dateTime): " + DateTimeSerializer.ToShortestXsdDateTimeString(dateTime)); " is 125.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,AssertDateIsEqual,The length of the statement  "            Assert.That(toDateTime.ToStableUniversalTime().TimeOfDay.TotalSeconds' Is.EqualTo(dateTime.ToStableUniversalTime().TimeOfDay.TotalSeconds)' "shortestDate: Fractional seconds differ"); " is 183.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,AssertDatesAreEqual,The length of the statement  "            Assert.That(toDateTime.ToStableUniversalTime().RoundToMs()' Is.EqualTo(dateTime.ToStableUniversalTime().RoundToMs())' which); " is 125.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The length of the statement  "            Assert.AreEqual(DateTimeKind.Local' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 154.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 152.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The length of the statement  "            Assert.AreEqual(DateTimeKind.Local' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 154.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 152.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Local' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 154.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Local' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 154.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 152.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Local' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 154.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 152.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Unspecified' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 160.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 152.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_serialize_nullable_DateTime,The length of the statement  "            Assert.That(dto.ToJson()' Is.EqualTo("{\"DateTime\":\"2013-01-01T00:00:01.0000000Z\"'\"NullableDateTime\":\"2013-01-01T00:00:01.0000000Z\"}")); " is 143.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeRFC1123Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The length of the statement  "            Assert.AreEqual(DateTimeKind.Local' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 154.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeRFC1123Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 152.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeRFC1123Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The length of the statement  "            Assert.AreEqual(DateTimeKind.Local' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 154.
Long Statement,ServiceStack.Text.Tests.Utils,DateTimeRFC1123Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The length of the statement  "                Assert.AreEqual(DateTimeKind.Utc' TypeSerializer.DeserializeFromString<TestObject>(TypeSerializer.SerializeToString<TestObject>(testObject)).Date.Kind); " is 152.
Empty Catch Block,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_custom_JsonObject_with_incorrect_payload,The method has an empty catch block.
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_Serialize_Cyclical_Dependency_via_interface,The following statement contains a magic number: var dto = new Parent              {                  Id = 1'                  ParentName = "Parent"'                  Child = new Child { Id = 2' ChildName = "Child" }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_include_nested_only,The following statement contains a magic number: var dto = new IncludeExclude              {                  Id = 1234'                  Name = "TEST"'                  Obj = new Exclude                  {                      Id = 1'                      Key = "Value"                  }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Exclude_all_nested,The following statement contains a magic number: var dto = new IncludeExclude              {                  Id = 1234'                  Name = "TEST"'                  Obj = new Exclude                  {                      Id = 1'                      Key = "Value"                  }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Exclude_all_nested,The following statement contains a magic number: Assert.AreEqual(2' config.ExcludePropertyReferences.Length);
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Exclude_List_Scope,The following statement contains a magic number: var dto = new ExcludeList              {                  Id = 1234'                  Excludes = new List<Exclude>() {                      new Exclude {                          Id = 2345'                          Key = "Value"                      }'                      new Exclude {                          Id = 3456'                          Key = "Value"                      }                  }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Exclude_List_Scope,The following statement contains a magic number: var dto = new ExcludeList              {                  Id = 1234'                  Excludes = new List<Exclude>() {                      new Exclude {                          Id = 2345'                          Key = "Value"                      }'                      new Exclude {                          Id = 3456'                          Key = "Value"                      }                  }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Exclude_List_Scope,The following statement contains a magic number: var dto = new ExcludeList              {                  Id = 1234'                  Excludes = new List<Exclude>() {                      new Exclude {                          Id = 2345'                          Key = "Value"                      }'                      new Exclude {                          Id = 3456'                          Key = "Value"                      }                  }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_Serialize_Array_with_nulls,The following statement contains a magic number: var t = new              {                  Name = "MyName"'                  Number = (int?)null'                  Data = new object[] { 5' null' "text" }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_IEnumerable,The following statement contains a magic number: var dto = new Breaker              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_IEnumerable,The following statement contains a magic number: var dto = new Breaker              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_IEnumerable,The following statement contains a magic number: var dto = new Breaker              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_IEnumerable,The following statement contains a magic number: var dto = new Breaker              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_IEnumerable,The following statement contains a magic number: var dto = new Breaker              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_IEnumerable,The following statement contains a magic number: var dto = new Breaker              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_IEnumerable,The following statement contains a magic number: var dto = new Breaker              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_IEnumerable,The following statement contains a magic number: var dto = new Breaker              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_ICollection,The following statement contains a magic number: var dto = new BreakerCollection              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_ICollection,The following statement contains a magic number: var dto = new BreakerCollection              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_ICollection,The following statement contains a magic number: var dto = new BreakerCollection              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_ICollection,The following statement contains a magic number: var dto = new BreakerCollection              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_ICollection,The following statement contains a magic number: var dto = new BreakerCollection              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_ICollection,The following statement contains a magic number: var dto = new BreakerCollection              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_ICollection,The following statement contains a magic number: var dto = new BreakerCollection              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_serialize_ICollection,The following statement contains a magic number: var dto = new BreakerCollection              {                  Blah = new List<int> { 1' 2' 3' 4' 5' 6' 7' 8' 9 }              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: Assert.That("28/06/2015".FromJsv<DateTime>()'                  Is.EqualTo(new DateTime(2015' 6' 28)));
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: Assert.That("28/06/2015".FromJsv<DateTime>()'                  Is.EqualTo(new DateTime(2015' 6' 28)));
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: Assert.That("28/06/2015".FromJsv<DateTime>()'                  Is.EqualTo(new DateTime(2015' 6' 28)));
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: Assert.That("6/28/2015".FromJsv<DateTime>()'                  Is.EqualTo(new DateTime(2015' 6' 28)));
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: Assert.That("6/28/2015".FromJsv<DateTime>()'                  Is.EqualTo(new DateTime(2015' 6' 28)));
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: Assert.That("6/28/2015".FromJsv<DateTime>()'                  Is.EqualTo(new DateTime(2015' 6' 28)));
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: DateTimeSerializer.OnParseErrorFn = (s' ex) =>              {                  var parts = s.Split('/');                  return new DateTime(int.Parse(parts[2])' int.Parse(parts[0])' int.Parse(parts[1]));              };
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: Assert.That("06/28/2015".FromJsv<DateTime>()'                  Is.EqualTo(new DateTime(2015' 6' 28)));
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: Assert.That("06/28/2015".FromJsv<DateTime>()'                  Is.EqualTo(new DateTime(2015' 6' 28)));
Magic Number,ServiceStack.Text.Tests,AdhocModelTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,Can_parse_different_3_part_date_formats,The following statement contains a magic number: Assert.That("06/28/2015".FromJsv<DateTime>()'                  Is.EqualTo(new DateTime(2015' 6' 28)));
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Urn != null ? Urn.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ UserId.GetHashCode();
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ DateAdded.GetHashCode();
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ DateModified.GetHashCode();
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (TargetUserId.HasValue ? TargetUserId.Value.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (ForwardedPostId.HasValue ? ForwardedPostId.Value.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ OriginUserId.GetHashCode();
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (OriginUserName != null ? OriginUserName.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ SourceUserId.GetHashCode();
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (SourceUserName != null ? SourceUserName.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (SubjectUrn != null ? SubjectUrn.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (ContentUrn != null ? ContentUrn.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (TrackUrns != null ? TrackUrns.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Caption != null ? Caption.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ CaptionUserId.GetHashCode();
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (CaptionSourceName != null ? CaptionSourceName.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (ForwardedPostUrn != null ? ForwardedPostUrn.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ PostType.GetHashCode();
Magic Number,ServiceStack.Text.Tests,FlowPostTransient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (OnBehalfOfUserId.HasValue ? OnBehalfOfUserId.Value.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,PolarValues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Long.GetHashCode();
Magic Number,ServiceStack.Text.Tests,PolarValues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Float.GetHashCode();
Magic Number,ServiceStack.Text.Tests,PolarValues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Double.GetHashCode();
Magic Number,ServiceStack.Text.Tests,PolarValues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AdhocModelTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Decimal.GetHashCode();
Magic Number,ServiceStack.Text.Tests,AnonymousTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AnonymousTypes.cs,Can_serialize_anonymous_types,The following statement contains a magic number: Serialize(new { Id = 1' Name = "Name"' IntList = new[] { 1' 2' 3 } }' includeXml: false);
Magic Number,ServiceStack.Text.Tests,AnonymousTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AnonymousTypes.cs,Can_serialize_anonymous_types,The following statement contains a magic number: Serialize(new { Id = 1' Name = "Name"' IntList = new[] { 1' 2' 3 } }' includeXml: false);
Magic Number,ServiceStack.Text.Tests,AnonymousTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AnonymousTypes.cs,Can_serialize_anonymous_type_and_read_as_string_Dictionary,The following statement contains a magic number: var json = JsonSerializer.SerializeToString(  				new { Id = 1' Name = "Name"' IntList = new[] { 1' 2' 3 } });
Magic Number,ServiceStack.Text.Tests,AnonymousTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AnonymousTypes.cs,Can_serialize_anonymous_type_and_read_as_string_Dictionary,The following statement contains a magic number: var json = JsonSerializer.SerializeToString(  				new { Id = 1' Name = "Name"' IntList = new[] { 1' 2' 3 } });
Magic Number,ServiceStack.Text.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_RouteDefault_Attributes,The following statement contains a magic number: Assert.That(referenceGeneric.Count()' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_RouteDefault_Attributes,The following statement contains a magic number: Assert.That(reference.Count()' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_RouteDefault_Attributes,The following statement contains a magic number: Assert.That(referenceUnion.Count()' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_RouteDefault_Attributes,The following statement contains a magic number: Assert.That(referenceConcat.Count()' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_RouteDefault_Attributes,The following statement contains a magic number: Assert.That(attrsGeneric.Length' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_RouteDefault_Attributes,The following statement contains a magic number: Assert.That(attrs.Length' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_Route_Attributes,The following statement contains a magic number: Assert.That(routeAttrs.Length' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_Route_Attributes,The following statement contains a magic number: Assert.That(inheritedRouteAttrs.Length' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_TypeId_Attributes,The following statement contains a magic number: Assert.That(attrs.Length' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,RuntimeAttributesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Can_add_to_Multiple_Default_Attributes,The following statement contains a magic number: Assert.That(attrs.Length' Is.EqualTo(6));
Magic Number,ServiceStack.Text.Tests,RuntimeAttributesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,Does_get_Multiple_TypeId_Attributes,The following statement contains a magic number: Assert.That(attrs.Length' Is.EqualTo(6));
Magic Number,ServiceStack.Text.Tests,RouteDefaultAttribute,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (Path != null ? Path.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,RouteDefaultAttribute,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AttributeTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (Verbs != null ? Verbs.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "FirstName"' "Foo" }'                  { "LastName"' "Bar" }'                  { "DateOfBirth"' new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)) }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "FirstName"' "Foo" }'                  { "LastName"' "Bar" }'                  { "DateOfBirth"' new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)) }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "FirstName"' "Foo" }'                  { "LastName"' "Bar" }'                  { "DateOfBirth"' new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)) }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "FirstName"' "Foo" }'                  { "LastName"' "Bar" }'                  { "DateOfBirth"' new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)) }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "FirstName"' "Foo" }'                  { "LastName"' "Bar" }'                  { "DateOfBirth"' new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)) }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Year' Is.EqualTo(1971));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Month' Is.EqualTo(3));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Day' Is.EqualTo(23));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Hour' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_convert_prop_with_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Minute' Is.EqualTo(30));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Year' Is.EqualTo(1971));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Month' Is.EqualTo(3));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Day' Is.EqualTo(23));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Hour' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Props_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(personWithDoB.DateOfBirth.Minute' Is.EqualTo(30));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: var personWithDateOfBirth = new              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: var personWithDateOfBirth = new              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: var personWithDateOfBirth = new              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: var personWithDateOfBirth = new              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: var personWithDateOfBirth = new              {                  FirstName = "Foo"'                  LastName = "Bar"'                  DateOfBirth = new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero)              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(dto.Year' Is.EqualTo(1971));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(dto.Month' Is.EqualTo(3));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(dto.Day' Is.EqualTo(23));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(dto.Hour' Is.EqualTo(4));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_Anonymous_Types_With_CustomTypeConverter,The following statement contains a magic number: Assert.That(dto.Minute' Is.EqualTo(30));
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Should_Not_Throw_Exception_When_Multiple_Same_Type_CustomTypeConverters_Found,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Should_Not_Throw_Exception_When_Multiple_Same_Type_CustomTypeConverters_Found,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Should_Not_Throw_Exception_When_Multiple_Same_Type_CustomTypeConverters_Found,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Should_Not_Throw_Exception_When_Multiple_Same_Type_CustomTypeConverters_Found,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Should_Not_Throw_Exception_When_Multiple_Same_Type_CustomTypeConverters_Found,The following statement contains a magic number: var personWithWrappedDateOfBirth = new PersonWithWrappedDateOfBirth              {                  DateOfBirth = new WrappedDateTimeOffset(                      new DateTimeOffset(1971' 3' 23' 4' 30' 0' TimeSpan.Zero))              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Can_Convert_POCO_collections_with_custom_Converter,The following statement contains a magic number: var user = new User {                  FirstName = "John"'                  LastName = "Doe"'                  Car = new Car { Name = "BMW X6"' Age = 3 }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Does_ignore_POCO_mappings,The following statement contains a magic number: var user = new User {                  FirstName = "John"'                  LastName = "Doe"'                  Car = new Car { Name = "BMW X6"' Age = 3 }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingCustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingCustomConverterTests.cs,Does_ignore_collection_mappings,The following statement contains a magic number: var users = new UsersData {                  Id = 1'                  UsersList = new List<User> {                      new User {                          FirstName = "John"'                          LastName = "Doe"'                          Car = new Car { Name = "BMW X6"' Age = 3 }                      }                  }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_Car_to_ObjectDictionary,The following statement contains a magic number: var dto = new Car { Age = 10' Name = "ZCar" };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_Cart_to_ObjectDictionary,The following statement contains a magic number: var dto = new User              {                  FirstName = "First"'                  LastName = "Last"'                  Car = new Car { Age = 10' Name = "ZCar" }'              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Different_Types,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "FirstName"' 1 }'                  { "LastName"' true }'                  { "Car"'  new SubCar { Age = 10' Name = "SubCar"' Custom = "Custom"} }'              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Different_Types,The following statement contains a magic number: Assert.That(fromDict.Car.Age' Is.EqualTo(10));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Different_Types_with_camelCase_names,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "firstName"' 1 }'                  { "lastName"' true }'                  { "car"'  new SubCar { Age = 10' Name = "SubCar"' Custom = "Custom"} }'              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Different_Types_with_camelCase_names,The following statement contains a magic number: Assert.That(fromDict.Car.Age' Is.EqualTo(10));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Read_Only_Dictionary,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "FirstName"' 1 }'                  { "LastName"' true }'                  { "Car"'  new SubCar { Age = 10' Name = "SubCar"' Custom = "Custom"} }'              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Read_Only_Dictionary,The following statement contains a magic number: Assert.That(fromDict.Car.Age' Is.EqualTo(10));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_from_ObjectDictionary_into_AutoQuery_DTO,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "CustomerId"' "CustomerId"}'                  { "CountryIn"' new[]{"UK"' "Germany"}}'                  { "CityIn"' "London'Berlin"}'                  { "take"' 5 }'                  { "Meta"' "{foo:bar}" }'              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_from_ObjectDictionary_into_AutoQuery_DTO,The following statement contains a magic number: Assert.That(request.Take' Is.EqualTo(5));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_Containing_Another_Object_Dictionary,The following statement contains a magic number: Assert.That(fromDict.OtherNames.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Nullable_Collection_Properties,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "Id"' 1 }'                  { "Users"' new[] { new User { FirstName = "Foo"' LastName = "Bar"' Car = new Car { Name = "Jag"' Age = 25 }}}}'                  { "Cars"' new List<Car> { new Car { Name = "Toyota"' Age = 2 }' new Car { Name = "Lexus"' Age = 1 }}}'                  { "Colors"' null }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Nullable_Collection_Properties,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "Id"' 1 }'                  { "Users"' new[] { new User { FirstName = "Foo"' LastName = "Bar"' Car = new Car { Name = "Jag"' Age = 25 }}}}'                  { "Cars"' new List<Car> { new Car { Name = "Toyota"' Age = 2 }' new Car { Name = "Lexus"' Age = 1 }}}'                  { "Colors"' null }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Nullable_Collection_Properties,The following statement contains a magic number: Assert.That(user.Car.Age' Is.EqualTo(25));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Nullable_Collection_Properties,The following statement contains a magic number: Assert.That(actual.Cars.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_Convert_from_ObjectDictionary_with_Nullable_Collection_Properties,The following statement contains a magic number: Assert.That(firstCar.Age' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_dictionary,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "FirstName"' "Foo" }'                  { "LastName"' "Bar" }'                  { "Car"' new Dictionary<string' object>                  {                      { "Name"' "Tesla" }'                      { "Age"' 2 }                  }}              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_dictionary,The following statement contains a magic number: Assert.That(user.Car.Age' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_collection_of_dictionaries,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "Name"' "Tesla" }'                  { "Age"' "2" }'                  { "Specs"' new List<Dictionary<string' object>>                  {                      new Dictionary<string' object>                      {                          {"Item"' "Model"}'                          {"Value"' "S"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "Engine"}'                          {"Value"' "Electric"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "Color"}'                          {"Value"' "Red"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "PowerKW"}'                          {"Value"' 285}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "TorqueNm"}'                          {"Value"' 430}                      }'                  }}              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_collection_of_dictionaries,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "Name"' "Tesla" }'                  { "Age"' "2" }'                  { "Specs"' new List<Dictionary<string' object>>                  {                      new Dictionary<string' object>                      {                          {"Item"' "Model"}'                          {"Value"' "S"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "Engine"}'                          {"Value"' "Electric"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "Color"}'                          {"Value"' "Red"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "PowerKW"}'                          {"Value"' 285}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "TorqueNm"}'                          {"Value"' 430}                      }'                  }}              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_collection_of_dictionaries,The following statement contains a magic number: Assert.That(carWithSpecs.Age' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_collection_of_dictionaries,The following statement contains a magic number: Assert.That(carWithSpecs.Specs.Count' Is.EqualTo(5));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_array_of_dictionaries,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "Name"' "Tesla" }'                  { "Age"' "2" }'                  { "Specs"' new[]                  {                      new Dictionary<string' object>                      {                          {"Item"' "Model"}'                          {"Value"' "S"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "Engine"}'                          {"Value"' "Electric"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "Color"}'                          {"Value"' "Red"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "PowerKW"}'                          {"Value"' 285}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "TorqueNm"}'                          {"Value"' 430}                      }'                  }}              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_array_of_dictionaries,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  { "Name"' "Tesla" }'                  { "Age"' "2" }'                  { "Specs"' new[]                  {                      new Dictionary<string' object>                      {                          {"Item"' "Model"}'                          {"Value"' "S"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "Engine"}'                          {"Value"' "Electric"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "Color"}'                          {"Value"' "Red"}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "PowerKW"}'                          {"Value"' 285}                      }'                      new Dictionary<string' object>                      {                          {"Item"' "TorqueNm"}'                          {"Value"' 430}                      }'                  }}              };
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_array_of_dictionaries,The following statement contains a magic number: Assert.That(carWithSpecs.Age' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AutoMappingObjectDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingObjectDictionaryTests.cs,Can_convert_inner_array_of_dictionaries,The following statement contains a magic number: Assert.That(carWithSpecs.Specs.Count' Is.EqualTo(5));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_populate,The following statement contains a magic number: var user = new User {                  FirstName = "Demis"'                  LastName = "Bellot"'                  Car = new Car { Name = "BMW X6"' Age = 3 }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_translate,The following statement contains a magic number: var user = new User              {                  FirstName = "Demis"'                  LastName = "Bellot"'                  Car = new Car { Name = "BMW X6"' Age = 3 }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_nullableconversion_translate,The following statement contains a magic number: var conversion = new NullableConversion { Amount = 123.45m };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_nullableconversion_translate,The following statement contains a magic number: Assert.That(conversionDto.Amount' Is.EqualTo(123.45m));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_translate_nullableInt_to_and_from,The following statement contains a magic number: nonNullable.Id = 10;
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_translate_from_properties_to_fields,The following statement contains a magic number: var user = new User              {                  FirstName = "Demis"'                  LastName = "Bellot"'                  Car = new Car { Name = "BMW X6"' Age = 3 }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_translate_from_fields_to_properties,The following statement contains a magic number: var user = new UserFields              {                  FirstName = "Demis"'                  LastName = "Bellot"'                  Car = new Car { Name = "BMW X6"' Age = 3 }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_translate_from_inherited_propeties,The following statement contains a magic number: var user = new SubUser              {                  FirstName = "Demis"'                  LastName = "Bellot"'                  Car = new Car { Name = "BMW X6"' Age = 3 }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_translate_to_inherited_propeties,The following statement contains a magic number: var user = new User              {                  FirstName = "Demis"'                  LastName = "Bellot"'                  Car = new Car { Name = "BMW X6"' Age = 3 }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_BclTypes,The following statement contains a magic number: Assert.That(2L.ConvertTo<int>()' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_BclTypes,The following statement contains a magic number: Assert.That(2L.ConvertTo<int>()' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_BclTypes,The following statement contains a magic number: Assert.That(3.3d.ConvertTo<float>()' Is.EqualTo(3.3f));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_BclTypes,The following statement contains a magic number: Assert.That(3.3d.ConvertTo<float>()' Is.EqualTo(3.3f));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_BclTypes,The following statement contains a magic number: Assert.That(4.4d.ConvertTo<decimal>()' Is.EqualTo(4.4m));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_BclTypes,The following statement contains a magic number: Assert.That(4.4d.ConvertTo<decimal>()' Is.EqualTo(4.4m));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_coerce_from_BclTypes_to_strings,The following statement contains a magic number: var from = new BclTypes              {                  Int = 1'                  Long = 2'                  Double = 3.3'                  Decimal = 4.4m'              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_coerce_from_BclTypes_to_strings,The following statement contains a magic number: var from = new BclTypes              {                  Int = 1'                  Long = 2'                  Double = 3.3'                  Decimal = 4.4m'              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_coerce_from_BclTypes_to_strings,The following statement contains a magic number: var from = new BclTypes              {                  Int = 1'                  Long = 2'                  Double = 3.3'                  Decimal = 4.4m'              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_coerce_from_strings_to_BclTypes,The following statement contains a magic number: Assert.That(to.Long' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_coerce_from_strings_to_BclTypes,The following statement contains a magic number: Assert.That(to.Double' Is.EqualTo(3.3d));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_coerce_from_strings_to_BclTypes,The following statement contains a magic number: Assert.That(to.Decimal' Is.EqualTo(4.4m));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_map_only_properties_with_specified_Attribute,The following statement contains a magic number: var user = new User              {                  FirstName = "Demis"'                  LastName = "Bellot"'                  Car = new Car { Name = "BMW X6"' Age = 3 }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_models_with_collections,The following statement contains a magic number: var from = new ModelWithEnumerable              {                  Collection = new[] {                      new User { FirstName = "First1"' LastName = "Last1"' Car = new Car { Name = "Car1"' Age = 1} }'                      new User { FirstName = "First2"' LastName = "Last2"' Car = new Car { Name = "Car2"' Age = 2} }'                  }              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_ignore_properties_without_attributes,The following statement contains a magic number: var model = new ModelWithIgnoredFields              {                  Id = 1'                  Name = "Foo"'                  Ignored = 2              };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_ignore_properties_without_attributes,The following statement contains a magic number: var dto = new ModelWithIgnoredFields { Ignored = 10 }                  .PopulateFromPropertiesWithoutAttribute(model' typeof(ReadOnlyAttribute));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_ignore_properties_without_attributes,The following statement contains a magic number: Assert.That(dto.Ignored' Is.EqualTo(10));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_change_ignored_properties,The following statement contains a magic number: var dto = new IgnoredModel { JsonIgnoreId = 1' ScriptIgnoreId = 2 };
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_to_ValueType,The following statement contains a magic number: Assert.That("1.1".ConvertTo(typeof(float))' Is.EqualTo(1.1f));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_to_ValueType,The following statement contains a magic number: Assert.That("1.1".ConvertTo(typeof(double))' Is.EqualTo(1.1d));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_to_ValueType,The following statement contains a magic number: Assert.That("1.1".ConvertTo(typeof(decimal))' Is.EqualTo(1.1M));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_to_ValueType,The following statement contains a magic number: Assert.That("2001-01-01".ConvertTo<DateTime>()' Is.EqualTo(new DateTime(2001' 01' 01)));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_from_ValueType_to_strings,The following statement contains a magic number: Assert.That(1.1f.ConvertTo(typeof(string))' Is.EqualTo("1.1"));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_from_ValueType_to_strings,The following statement contains a magic number: Assert.That(1.1d.ConvertTo(typeof(string))' Is.EqualTo("1.1"));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_from_ValueType_to_strings,The following statement contains a magic number: Assert.That(1.1M.ConvertTo(typeof(string))' Is.EqualTo("1.1"));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Does_convert_from_ValueType_to_strings,The following statement contains a magic number: Assert.That(new DateTime(2001' 01' 01).ConvertTo<string>()' Is.EqualTo("2001-01-01"));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_from_List_object,The following statement contains a magic number: var from = 3.Times(i => (object)new Car { Age = i' Name = "Name" + i });
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_from_List_object,The following statement contains a magic number: Assert.That(to.Count' Is.EqualTo(3));
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_from_List_SubType,The following statement contains a magic number: var from = 3.Times(i => new SubCar { Age = i' Name = "Name" + i });
Magic Number,ServiceStack.Text.Tests,AutoMappingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_from_List_SubType,The following statement contains a magic number: Assert.That(to.Count' Is.EqualTo(3));
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_anonymous_object_to_ObjectDictionary,The following statement contains a magic number: var newObj = new { A = "a"' B = 1' C = true' D = 2.0 };
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_anonymous_object_to_ObjectDictionary,The following statement contains a magic number: var type = new DictionaryTest { A = "a"' B = 1' C = true' D = 2.0 };
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_anonymous_object_to_ObjectDictionary,The following statement contains a magic number: var expected = new Dictionary<string' object> {                  ["A"] = "a"'                  ["B"] = 1'                  ["C"] = true'                  ["D"] = 2.0              };
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_string_to_collection,The following statement contains a magic number: Assert.That("1'2'3".ConvertTo<int[]>()' Is.EquivalentTo(new[]{ 1' 2' 3 }));
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_string_to_collection,The following statement contains a magic number: Assert.That("1'2'3".ConvertTo<int[]>()' Is.EquivalentTo(new[]{ 1' 2' 3 }));
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_Convert_from_ObjectDictionary_Containing_Another_Object_Dictionary,The following statement contains a magic number: Assert.That(fromDict.OtherNames.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The following statement contains a magic number: var objKvp2 = new KeyValuePair<string' object>("B"' 2);
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The following statement contains a magic number: var intKvp2 = new KeyValuePair<string' int>("B"' 2);
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The following statement contains a magic number: Assert.That(new[] { objKvp' objKvp2 }.ToObjectDictionary()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' 1}' {"B"' 2} }));
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_ToObjectDictionary_KVPs,The following statement contains a magic number: Assert.That(new[] { intKvp' intKvp2 }.ToObjectDictionary()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' 1}' {"B"' 2} }));
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The following statement contains a magic number: var objKvp2 = new KeyValuePair<string' object>("B"' 2);
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The following statement contains a magic number: var intKvp2 = new KeyValuePair<string' int>("B"' 2);
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The following statement contains a magic number: Assert.That(new[] { objKvp' objKvp2 }.ConvertTo<Dictionary<string'object>>()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' 1}' {"B"' 2} }));
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_KVPs_to_ObjectDictionary,The following statement contains a magic number: Assert.That(new[] { intKvp' intKvp2 }.ConvertTo<Dictionary<string'object>>()' Is.EquivalentTo(new Dictionary<string' object> { {"A"' 1}' {"B"' 2} }));
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_between_KVP_Objects_and_IEnumerable,The following statement contains a magic number: var kvps = new List<KeyValuePair<string' object>> {                  new KeyValuePair<string' object>("A"' 1)'                  new KeyValuePair<string' object>("B"' 2)'                  new KeyValuePair<string' object>("C"' 3)'              };
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_between_KVP_Objects_and_IEnumerable,The following statement contains a magic number: var kvps = new List<KeyValuePair<string' object>> {                  new KeyValuePair<string' object>("A"' 1)'                  new KeyValuePair<string' object>("B"' 2)'                  new KeyValuePair<string' object>("C"' 3)'              };
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_between_KVP_ints_and_IEnumerable,The following statement contains a magic number: var kvps = new List<KeyValuePair<string' int>> {                  new KeyValuePair<string' int>("A"' 1)'                  new KeyValuePair<string' int>("B"' 2)'                  new KeyValuePair<string' int>("C"' 3)'              };
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_between_KVP_ints_and_IEnumerable,The following statement contains a magic number: var kvps = new List<KeyValuePair<string' int>> {                  new KeyValuePair<string' int>("A"' 1)'                  new KeyValuePair<string' int>("B"' 2)'                  new KeyValuePair<string' int>("C"' 3)'              };
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_between_list_of_value_types,The following statement contains a magic number: var intNums = new List<int> {1'2'3};
Magic Number,ServiceStack.Text.Tests,PropertyExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,Can_convert_between_list_of_value_types,The following statement contains a magic number: var intNums = new List<int> {1'2'3};
Magic Number,ServiceStack.Text.Tests,Person,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,Person,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\AutoMappingTests.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_datetime,The following statement contains a magic number: var dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_datetime,The following statement contains a magic number: var dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_datetime,The following statement contains a magic number: var dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_to_datetime,The following statement contains a magic number: var dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_to_datetime,The following statement contains a magic number: var dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_to_datetime,The following statement contains a magic number: var dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_nullable_datetime,The following statement contains a magic number: DateTime? dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_nullable_datetime,The following statement contains a magic number: DateTime? dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_nullable_datetime,The following statement contains a magic number: DateTime? dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_to_nullable_datetime,The following statement contains a magic number: DateTime? dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_to_nullable_datetime,The following statement contains a magic number: DateTime? dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_to_nullable_datetime,The following statement contains a magic number: DateTime? dateValue = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_Byte_array_with_JsonSerializer,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' };
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_Byte_array_with_JsonSerializer,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' };
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_Byte_array_with_JsonSerializer,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' };
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_Byte_array,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' };
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_Byte_array,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' };
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_Byte_array,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' };
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_to_Byte_array,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' };
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_to_Byte_array,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' };
Magic Number,ServiceStack.Text.Tests,BasicStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BasicStringSerializerTests.cs,Can_convert_to_Byte_array,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' };
Magic Number,ServiceStack.Text.Tests,BclStructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\BclStructTests.cs,Can_serialize_arrays_of_enums,The following statement contains a magic number: Assert.That(fromEnums[2]' Is.EqualTo(MyEnum.Enum3));
Magic Number,ServiceStack.Text.Tests,ConversionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ConversionTests.cs,Converting_ObjectDictionary_ToStringDictionary_converts_collection_to_jsv,The following statement contains a magic number: var objDictionary = new Dictionary<string' object>              {                  {"string"' "foo'bar" }'                  {"intArray"' new[] {1' 2} }'                  {"stringArray"' new[] {"foo"' "bar"} }'                  {"stringEscapeChars"' "a' 'b" }'                  {"stringArrayEscapeChars"' new[] { "a' b"' "c 'd"} }'              };
Magic Number,ServiceStack.Text.Tests,CsvSerializerConfigTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerConfigTests.cs,Does_use_CsvConfig,The following statement contains a magic number: var dtos = new[] {                  new ModelWithIdAndName { Id = 1' Name = "Value" }'                  new ModelWithIdAndName { Id = 2' Name = "Value|Escaped" }'              };
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(headers[2]' Is.EqualTo("Title"));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(headers[3]' Is.EqualTo("Rating"));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(headers[4]' Is.EqualTo("Director"));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(headers[5]' Is.EqualTo("ReleaseDate"));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(headers[6]' Is.EqualTo("TagLine"));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(headers[7]' Is.EqualTo("Genres"));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(first[2]' Is.EqualTo(movie.Title));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(first[3]' Is.EqualTo(movie.Rating.ToString(CultureInfo.InvariantCulture)));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(first[4]' Is.EqualTo(movie.Director));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(first[5]' Is.EqualTo(movie.ReleaseDate.ToJsv()));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(first[6]' Is.EqualTo(movie.TagLine));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_deserialize_into_String_List,The following statement contains a magic number: Assert.That(first[7]' Is.EqualTo(movie.Genres.ToJsv()));
Magic Number,ServiceStack.Text.Tests,CsvSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvSerializerTests.cs,Can_serialize_ObjectDictionary_list,The following statement contains a magic number: var rows = new List<Dictionary<string' object>>              {                  new Dictionary<string' object>                  {                      { "Id"' 1 }'                      { "CustomerId"' "ALFKI" }'                  }'                  new Dictionary<string' object>                  {                      { "Id"' 2 }'                      { "CustomerId"' "ANATR" }'                  }'              };
Magic Number,ServiceStack.Text.Tests,CultureInfoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Can_deserialize_type_with_doubles_in_different_culture,The following statement contains a magic number: var point = new Point { Latitude = -23.5707' Longitude = -46.57239 };
Magic Number,ServiceStack.Text.Tests,CultureInfoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Can_deserialize_type_with_doubles_in_different_culture,The following statement contains a magic number: var point = new Point { Latitude = -23.5707' Longitude = -46.57239 };
Magic Number,ServiceStack.Text.Tests,CultureInfoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Can_deserialize_type_with_Single_in_different_culture,The following statement contains a magic number: Single single = (float)1.123;
Magic Number,ServiceStack.Text.Tests,CultureInfoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Serializes_doubles_using_InvariantCulture,The following statement contains a magic number: var doubleUtf8 = 66121.202.ToUtf8Bytes();
Magic Number,ServiceStack.Text.Tests,CultureInfoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Serializes_long_double_without_E_notation,The following statement contains a magic number: var doubleUtf8 = 1234567890123456d.ToUtf8Bytes();
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,NumberClass,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CultureInfoTests.cs,Create,The following statement contains a magic number: return new NumberClass                  {                      IntValue = i * 1000'                      UIntValue = (uint)(i * 1000)'                      LongValue = i * 1000'                      ULongValue = (ulong)(i * 1000)'                      FloatValue = (float)(i * 1000 + .999)'                      DoubleValue = i * 1000 + .999'                      DecimalValue = (decimal)(i * 1000 + .999)'                  };
Magic Number,ServiceStack.Text.Tests,CustomCultureInfoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomCultureInfoTests.cs,Does_not_use_custom_decimal,The following statement contains a magic number: var num = new NumberTypes              {                  Int = 1111'                  Float = 2222.2222f'                  Double = 3333.3333'                  Decimal = 4444.4444M'              };
Magic Number,ServiceStack.Text.Tests,CustomCultureInfoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomCultureInfoTests.cs,Does_not_use_custom_decimal,The following statement contains a magic number: var num = new NumberTypes              {                  Int = 1111'                  Float = 2222.2222f'                  Double = 3333.3333'                  Decimal = 4444.4444M'              };
Magic Number,ServiceStack.Text.Tests,CustomCultureInfoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomCultureInfoTests.cs,Does_not_use_custom_decimal,The following statement contains a magic number: var num = new NumberTypes              {                  Int = 1111'                  Float = 2222.2222f'                  Double = 3333.3333'                  Decimal = 4444.4444M'              };
Magic Number,ServiceStack.Text.Tests,CustomCultureInfoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomCultureInfoTests.cs,Does_not_use_custom_decimal,The following statement contains a magic number: var num = new NumberTypes              {                  Int = 1111'                  Float = 2222.2222f'                  Double = 3333.3333'                  Decimal = 4444.4444M'              };
Magic Number,ServiceStack.Text.Tests,UserStat,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomStructTests.cs,GetWeightedValue,The following statement contains a magic number: return (this.TimesRecommended * 10)                     + (this.TimesPurchased * 3)                     + (this.TimesFlowed * 2)                     + this.TimesPreviewed;
Magic Number,ServiceStack.Text.Tests,UserStat,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomStructTests.cs,GetWeightedValue,The following statement contains a magic number: return (this.TimesRecommended * 10)                     + (this.TimesPurchased * 3)                     + (this.TimesFlowed * 2)                     + this.TimesPreviewed;
Magic Number,ServiceStack.Text.Tests,UserStat,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomStructTests.cs,GetWeightedValue,The following statement contains a magic number: return (this.TimesRecommended * 10)                     + (this.TimesPurchased * 3)                     + (this.TimesFlowed * 2)                     + this.TimesPreviewed;
Magic Number,ServiceStack.Text.Tests,UserStat,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomStructTests.cs,Parse,The following statement contains a magic number: parts.Length != 6
Magic Number,ServiceStack.Text.Tests,CustomStructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CustomStructTests.cs,Can_serialize_UserStats_list,The following statement contains a magic number: var userStats = 5.Times(i => CreateUserStat(guidValues[i]' i));
Magic Number,ServiceStack.Text.Tests,CyclicalDependencyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CyclicalDependencyTests.cs,Can_serialize_Error,The following statement contains a magic number: var dto = new Error              {                  Id = "Id"'                  Message = "Message"'                  Type = "Type"'                  Description = "Description"'                  OccurrenceDate = new DateTime(2012' 01' 01)'                  Code = "Code"'                  ExtendedData = new Dictionary<string' object> { { "Key"' "Value" } }'                  Tags = new HashSet<string> { "C#"' "ruby" }'                  Inner = new Error                  {                      Id = "Id2"'                      Message = "Message2"'                      ExtendedData = new Dictionary<string' object> { { "InnerKey"' "InnerValue" } }'                      Module = new Module                      {                          Name = "Name"'                          Version = "v1.0"                      }'                      StackTrace = new Collection<StackFrame> {                          new StackFrame {                              Column = 1'                              Module = new Module {                                  Name = "StackTrace.Name"'                                  Version = "StackTrace.v1.0"                              }'                              ExtendedData = new Dictionary<string' object> { { "StackTraceKey"' "StackTraceValue" } }'                              FileName = "FileName"'                              Type = "Type"'                              LineNumber = 1'                              Method = "Method"'                              Namespace = "Namespace"'                              Parameters = new Collection<Parameter> {                                  new Parameter { Name = "Parameter"' Type = "ParameterType" }'                              }                          }                      }                  }'                  Contact = "Contact"'                  Notes = "Notes"'              };
Magic Number,ServiceStack.Text.Tests,DataContractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DataContractTests.cs,Replicate_serialization_bug,The following statement contains a magic number: var p = new PersonRecord { Id = 27' Name = "John" };
Magic Number,ServiceStack.Text.Tests,DataContractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DataContractTests.cs,deserialize_from_string_with_the_dataMember_name,The following statement contains a magic number: Assert.AreEqual(2' classOne.List.Count);
Magic Number,ServiceStack.Text.Tests,DataStressTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DataTests.cs,serialize_GetValuesResponse,The following statement contains a magic number: Assert.That(response.Values' Has.Count.EqualTo(9));
Magic Number,ServiceStack.Text.Tests,DateTimeExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeExtensionsTests.cs,LastMondayTest,The following statement contains a magic number: var monday = new DateTime(2013' 04' 15);
Magic Number,ServiceStack.Text.Tests,DateTimeExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeExtensionsTests.cs,LastMondayTest,The following statement contains a magic number: var monday = new DateTime(2013' 04' 15);
Magic Number,ServiceStack.Text.Tests,DateTimeExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeExtensionsTests.cs,LastMondayTest,The following statement contains a magic number: var monday = new DateTime(2013' 04' 15);
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_Serializable_DateTimeOffset_Field,The following statement contains a magic number: var model = new SampleModel { Id = 1' Date = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.FromHours(7)) };
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_Serializable_DateTimeOffset_Field,The following statement contains a magic number: var model = new SampleModel { Id = 1' Date = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.FromHours(7)) };
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_Serializable_DateTimeOffset_Field,The following statement contains a magic number: var model = new SampleModel { Id = 1' Date = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.FromHours(7)) };
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_Serializable_DateTimeOffset_Field,The following statement contains a magic number: var model = new SampleModel { Id = 1' Date = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.FromHours(7)) };
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_Serializable_DateTimeOffset_Field,The following statement contains a magic number: var model = new SampleModel { Id = 1' Date = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.FromHours(7)) };
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_Serializable_DateTimeOffset_Field,The following statement contains a magic number: var model = new SampleModel { Id = 1' Date = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.FromHours(7)) };
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_Serializable_DateTimeOffset_Field,The following statement contains a magic number: var model = new SampleModel { Id = 1' Date = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.FromHours(7)) };
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_Serializable_DateTimeOffset_Field,The following statement contains a magic number: var model = new SampleModel { Id = 1' Date = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.FromHours(7)) };
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_serialize_TimeSpan_field,The following statement contains a magic number: var fromDate = new DateTime(2069' 01' 02);
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_serialize_TimeSpan_field,The following statement contains a magic number: var fromDate = new DateTime(2069' 01' 02);
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_serialize_TimeSpan_field,The following statement contains a magic number: var toDate = new DateTime(2079' 01' 02);
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_serialize_TimeSpan_field,The following statement contains a magic number: var toDate = new DateTime(2079' 01' 02);
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_serialize_TimeSpan_field_with_StandardTimeSpanFormat,The following statement contains a magic number: var period = TimeSpan.FromSeconds(70);
Magic Number,ServiceStack.Text.Tests,DateTimeOffsetAndTimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DateTimeOffsetAndTimeSpanTests.cs,Can_serialize_NullableTimeSpan_field_with_StandardTimeSpanFormat,The following statement contains a magic number: var period = TimeSpan.FromSeconds(70);
Magic Number,ServiceStack.Text.Tests,DdnDtoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DdnDtoTests.cs,Can_serialize_GetContentStatsResponse,The following statement contains a magic number: var dto = new GetContentStatsResponse              {                  CreatedDate = DateTime.UtcNow'                  TopRecommenders = new List<UserSearchResult>                    {                        CreateUserSearchResult(1)'                        CreateUserSearchResult(2)'                    }'                  LatestPosts = new List<Post> {                       CreatePost(1)'                       CreatePost(2)                   }'              };
Magic Number,ServiceStack.Text.Tests,DdnDtoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DdnDtoTests.cs,Can_serialize_GetContentStatsResponse,The following statement contains a magic number: var dto = new GetContentStatsResponse              {                  CreatedDate = DateTime.UtcNow'                  TopRecommenders = new List<UserSearchResult>                    {                        CreateUserSearchResult(1)'                        CreateUserSearchResult(2)'                    }'                  LatestPosts = new List<Post> {                       CreatePost(1)'                       CreatePost(2)                   }'              };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_one_level_dictionary,The following statement contains a magic number: var map = new Dictionary<string' int>                {                  {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_one_level_dictionary,The following statement contains a magic number: var map = new Dictionary<string' int>                {                  {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary,The following statement contains a magic number: var map = new Dictionary<string' Dictionary<string' int>>                    {                      {"map1"' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {"map2"' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary,The following statement contains a magic number: var map = new Dictionary<string' Dictionary<string' int>>                    {                      {"map1"' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {"map2"' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary,The following statement contains a magic number: var map = new Dictionary<string' Dictionary<string' int>>                    {                      {"map1"' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {"map2"' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary,The following statement contains a magic number: var map = new Dictionary<string' Dictionary<string' int>>                    {                      {"map1"' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {"map2"' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary,The following statement contains a magic number: var map = new Dictionary<string' Dictionary<string' int>>                    {                      {"map1"' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {"map2"' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary_with_int_key,The following statement contains a magic number: var map = new Dictionary<int' Dictionary<string' int>>                    {                      {1' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {2' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary_with_int_key,The following statement contains a magic number: var map = new Dictionary<int' Dictionary<string' int>>                    {                      {1' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {2' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary_with_int_key,The following statement contains a magic number: var map = new Dictionary<int' Dictionary<string' int>>                    {                      {1' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {2' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary_with_int_key,The following statement contains a magic number: var map = new Dictionary<int' Dictionary<string' int>>                    {                      {1' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {2' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary_with_int_key,The following statement contains a magic number: var map = new Dictionary<int' Dictionary<string' int>>                    {                      {1' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {2' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_serialize_two_level_dictionary_with_int_key,The following statement contains a magic number: var map = new Dictionary<int' Dictionary<string' int>>                    {                      {1' new Dictionary<string' int>                           {                              {"One"' 1}' {"Two"' 2}' {"Three"' 3}'                           }                      }'                      {2' new Dictionary<string' int>                           {                              {"Four"' 4}' {"Five"' 5}' {"Six"' 6}'                           }                      }'                    };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_two_level_dictionary_with_array,The following statement contains a magic number: Assert.That(((List<object>)deserialized["array"]).Count' Is.EqualTo(3));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_two_level_dictionary_with_array,The following statement contains a magic number: Assert.That(((List<object>)deserialized["array"])[2].ToJson()' Is.EqualTo("{\"Name\":\"Third\"}"));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,SetupDict,The following statement contains a magic number: return new Dictionary<string' object> {                  { "a"' "text" }'                  { "b"' 32 }'                  { "c"' false }'                  { "d"' new[] {1' 2' 3} }'                  { "e"' 1m }'                  { "f"' 1.1m }'              };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,SetupDict,The following statement contains a magic number: return new Dictionary<string' object> {                  { "a"' "text" }'                  { "b"' 32 }'                  { "c"' false }'                  { "d"' new[] {1' 2' 3} }'                  { "e"' 1m }'                  { "f"' 1.1m }'              };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,SetupDict,The following statement contains a magic number: return new Dictionary<string' object> {                  { "a"' "text" }'                  { "b"' 32 }'                  { "c"' false }'                  { "d"' new[] {1' 2' 3} }'                  { "e"' 1m }'                  { "f"' 1.1m }'              };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,SetupDict,The following statement contains a magic number: return new Dictionary<string' object> {                  { "a"' "text" }'                  { "b"' 32 }'                  { "c"' false }'                  { "d"' new[] {1' 2' 3} }'                  { "e"' 1m }'                  { "f"' 1.1m }'              };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,AssertDict,The following statement contains a magic number: Assert.AreEqual(32' dict["b"]);
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Test_ServiceStack_Text_JsonSerializer_Array_Value_Deserializes_Correctly,The following statement contains a magic number: Assert.AreEqual(new List<int> { 1' 2' 3 }' deserializedDict["d"]);
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Test_ServiceStack_Text_JsonSerializer_Array_Value_Deserializes_Correctly,The following statement contains a magic number: Assert.AreEqual(new List<int> { 1' 2' 3 }' deserializedDict["d"]);
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,deserizes_to_decimal_by_default,The following statement contains a magic number: Assert.That(deserializedDict["f"]' Is.EqualTo(1.1m));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,deserizes_floats_into_to_best_fit_floating_point,The following statement contains a magic number: float floatValue = 1.1f;
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,deserizes_floats_into_to_best_fit_floating_point,The following statement contains a magic number: double doubleValue = double.MaxValue - Math.Pow(2' 1000);
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,deserizes_floats_into_to_best_fit_floating_point,The following statement contains a magic number: double doubleValue = double.MaxValue - Math.Pow(2' 1000);
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,deserizes_floats_into_to_best_fit_floating_point,The following statement contains a magic number: Assert.AreEqual(toDoubleValue' doubleValue' Math.Pow(2' 1000));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,deserizes_floats_into_to_best_fit_floating_point,The following statement contains a magic number: Assert.AreEqual(toDoubleValue' doubleValue' Math.Pow(2' 1000));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,deserizes_floats_into_to_best_fit_floating_point,The following statement contains a magic number: Assert.AreEqual((double)map["double"]' doubleValue' Math.Pow(2' 1000));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,deserizes_floats_into_to_best_fit_floating_point,The following statement contains a magic number: Assert.AreEqual((double)map["double"]' doubleValue' Math.Pow(2' 1000));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_mixed_dictionary_into_strongtyped_map,The following statement contains a magic number: Assert.AreEqual(32' mixedType.b);
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_mixed_dictionary_into_strongtyped_map,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 3 }' mixedType.d);
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_mixed_dictionary_into_strongtyped_map,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 3 }' mixedType.d);
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_ordereddictionary,The following statement contains a magic number: var original = new OrderedDictionary {                  {"Key1"' "Value1"}'                  {"Key2"' 2}'                  {3' "Value3"}'                  {"Key4"' false}                };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_ordereddictionary,The following statement contains a magic number: var original = new OrderedDictionary {                  {"Key1"' "Value1"}'                  {"Key2"' 2}'                  {3' "Value3"}'                  {"Key4"' false}                };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_ordereddictionary,The following statement contains a magic number: Assert.That(deserialized["Key2"]' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_ordereddictionary,The following statement contains a magic number: Assert.That(deserialized[2]' Is.EqualTo("Value3"));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_ordereddictionary_subclass,The following statement contains a magic number: var original = new OrderedDictionarySub {                  {"Key1"' "Value1"}'                  {"Key2"' 2}'                  {3' "Value3"}'                  {"Key4"' false}                };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_ordereddictionary_subclass,The following statement contains a magic number: var original = new OrderedDictionarySub {                  {"Key1"' "Value1"}'                  {"Key2"' 2}'                  {3' "Value3"}'                  {"Key4"' false}                };
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_ordereddictionary_subclass,The following statement contains a magic number: Assert.That(deserialized["Key2"]' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DictionaryTests.cs,Can_deserialize_ordereddictionary_subclass,The following statement contains a magic number: Assert.That(deserialized[2]' Is.EqualTo("Value3"));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_detect_Circular_References_in_models,The following statement contains a magic number: var node = new Node(1'                  new Node(11' new Node(111))'                  new Node(12' new Node(121)));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_detect_Circular_References_in_models,The following statement contains a magic number: var node = new Node(1'                  new Node(11' new Node(111))'                  new Node(12' new Node(121)));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_detect_Circular_References_in_models,The following statement contains a magic number: var node = new Node(1'                  new Node(11' new Node(111))'                  new Node(12' new Node(121)));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_detect_Circular_References_in_models,The following statement contains a magic number: var node = new Node(1'                  new Node(11' new Node(111))'                  new Node(12' new Node(121)));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_detect_Circular_References_in_models,The following statement contains a magic number: var root = new Node(1'                  new Node(11));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_PrintDump_ToSafeJson_ToSafeJsv_recursive_Node,The following statement contains a magic number: var node = new Node(1'                  new Node(11' new Node(111))'                  new Node(12' new Node(121)));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_PrintDump_ToSafeJson_ToSafeJsv_recursive_Node,The following statement contains a magic number: var node = new Node(1'                  new Node(11' new Node(111))'                  new Node(12' new Node(121)));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_PrintDump_ToSafeJson_ToSafeJsv_recursive_Node,The following statement contains a magic number: var node = new Node(1'                  new Node(11' new Node(111))'                  new Node(12' new Node(121)));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_PrintDump_ToSafeJson_ToSafeJsv_recursive_Node,The following statement contains a magic number: var node = new Node(1'                  new Node(11' new Node(111))'                  new Node(12' new Node(121)));
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_PrintDump_ToSafeJson_ToSafeJsv_recursive_Node,The following statement contains a magic number: var root = new Node(1'                  new Node(11' new Node(111))'                  node);
Magic Number,ServiceStack.Text.Tests,DumpTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DumpTests.cs,Can_PrintDump_ToSafeJson_ToSafeJsv_recursive_Node,The following statement contains a magic number: var root = new Node(1'                  new Node(11' new Node(111))'                  node);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Add(8' 2) is int a && a == 10);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Add(8' 2) is int a && a == 10);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Add(8' 2) is int a && a == 10);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Sub(8' 2) is int s && s == 6);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Sub(8' 2) is int s && s == 6);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Sub(8' 2) is int s && s == 6);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Mul(8' 2) is int m && m == 16);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Mul(8' 2) is int m && m == 16);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Mul(8' 2) is int m && m == 16);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Div(8' 2) is int d && d == 4);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Div(8' 2) is int d && d == 4);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_right_operation,The following statement contains a magic number: Assert.That(DynamicNumber.Div(8' 2) is int d && d == 4);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Returns_natural_number_type_when_both_are_the_same,The following statement contains a magic number: Assert.That(Add((byte)1' (byte)1) is int b && b == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Returns_natural_number_type_when_both_are_the_same,The following statement contains a magic number: Assert.That(Add((short)1' (short)1) is int s && s == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Returns_natural_number_type_when_both_are_the_same,The following statement contains a magic number: Assert.That(Add((char)1' (char)1) is int c && c == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Returns_natural_number_type_when_both_are_the_same,The following statement contains a magic number: Assert.That(Add(1' 1) is int i && i == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Returns_natural_number_type_when_both_are_the_same,The following statement contains a magic number: Assert.That(Add(1d' 1d) is double d && d == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Returns_natural_number_type_when_both_are_the_same,The following statement contains a magic number: Assert.That(Add(1f' 1f) is float f && f == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Returns_natural_number_type_when_both_are_the_same,The following statement contains a magic number: Assert.That(Add(1M' 1M) is decimal m && m == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_when_using_different_integer_types,The following statement contains a magic number: Assert.That(Add2((sbyte)1' (byte)1) is int b && b == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_when_using_different_integer_types,The following statement contains a magic number: Assert.That(Add2((byte)1' (short)1) is int s && s == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_when_using_different_integer_types,The following statement contains a magic number: Assert.That(Add2((short)1' (ushort)1) is int us && us == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_when_using_different_integer_types,The following statement contains a magic number: Assert.That(Add2((ushort)1' (int)1) is int i && i == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_when_using_different_integer_types,The following statement contains a magic number: Assert.That(Add2((int)1' (uint)1) is uint ui && ui == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_when_using_different_integer_types,The following statement contains a magic number: Assert.That(Add2((uint)1' (long)1) is long l && l == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_when_using_different_integer_types,The following statement contains a magic number: Assert.That(Add2((long)1' (ulong)1) is ulong ul && ul == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_when_using_different_float_types,The following statement contains a magic number: Assert.That(Add2((float)1' (double)1) is double d && d == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_when_using_different_float_types,The following statement contains a magic number: Assert.That(Add2((double)1' (decimal)1) is decimal m && m == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_from_integer_to_float_type,The following statement contains a magic number: Assert.That(Add2((int)1' (float)1) is float f && f == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_from_integer_to_float_type,The following statement contains a magic number: Assert.That(Add2((int)1' (double)1) is double d && d == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_from_integer_to_float_type,The following statement contains a magic number: Assert.That(Add2((int)1' (decimal)1) is decimal m && m == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_from_integer_to_float_type,The following statement contains a magic number: Assert.That(Add2((long)1' (float)1) is float fl && fl == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_from_integer_to_float_type,The following statement contains a magic number: Assert.That(Add2((long)1' (double)1) is double dl && dl == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_upcast_from_integer_to_float_type,The following statement contains a magic number: Assert.That(Add2((long)1' (decimal)1) is decimal ml && ml == 2);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_convert_string_to_appropriate_popular_type,The following statement contains a magic number: Assert.That(DynamicNumber.TryParse((long.MaxValue + (double)1).ToString(CultureInfo.InvariantCulture)' out o) && o is double d ? d : 0' Is.EqualTo(long.MaxValue + (double)1).Within(10000));
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Does_convert_string_to_appropriate_popular_type,The following statement contains a magic number: Assert.That(DynamicNumber.TryParse("1.1"' out o) && o is double d2 && d2 == 1.1);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Can_convert_string_into_number_types,The following statement contains a magic number: Assert.That((long.MaxValue + (double)1).ToString().ConvertTo<double>()' Is.EqualTo(long.MaxValue + (double)1).Within(10000));
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Can_convert_string_into_number_types,The following statement contains a magic number: Assert.That(("1.1").ConvertTo<double>()' Is.EqualTo(1.1d));
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Can_apply_operations_to_strings_containing_numbers,The following statement contains a magic number: Assert.That(result' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Dynamic_number_examples,The following statement contains a magic number: object objDouble = 1.1;
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Dynamic_number_examples,The following statement contains a magic number: Assert.That(DynamicNumber.Add(objInt' objDouble) is double d1 && d1 == 2.1);
Magic Number,ServiceStack.Text.Tests,DynamicNumberTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicNumberTests.cs,Dynamic_number_examples,The following statement contains a magic number: Assert.That(DynamicNumber.Multiply('2'' "1.1") is double d2 && d2 == 2.2);
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Dictionary_Object_UrlStatus,The following statement contains a magic number: var urlStatus = new UrlStatus              {                  Status = 301'                  Url = "http://www.ehow.com/how_5615409_create-pdfs-using-bean.html"'              };
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_string,The following statement contains a magic number: Assert.That(deserialized' Is.EqualTo(12345));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_array,The following statement contains a magic number: Assert.That(((List<object>)deserialized)[1]' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_array,The following statement contains a magic number: Assert.That(((List<object>)deserialized)[2]' Is.EqualTo(3));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_array,The following statement contains a magic number: Assert.That(((List<object>)deserialized)[2]' Is.EqualTo(3));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_utc_iso8601_datetime,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 21' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_utc_iso8601_datetime,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 21' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_utc_iso8601_datetime,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 21' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_utc_iso8601_datetime,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 21' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_utc_iso8601_datetime,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 21' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_utc_iso8601_datetime,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 21' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_utc_iso8601_datetime,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 21' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_iso8601_datetime_with_timezone,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 19' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_iso8601_datetime_with_timezone,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 19' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_iso8601_datetime_with_timezone,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 19' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_iso8601_datetime_with_timezone,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 19' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_iso8601_datetime_with_timezone,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 19' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_iso8601_datetime_with_timezone,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 19' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_iso8601_datetime_with_timezone,The following statement contains a magic number: Assert.That(datetime' Is.EqualTo(new DateTime(2012' 11' 20' 19' 37' 32' 870' DateTimeKind.Utc).ToLocalTime()));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_dictionary_with_mixed_values_and_nulls_and_empty_array,The following statement contains a magic number: Assert.That(dict["intValue"]' Is.EqualTo(-13));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_dictionary_with_mixed_values_and_nulls_and_empty_array,The following statement contains a magic number: Assert.That(dict["decimalValue"]' Is.EqualTo(5.9m));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_dictionary_with_mixed_values_and_nulls_and_empty_array,The following statement contains a magic number: Assert.That(dict["dateValue"]' Is.EqualTo(new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_dictionary_with_mixed_values_and_nulls_and_empty_array,The following statement contains a magic number: Assert.That(dict["dateValue"]' Is.EqualTo(new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_dictionary_with_mixed_values_and_nulls_and_empty_array,The following statement contains a magic number: Assert.That(dict["dateValue"]' Is.EqualTo(new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_dictionary_with_line_breaks,The following statement contains a magic number: Assert.That(dict["value"]' Is.EqualTo(5));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Can_deserialize_object_array_with_line_breaks_around_number_element,The following statement contains a magic number: Assert.That(arrayValues[0]' Is.EqualTo(5));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,SerializeObjectTypes,The following statement contains a magic number: Assert.That(SerializeObject((float) 1.1)' Is.EqualTo("{\"Value\":1.1}"));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,SerializeObjectTypes,The following statement contains a magic number: Assert.That(SerializeObject((double) 1.1)' Is.EqualTo("{\"Value\":1.1}"));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,SerializeObjectTypes,The following statement contains a magic number: Assert.That(SerializeObject((decimal) 1.1)' Is.EqualTo("{\"Value\":1.1}"));
Magic Number,ServiceStack.Text.Tests,DynamicObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicObjectTests.cs,Does_serialize_number_object_types_with_JS_utils,The following statement contains a magic number: Assert.That(DeserializeObject("{\"Value\":1.1}")' Is.EqualTo((double)1.1));
Magic Number,ServiceStack.Text.Tests,EnumerableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\EnumerableTests.cs,Can_serialize_array_list_of_mixed_types,The following statement contains a magic number: var list = (IEnumerable)new ArrayList {                  1.0'                  1.1'                  1'                  new object()'                  "boo"'                  1'                  1.2              };
Magic Number,ServiceStack.Text.Tests,EnumerableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\EnumerableTests.cs,Can_serialize_array_list_of_mixed_types,The following statement contains a magic number: var list = (IEnumerable)new ArrayList {                  1.0'                  1.1'                  1'                  new object()'                  "boo"'                  1'                  1.2              };
Magic Number,ServiceStack.Text.Tests,EnumerableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\EnumerableTests.cs,Can_serialize_array_list_of_mixed_types_with_null,The following statement contains a magic number: var list = (IEnumerable)new ArrayList {                  1.0'                  null'                  1'                  new object()'                  "boo"'                  1'                  1.2              };
Magic Number,ServiceStack.Text.Tests,EnumerableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\EnumerableTests.cs,Can_serialize_array_list_of_mixed_types_with_null_on_first_position,The following statement contains a magic number: var list = (IEnumerable)new ArrayList {                  null'                  1'                  new object()'                  "boo"'                  1'                  1.2              };
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,Can_serialize_one_level_expando,The following statement contains a magic number: map.Two = 2;
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,Can_serialize_one_level_expando,The following statement contains a magic number: map.Three = 3;
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,Can_serialize_two_level_expando,The following statement contains a magic number: map1.Two = 2;
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,Can_serialize_two_level_expando,The following statement contains a magic number: map1.Three = 3;
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,Can_serialize_two_level_expando,The following statement contains a magic number: map2.Four = 4;
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,Can_serialize_two_level_expando,The following statement contains a magic number: map2.Five = 5;
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,Can_serialize_two_level_expando,The following statement contains a magic number: map2.Six = 6;
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,SetupMap,The following statement contains a magic number: map.b = 32;
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,SetupMap,The following statement contains a magic number: map.d = new[] { 1' 2' 3 };
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,SetupMap,The following statement contains a magic number: map.d = new[] { 1' 2' 3 };
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,AssertMap,The following statement contains a magic number: Assert.AreEqual(32' map.b);
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,AssertMap,The following statement contains a magic number: Assert.AreEqual(new List<int> { 1' 2' 3 }' map.d);
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,AssertMap,The following statement contains a magic number: Assert.AreEqual(new List<int> { 1' 2' 3 }' map.d);
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,Can_deserialize_mixed_expando_into_strongtyped_map,The following statement contains a magic number: Assert.AreEqual(32' mixedType.b);
Magic Number,ServiceStack.Text.Tests,ExpandoTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ExpandoTests.cs,Can_deserialize_two_level_expando,The following statement contains a magic number: Assert.AreEqual(32' expandoObject.b);
Magic Number,ServiceStack.Text.Tests,GenericCollectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\GenericCollectionTests.cs,Can_serialize_Queue_int,The following statement contains a magic number: queue.Enqueue(2);
Magic Number,ServiceStack.Text.Tests,GenericCollectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\GenericCollectionTests.cs,Can_serialize_Queue_int,The following statement contains a magic number: queue.Enqueue(3);
Magic Number,ServiceStack.Text.Tests,GenericCollectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\GenericCollectionTests.cs,Can_serialize_Queue_Generic,The following statement contains a magic number: queue.Enqueue(ModelWithIdAndName.Create(2));
Magic Number,ServiceStack.Text.Tests,GenericCollectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\GenericCollectionTests.cs,Can_serialize_Queue_Generic,The following statement contains a magic number: queue.Enqueue(ModelWithIdAndName.Create(3));
Magic Number,ServiceStack.Text.Tests,GenericCollectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\GenericCollectionTests.cs,Can_serialize_Stack_int,The following statement contains a magic number: stack.Push(2);
Magic Number,ServiceStack.Text.Tests,GenericCollectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\GenericCollectionTests.cs,Can_serialize_Stack_int,The following statement contains a magic number: stack.Push(3);
Magic Number,ServiceStack.Text.Tests,GenericCollectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\GenericCollectionTests.cs,Can_serialize_Stack_Generic,The following statement contains a magic number: stack.Push(ModelWithIdAndName.Create(2));
Magic Number,ServiceStack.Text.Tests,GenericCollectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\GenericCollectionTests.cs,Can_serialize_Stack_Generic,The following statement contains a magic number: stack.Push(ModelWithIdAndName.Create(3));
Magic Number,ServiceStack.Text.Tests,InterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\InterfaceTests.cs,Can_Serialize_User_OAuthSession_map,The following statement contains a magic number: Assert.That(fromDto.ProviderOAuthAccess.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,InterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\InterfaceTests.cs,Can_Serialize_User_OAuthSession_map,The following statement contains a magic number: Assert.That(fromDto.ProviderOAuthAccess["twitter"].Items.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,InterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\InterfaceTests.cs,Can_Serialize_User_OAuthSession_map,The following statement contains a magic number: Assert.That(fromDto.ProviderOAuthAccess["facebook"].Items.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,InterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\InterfaceTests.cs,Can_Serialize_User_AuthSession_list,The following statement contains a magic number: Assert.That(fromDto.ProviderOAuthAccess.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,InterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\InterfaceTests.cs,Can_Serialize_User_AuthSession_list,The following statement contains a magic number: Assert.That(fromDto.ProviderOAuthAccess[0].Items.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,InterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\InterfaceTests.cs,Can_Serialize_User_AuthSession_list,The following statement contains a magic number: Assert.That(fromDto.ProviderOAuthAccess[1].Items.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,SerializeEmitLowerCaseUnderscoreNamesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsConfigTests.cs,CreateObject,The following statement contains a magic number: return new TestObject              {                  Id = 1'                  RootId = 100'                  DisplayName = "Test object"              };
Magic Number,ServiceStack.Text.Tests,JsConfigInitTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsConfigTests.cs,Does_not_allow_setting_JsConfig_after_Init,The following statement contains a magic number: Assert.Throws<NotSupportedException>(() => JsConfig.MaxDepth = 1000);
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Does_encode_large_strings,The following statement contains a magic number: char[] testChars = new char[32769];
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_deserialize_JsonArray,The following statement contains a magic number: var proj3Name = projects[2].Get("name");
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_parse_dynamic_json,The following statement contains a magic number: Assert.That(typeObj.Prop2' Is.EqualTo(33));
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_parse_dynamic_json,The following statement contains a magic number: Assert.That(typeObj.Prop4' Is.EqualTo(6.3d));
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_parse_dynamic_json,The following statement contains a magic number: Assert.That(o.Prop2' Is.EqualTo(33));
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_parse_dynamic_json,The following statement contains a magic number: Assert.That(o.Prop4' Is.EqualTo(6.3d));
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_deserialize_array_numbers_in_Map,The following statement contains a magic number: Assert.That(obj.GetArray<int>("roles")' Is.EqualTo(new[] { 1' 2 }));
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_deserialize_array_numbers_in_Map,The following statement contains a magic number: Assert.That(map.GetArray<int>("roles")' Is.EqualTo(new[] { 1' 2 }));
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_deserialize_array_objects_in_Map,The following statement contains a magic number: Assert.That(obj.GetArray<TestJArray>("roles")' Is.EqualTo(new[]              {                  new TestJArray { Id = 1' Name = "Role1" }'                  new TestJArray { Id = 2' Name = "Role 2" }'              }));
Magic Number,ServiceStack.Text.Tests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,Can_deserialize_array_objects_in_Map,The following statement contains a magic number: Assert.That(map.GetArray<TestJArray>("roles")' Is.EqualTo(new[]              {                  new TestJArray { Id = 1' Name = "Role1" }'                  new TestJArray { Id = 2' Name = "Role 2" }'              }));
Magic Number,ServiceStack.Text.Tests,TestJArray,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonObjectTests.cs,GetHashCode,The following statement contains a magic number: return (Id*397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Can_register_Text_License,The following statement contains a magic number: Assert.Throws<LicenseException>(() =>                  LicenseUtils.ApprovedUsage(LicenseFeature.None' LicenseFeature.Text' 1' 2' "Failed"));
Magic Number,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Can_register_Text_License,The following statement contains a magic number: Assert.Throws<LicenseException>(() =>                  LicenseUtils.ApprovedUsage(LicenseFeature.OrmLite' LicenseFeature.Text' 1' 2' "Failed"));
Magic Number,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Can_register_Text_License,The following statement contains a magic number: LicenseUtils.ApprovedUsage(LicenseFeature.Text' LicenseFeature.Text' 1' 2' "Failed");
Magic Number,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Doesnt_override_DateTime_config,The following statement contains a magic number: var fixedDate = new DateTime(2000' 01' 01);
Magic Number,ServiceStack.Text.Tests,LicensingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\LicensingTests.cs,Does_deserialize_LicenseKey,The following statement contains a magic number: var key = new LicenseKey {                  Name = "The Name"'                  Ref = "1000"'                  Type = LicenseType.Business'                  Expiry = new DateTime(2001'01'01)'                  Meta = (long)(LicenseMeta.Subscription | LicenseMeta.Cores)'              };
Magic Number,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Serialize_array_with_null_should_always_produce_Valid_JSON,The following statement contains a magic number: string json = new Object[] { 1' 2' 3' null' 5 }.ToJson();
Magic Number,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Serialize_array_with_null_should_always_produce_Valid_JSON,The following statement contains a magic number: string json = new Object[] { 1' 2' 3' null' 5 }.ToJson();
Magic Number,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Serialize_array_with_null_should_always_produce_Valid_JSON,The following statement contains a magic number: string json = new Object[] { 1' 2' 3' null' 5 }.ToJson();
Magic Number,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Can_handle_null_in_quotes_in_TopAnswers,The following statement contains a magic number: var topAnswers = new TopAnswers              {                  Items = {                      new Answer {                          tag_name = "null"'                          question_score= 0'                          question_count= 0'                          answer_score= 17'                          answer_count= 2'                          user_id= 236255                      }'                  }              };
Magic Number,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Can_handle_null_in_quotes_in_TopAnswers,The following statement contains a magic number: var topAnswers = new TopAnswers              {                  Items = {                      new Answer {                          tag_name = "null"'                          question_score= 0'                          question_count= 0'                          answer_score= 17'                          answer_count= 2'                          user_id= 236255                      }'                  }              };
Magic Number,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Can_handle_null_in_quotes_in_TopAnswers,The following statement contains a magic number: var topAnswers = new TopAnswers              {                  Items = {                      new Answer {                          tag_name = "null"'                          question_score= 0'                          question_count= 0'                          answer_score= 17'                          answer_count= 2'                          user_id= 236255                      }'                  }              };
Magic Number,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Can_handle_null_in_quotes_in_Answer,The following statement contains a magic number: var answer = new Answer              {                  tag_name = "null"'                  question_score = 0'                  question_count = 0'                  answer_score = 17'                  answer_count = 2'                  user_id = 236255              };
Magic Number,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Can_handle_null_in_quotes_in_Answer,The following statement contains a magic number: var answer = new Answer              {                  tag_name = "null"'                  question_score = 0'                  question_count = 0'                  answer_score = 17'                  answer_count = 2'                  user_id = 236255              };
Magic Number,ServiceStack.Text.Tests,NullableTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\NullableTypesTests.cs,Can_handle_null_in_quotes_in_Answer,The following statement contains a magic number: var answer = new Answer              {                  tag_name = "null"'                  question_score = 0'                  question_count = 0'                  answer_score = 17'                  answer_count = 2'                  user_id = 236255              };
Magic Number,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_serialize_query_string,The following statement contains a magic number: Assert.That(QueryStringSerializer.SerializeToString(new C { A = 1' B = 2 })'                  Is.EqualTo("A=1&B=2"));
Magic Number,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Can_serialize_query_string,The following statement contains a magic number: Assert.That(QueryStringSerializer.SerializeToString(new C { A = null' B = 2 })'                  Is.EqualTo("B=2"));
Magic Number,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Deos_serialize_QueryStrings,The following statement contains a magic number: Assert.That(QueryStringSerializer.SerializeToString(new[] { 1' 2' 3 })' Is.EqualTo(                  "[1'2'3]"));
Magic Number,ServiceStack.Text.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringSerializerTests.cs,Deos_serialize_QueryStrings,The following statement contains a magic number: Assert.That(QueryStringSerializer.SerializeToString(new[] { 1' 2' 3 })' Is.EqualTo(                  "[1'2'3]"));
Magic Number,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_Write_QueryString,The following statement contains a magic number: Movie newMovie = new Movie              {                  Id = "tt0110912"'                  Title = "Pulp Fiction"'                  Rating = 8.9m'                  Director = "Quentin Tarantino"'                  ReleaseDate = new DateTime(1994' 10' 24)'                  TagLine = "Girls like me don't make invitations like this to just anyone!"'                  Genres = new List<string> { "Crime"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_Write_QueryString,The following statement contains a magic number: Movie newMovie = new Movie              {                  Id = "tt0110912"'                  Title = "Pulp Fiction"'                  Rating = 8.9m'                  Director = "Quentin Tarantino"'                  ReleaseDate = new DateTime(1994' 10' 24)'                  TagLine = "Girls like me don't make invitations like this to just anyone!"'                  Genres = new List<string> { "Crime"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_Write_QueryString,The following statement contains a magic number: Movie newMovie = new Movie              {                  Id = "tt0110912"'                  Title = "Pulp Fiction"'                  Rating = 8.9m'                  Director = "Quentin Tarantino"'                  ReleaseDate = new DateTime(1994' 10' 24)'                  TagLine = "Girls like me don't make invitations like this to just anyone!"'                  Genres = new List<string> { "Crime"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_Write_QueryString,The following statement contains a magic number: Movie newMovie = new Movie              {                  Id = "tt0110912"'                  Title = "Pulp Fiction"'                  Rating = 8.9m'                  Director = "Quentin Tarantino"'                  ReleaseDate = new DateTime(1994' 10' 24)'                  TagLine = "Girls like me don't make invitations like this to just anyone!"'                  Genres = new List<string> { "Crime"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_write_AnonymousType_to_QueryString,The following statement contains a magic number: var anonType = new              {                  Id = "tt0110912"'                  Title = "Pulp Fiction"'                  Rating = 8.9m'                  Director = "Quentin Tarantino"'                  ReleaseDate = new DateTime(1994' 10' 24)'                  TagLine = "Girls like me don't make invitations like this to just anyone!"'                  Genres = new List<string> { "Crime"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_write_AnonymousType_to_QueryString,The following statement contains a magic number: var anonType = new              {                  Id = "tt0110912"'                  Title = "Pulp Fiction"'                  Rating = 8.9m'                  Director = "Quentin Tarantino"'                  ReleaseDate = new DateTime(1994' 10' 24)'                  TagLine = "Girls like me don't make invitations like this to just anyone!"'                  Genres = new List<string> { "Crime"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_write_AnonymousType_to_QueryString,The following statement contains a magic number: var anonType = new              {                  Id = "tt0110912"'                  Title = "Pulp Fiction"'                  Rating = 8.9m'                  Director = "Quentin Tarantino"'                  ReleaseDate = new DateTime(1994' 10' 24)'                  TagLine = "Girls like me don't make invitations like this to just anyone!"'                  Genres = new List<string> { "Crime"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.Text.Tests,QueryStringWriterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\QueryStringWriterTests.cs,Can_write_AnonymousType_to_QueryString,The following statement contains a magic number: var anonType = new              {                  Id = "tt0110912"'                  Title = "Pulp Fiction"'                  Rating = 8.9m'                  Director = "Quentin Tarantino"'                  ReleaseDate = new DateTime(1994' 10' 24)'                  TagLine = "Girls like me don't make invitations like this to just anyone!"'                  Genres = new List<string> { "Crime"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.Text.Tests,ReflectionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReflectionExtensionTests.cs,Can_get_method_from_type,The following statement contains a magic number: helloVoidBoolIntDelegate(testInstance' true' 5);
Magic Number,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Can_Serialize_Class_with_Typed_Dictionary,The following statement contains a magic number: basket.Items.Add(new Item { type = 1' color = 2 }' 10);
Magic Number,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Can_Serialize_Class_with_Typed_Dictionary,The following statement contains a magic number: basket.Items.Add(new Item { type = 1' color = 2 }' 10);
Magic Number,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Can_Serialize_Class_with_Typed_Dictionary,The following statement contains a magic number: basket.Items.Add(new Item { type = 4' color = 1 }' 20);
Magic Number,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Can_Serialize_Class_with_Typed_Dictionary,The following statement contains a magic number: basket.Items.Add(new Item { type = 4' color = 1 }' 20);
Magic Number,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Objects_Do_Not_Survive_RoundTrips_Via_StringStringDictionary_Due_To_DoubleQuoted_Properties,The following statement contains a magic number: book.Id = 1234;
Magic Number,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Objects_Do_Not_Survive_RoundTrips_Via_StringStringDictionary_Due_To_DoubleQuoted_Properties,The following statement contains a magic number: book.CategoryId = 16;
Magic Number,ServiceStack.Text.Tests,ReportedIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\ReportedIssues.cs,Deserialize_Correctly_When_Last_Item_Is_Null_in_array,The following statement contains a magic number: var arrayOfInt = new int?[2] { 1' null };
Magic Number,ServiceStack.Text.Tests,SerializationDelegatePerformanceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationDelegatePerformanceTests.cs,TypeSerializer_Deserialize_Performance_WithoutHook,The following statement contains a magic number: Assert.LessOrEqual(watch.ElapsedMilliseconds' 200);
Magic Number,ServiceStack.Text.Tests,SerializationDelegatePerformanceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationDelegatePerformanceTests.cs,TypeSerializer_Deserialize_Performance_WithHook,The following statement contains a magic number: Assert.LessOrEqual(watch.ElapsedMilliseconds' 600);
Magic Number,ServiceStack.Text.Tests,SerializationDelegatePerformanceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationDelegatePerformanceTests.cs,TypeSerializer_Serialize_Performance_WithoutHook,The following statement contains a magic number: Assert.LessOrEqual(watch.ElapsedMilliseconds' 100);
Magic Number,ServiceStack.Text.Tests,SerializationDelegatePerformanceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationDelegatePerformanceTests.cs,TypeSerializer_Serialize_Performance_WithHook,The following statement contains a magic number: Assert.LessOrEqual(watch.ElapsedMilliseconds' 100);
Magic Number,ServiceStack.Text.Tests,SerializationDelegatePerformanceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationDelegatePerformanceTests.cs,GenerateData,The following statement contains a magic number: user.AddressID = i * 32;
Magic Number,ServiceStack.Text.Tests,SerializationDelegatePerformanceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SerializationDelegatePerformanceTests.cs,GenerateData,The following statement contains a magic number: i < 5000
Magic Number,ServiceStack.Text.Tests,SpanMemoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpanMemoryTests.cs,Can_use_Memory,The following statement contains a magic number: var foo = a.Slice(0' 3).ToArray();
Magic Number,ServiceStack.Text.Tests,SpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpanTests.cs,Can_use_Span,The following statement contains a magic number: var foo = a.Slice(0'3).ToArray();
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_Type_with_ByteArray,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_Type_with_ByteArray,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_Type_with_ByteArray,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_Type_with_ByteArray,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_Type_with_ByteArray_as_Int_Array,The following statement contains a magic number: Assert.That(test.Data' Is.EquivalentTo(new byte[] { 1' 2' 3' 4' 5 }));
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_Type_with_ByteArray_as_Int_Array,The following statement contains a magic number: Assert.That(test.Data' Is.EquivalentTo(new byte[] { 1' 2' 3' 4' 5 }));
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_Type_with_ByteArray_as_Int_Array,The following statement contains a magic number: Assert.That(test.Data' Is.EquivalentTo(new byte[] { 1' 2' 3' 4' 5 }));
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_Type_with_ByteArray_as_Int_Array,The following statement contains a magic number: Assert.That(test.Data' Is.EquivalentTo(new byte[] { 1' 2' 3' 4' 5 }));
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_ByteArray,The following statement contains a magic number: var test = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_ByteArray,The following statement contains a magic number: var test = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_ByteArray,The following statement contains a magic number: var test = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_ByteArray,The following statement contains a magic number: var test = new byte[] { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.Text.Tests,SpecialTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SpecialTypesTests.cs,Can_Serialize_HashTable,The following statement contains a magic number: var h = new Hashtable { { "A"' 1 }' { "B"' 2 } };
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_read_lines,The following statement contains a magic number: Assert.That("a\nb".ReadLines().Count()' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_read_lines,The following statement contains a magic number: Assert.That("a\r\nb".ReadLines().Count()' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_SafeSubstring_with_no_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(2)' Is.EqualTo("stString"));
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_SafeSubstring_with_no_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(20)' Is.EqualTo(""));
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(0' 4)' Is.EqualTo("Test"));
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(2' 4)' Is.EqualTo("stSt"));
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(2' 4)' Is.EqualTo("stSt"));
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(20' 4)' Is.EqualTo(""));
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(20' 4)' Is.EqualTo(""));
Magic Number,ServiceStack.Text.Tests,StringExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(0' 20)' Is.EqualTo("TestString"));
Magic Number,ServiceStack.Text.Tests,StringSpanExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSegmentExtensionsTests.cs,Can_SafeSubstring_with_no_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(2).EqualTo("stString"));
Magic Number,ServiceStack.Text.Tests,StringSpanExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSegmentExtensionsTests.cs,Can_SafeSubstring_with_no_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(20).IsEmpty);
Magic Number,ServiceStack.Text.Tests,StringSpanExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSegmentExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(0' 4).EqualTo("Test"));
Magic Number,ServiceStack.Text.Tests,StringSpanExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSegmentExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(2' 4).EqualTo("stSt"));
Magic Number,ServiceStack.Text.Tests,StringSpanExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSegmentExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(2' 4).EqualTo("stSt"));
Magic Number,ServiceStack.Text.Tests,StringSpanExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSegmentExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(20' 4).IsEmpty);
Magic Number,ServiceStack.Text.Tests,StringSpanExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSegmentExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(20' 4).IsEmpty);
Magic Number,ServiceStack.Text.Tests,StringSpanExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSegmentExtensionsTests.cs,Can_SafeSubstring_with_length,The following statement contains a magic number: Assert.That(input.SafeSubstring(0' 20).EqualTo("TestString"));
Magic Number,ServiceStack.Text.Tests,StringSerializerTranslationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSerializerTranslationTests.cs,Can_convert_string_Dictionary_to_ModelWithFieldsOfDifferentTypes,The following statement contains a magic number: Assert.That(translateToModel.DateTime' Is.EqualTo(new DateTime(2008' 1' 10)));
Magic Number,ServiceStack.Text.Tests,StringSerializerTranslationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringSerializerTranslationTests.cs,Can_convert_string_Dictionary_to_ModelWithFieldsOfDifferentTypes,The following statement contains a magic number: Assert.That(translateToModel.DateTime' Is.EqualTo(new DateTime(2008' 1' 10)));
Magic Number,ServiceStack.Text.Tests,StringTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringTests.cs,Can_toJson_than_toXml,The following statement contains a magic number: var orderModel = new OrderModel              {                  OrderType = "BUY"'                  Price = 2400'                  Lot = 5              };
Magic Number,ServiceStack.Text.Tests,StringTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StringTests.cs,Can_toJson_than_toXml,The following statement contains a magic number: var orderModel = new OrderModel              {                  OrderType = "BUY"'                  Price = 2400'                  Lot = 5              };
Magic Number,ServiceStack.Text.Tests,StructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,Should_deserialize_KeyValuePair_with_int_DateTime,The following statement contains a magic number: Assert.That(b.Key' Is.EqualTo(99));
Magic Number,ServiceStack.Text.Tests,StructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,Should_deserialize_KeyValuePair_with_int_DateTime,The following statement contains a magic number: Assert.That(b.Value' Is.EqualTo(new DateTime(2011' 11' 1)));
Magic Number,ServiceStack.Text.Tests,StructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,Should_deserialize_KeyValuePair_with_int_DateTime,The following statement contains a magic number: Assert.That(b.Value' Is.EqualTo(new DateTime(2011' 11' 1)));
Magic Number,ServiceStack.Text.Tests,StructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,test_rect_different_cultures,The following statement contains a magic number: var r = new Rect(23' 34' 1024' 768);
Magic Number,ServiceStack.Text.Tests,StructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,test_rect_different_cultures,The following statement contains a magic number: var r = new Rect(23' 34' 1024' 768);
Magic Number,ServiceStack.Text.Tests,StructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,test_rect_different_cultures,The following statement contains a magic number: var r = new Rect(23' 34' 1024' 768);
Magic Number,ServiceStack.Text.Tests,StructTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,test_rect_different_cultures,The following statement contains a magic number: var r = new Rect(23' 34' 1024' 768);
Magic Number,ServiceStack.Text.Tests,DangerousText2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,Parse,The following statement contains a magic number: return 42;
Magic Number,ServiceStack.Text.Tests,Rect,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,Parse,The following statement contains a magic number: return new Rect(                  double.Parse(parts[0])'                  double.Parse(parts[1])'                  double.Parse(parts[2])'                  double.Parse(parts[3])              );
Magic Number,ServiceStack.Text.Tests,Rect,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\StructTests.cs,Parse,The following statement contains a magic number: return new Rect(                  double.Parse(parts[0])'                  double.Parse(parts[1])'                  double.Parse(parts[2])'                  double.Parse(parts[3])              );
Magic Number,ServiceStack.Text.Tests,SystemTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SystemTimeTests.cs,When_set_SystemTimeResolver_Then_should_get_correct_SystemTime_UtcNow,The following statement contains a magic number: var dateTime = new DateTime(2011' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests,SystemTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\SystemTimeTests.cs,When_set_UtcDateTimeResolver_Then_should_get_correct_SystemTime_Now,The following statement contains a magic number: var dateTime = new DateTime(2011' 1' 1' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TestBase.cs,Serialize,The following statement contains a magic number: var partialJsv = jsv.Length > 100 ? jsv.Substring(0' 100) + "..." : jsv;
Magic Number,ServiceStack.Text.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TestBase.cs,Serialize,The following statement contains a magic number: var partialJsv = jsv.Length > 100 ? jsv.Substring(0' 100) + "..." : jsv;
Magic Number,ServiceStack.Text.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TestBase.cs,Serialize,The following statement contains a magic number: var partialJson = json.Length > 100 ? json.Substring(0' 100) + "..." : json;
Magic Number,ServiceStack.Text.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TestBase.cs,Serialize,The following statement contains a magic number: var partialJson = json.Length > 100 ? json.Substring(0' 100) + "..." : json;
Magic Number,ServiceStack.Text.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TestBase.cs,Serialize,The following statement contains a magic number: var partialXml = xml.Length > 100 ? xml.Substring(0' 100) + "..." : xml;
Magic Number,ServiceStack.Text.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TestBase.cs,Serialize,The following statement contains a magic number: var partialXml = xml.Length > 100 ? xml.Substring(0' 100) + "..." : xml;
Magic Number,ServiceStack.Text.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TestBase.cs,JsonSerialize,The following statement contains a magic number: var partialJson = json.Length > 100 ? json.Substring(0' 100) + "..." : json;
Magic Number,ServiceStack.Text.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TestBase.cs,JsonSerialize,The following statement contains a magic number: var partialJson = json.Length > 100 ? json.Substring(0' 100) + "..." : json;
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: typeFields.GetPublicSetterRef("Item2")(ref oTuple' 10);
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: typeFields.GetPublicSetterRef("Item3")(ref oTuple' 20L);
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: typeFields.GetPublicSetterRef("Item4")(ref oTuple' 4.4d);
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("Item2")(oTuple)' Is.EqualTo(10));
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("Item3")(oTuple)' Is.EqualTo(20));
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("Item4")(oTuple)' Is.EqualTo(4.4));
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(tuple.i' Is.EqualTo(10));
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(tuple.l' Is.EqualTo(20));
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(tuple.d' Is.EqualTo(4.4));
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_use_getter_and_setter_on_RefTypeFields,The following statement contains a magic number: typeFields.GetPublicSetter("I")(o' 2);
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_use_getter_and_setter_on_RefTypeFields,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("I")(o)' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_use_getter_and_setter_on_ValueTypeFields,The following statement contains a magic number: typeFields.GetPublicSetter("I")(o' 2);
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_use_getter_and_setter_on_ValueTypeFields,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("I")(o)' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_use_getter_and_setter_on_ValueTypeFields_ref,The following statement contains a magic number: typeFields.GetPublicSetterRef("I")(ref o' 2);
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_use_getter_and_setter_on_ValueTypeFields_ref,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("I")(o)' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_use_getter_and_setter_on_ValueTypeGenericFields,The following statement contains a magic number: typeFields.GetPublicSetterRef("I")(ref o' 2);
Magic Number,ServiceStack.Text.Tests,TypeFieldsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypeFieldsTests.cs,Can_use_getter_and_setter_on_ValueTypeGenericFields,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("I")(o)' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: typeProperties.GetPublicSetter("I")(oTuple' 10);
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: typeProperties.GetPublicSetter("L")(oTuple' 20L);
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: typeProperties.GetPublicSetter("D")(oTuple' 4.4d);
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(typeProperties.GetPublicGetter("I")(oTuple)' Is.EqualTo(10));
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(typeProperties.GetPublicGetter("L")(oTuple)' Is.EqualTo(20));
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(typeProperties.GetPublicGetter("D")(oTuple)' Is.EqualTo(4.4));
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(tuple.I' Is.EqualTo(10));
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(tuple.L' Is.EqualTo(20));
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_cache_ValueTuple_field_accessors,The following statement contains a magic number: Assert.That(tuple.D' Is.EqualTo(4.4));
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_use_getter_and_setter_on_RefTypeProps,The following statement contains a magic number: typeFields.GetPublicSetter("I")(o' 2);
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_use_getter_and_setter_on_RefTypeProps,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("I")(o)' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_use_getter_and_setter_on_ValueTypeProps,The following statement contains a magic number: typeFields.GetPublicSetter("I")(o' 2);
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_use_getter_and_setter_on_ValueTypeProps,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("I")(o)' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_use_getter_and_setter_on_ValueTypeGenericProps,The following statement contains a magic number: typeFields.GetPublicSetter("I")(o' 2);
Magic Number,ServiceStack.Text.Tests,TypePropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\TypePropertiesTests.cs,Can_use_getter_and_setter_on_ValueTypeGenericProps,The following statement contains a magic number: Assert.That(typeFields.GetPublicGetter("I")(o)' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.DefaultIterations = 10000;
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.MultipleIterations = new [] { 1000' 10000' 100000' 1000000 };
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.MultipleIterations = new [] { 1000' 10000' 100000' 1000000 };
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.MultipleIterations = new [] { 1000' 10000' 100000' 1000000 };
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.MultipleIterations = new [] { 1000' 10000' 100000' 1000000 };
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\PerfTestBase.cs,CompareRuns,The following statement contains a magic number: Log("{0} was {1}ms or {2} times slower than {3}"'                  slowerRun' runDiffTime' Math.Round(runDiffAvg' 2)' fasterRun);
Magic Number,ServiceStack.Text.Tests.Benchmarks,ModelWithCommonTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Benchmarks\ModelWithCommonTypes.cs,Create,The following statement contains a magic number: return new ModelWithCommonTypes              {                  ByteValue = i'                  CharValue = (char)i'                  DateTimeValue = new DateTime(2000' 1' 1 + i)'                  DecimalValue = i'                  DoubleValue = i'                  FloatValue = i'                  IntValue = i'                  LongValue = i'                  SByteValue = (sbyte)i'                  ShortValue = i'                  TimeSpanValue = new TimeSpan(i)'                  UIntValue = i'                  ULongValue = i'                  UShortValue = i'                  GuidValue = Guid.NewGuid()'              };
Magic Number,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_object_data,The following statement contains a magic number: var data = new List<Dictionary<string' object>>                             {                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Like"}'                                         {"Column3Data"' "To"}'                                         {"Column4Data"' "Read"}'                                         {"Column5Data"' 123}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I am"}'                                         {"Column2Data"' "Very"}'                                         {"Column3Data"' "Cool"}'                                         {"Column4Data"' "And"}'                                         {"Column5Data"' 4}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' " Like "}'                                         {"Column3Data"' 2}'                                         {"Column4Data"' null}'                                         {"Column5Data"' null}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Don't"}'                                         {"Column3Data"' "Know'"}'                                         {"Column4Data"' "Do"}'                                         {"Column5Data"' "You?"}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Saw"}'                                         {"Column3Data"' "The"}'                                         {"Column4Data"' "Movie"}'                                         {"Column5Data"' "\"Jaws\""}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Went"}'                                         {"Column3Data"' "To"}'                                         {"Column4Data"' "Space\nCamp"}'                                         {"Column5Data"' "Last\r\nYear"}                                     }                             };
Magic Number,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_object_data,The following statement contains a magic number: var data = new List<Dictionary<string' object>>                             {                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Like"}'                                         {"Column3Data"' "To"}'                                         {"Column4Data"' "Read"}'                                         {"Column5Data"' 123}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I am"}'                                         {"Column2Data"' "Very"}'                                         {"Column3Data"' "Cool"}'                                         {"Column4Data"' "And"}'                                         {"Column5Data"' 4}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' " Like "}'                                         {"Column3Data"' 2}'                                         {"Column4Data"' null}'                                         {"Column5Data"' null}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Don't"}'                                         {"Column3Data"' "Know'"}'                                         {"Column4Data"' "Do"}'                                         {"Column5Data"' "You?"}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Saw"}'                                         {"Column3Data"' "The"}'                                         {"Column4Data"' "Movie"}'                                         {"Column5Data"' "\"Jaws\""}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Went"}'                                         {"Column3Data"' "To"}'                                         {"Column4Data"' "Space\nCamp"}'                                         {"Column5Data"' "Last\r\nYear"}                                     }                             };
Magic Number,ServiceStack.Text.Tests.CsvTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\DictionaryTests.cs,Serializes_dictionary_object_data,The following statement contains a magic number: var data = new List<Dictionary<string' object>>                             {                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Like"}'                                         {"Column3Data"' "To"}'                                         {"Column4Data"' "Read"}'                                         {"Column5Data"' 123}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I am"}'                                         {"Column2Data"' "Very"}'                                         {"Column3Data"' "Cool"}'                                         {"Column4Data"' "And"}'                                         {"Column5Data"' 4}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' " Like "}'                                         {"Column3Data"' 2}'                                         {"Column4Data"' null}'                                         {"Column5Data"' null}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Don't"}'                                         {"Column3Data"' "Know'"}'                                         {"Column4Data"' "Do"}'                                         {"Column5Data"' "You?"}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Saw"}'                                         {"Column3Data"' "The"}'                                         {"Column4Data"' "Movie"}'                                         {"Column5Data"' "\"Jaws\""}                                     }'                                 new Dictionary<string' object>                                     {                                         {"Column1Data"' "I"}'                                         {"Column2Data"' "Went"}'                                         {"Column3Data"' "To"}'                                         {"Column4Data"' "Space\nCamp"}'                                         {"Column5Data"' "Last\r\nYear"}                                     }                             };
Magic Number,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,MidnightAndNoonTestSerialization,The following statement contains a magic number: var midnight = new DateTime(2018' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,MidnightAndNoonTestSerialization,The following statement contains a magic number: var noon = midnight.AddHours(12);
Magic Number,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,GenerateSampleData,The following statement contains a magic number: return new object[] {                  new POCO                  {                      DateTime = new DateTime(2017'6'14)                  }'                  new POCO                  {                      DateTime = new DateTime(2017'1'31' 01' 23' 45)                  }               };
Magic Number,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,GenerateSampleData,The following statement contains a magic number: return new object[] {                  new POCO                  {                      DateTime = new DateTime(2017'6'14)                  }'                  new POCO                  {                      DateTime = new DateTime(2017'1'31' 01' 23' 45)                  }               };
Magic Number,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,GenerateSampleData,The following statement contains a magic number: return new object[] {                  new POCO                  {                      DateTime = new DateTime(2017'6'14)                  }'                  new POCO                  {                      DateTime = new DateTime(2017'1'31' 01' 23' 45)                  }               };
Magic Number,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,GenerateSampleData,The following statement contains a magic number: return new object[] {                  new POCO                  {                      DateTime = new DateTime(2017'6'14)                  }'                  new POCO                  {                      DateTime = new DateTime(2017'1'31' 01' 23' 45)                  }               };
Magic Number,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,GenerateSampleData,The following statement contains a magic number: return new object[] {                  new POCO                  {                      DateTime = new DateTime(2017'6'14)                  }'                  new POCO                  {                      DateTime = new DateTime(2017'1'31' 01' 23' 45)                  }               };
Magic Number,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,GenerateSampleData,The following statement contains a magic number: return new object[] {                  new POCO                  {                      DateTime = new DateTime(2017'6'14)                  }'                  new POCO                  {                      DateTime = new DateTime(2017'1'31' 01' 23' 45)                  }               };
Magic Number,ServiceStack.Text.Tests.CsvTests,ObjectSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\CsvTests\ObjectSerializerTests.cs,GenerateSampleData,The following statement contains a magic number: return new object[] {                  new POCO                  {                      DateTime = new DateTime(2017'6'14)                  }'                  new POCO                  {                      DateTime = new DateTime(2017'1'31' 01' 23' 45)                  }               };
Magic Number,ServiceStack.Text.Tests.DynamicModels,ComplexObjectGraphTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\ComplexObjectGraphTest.cs,ShouldSerializeCustomCollection,The following statement contains a magic number: var orig = new CustomCollection              {                  AddressUri = new Uri("http://www.example.com/")'                  IntValue = 123'                  SomeType = typeof(CustomCollection)              };
Magic Number,ServiceStack.Text.Tests.DynamicModels,ComplexObjectGraphTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\ComplexObjectGraphTest.cs,ShouldSerializeCustomCollectionDto,The following statement contains a magic number: var orig = new CustomCollectionDto              {                  //Only saves the Message' i.e. not InnerEx' StackTrace etc.                  Exception = new Exception("Exception Test")'                  CustomException = new CustomException("CustomException Test")'                    AddressUri = new Uri("http://www.example.com/")'                  IntValue = 123'                  SomeType = typeof(CustomCollection)'              };
Magic Number,ServiceStack.Text.Tests.DynamicModels,ComplexObjectGraphTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\ComplexObjectGraphTest.cs,ShouldSerializeObjectGraph,The following statement contains a magic number: var orig = new ObjectGraph              {                  AddressUri = new Uri("http://www.example.com/")'                  IntValue = 123'                  SomeType = typeof(CustomCollection)'                  Data = dc              };
Magic Number,ServiceStack.Text.Tests.DynamicModels,ComplexObjectGraphTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\ComplexObjectGraphTest.cs,Can_JSV_Serialize_DynamicType_and_Deserialize_into_StrictType,The following statement contains a magic number: var orig = new DynamicType              {                  Name = "Dynamic Type"'                  Type = typeof(CustomCollectionDto)'                  Value = new CustomCollectionDto                  {                      AddressUri = new Uri("http://www.example.com/")'                      IntValue = 123'                      SomeType = typeof(int)                  }              };
Magic Number,ServiceStack.Text.Tests.DynamicModels,ComplexObjectGraphTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\ComplexObjectGraphTest.cs,Can_JSON_Serialize_DynamicType_and_Deserialize_into_StrictType,The following statement contains a magic number: var orig = new DynamicType              {                  Name = "Dynamic Type"'                  Type = typeof(CustomCollectionDto)'                  Value = new CustomCollectionDto                  {                      AddressUri = new Uri("http://www.example.com/")'                      IntValue = 123'                      SomeType = typeof(int)                  }              };
Magic Number,ServiceStack.Text.Tests.DynamicModels,DynamicMessageTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\DynamicMessageTests.cs,Object_Set_To_Object_Test,The following statement contains a magic number: var original = new DynamicMessage              {                  Id = Guid.NewGuid()'                  Priority = 3'                  ReplyTo = "http://path/to/reply.svc"'                  RetryAttempts = 1'                  Type = typeof(MessageBody)'                  Body = new Object()              };
Magic Number,ServiceStack.Text.Tests.DynamicModels,DynamicMessageTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\DynamicMessageTests.cs,Can_deserialize_between_dynamic_generic_and_strict_messages,The following statement contains a magic number: var original = new DynamicMessage              {                  Id = Guid.NewGuid()'                  Priority = 3'                  ReplyTo = "http://path/to/reply.svc"'                  RetryAttempts = 1'                  Type = typeof(MessageBody)'                  Body = new MessageBody                  {                      Action = "Alphabet"'                      Arguments = { "a"' "b"' "c" }                  }              };
Magic Number,ServiceStack.Text.Tests.DynamicModels,ModelWithAllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\ModelWithAllTypes.cs,Create,The following statement contains a magic number: return new ModelWithAllTypes              {                  ByteValue = i'                  CharValue = (char)i'                  CustomException = new CustomException("CustomException " + i)'                  DateTimeValue = new DateTime(2000' 1' 1 + i)'                  DecimalValue = i'                  DoubleValue = i'                  Exception = new Exception("Exception " + i)'                  FloatValue = i'                  IntValue = i'                  LongValue = i'                  SByteValue = (sbyte)i'                  ShortValue = i'                  TimeSpanValue = new TimeSpan(i)'                  TypeValue = typeof(ModelWithAllTypes)'                  UIntValue = i'                  ULongValue = i'                  UriValue = new Uri("http://domain.com/" + i)'                  UShortValue = i'                  GuidValue = Guid.NewGuid()'              };
Magic Number,ServiceStack.Text.Tests.DynamicModels,ODataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\DynamicModels\ODataTests.cs,AssertUser,The following statement contains a magic number: Assert.That(user.Id' Is.EqualTo(111111111111111));
Magic Number,ServiceStack.Text.Tests.Issues,CircularReferenceIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Issues\CircularReferenceIssues.cs,CircularMap_does_stop_at_MaxLimit,The following statement contains a magic number: JsConfig.MaxDepth = 5;
Magic Number,ServiceStack.Text.Tests.Issues,CircularReferenceIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Issues\CircularReferenceIssues.cs,CircularMap_does_stop_at_MaxLimit,The following statement contains a magic number: Assert.That(json.CountOccurrencesOf('X')' Is.EqualTo(5));
Magic Number,ServiceStack.Text.Tests.Issues,CircularReferenceIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Issues\CircularReferenceIssues.cs,CircularDictionary_does_stop_at_MaxLimit,The following statement contains a magic number: JsConfig.MaxDepth = 5;
Magic Number,ServiceStack.Text.Tests.Issues,CircularReferenceIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Issues\CircularReferenceIssues.cs,CircularDictionary_does_stop_at_MaxLimit,The following statement contains a magic number: Assert.That(json.CountOccurrencesOf('X')' Is.EqualTo(5).Within(1));
Magic Number,ServiceStack.Text.Tests.Issues,JsConfigIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Issues\JsConfigIssues.cs,CallReset_AfterSerializingOnce_WithCustomSerializationForProperty_DoesNotPickUpFurtherConfigChangesForPropertyType,The following statement contains a magic number: var dto = new Dto { CustomFormatTypeProperty = new CustomFormatType(12345) };
Magic Number,ServiceStack.Text.Tests.JsonTests,AnonymousDeserializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\AnonymousDeserializationTests.cs,Can_deserialize_to_anonymous_type,The following statement contains a magic number: Assert.That(item.IntValue' Is.EqualTo(42));
Magic Number,ServiceStack.Text.Tests.JsonTests,Item,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\AnonymousDeserializationTests.cs,Create,The following statement contains a magic number: return new Item { IntValue = 42' StringValue = "Foo" };
Magic Number,ServiceStack.Text.Tests.JsonTests,BackingFieldTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BackingFieldTests.cs,Backed_get_set_properties_can_be_deserialised,The following statement contains a magic number: var original = new GetSetWithBacking(123344044);
Magic Number,ServiceStack.Text.Tests.JsonTests,BackingFieldTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BackingFieldTests.cs,Backed_get_properties_can_be_deserialised,The following statement contains a magic number: var original = new GetOnlyWithBacking(123344044);
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_serialize_dictionary_of_int_int,The following statement contains a magic number: var json = JsonSerializer.SerializeToString<IntIntDictionary>(new IntIntDictionary() { Dictionary = { { 10' 100 }' { 20' 200 } } });
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_serialize_dictionary_of_int_int,The following statement contains a magic number: var json = JsonSerializer.SerializeToString<IntIntDictionary>(new IntIntDictionary() { Dictionary = { { 10' 100 }' { 20' 200 } } });
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_serialize_dictionary_of_int_int,The following statement contains a magic number: var json = JsonSerializer.SerializeToString<IntIntDictionary>(new IntIntDictionary() { Dictionary = { { 10' 100 }' { 20' 200 } } });
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_serialize_dictionary_of_int_int,The following statement contains a magic number: var json = JsonSerializer.SerializeToString<IntIntDictionary>(new IntIntDictionary() { Dictionary = { { 10' 100 }' { 20' 200 } } });
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Serialize_skips_null_values_by_default,The following statement contains a magic number: var o = new NullValueTester              {                  Name = "Brandon"'                  Type = "Programmer"'                  SampleKey = 12'                  Nothing = (string)null'                  NullableDateTime = null              };
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Serialize_can_include_null_values,The following statement contains a magic number: var o = new NullValueTester              {                  Name = "Brandon"'                  Type = "Programmer"'                  SampleKey = 12'                  Nothing = null'                  NullClass = null'                  NullableDateTime = null'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Deserialize_sets_null_values,The following statement contains a magic number: Assert.That(o.SampleKey' Is.EqualTo(12));
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Deserialize_ignores_omitted_values,The following statement contains a magic number: Assert.That(o.SampleKey' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_override_name,The following statement contains a magic number: var person = new Person              {                  Id = 123'                  Name = "Abc"              };
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_parse_nonempty_string_dictionary_with_leading_whitespace,The following statement contains a magic number: Assert.That(dictionary.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_parse_nonempty_dictionary_with_leading_whitespace,The following statement contains a magic number: Assert.That(dictionary.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_parse_nonempty_dictionary_with_leading_whitespace,The following statement contains a magic number: Assert.That(dictionary[1]' Is.EqualTo(2.5));
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_parse_nonempty_dictionary_with_leading_whitespace,The following statement contains a magic number: Assert.That(dictionary[2]' Is.EqualTo(5.0));
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_parse_nonempty_dictionary_with_leading_whitespace,The following statement contains a magic number: Assert.That(dictionary[2]' Is.EqualTo(5.0));
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_parse_nonempty_hashtable_with_leading_whitespace,The following statement contains a magic number: Assert.That(hashtable.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Can_parse_nonempty_hashtable_with_leading_whitespace,The following statement contains a magic number: Assert.That(hashtable["B"].ToString()' Is.EqualTo(2.ToString()));
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Does_include_null_values_in_lists,The following statement contains a magic number: var dto = new List<DateTime?>                  {                      new DateTime(2000' 01' 01' 0' 0' 0' 0' DateTimeKind.Utc)'                      null'                      new DateTime(2000' 12' 31' 0' 0' 0' 0' DateTimeKind.Utc)'                  };
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Does_include_null_values_in_lists,The following statement contains a magic number: var dto = new List<DateTime?>                  {                      new DateTime(2000' 01' 01' 0' 0' 0' 0' DateTimeKind.Utc)'                      null'                      new DateTime(2000' 12' 31' 0' 0' 0' 0' DateTimeKind.Utc)'                  };
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Does_include_null_values_in_lists,The following statement contains a magic number: var dto = new List<DateTime?>                  {                      new DateTime(2000' 01' 01' 0' 0' 0' 0' DateTimeKind.Utc)'                      null'                      new DateTime(2000' 12' 31' 0' 0' 0' 0' DateTimeKind.Utc)'                  };
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicJsonTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Does_include_null_values_in_lists,The following statement contains a magic number: var dto = new List<DateTime?>                  {                      new DateTime(2000' 01' 01' 0' 0' 0' 0' DateTimeKind.Utc)'                      null'                      new DateTime(2000' 12' 31' 0' 0' 0' 0' DateTimeKind.Utc)'                  };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonPrimitives,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,Create,The following statement contains a magic number: return new JsonPrimitives                  {                      Int = i'                      Long = i'                      Float = i'                      Double = i'                      Boolean = i % 2 == 0'                      DateTime = DateTimeExtensions.FromUnixTimeMs(1)'                  };
Magic Number,ServiceStack.Text.Tests.JsonTests,NullValueTester,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicJsonTests.cs,NullValueTester,The following statement contains a magic number: NullableDateTime = new DateTime(2012' 01' 01);
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicPropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicPropertiesTests.cs,Complex_dictionaries_round_trip,The following statement contains a magic number: var original = new SeveralTypesOfDictionary              {                  GuidToInt = new Dictionary<Guid' int>                  {                      {Guid.Empty' 10}'                      {Guid.NewGuid()' 25}                  }'                  DateTimeTo_DictStrStr = new Dictionary<DateTime' Dictionary<string' string>> {                      {DateTime.Today' new Dictionary<string' string> {{"a"'"b"}'{"c"'"d"}}}'                      {DateTime.Now' new Dictionary<string' string> {{"a"'"b"}'{"c"'"d"}}}                  }              };
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicPropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicPropertiesTests.cs,Complex_dictionaries_round_trip,The following statement contains a magic number: var original = new SeveralTypesOfDictionary              {                  GuidToInt = new Dictionary<Guid' int>                  {                      {Guid.Empty' 10}'                      {Guid.NewGuid()' 25}                  }'                  DateTimeTo_DictStrStr = new Dictionary<DateTime' Dictionary<string' string>> {                      {DateTime.Today' new Dictionary<string' string> {{"a"'"b"}'{"c"'"d"}}}'                      {DateTime.Now' new Dictionary<string' string> {{"a"'"b"}'{"c"'"d"}}}                  }              };
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicPropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicPropertiesTests.cs,Complex_dictionaries_round_trip,The following statement contains a magic number: Assert.That(copy_a.GuidToInt[Guid.Empty]' Is.EqualTo(10)' "First copy was incorrect");
Magic Number,ServiceStack.Text.Tests.JsonTests,BasicPropertiesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\BasicPropertiesTests.cs,Complex_dictionaries_round_trip,The following statement contains a magic number: Assert.That(copy_b.GuidToInt[Guid.Empty]' Is.EqualTo(10)' "Second copy was incorrect");
Magic Number,ServiceStack.Text.Tests.JsonTests,CamelCaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CamelCaseTests.cs,Does_serialize_To_CamelCase,The following statement contains a magic number: var dto = new Movie              {                  Id = 1'                  ImdbId = "tt0111161"'                  Title = "The Shawshank Redemption"'                  Rating = 9.2m'                  Director = "Frank Darabont"'                  ReleaseDate = new DateTime(1995' 2' 17' 0' 0' 0' DateTimeKind.Utc)'                  TagLine = "Fear can hold you prisoner. Hope can set you free."'                  Genres = new List<string> { "Crime"' "Drama" }'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,CamelCaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CamelCaseTests.cs,Does_serialize_To_CamelCase,The following statement contains a magic number: var dto = new Movie              {                  Id = 1'                  ImdbId = "tt0111161"'                  Title = "The Shawshank Redemption"'                  Rating = 9.2m'                  Director = "Frank Darabont"'                  ReleaseDate = new DateTime(1995' 2' 17' 0' 0' 0' DateTimeKind.Utc)'                  TagLine = "Fear can hold you prisoner. Hope can set you free."'                  Genres = new List<string> { "Crime"' "Drama" }'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,CamelCaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CamelCaseTests.cs,Does_serialize_To_CamelCase,The following statement contains a magic number: var dto = new Movie              {                  Id = 1'                  ImdbId = "tt0111161"'                  Title = "The Shawshank Redemption"'                  Rating = 9.2m'                  Director = "Frank Darabont"'                  ReleaseDate = new DateTime(1995' 2' 17' 0' 0' 0' DateTimeKind.Utc)'                  TagLine = "Fear can hold you prisoner. Hope can set you free."'                  Genres = new List<string> { "Crime"' "Drama" }'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,CamelCaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CamelCaseTests.cs,Does_serialize_To_CamelCase,The following statement contains a magic number: var dto = new Movie              {                  Id = 1'                  ImdbId = "tt0111161"'                  Title = "The Shawshank Redemption"'                  Rating = 9.2m'                  Director = "Frank Darabont"'                  ReleaseDate = new DateTime(1995' 2' 17' 0' 0' 0' DateTimeKind.Utc)'                  TagLine = "Fear can hold you prisoner. Hope can set you free."'                  Genres = new List<string> { "Crime"' "Drama" }'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,CamelCaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CamelCaseTests.cs,Can_override_name,The following statement contains a magic number: var person = new Person              {                  Id = 123'                  Name = "Abc"              };
Magic Number,ServiceStack.Text.Tests.JsonTests,ConditionalSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ConditionalSerializationTests.cs,TestSerializeRespectedWithInheritance,The following statement contains a magic number: var obj = new SuperFoo { X = "abc"' Z = "def"' A =123' C = 456 };
Magic Number,ServiceStack.Text.Tests.JsonTests,ConditionalSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ConditionalSerializationTests.cs,TestSerializeRespectedWithInheritance,The following statement contains a magic number: var obj = new SuperFoo { X = "abc"' Z = "def"' A =123' C = 456 };
Magic Number,ServiceStack.Text.Tests.JsonTests,ConditionalSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ConditionalSerializationTests.cs,TestSerializeHasAttributeNull,The following statement contains a magic number: var obj = new ByNameFoo { A = 123' B = 456 };
Magic Number,ServiceStack.Text.Tests.JsonTests,ConditionalSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ConditionalSerializationTests.cs,TestSerializeHasAttributeNull,The following statement contains a magic number: var obj = new ByNameFoo { A = 123' B = 456 };
Magic Number,ServiceStack.Text.Tests.JsonTests,ConditionalSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ConditionalSerializationTests.cs,TestSerializeHasAttributeSet,The following statement contains a magic number: var obj = new ByNameFoo { A = 123' B = 456' hasAttribute = new HashSet<string> { "A" } };
Magic Number,ServiceStack.Text.Tests.JsonTests,ConditionalSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ConditionalSerializationTests.cs,TestSerializeHasAttributeSet,The following statement contains a magic number: var obj = new ByNameFoo { A = 123' B = 456' hasAttribute = new HashSet<string> { "A" } };
Magic Number,ServiceStack.Text.Tests.JsonTests,ConditionalSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ConditionalSerializationTests.cs,TestSerializeHasAttributeSetNullValue,The following statement contains a magic number: var obj = new ByNameFoo { A = 123' B = null' hasAttribute = new HashSet<string> { "B" } };
Magic Number,ServiceStack.Text.Tests.JsonTests,ContractByInterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ContractByInterfaceTests.cs,Should_be_able_to_deserialise_based_on_an_interface_with_no_concrete,The following statement contains a magic number: var json = new Concrete("boo"' 42).ToJson();
Magic Number,ServiceStack.Text.Tests.JsonTests,ContractByInterfaceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ContractByInterfaceTests.cs,Should_be_able_to_deserialise_based_on_an_interface_with_no_concrete,The following statement contains a magic number: Assert.That(result.ChildProp.IntValue' Is.EqualTo(42));
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_TypeProperties_WithCustomFunction,The following statement contains a magic number: var test = new RealType { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_TypeProperties_WithCustomFunction,The following statement contains a magic number: var test = new RealType { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_TypeProperties_WithCustomFunction,The following statement contains a magic number: var test = new RealType { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_TypeProperties_WithCustomFunction,The following statement contains a magic number: var test = new RealType { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_bytes_as_Hex,The following statement contains a magic number: JsConfig<byte[]>.DeSerializeFn = hex =>              {                  hex = hex.Replace("-"' "");                  return Enumerable.Range(0' hex.Length)                      .Where(x => x % 2 == 0)                      .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                      .ToArray();              };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_bytes_as_Hex,The following statement contains a magic number: JsConfig<byte[]>.DeSerializeFn = hex =>              {                  hex = hex.Replace("-"' "");                  return Enumerable.Range(0' hex.Length)                      .Where(x => x % 2 == 0)                      .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                      .ToArray();              };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_bytes_as_Hex,The following statement contains a magic number: JsConfig<byte[]>.DeSerializeFn = hex =>              {                  hex = hex.Replace("-"' "");                  return Enumerable.Range(0' hex.Length)                      .Where(x => x % 2 == 0)                      .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                      .ToArray();              };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_bytes_as_Hex,The following statement contains a magic number: var dto = new RealType              {                  Name = "Red"'                  Data = new byte[] { 255' 0' 0 }              };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_AnonymousTypeProperties_WithCustomFunction,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_AnonymousTypeProperties_WithCustomFunction,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_AnonymousTypeProperties_WithCustomFunction,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_Serialize_AnonymousTypeProperties_WithCustomFunction,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Reset_ShouldClear_JsConfigT_CachedFunctions,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Reset_ShouldClear_JsConfigT_CachedFunctions,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Reset_ShouldClear_JsConfigT_CachedFunctions,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Reset_ShouldClear_JsConfigT_CachedFunctions,The following statement contains a magic number: var test = new { Name = "Test"' Data = new byte[] { 1' 2' 3' 4' 5 } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_serialize_custom_DateTime,The following statement contains a magic number: var dto = new Response { DateTime = new DateTime(2001' 1' 1' 1' 1' 1) };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_serialize_custom_DateTime2,The following statement contains a magic number: var dateTime = new DateTime(2015' 08' 12' 12' 12' 12' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_serialize_custom_DateTime2,The following statement contains a magic number: var dateTime = new DateTime(2015' 08' 12' 12' 12' 12' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_serialize_custom_DateTime2,The following statement contains a magic number: var dateTime = new DateTime(2015' 08' 12' 12' 12' 12' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_serialize_custom_DateTime2,The following statement contains a magic number: var dateTime = new DateTime(2015' 08' 12' 12' 12' 12' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_serialize_custom_DateTime2,The following statement contains a magic number: var dateTime = new DateTime(2015' 08' 12' 12' 12' 12' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomRawSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomRawSerializerTests.cs,Can_serialize_custom_DateTime2,The following statement contains a magic number: var dateTime = new DateTime(2015' 08' 12' 12' 12' 12' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_serialize_Entity,The following statement contains a magic number: var originalEntity = new EntityWithValues { id = 5' Values = new Dictionary<string' string> { { "dog"' "bark" }' { "cat"' "meow" } } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_serialize_arrays_of_entities,The following statement contains a magic number: var originalEntities = new[] { new EntityWithValues { id = 5' Values = new Dictionary<string' string> { { "dog"' "bark" } } }' new EntityWithValues { id = 6' Values = new Dictionary<string' string> { { "cat"' "meow" } } } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_serialize_arrays_of_entities,The following statement contains a magic number: var originalEntities = new[] { new EntityWithValues { id = 5' Values = new Dictionary<string' string> { { "dog"' "bark" } } }' new EntityWithValues { id = 6' Values = new Dictionary<string' string> { { "cat"' "meow" } } } };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomSerailizerValueTypeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_customize_JSON_decimal,The following statement contains a magic number: var dto = new ModelDecimal { Decimal = 1.33m };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomSerailizerValueTypeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_deserialize_using_CustomFormat,The following statement contains a magic number: var test = new DcStatus { Voltage = 10' Current = 1.2 };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomSerailizerValueTypeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_deserialize_using_CustomFormat,The following statement contains a magic number: var test = new DcStatus { Voltage = 10' Current = 1.2 };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomSerailizerValueTypeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_deserialize_using_CustomFormat,The following statement contains a magic number: var test2 = new DcStatusRawFn { Voltage = 10' Current = 1.2 };
Magic Number,ServiceStack.Text.Tests.JsonTests,CustomSerailizerValueTypeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\CustomSerializerTests.cs,Can_deserialize_using_CustomFormat,The following statement contains a magic number: var test2 = new DcStatusRawFn { Voltage = 10' Current = 1.2 };
Magic Number,ServiceStack.Text.Tests.JsonTests,DictionaryDeserializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\DictionaryDeserializationTests.cs,CanDeserializeDictionaryOfComplexTypes,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["ChildDict"] = new Dictionary<string' object> {{"age"' 12}' {"name"' "mike"}}'                  ["ChildIntList"] = new List<int> {1' 2' 3}'                  ["ChildStringList"] = new List<string> {"a"' "b"' "c"}'                  ["ChildObjectList"] = new List<object> {1' "cat"' new Dictionary<string' object> {{"s"' "s"}' {"n"' 1}}}              };
Magic Number,ServiceStack.Text.Tests.JsonTests,DictionaryDeserializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\DictionaryDeserializationTests.cs,CanDeserializeDictionaryOfComplexTypes,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["ChildDict"] = new Dictionary<string' object> {{"age"' 12}' {"name"' "mike"}}'                  ["ChildIntList"] = new List<int> {1' 2' 3}'                  ["ChildStringList"] = new List<string> {"a"' "b"' "c"}'                  ["ChildObjectList"] = new List<object> {1' "cat"' new Dictionary<string' object> {{"s"' "s"}' {"n"' 1}}}              };
Magic Number,ServiceStack.Text.Tests.JsonTests,DictionaryDeserializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\DictionaryDeserializationTests.cs,CanDeserializeDictionaryOfComplexTypes,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["ChildDict"] = new Dictionary<string' object> {{"age"' 12}' {"name"' "mike"}}'                  ["ChildIntList"] = new List<int> {1' 2' 3}'                  ["ChildStringList"] = new List<string> {"a"' "b"' "c"}'                  ["ChildObjectList"] = new List<object> {1' "cat"' new Dictionary<string' object> {{"s"' "s"}' {"n"' 1}}}              };
Magic Number,ServiceStack.Text.Tests.JsonTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\DictionaryTests.cs,Can_Serialize_list,The following statement contains a magic number: var model = new List<EdgeCaseProperties>                 {                  EdgeCaseProperties.Create(1)'                  EdgeCaseProperties.Create(2)                 };
Magic Number,ServiceStack.Text.Tests.JsonTests,DictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\DictionaryTests.cs,Can_Serialize_map,The following statement contains a magic number: var model = new Dictionary<string' EdgeCaseProperties>                 {                  {"A"' EdgeCaseProperties.Create(1)}'                  {"B"' EdgeCaseProperties.Create(2)}'                 };
Magic Number,ServiceStack.Text.Tests.JsonTests,EscapedCharsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\EscapedCharsTests.cs,Can_deserialize_inner_whitespace,The following statement contains a magic number: Assert.That(fromJson.Inner.Length' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,ModelWithList,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\EscapedCharsTests.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (StringList != null ? StringList.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests.JsonTests,IDictionarySerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\IDictionarySerializationTests.cs,CanSerializeHashtable,The following statement contains a magic number: hash[2.0m] = 2.0m;
Magic Number,ServiceStack.Text.Tests.JsonTests,IDictionarySerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\IDictionarySerializationTests.cs,CanSerializeHashtable,The following statement contains a magic number: hash[2.0m] = 2.0m;
Magic Number,ServiceStack.Text.Tests.JsonTests,InheritAbstractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\InheritAbstractTests.cs,Can_serialize_class_with_list_that_classes_inherited_from_non_abstract_class,The following statement contains a magic number: var child = new MovieChild { ImdbId = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972' 3' 24)' TagLine = "An offer you can't refuse."' Genres = new List<string> { "Crime"' "Drama"' "Thriller" }' };
Magic Number,ServiceStack.Text.Tests.JsonTests,InheritAbstractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\InheritAbstractTests.cs,Can_serialize_class_with_list_that_classes_inherited_from_non_abstract_class,The following statement contains a magic number: var child = new MovieChild { ImdbId = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972' 3' 24)' TagLine = "An offer you can't refuse."' Genres = new List<string> { "Crime"' "Drama"' "Thriller" }' };
Magic Number,ServiceStack.Text.Tests.JsonTests,InheritAbstractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\InheritAbstractTests.cs,Can_serialize_class_with_list_that_classes_inherited_from_non_abstract_class,The following statement contains a magic number: var child = new MovieChild { ImdbId = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972' 3' 24)' TagLine = "An offer you can't refuse."' Genres = new List<string> { "Crime"' "Drama"' "Thriller" }' };
Magic Number,ServiceStack.Text.Tests.JsonTests,InheritAbstractTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\InheritAbstractTests.cs,Can_serialize_class_with_list_that_classes_inherited_from_non_abstract_class,The following statement contains a magic number: var child = new MovieChild { ImdbId = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972' 3' 24)' TagLine = "An offer you can't refuse."' Genres = new List<string> { "Crime"' "Drama"' "Thriller" }' };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonArrayObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonArrayObjectTests.cs,Can_serialize_int_array,The following statement contains a magic number: var array = new[] { 1' 2 };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonArrayObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonArrayObjectTests.cs,Can_parse_array_with_whitespaces,The following statement contains a magic number: Assert.That(arrayObjs.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonArrayObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonArrayObjectTests.cs,Can_parse_array_with_whitespaces,The following statement contains a magic number: Assert.That(arrayObjs.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonArrayObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonArrayObjectTests.cs,Can_parse_array_with_whitespaces,The following statement contains a magic number: Assert.That(arrayObjs.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_TimestampOffset_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_TimestampOffset_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_TimestampOffset_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_TimestampOffset_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_TimestampOffset_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_local,The following statement contains a magic number: var ticks = 785635200000 - offsetSpan.TotalMilliseconds;
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_unspecified,The following statement contains a magic number: var dateTime1 = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_unspecified,The following statement contains a magic number: var dateTime1 = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_unspecified,The following statement contains a magic number: var dateTime1 = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_timestampOffset_unspecified,The following statement contains a magic number: var ticks = 785635200000 - offsetSpan.TotalMilliseconds;
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_timestampOffset_withoutOffset_asUtc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_timestampOffset_withoutOffset_asUtc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_timestampOffset_withoutOffset_asUtc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_timestampOffset_withOffset_as_Local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_timestampOffset_withOffset_as_Local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_timestampOffset_withOffset_as_Local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_timestampOffset_withZeroOffset_as_Local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_timestampOffset_withZeroOffset_as_Local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_timestampOffset_withZeroOffset_as_Local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_dcjsCompatible_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_dcjsCompatible_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_dcjsCompatible_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_dcjsCompatible_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_dcjsCompatible_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_dcjsCompatible_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_dcjsCompatible_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_dcjsCompatible_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_dcjsCompatible_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_dcjsCompatible_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_dcjsCompatible_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_dcjsCompatible_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_dcjsCompatible_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_dcjsCompatible_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_dcjsCompatible_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_dcjsCompatible_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_dcjsCompatible_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_dcjsCompatible_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_ISO8601_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_ISO8601_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_ISO8601_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_ISO8601_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_ISO8601_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ISO8601_assumeUtc_serialize_datetime_is_the_same,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ISO8601_assumeUtc_serialize_datetime_is_the_same,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ISO8601_assumeUtc_serialize_datetime_is_the_same,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ISO8601_assumeUtc_serialize_datetime_is_the_same,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ISO8601_assumeUtc_serialize_datetime_is_the_same,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_iso8601_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_alwaysUseUtc_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_alwaysUseUtc_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_alwaysUseUtc_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_alwaysUseUtc_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_alwaysUseUtc_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_alwaysUseUtc_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_skipDateTimeConversion_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_skipDateTimeConversion_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_skipDateTimeConversion_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_skipDateTimeConversion_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_skipDateTimeConversion_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withZOffset_asUtc_skipDateTimeConversion_true,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: var testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 1' 0' 0' 1' DateTimeKind.Utc)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Local).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Local).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Local).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Local).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Unspecified).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Unspecified).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Unspecified).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_with_skipDateTimeConversion_true,The following statement contains a magic number: testObject = new Utils.DateTimeISO8601Tests.TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Unspecified).AddMilliseconds(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withoutOffset_as_Unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withoutOffset_as_Unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withoutOffset_as_Unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withoutOffset_as_Unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withoutOffset_as_Unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withoutOffset_as_Unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withOffset_asLocal,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withOffset_asLocal,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withOffset_asLocal,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withOffset_asLocal,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withOffset_asLocal,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_iso8601_withOffset_asLocal,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_utc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_utc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_utc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_utc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_utc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_utc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_specified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_specified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_specified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_specified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_specified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_specified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_datetimeoffset_iso8601_specified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withZOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withZOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withZOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withZOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withZOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withZOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withoutOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withoutOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withoutOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withoutOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withoutOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withoutOffset_asUtc,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withOffset_asSpecified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withOffset_asSpecified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withOffset_asSpecified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withOffset_asSpecified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withOffset_asSpecified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withOffset_asSpecified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_datetimeoffset_iso8601_withOffset_asSpecified,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-7));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_rfc1123_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_rfc1123_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_rfc1123_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_rfc1123_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,When_using_rfc1123_and_serializing_as_Utc_It_should_deserialize_as_Utc,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_utc,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_json_date_rfc1123_unspecified,The following statement contains a magic number: var dateTime = new DateTime(1994' 11' 24' 12' 34' 56' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc).ToLocalTime();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc).ToLocalTime();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc).ToLocalTime();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc).ToLocalTime();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc).ToLocalTime();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_local,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc).ToLocalTime();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_always_utc,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_always_utc,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_always_utc,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_always_utc,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_always_utc,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_deserialize_json_date_rfc1123_always_utc,The following statement contains a magic number: var dateTime = new DateTime(2013' 11' 12' 14' 32' 07' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_TimestampOffset_deserialize_ISO8601,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1997' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_TimestampOffset_deserialize_ISO8601,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1997' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_TimestampOffset_deserialize_ISO8601,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1997' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_TimestampOffset_deserialize_ISO8601,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1997' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_TimestampOffset_deserialize_ISO8601,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1997' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_TimestampOffset_deserialize_ISO8601,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1997' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_TimestampOffset_deserialize_ISO8601,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1997' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_ISO8601_deserialize_DCJSCompatible,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_ISO8601_deserialize_DCJSCompatible,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_ISO8601_deserialize_DCJSCompatible,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_ISO8601_deserialize_DCJSCompatible,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_ISO8601_deserialize_DCJSCompatible,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_ISO8601_deserialize_DCJSCompatible,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Can_serialize_ISO8601_deserialize_DCJSCompatible,The following statement contains a magic number: var dateTimeOffset = new DateTimeOffset(1994' 11' 24' 12' 34' 56' TimeSpan.FromHours(-10));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Test1,The following statement contains a magic number: var date = TimeZoneInfo.ConvertTime(new DateTime(2013' 3' 17' 0' 0' 0' DateTimeKind.Utc)' tz);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Test1,The following statement contains a magic number: var date = TimeZoneInfo.ConvertTime(new DateTime(2013' 3' 17' 0' 0' 0' DateTimeKind.Utc)' tz);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Test1,The following statement contains a magic number: var date = TimeZoneInfo.ConvertTime(new DateTime(2013' 3' 17' 0' 0' 0' DateTimeKind.Utc)' tz);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,ToUnixTimeTests,The following statement contains a magic number: var dates = new[]                  {                      DateTime.Now'                      DateTime.UtcNow'                      new DateTime(1979' 5' 9)'                      new DateTime(1972' 3' 24' 0' 0' 0' DateTimeKind.Local)'                      new DateTime(1972' 4' 24)'                      new DateTime(1979' 5' 9' 0' 0' 1)'                      new DateTime(1979' 5' 9' 0' 0' 0' 1)'                      new DateTime(2010' 10' 20' 10' 10' 10' 1)'                      new DateTime(2010' 11' 22' 11' 11' 11' 1)'                      new DateTime(1970' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(1991' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(2001' 1' 1' 1' 1' 1' DateTimeKind.Unspecified)'                      new DateTime(622119282055250000)                  }.ToList();
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_UTC_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_UTC_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_UTC_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_UTC_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_UTC_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_Local_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_Local_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_Local_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_Local_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_deserialize_Local_dates_as_UTC,The following statement contains a magic number: var initialDate = new DateTime(2012' 7' 25' 16' 17' 00' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_parse_unspecified_date_with_7sec_fraction_as_UTC,The following statement contains a magic number: Assert.That(dateTime.Hour' Is.EqualTo(14));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_parse_unspecified_date_with_7sec_fraction_as_UTC,The following statement contains a magic number: Assert.That(dateTime.Minute' Is.EqualTo(30));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_parse_unspecified_date_with_7sec_fraction_as_UTC,The following statement contains a magic number: Assert.That(dateTime.Second' Is.EqualTo(23));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDateTimeTests.cs,Does_parse_unspecified_date_with_7sec_fraction_as_UTC,The following statement contains a magic number: Assert.That(dateTime.Millisecond' Is.EqualTo(123));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDecimalTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDecimalTests.cs,Does_parse_float_exp_notation_into_decimal,The following statement contains a magic number: Assert.That(response.Bids[0][1]' Is.EqualTo(0.00000767m));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonDecimalTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonDecimalTests.cs,Does_parse_float_exp_notation_into_decimal,The following statement contains a magic number: Assert.That(response.Bids[1][0]' Is.EqualTo(0.01985141m));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_custom_JsonObject_payload,The following statement contains a magic number: Assert.That(payload.Heading' Is.EqualTo(1.1));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_custom_object_payload,The following statement contains a magic number: Assert.That(payload.Heading' Is.EqualTo(1.1));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_unknown_ObjectDictionary,The following statement contains a magic number: Assert.That("{\"Properties\":{\"a\":[1'2]}}".FromJson<HasObjectDictionary>().Properties["a"]' Is.EquivalentTo(new[]{1'2}));
Magic Number,ServiceStack.Text.Tests.JsonTests,JsonObjectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\JsonObjectTests.cs,Can_deserialize_unknown_ObjectList,The following statement contains a magic number: Assert.That("{\"Properties\":[[1'2]]}".FromJson<HasObjectList>().Properties[0]' Is.EquivalentTo(new[]{1'2}));
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Does_serialize_To_lowercase_underscore,The following statement contains a magic number: var dto = new Movie              {                  Id = 1'                  ImdbId = "tt0111161"'                  Title = "The Shawshank Redemption"'                  Rating = 9.2m'                  Director = "Frank Darabont"'                  ReleaseDate = new DateTime(1995' 2' 17' 0' 0' 0' DateTimeKind.Utc)'                  TagLine = "Fear can hold you prisoner. Hope can set you free."'                  Genres = new List<string> { "Crime"' "Drama" }'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Does_serialize_To_lowercase_underscore,The following statement contains a magic number: var dto = new Movie              {                  Id = 1'                  ImdbId = "tt0111161"'                  Title = "The Shawshank Redemption"'                  Rating = 9.2m'                  Director = "Frank Darabont"'                  ReleaseDate = new DateTime(1995' 2' 17' 0' 0' 0' DateTimeKind.Utc)'                  TagLine = "Fear can hold you prisoner. Hope can set you free."'                  Genres = new List<string> { "Crime"' "Drama" }'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Does_serialize_To_lowercase_underscore,The following statement contains a magic number: var dto = new Movie              {                  Id = 1'                  ImdbId = "tt0111161"'                  Title = "The Shawshank Redemption"'                  Rating = 9.2m'                  Director = "Frank Darabont"'                  ReleaseDate = new DateTime(1995' 2' 17' 0' 0' 0' DateTimeKind.Utc)'                  TagLine = "Fear can hold you prisoner. Hope can set you free."'                  Genres = new List<string> { "Crime"' "Drama" }'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Does_serialize_To_lowercase_underscore,The following statement contains a magic number: var dto = new Movie              {                  Id = 1'                  ImdbId = "tt0111161"'                  Title = "The Shawshank Redemption"'                  Rating = 9.2m'                  Director = "Frank Darabont"'                  ReleaseDate = new DateTime(1995' 2' 17' 0' 0' 0' DateTimeKind.Utc)'                  TagLine = "Fear can hold you prisoner. Hope can set you free."'                  Genres = new List<string> { "Crime"' "Drama" }'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Can_override_name,The following statement contains a magic number: var person = new Person              {                  Id = 123'                  Name = "Abc"'                  LastName = "Xyz"              };
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Can_override_name_and_deserialize_with_lenient_scope,The following statement contains a magic number: var person = new Person              {                  Id = 123'                  Name = "Abc"'                  LastName = "Xyz"'                  BirthDay = new DateTime(2000'1'2'12'0'0)'                  CurrentAge = 19              };
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Can_override_name_and_deserialize_with_lenient_scope,The following statement contains a magic number: var person = new Person              {                  Id = 123'                  Name = "Abc"'                  LastName = "Xyz"'                  BirthDay = new DateTime(2000'1'2'12'0'0)'                  CurrentAge = 19              };
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Can_override_name_and_deserialize_with_lenient_scope,The following statement contains a magic number: var person = new Person              {                  Id = 123'                  Name = "Abc"'                  LastName = "Xyz"'                  BirthDay = new DateTime(2000'1'2'12'0'0)'                  CurrentAge = 19              };
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Can_override_name_and_deserialize_with_lenient_scope,The following statement contains a magic number: var person = new Person              {                  Id = 123'                  Name = "Abc"'                  LastName = "Xyz"'                  BirthDay = new DateTime(2000'1'2'12'0'0)'                  CurrentAge = 19              };
Magic Number,ServiceStack.Text.Tests.JsonTests,LowercaseUnderscoreTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\LowercaseUnderscoreTests.cs,Can_override_name_and_deserialize_with_lenient_scope,The following statement contains a magic number: var person = new Person              {                  Id = 123'                  Name = "Abc"'                  LastName = "Xyz"'                  BirthDay = new DateTime(2000'1'2'12'0'0)'                  CurrentAge = 19              };
Magic Number,ServiceStack.Text.Tests.JsonTests,ModelWithAllTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ModelWithAllTypesTests.cs,Can_Serialize_list,The following statement contains a magic number: var model = new List<ModelWithAllTypes>              {                  ModelWithAllTypes.Create(1)'                  ModelWithAllTypes.Create(2)              };
Magic Number,ServiceStack.Text.Tests.JsonTests,ModelWithAllTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\ModelWithAllTypesTests.cs,Can_Serialize_map,The following statement contains a magic number: var model = new Dictionary<string' ModelWithAllTypes>              {                  {"A"' ModelWithAllTypes.Create(1)}'                  {"B"' ModelWithAllTypes.Create(2)}'              };
Magic Number,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Can_deserialise_polymorphic_list,The following statement contains a magic number: Assert.That(list.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Can_deserialise_polymorphic_list_with_nonabstract_base,The following statement contains a magic number: Assert.That(list.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Serialize_Polymorphic_collection,The following statement contains a magic number: var dto = new PolymorphicContainer              {                  items = new List<PolymorphicBase>                  {                      new PolymorphicA { id = 1' fieldA = "testingA" }'                      new PolymorphicB { id = 2' fieldB = "testingB" }'                  }              };
Magic Number,ServiceStack.Text.Tests.JsonTests,PolymorphicListTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PolymorphicListTests.cs,Serialize_Polymorphic_collection,The following statement contains a magic number: Assert.That(fromJson.items.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.JsonTests,PropertyConventionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PropertyConventionTests.cs,Does_require_exact_match_by_default,The following statement contains a magic number: Assert.That(actual.TotalCount' Is.EqualTo(45));
Magic Number,ServiceStack.Text.Tests.JsonTests,PropertyConventionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PropertyConventionTests.cs,Does_deserialize_from_inexact_source_when_lenient_convention_is_used,The following statement contains a magic number: Assert.That(actual.TotalCount' Is.EqualTo(45));
Magic Number,ServiceStack.Text.Tests.JsonTests,PropertyConventionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsonTests\PropertyConventionTests.cs,Can_deserialize_hyphens,The following statement contains a magic number: Assert.That(dto.PageLength' Is.EqualTo(200));
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithFloatTypes,The following statement contains a magic number: var dto = new ModelWithFloatTypes              {                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithFloatTypes,The following statement contains a magic number: var dto = new ModelWithFloatTypes              {                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithFloatTypes,The following statement contains a magic number: var dto = new ModelWithFloatTypes              {                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithFloatTypes,The following statement contains a magic number: dto = new ModelWithFloatTypes              {                  Float = 111111.1f'                  Double = 2222222.22d'                  Decimal = 33333333.333m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithFloatTypes,The following statement contains a magic number: dto = new ModelWithFloatTypes              {                  Float = 111111.1f'                  Double = 2222222.22d'                  Decimal = 33333333.333m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithFloatTypes,The following statement contains a magic number: dto = new ModelWithFloatTypes              {                  Float = 111111.1f'                  Double = 2222222.22d'                  Decimal = 33333333.333m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithNullableFloatTypes,The following statement contains a magic number: var dto = new ModelWithNullableFloatTypes              {                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithNullableFloatTypes,The following statement contains a magic number: var dto = new ModelWithNullableFloatTypes              {                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithNullableFloatTypes,The following statement contains a magic number: var dto = new ModelWithNullableFloatTypes              {                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithNullableFloatTypes,The following statement contains a magic number: dto = new ModelWithNullableFloatTypes              {                  Float = 111111.1f'                  Double = 2222222.22d'                  Decimal = 33333333.333m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithNullableFloatTypes,The following statement contains a magic number: dto = new ModelWithNullableFloatTypes              {                  Float = 111111.1f'                  Double = 2222222.22d'                  Decimal = 33333333.333m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithNullableFloatTypes,The following statement contains a magic number: dto = new ModelWithNullableFloatTypes              {                  Float = 111111.1f'                  Double = 2222222.22d'                  Decimal = 33333333.333m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithFloatTypes_From_String,The following statement contains a magic number: var dto = new ModelWithFloatTypes              {                  Float = 1111.1f'                  Double = 2222.2d'                  Decimal = 3333.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithFloatTypes_From_String,The following statement contains a magic number: var dto = new ModelWithFloatTypes              {                  Float = 1111.1f'                  Double = 2222.2d'                  Decimal = 3333.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithFloatTypes_From_String,The following statement contains a magic number: var dto = new ModelWithFloatTypes              {                  Float = 1111.1f'                  Double = 2222.2d'                  Decimal = 3333.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithNullableFloatTypes_From_String,The following statement contains a magic number: var dto = new ModelWithNullableFloatTypes              {                  Float = 1111.1f'                  Double = 2222.2d'                  Decimal = 3333.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithNullableFloatTypes_From_String,The following statement contains a magic number: var dto = new ModelWithNullableFloatTypes              {                  Float = 1111.1f'                  Double = 2222.2d'                  Decimal = 3333.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,JsvBasicDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\JsvBasicDataTests.cs,Can_serialize_ModelWithNullableFloatTypes_From_String,The following statement contains a magic number: var dto = new ModelWithNullableFloatTypes              {                  Float = 1111.1f'                  Double = 2222.2d'                  Decimal = 3333.3m              };
Magic Number,ServiceStack.Text.Tests.JsvTests,TypeSerializerToStringDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\TypeSerializerToStringDictionaryTests.cs,Can_serialize_ModelWithFieldsOfDifferentTypes_to_StringDictionary,The following statement contains a magic number: var model = new ModelWithFieldsOfDifferentTypes              {                  Id = 1'                  Name = "Name1"'                  LongId = 1000'                  Guid = new Guid("{7da74353-a40c-468e-93aa-7ff51f4f0e84}")'                  Bool = false'                  DateTime = new DateTime(2010' 12' 20)'                  Double = 2.11d'              };
Magic Number,ServiceStack.Text.Tests.JsvTests,TypeSerializerToStringDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\TypeSerializerToStringDictionaryTests.cs,Can_serialize_ModelWithFieldsOfDifferentTypes_to_StringDictionary,The following statement contains a magic number: var model = new ModelWithFieldsOfDifferentTypes              {                  Id = 1'                  Name = "Name1"'                  LongId = 1000'                  Guid = new Guid("{7da74353-a40c-468e-93aa-7ff51f4f0e84}")'                  Bool = false'                  DateTime = new DateTime(2010' 12' 20)'                  Double = 2.11d'              };
Magic Number,ServiceStack.Text.Tests.JsvTests,TypeSerializerToStringDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\TypeSerializerToStringDictionaryTests.cs,Can_serialize_ModelWithFieldsOfDifferentTypes_to_StringDictionary,The following statement contains a magic number: var model = new ModelWithFieldsOfDifferentTypes              {                  Id = 1'                  Name = "Name1"'                  LongId = 1000'                  Guid = new Guid("{7da74353-a40c-468e-93aa-7ff51f4f0e84}")'                  Bool = false'                  DateTime = new DateTime(2010' 12' 20)'                  Double = 2.11d'              };
Magic Number,ServiceStack.Text.Tests.JsvTests,TypeSerializerToStringDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\TypeSerializerToStringDictionaryTests.cs,Can_serialize_ModelWithFieldsOfDifferentTypes_to_StringDictionary,The following statement contains a magic number: var model = new ModelWithFieldsOfDifferentTypes              {                  Id = 1'                  Name = "Name1"'                  LongId = 1000'                  Guid = new Guid("{7da74353-a40c-468e-93aa-7ff51f4f0e84}")'                  Bool = false'                  DateTime = new DateTime(2010' 12' 20)'                  Double = 2.11d'              };
Magic Number,ServiceStack.Text.Tests.JsvTests,TypeSerializerToStringDictionaryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\JsvTests\TypeSerializerToStringDictionaryTests.cs,Can_serialize_ModelWithFieldsOfDifferentTypes_to_StringDictionary,The following statement contains a magic number: var model = new ModelWithFieldsOfDifferentTypes              {                  Id = 1'                  Name = "Name1"'                  LongId = 1000'                  Guid = new Guid("{7da74353-a40c-468e-93aa-7ff51f4f0e84}")'                  Bool = false'                  DateTime = new DateTime(2010' 12' 20)'                  Double = 2.11d'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelFactoryBase.cs,CreateList,The following statement contains a magic number: return new List<T>              {                  CreateInstance(1)'                  CreateInstance(2)'                  CreateInstance(3)'                  CreateInstance(4)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelFactoryBase.cs,CreateList,The following statement contains a magic number: return new List<T>              {                  CreateInstance(1)'                  CreateInstance(2)'                  CreateInstance(3)'                  CreateInstance(4)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelFactoryBase.cs,CreateList,The following statement contains a magic number: return new List<T>              {                  CreateInstance(1)'                  CreateInstance(2)'                  CreateInstance(3)'                  CreateInstance(4)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelFactoryBase.cs,CreateList2,The following statement contains a magic number: return new List<T>              {                  CreateInstance(5)'                  CreateInstance(6)'                  CreateInstance(7)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelFactoryBase.cs,CreateList2,The following statement contains a magic number: return new List<T>              {                  CreateInstance(5)'                  CreateInstance(6)'                  CreateInstance(7)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelFactoryBase.cs,CreateList2,The following statement contains a magic number: return new List<T>              {                  CreateInstance(5)'                  CreateInstance(6)'                  CreateInstance(7)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = System.DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = System.Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = System.DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = System.Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = System.DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = System.Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,AssertIsEqual,The following statement contains a magic number: Assert.That(actual.Double' Is.EqualTo(expected.Double).Within(0.1));
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,AssertIsEqual,The following statement contains a magic number: Assert.That(actual.NFloat.Value' Is.EqualTo(expected.NFloat.Value).Within(0.1));
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,AssertIsEqual,The following statement contains a magic number: Assert.That(actual.NDouble.Value' Is.EqualTo(expected.NDouble.Value).Within(0.1));
Magic Number,ServiceStack.Common.Tests.Models,ModelWithIdAndName,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithIdAndName.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Title != null ? Title.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Rating.GetHashCode();
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Director != null ? Director.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ReleaseDate.GetHashCode();
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (TagLine != null ? TagLine.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Genres != null ? Genres.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,SampleOrderLine,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\SampleOrderLine.cs,Create,The following statement contains a magic number: return new SampleOrderLine              {                  Id = CreateUrn(userId' orderId' orderLineId)'                  CreatedDate = DateTime.Now'                  OrderId = orderId'                  OrderLineId = orderLineId'                  AlbumName = "AlbumName"'                  CashMixValueIncVat = 0.79m / 1.15m'                  TransactionValueExVat = 0.79m'                  ContentUrn = "urn:content:" + Guid.NewGuid().ToString("N")'              };
Magic Number,ServiceStack.Common.Tests.Models,SampleOrderLine,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\SampleOrderLine.cs,Create,The following statement contains a magic number: return new SampleOrderLine              {                  Id = CreateUrn(userId' orderId' orderLineId)'                  CreatedDate = DateTime.Now'                  OrderId = orderId'                  OrderLineId = orderLineId'                  AlbumName = "AlbumName"'                  CashMixValueIncVat = 0.79m / 1.15m'                  TransactionValueExVat = 0.79m'                  ContentUrn = "urn:content:" + Guid.NewGuid().ToString("N")'              };
Magic Number,ServiceStack.Common.Tests.Models,SampleOrderLine,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\SampleOrderLine.cs,Create,The following statement contains a magic number: return new SampleOrderLine              {                  Id = CreateUrn(userId' orderId' orderLineId)'                  CreatedDate = DateTime.Now'                  OrderId = orderId'                  OrderLineId = orderLineId'                  AlbumName = "AlbumName"'                  CashMixValueIncVat = 0.79m / 1.15m'                  TransactionValueExVat = 0.79m'                  ContentUrn = "urn:content:" + Guid.NewGuid().ToString("N")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: var hex = ((i % 240) + 16).ToString("X");
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: var hex = ((i % 240) + 16).ToString("X");
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Text.Tests.Shared,ModelWithFloatTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFloatTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Double.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Shared,ModelWithFloatTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFloatTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Decimal.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Shared,ModelWithNullableFloatTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFloatTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Double.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Shared,ModelWithNullableFloatTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithFloatTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Decimal.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Shared,ModelWithIntegerTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithIntegerTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Short.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Shared,ModelWithIntegerTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithIntegerTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Int;
Magic Number,ServiceStack.Text.Tests.Shared,ModelWithIntegerTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Shared\ModelWithIntegerTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Long.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Support,BenchmarkTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\BenchmarkTests.cs,Test_string_parsing,The following statement contains a magic number: const int stringSampleSize = 1024 * 10;
Magic Number,ServiceStack.Text.Tests.Support,BenchmarkTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\BenchmarkTests.cs,Test_string_parsing,The following statement contains a magic number: const int stringSampleSize = 1024 * 10;
Magic Number,ServiceStack.Text.Tests.Support,BenchmarkTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\BenchmarkTests.cs,CreateRandomString,The following statement contains a magic number: randString[i] = (char)((i % 10) + '0');
Magic Number,ServiceStack.Text.Tests.Support,BenchmarkTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\BenchmarkTests.cs,MeasureIndexOfEscapeChars,The following statement contains a magic number: var value = CreateRandomString(100);
Magic Number,ServiceStack.Text.Tests.Support,BenchmarkTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\BenchmarkTests.cs,Test_for_list_enumeration,The following statement contains a magic number: List<Cat> list = 20.Times(x => new Cat { Name = "Cat" });
Magic Number,ServiceStack.Text.Tests.Support,BenchmarkTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\BenchmarkTests.cs,Test_for_Ilist_enumeration,The following statement contains a magic number: IList<Cat> list = 20.Times(x => new Cat { Name = "Cat" });
Magic Number,ServiceStack.Text.Tests.Support,GetContentStatsResponse,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\DdnDtos.cs,GetContentStatsResponse,The following statement contains a magic number: this.Version = 100;
Magic Number,ServiceStack.Text.Tests.Support,MoviesResponse,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\MovieDtos.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (Movies != null ? Movies.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests.Support,MoviesResponse2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\MovieDtos.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (Movies != null ? Movies.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Tests.Support,NumberTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\NumberTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ Float.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Support,NumberTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\NumberTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ Double.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Support,NumberTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\NumberTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ Decimal.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Support,Point,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\Point.cs,GetHashCode,The following statement contains a magic number: return (Latitude.GetHashCode() * 397) ^ Longitude.GetHashCode();
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_int32,The following statement contains a magic number: Assert.That("234".AsSpan().ParseInt32()' Is.EqualTo(234));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_int32,The following statement contains a magic number: Assert.That("    234  ".AsSpan().ParseInt32()' Is.EqualTo(234));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_int32,The following statement contains a magic number: Assert.That("234  ".AsSpan().ParseInt32()' Is.EqualTo(234));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_int32,The following statement contains a magic number: Assert.That("   234".AsSpan().ParseInt32()' Is.EqualTo(234));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_int32,The following statement contains a magic number: Assert.That("   -234    ".AsSpan().ParseInt32()' Is.EqualTo(-234));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_invalid_int32,The following statement contains a magic number: Assert.Throws((Type)data[3]' () => ((string) data[0]).AsSpan().ParseInt32());
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The following statement contains a magic number: yield return new object[] { 1000.ToString("C0")' NumberStyles.Integer' null' typeof(FormatException) };
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The following statement contains a magic number: yield return new object[] { 1000.ToString("N0")' NumberStyles.Integer' null' typeof(FormatException) };
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Parse_Invalid_TestData,The following statement contains a magic number: yield return new object[] { 678.90.ToString("F2")' NumberStyles.Integer' null' typeof(FormatException) };
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("1234.5678".AsSpan().ParseDecimal()' Is.EqualTo(1234.5678m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("1234".AsSpan().ParseDecimal()' Is.EqualTo(1234m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That(".1".AsSpan().ParseDecimal()' Is.EqualTo(.1m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("-.1".AsSpan().ParseDecimal()' Is.EqualTo(-.1m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("10.001".AsSpan().ParseDecimal()' Is.EqualTo(10.001m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("  10.001".AsSpan().ParseDecimal()' Is.EqualTo(10.001m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("10.001  ".AsSpan().ParseDecimal()' Is.EqualTo(10.001m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That(" 10.001  ".AsSpan().ParseDecimal()' Is.EqualTo(10.001m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("-10.001".AsSpan().ParseDecimal()' Is.EqualTo(-10.001m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("12345678901234567890".AsSpan().ParseDecimal()' Is.EqualTo(12345678901234567890m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("12345678901234567890.12".AsSpan().ParseDecimal()' Is.EqualTo(12345678901234567890.12m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("7.67e-6".AsSpan().ParseDecimal()' Is.EqualTo(7.67e-6f));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("10.001E3".AsSpan().ParseDecimal()' Is.EqualTo(10001m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That(".001e5".AsSpan().ParseDecimal()' Is.EqualTo(100m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("10.001E-2".AsSpan().ParseDecimal()' Is.EqualTo(0.10001m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("10.001e-8".AsSpan().ParseDecimal()' Is.EqualTo(0.00000010001m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("2.e2".AsSpan().ParseDecimal()' Is.EqualTo(200m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_decimal,The following statement contains a magic number: Assert.That("1'234.5678".AsSpan().ParseDecimal(true)' Is.EqualTo(1234.5678m));
Magic Number,ServiceStack.Text.Tests.Support,StringSpanParseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\StringSegmentParse.cs,Can_parse_guid,The following statement contains a magic number: Assert.That(((string)data[0]).AsSpan().ParseGuid()' Is.EqualTo(data[2]));
Magic Number,ServiceStack.Text.Tests.UseCases,StripeSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\StripeSerializationTests.cs,Serializes_Customer,The following statement contains a magic number: var dto = new CreateStripeCustomer              {                  Card = new StripeCard                  {                      Name = "Name"'                      Number = "4242424242424242"'                      Cvc = "123"'                      ExpMonth = 1'                      ExpYear = 2'                      AddressLine1 = "1 Address"'                      AddressLine2 = "2 Address"'                      AddressCountry = "Country"'                      AddressState = "State"'                      AddressZip = "12345"'                  }'                  Coupon = "Coupon"'                  Plan = "Plan"'                  AccountBalance = 10'                  Description = "Description"'                  Email = "Email"'                  Quantity = 1'                  TrialEnd = new DateTime(2014' 1' 1)'                  Metadata = new Dictionary<string' string> { { "order_id"' "1234" } }'              };
Magic Number,ServiceStack.Text.Tests.UseCases,StripeSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\StripeSerializationTests.cs,Serializes_Customer,The following statement contains a magic number: var dto = new CreateStripeCustomer              {                  Card = new StripeCard                  {                      Name = "Name"'                      Number = "4242424242424242"'                      Cvc = "123"'                      ExpMonth = 1'                      ExpYear = 2'                      AddressLine1 = "1 Address"'                      AddressLine2 = "2 Address"'                      AddressCountry = "Country"'                      AddressState = "State"'                      AddressZip = "12345"'                  }'                  Coupon = "Coupon"'                  Plan = "Plan"'                  AccountBalance = 10'                  Description = "Description"'                  Email = "Email"'                  Quantity = 1'                  TrialEnd = new DateTime(2014' 1' 1)'                  Metadata = new Dictionary<string' string> { { "order_id"' "1234" } }'              };
Magic Number,ServiceStack.Text.Tests.UseCases,StripeSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\StripeSerializationTests.cs,Serializes_Customer,The following statement contains a magic number: var dto = new CreateStripeCustomer              {                  Card = new StripeCard                  {                      Name = "Name"'                      Number = "4242424242424242"'                      Cvc = "123"'                      ExpMonth = 1'                      ExpYear = 2'                      AddressLine1 = "1 Address"'                      AddressLine2 = "2 Address"'                      AddressCountry = "Country"'                      AddressState = "State"'                      AddressZip = "12345"'                  }'                  Coupon = "Coupon"'                  Plan = "Plan"'                  AccountBalance = 10'                  Description = "Description"'                  Email = "Email"'                  Quantity = 1'                  TrialEnd = new DateTime(2014' 1' 1)'                  Metadata = new Dictionary<string' string> { { "order_id"' "1234" } }'              };
Magic Number,ServiceStack.Text.Tests.UseCases,StripeSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\StripeSerializationTests.cs,Serializes_Customer_Metadata,The following statement contains a magic number: var dto = new CreateStripeCustomer              {                  AccountBalance = 100'                  Metadata = new Dictionary<string' string>                  {                      { "order_id"' "1234" }'                      { "ref_id"' "456" }'                  }'              };
Magic Number,ServiceStack.Text.Tests.UseCases,StripeSerializationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\StripeSerializationTests.cs,Can_serialize_ComplexTypes,The following statement contains a magic number: var dto = new CreateStripeAccount              {                  Country = "Country"'                  Email = "the@email.com"'                  LegalEntity = new StripeLegalEntity                  {                      Dob = new StripeDate                      {                          Day = 1'                          Month = 1'                          Year = 1970'                      }                  }'                  TosAcceptance = new StripeTosAcceptance                  {                      Date = DateTime.UtcNow'                      Ip = "127.0.0.1"'                      UserAgent = "USER AGENT"'                  }              };
Magic Number,ServiceStack.Text.Tests.UseCases,TypedAccessors_API_Examples,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\TypedAccessors_API_Examples.cs,Can_use_TypedFields_ValueType_Accessor,The following statement contains a magic number: typeFields.GetPublicSetterRef("Item2")(ref oTuple' 2);
Magic Number,ServiceStack.Text.Tests.UseCases,TypedAccessors_API_Examples,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\TypedAccessors_API_Examples.cs,Can_use_TypedFields_ValueType_Accessor,The following statement contains a magic number: Assert.That(tuple.i' Is.EqualTo(2));
Magic Number,ServiceStack.Text.Tests.UseCases,TypedAccessors_API_Examples,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\TypedAccessors_API_Examples.cs,Can_use_TypedFields_ValueType_Accessor,The following statement contains a magic number: item2Accessor.PublicSetterRef(ref oTuple' 3);
Magic Number,ServiceStack.Text.Tests.UseCases,TypedAccessors_API_Examples,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\TypedAccessors_API_Examples.cs,Can_use_TypedFields_ValueType_Accessor,The following statement contains a magic number: Assert.That(item2Accessor.PublicGetter(oTuple)' Is.EqualTo(3));
Magic Number,ServiceStack.Stripe,StripeGateway,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\UseCases\StripeGateway.cs,StripeGateway,The following statement contains a magic number: Timeout = TimeSpan.FromSeconds(60);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(1979' 5' 9));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(1979' 5' 9));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(1979' 5' 9));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(1979' 5' 9' 0' 0' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(1979' 5' 9' 0' 0' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(1979' 5' 9' 0' 0' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(1979' 5' 9' 0' 0' 0' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(1979' 5' 9' 0' 0' 0' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(1979' 5' 9' 0' 0' 0' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 10' 20' 10' 10' 10' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 10' 20' 10' 10' 10' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 10' 20' 10' 10' 10' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 10' 20' 10' 10' 10' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 10' 20' 10' 10' 10' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 10' 20' 10' 10' 10' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 11' 22' 11' 11' 11' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 11' 22' 11' 11' 11' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 11' 22' 11' 11' 11' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 11' 22' 11' 11' 11' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 11' 22' 11' 11' 11' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintDate,The following statement contains a magic number: PrintFormats(new DateTime(2010' 11' 22' 11' 11' 11' 1));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintTimeSpan,The following statement contains a magic number: PrintFormats(new TimeSpan(1' 2' 3));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintTimeSpan,The following statement contains a magic number: PrintFormats(new TimeSpan(1' 2' 3));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintTimeSpan,The following statement contains a magic number: PrintFormats(new TimeSpan(1' 2' 3' 4));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintTimeSpan,The following statement contains a magic number: PrintFormats(new TimeSpan(1' 2' 3' 4));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,PrintTimeSpan,The following statement contains a magic number: PrintFormats(new TimeSpan(1' 2' 3' 4));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ToShortestXsdDateTimeString_works,The following statement contains a magic number: var shortDate = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ToShortestXsdDateTimeString_works,The following statement contains a magic number: var shortDate = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ToShortestXsdDateTimeString_works,The following statement contains a magic number: var shortDate = new DateTime(1979' 5' 9);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ToShortestXsdDateTimeString_works,The following statement contains a magic number: var shortDateTime = new DateTime(1979' 5' 9' 0' 0' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ToShortestXsdDateTimeString_works,The following statement contains a magic number: var shortDateTime = new DateTime(1979' 5' 9' 0' 0' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ToShortestXsdDateTimeString_works,The following statement contains a magic number: var shortDateTime = new DateTime(1979' 5' 9' 0' 0' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ToShortestXsdDateTimeString_works,The following statement contains a magic number: var longDateTime = new DateTime(1979' 5' 9' 0' 0' 0' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ToShortestXsdDateTimeString_works,The following statement contains a magic number: var longDateTime = new DateTime(1979' 5' 9' 0' 0' 0' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ToShortestXsdDateTimeString_works,The following statement contains a magic number: var longDateTime = new DateTime(1979' 5' 9' 0' 0' 0' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,CanDeserializeDateTimeOffsetWithTimeSpanIsZero,The following statement contains a magic number: var expectedValue = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,CanDeserializeDateTimeOffsetWithTimeSpanIsZero,The following statement contains a magic number: var expectedValue = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,CanDeserializeDateTimeOffsetWithTimeSpanIsZero,The following statement contains a magic number: var expectedValue = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,CanDeserializeDateTimeOffsetWithTimeSpanIsZero,The following statement contains a magic number: var expectedValue = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,CanDeserializeDateTimeOffsetWithTimeSpanIsZero,The following statement contains a magic number: var expectedValue = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,CanDeserializeDateTimeOffsetWithTimeSpanIsZero,The following statement contains a magic number: var expectedValue = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,CanDeserializeDateTimeOffsetWithTimeSpanIsZero,The following statement contains a magic number: var expectedValue = new DateTimeOffset(2012' 6' 27' 11' 26' 04' 524' TimeSpan.Zero);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseShortestXsdDateTime_works,The following statement contains a magic number: Assert.That(shortDate' Is.EqualTo(new DateTime(2011' 8' 4))' "Month and day without leading 0");
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseShortestXsdDateTime_works,The following statement contains a magic number: Assert.That(shortDate' Is.EqualTo(new DateTime(2011' 8' 4))' "Month and day without leading 0");
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseShortestXsdDateTime_works,The following statement contains a magic number: Assert.That(shortDate' Is.EqualTo(new DateTime(2011' 8' 4))' "Month and day without leading 0");
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseShortestXsdDateTime_works,The following statement contains a magic number: Assert.That(shortDate' Is.EqualTo(new DateTime(2011' 8' 5))' "Month without leading 0");
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseShortestXsdDateTime_works,The following statement contains a magic number: Assert.That(shortDate' Is.EqualTo(new DateTime(2011' 8' 5))' "Month without leading 0");
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseShortestXsdDateTime_works,The following statement contains a magic number: Assert.That(shortDate' Is.EqualTo(new DateTime(2011' 8' 5))' "Month without leading 0");
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseShortestXsdDateTime_works,The following statement contains a magic number: Assert.That(shortDate' Is.EqualTo(new DateTime(2011' 9' 4))' "Day without leading 0");
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseShortestXsdDateTime_works,The following statement contains a magic number: Assert.That(shortDate' Is.EqualTo(new DateTime(2011' 9' 4))' "Day without leading 0");
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseShortestXsdDateTime_works,The following statement contains a magic number: Assert.That(shortDate' Is.EqualTo(new DateTime(2011' 9' 4))' "Day without leading 0");
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseRFC1123DateTime_works,The following statement contains a magic number: Assert.That(rfc1123Date' Is.EqualTo(new DateTime(2013' 11' 12' 14' 32' 07)));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseRFC1123DateTime_works,The following statement contains a magic number: Assert.That(rfc1123Date' Is.EqualTo(new DateTime(2013' 11' 12' 14' 32' 07)));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseRFC1123DateTime_works,The following statement contains a magic number: Assert.That(rfc1123Date' Is.EqualTo(new DateTime(2013' 11' 12' 14' 32' 07)));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseRFC1123DateTime_works,The following statement contains a magic number: Assert.That(rfc1123Date' Is.EqualTo(new DateTime(2013' 11' 12' 14' 32' 07)));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseRFC1123DateTime_works,The following statement contains a magic number: Assert.That(rfc1123Date' Is.EqualTo(new DateTime(2013' 11' 12' 14' 32' 07)));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,ParseRFC1123DateTime_works,The following statement contains a magic number: Assert.That(rfc1123Date' Is.EqualTo(new DateTime(2013' 11' 12' 14' 32' 07)));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUtc = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUtc = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUtc = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUtc = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUtc = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsLocal = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsLocal = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsLocal = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsLocal = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsLocal = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Local);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUnspecified = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUnspecified = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUnspecified = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUnspecified = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeWithoutMilliseconds_should_always_be_deserialized_correctly_by_TypeSerializer,The following statement contains a magic number: var dateWithoutMillisecondsUnspecified = new DateTime(2013' 4' 9' 15' 20' 0' DateTimeKind.Unspecified);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,UtcDateTime_Is_Deserialized_As_Kind_Utc,The following statement contains a magic number: var utcNow = new DateTime(2012' 1' 8' 12' 17' 1' 538' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,UtcDateTime_Is_Deserialized_As_Kind_Utc,The following statement contains a magic number: var utcNow = new DateTime(2012' 1' 8' 12' 17' 1' 538' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,UtcDateTime_Is_Deserialized_As_Kind_Utc,The following statement contains a magic number: var utcNow = new DateTime(2012' 1' 8' 12' 17' 1' 538' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,UtcDateTime_Is_Deserialized_As_Kind_Utc,The following statement contains a magic number: var utcNow = new DateTime(2012' 1' 8' 12' 17' 1' 538' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,UtcDateTime_Is_Deserialized_As_Kind_Utc,The following statement contains a magic number: var utcNow = new DateTime(2012' 1' 8' 12' 17' 1' 538' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The following statement contains a magic number: var testObject = new TestObject              {                  Date = new DateTime(2013' 1' 1' 0' 0' 1' DateTimeKind.Utc)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The following statement contains a magic number: testObject = new TestObject              {                  Date = new DateTime(2013' 1' 1' 0' 0' 0' DateTimeKind.Utc)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateLocal = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Local).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateLocal = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Local).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateLocal = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Local).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateLocal = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Local).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateLocal = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Local).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateLocal = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Local).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUtc = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Utc).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUtc = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Utc).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUtc = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Utc).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUtc = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Utc).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUtc = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Utc).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUtc = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Utc).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUnspecificed = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Unspecified).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUnspecificed = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Unspecified).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUnspecificed = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Unspecified).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUnspecificed = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Unspecified).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUnspecificed = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Unspecified).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,SkipDateTimeConversion_IgnoresTimezoneOffsets,The following statement contains a magic number: var targetDateUnspecificed = new DateTime(2016' 01' 10' 12' 12' 12' DateTimeKind.Unspecified).AddMilliseconds(2);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The following statement contains a magic number: var testObject = new TestObject              {                  Date = new DateTime(2013' 1' 1' 0' 0' 1' DateTimeKind.Utc)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The following statement contains a magic number: testObject = new TestObject              {                  Date = new DateTime(2013' 1' 1' 0' 0' 0' DateTimeKind.Utc)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The following statement contains a magic number: testObject = new TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Local)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The following statement contains a magic number: testObject = new TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Local)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The following statement contains a magic number: testObject = new TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Local)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The following statement contains a magic number: testObject = new TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Unspecified)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The following statement contains a magic number: testObject = new TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Unspecified)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTimeKind_Does_Not_Change_With_SkipDateTimeConversion_true,The following statement contains a magic number: testObject = new TestObject              {                  Date = new DateTime(2013' 1' 2' 0' 2' 0' DateTimeKind.Unspecified)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Does_parse_as_UTC,The following statement contains a magic number: Assert.That(dateTime.Hour' Is.EqualTo(14));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Does_parse_as_UTC,The following statement contains a magic number: Assert.That(dateTime.Minute' Is.EqualTo(30));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Does_parse_as_UTC,The following statement contains a magic number: Assert.That(dateTime.Second' Is.EqualTo(23));
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeISO8601Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_serialize_nullable_DateTime,The following statement contains a magic number: var date = new DateTime(2013' 1' 1' 0' 0' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeRFC1123Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The following statement contains a magic number: var testObject = new TestObject              {                  Date = new DateTime(2013' 1' 1' 0' 0' 1' DateTimeKind.Utc)              };
Magic Number,ServiceStack.Text.Tests.Utils,DateTimeRFC1123Tests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,DateTime_Is_Serialized_As_Utc_and_Deserialized_as_local,The following statement contains a magic number: testObject = new TestObject              {                  Date = new DateTime(2013' 1' 1' 0' 0' 0' DateTimeKind.Utc)              };
Magic Number,ServiceStack.Text.Tests.Utils,DefaultDateTimeests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_handle_condensed_date_format,The following statement contains a magic number: Assert.That(date' Is.EqualTo(new DateTime(2000' 12' 13)));
Magic Number,ServiceStack.Text.Tests.Utils,DefaultDateTimeests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_handle_condensed_date_format,The following statement contains a magic number: Assert.That(date' Is.EqualTo(new DateTime(2000' 12' 13)));
Magic Number,ServiceStack.Text.Tests.Utils,DefaultDateTimeests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_handle_condensed_date_format,The following statement contains a magic number: Assert.That(date' Is.EqualTo(new DateTime(2000' 12' 13)));
Magic Number,ServiceStack.Text.Tests.Utils,DefaultDateTimeests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_handle_invalid_format_Exceptions,The following statement contains a magic number: Assert.That(date' Is.EqualTo(new DateTime(2000' 12' 13)));
Magic Number,ServiceStack.Text.Tests.Utils,DefaultDateTimeests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_handle_invalid_format_Exceptions,The following statement contains a magic number: Assert.That(date' Is.EqualTo(new DateTime(2000' 12' 13)));
Magic Number,ServiceStack.Text.Tests.Utils,DefaultDateTimeests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_handle_invalid_format_Exceptions,The following statement contains a magic number: Assert.That(date' Is.EqualTo(new DateTime(2000' 12' 13)));
Magic Number,ServiceStack.Text.Tests.Utils,TimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_Parse_XSD_Times,The following statement contains a magic number: Assert.That("P365D".FromJson<TimeSpan>()' Is.EqualTo(TimeSpan.FromDays(365)));
Magic Number,ServiceStack.Text.Tests.Utils,TimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_Parse_TimeSpan_Strings,The following statement contains a magic number: Assert.That("365.00:00:00".FromJson<TimeSpan>()' Is.EqualTo(TimeSpan.FromDays(365)));
Magic Number,ServiceStack.Text.Tests.Utils,TimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_Parse_TimeSpan_NSTimeSpan,The following statement contains a magic number: Assert.That("31536000".FromJson<TimeSpan>()' Is.EqualTo(TimeSpan.FromDays(365)));
Magic Number,ServiceStack.Text.Tests.Utils,TimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Can_Parse_TimeSpan_NSTimeSpan_DifferentCulture,The following statement contains a magic number: Assert.That("31536000".FromJson<TimeSpan>()' Is.EqualTo(TimeSpan.FromDays(365)));
Magic Number,ServiceStack.Text.Tests.Utils,TimeSpanTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Does_not_lose_precision,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 1; i <= 999; i++)                  {                      TimeSpan timeSpan = new TimeSpan(0' 0' 0' 0' i);                      string json = JsonSerializer.SerializeToString(timeSpan);                      TimeSpan timeSpanAfter = JsonSerializer.DeserializeFromString<TimeSpan>(json);                      Assert.AreEqual(TimeSpan.FromMilliseconds(i)' timeSpanAfter);                  }              });
Magic Number,ServiceStack.Text.Tests.Utils,UnixTimeScopeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\DateTimeSerializerTests.cs,Does_serialize_to_UnixTime_when_scoped,The following statement contains a magic number: var dto = new TestObject { Date = new DateTime(2001' 01' 01' 0' 0' 0' DateTimeKind.Utc) };
Magic Number,ServiceStack.Text.Tests.Utils,TestModel,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\JsvFormatterTests.cs,TestModel,The following statement contains a magic number: this.IntList = new List<int> { 1' 2' 3 };
Magic Number,ServiceStack.Text.Tests.Utils,TestModel,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\JsvFormatterTests.cs,TestModel,The following statement contains a magic number: this.IntList = new List<int> { 1' 2' 3 };
Magic Number,ServiceStack.Text.Tests.Utils,TestModel,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\JsvFormatterTests.cs,TestModel,The following statement contains a magic number: this.StringIntMap = new Dictionary<string' int>                      {                          {"a"' 1}'{"b"' 2}'{"c"' 3}'                      };
Magic Number,ServiceStack.Text.Tests.Utils,TestModel,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Utils\JsvFormatterTests.cs,TestModel,The following statement contains a magic number: this.StringIntMap = new Dictionary<string' int>                      {                          {"a"' 1}'{"b"' 2}'{"c"' 3}'                      };
Missing Default,ServiceStack.Text.Tests.Support,RuntimeType<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\tests\ServiceStack.Text.Tests\Support\BenchmarkTests.cs,TestTypeCode,The following switch statement is missing a default case: switch (underlyingType.GetTypeCode())                  {                      case TypeCode.SByte:                      case TypeCode.Byte:                      case TypeCode.Int16:                      case TypeCode.UInt16:                      case TypeCode.Int32:                      case TypeCode.UInt32:                      case TypeCode.Int64:                      case TypeCode.UInt64:                      case TypeCode.Single:                      case TypeCode.Double:                      case TypeCode.Decimal:                      case TypeCode.DateTime:                          return true;                  }
