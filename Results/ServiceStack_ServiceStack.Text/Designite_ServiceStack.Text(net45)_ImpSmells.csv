Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The method has 212 lines of code.
Long Method,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,CreateScope,The method has 182 lines of code.
Long Method,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,TryConvertCollections,The method has 214 lines of code.
Long Method,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetMimeType,The method has 189 lines of code.
Long Method,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetMimeType,The method has 189 lines of code.
Long Method,ServiceStack.Text.Common,DeserializeTypeRefJson,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJson.cs,StringToType,The method has 134 lines of code.
Long Method,ServiceStack.Text.Common,DeserializeTypeRefJsv,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJsv.cs,StringToType,The method has 113 lines of code.
Long Method,ServiceStack.Text.Common,WriteType<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,Init,The method has 123 lines of code.
Long Method,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The method has 111 lines of code.
Complex Method,ServiceStack.Text,CsvReader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\CsvReader.cs,ParseLines,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Text,CsvReader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\CsvReader.cs,EatValue,Cyclomatic complexity of the method is 24
Complex Method,ServiceStack.Text,CsvReader<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\CsvReader.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Text,CsvSerializer<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\CsvSerializer.cs,GetWriteFn,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Text,CsvSerializer<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\CsvSerializer.cs,GetReadFn,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Text,CsvWriter<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\CsvWriter.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,Cyclomatic complexity of the method is 47
Complex Method,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Text,SignedInteger<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseInt64,Cyclomatic complexity of the method is 21
Complex Method,ServiceStack.Text,UnsignedInteger<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseUInt64,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,CreateScope,Cyclomatic complexity of the method is 38
Complex Method,ServiceStack.Text,JsvFormatter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsvFormatter.cs,Format,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Text,RecyclableMemoryStreamManager,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\RecyclableMemoryStream.cs,ReturnLargeBuffer,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Text,RecyclableMemoryStreamManager,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\RecyclableMemoryStream.cs,ReturnBlocks,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Text,RecyclableMemoryStream,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\RecyclableMemoryStream.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Text,RecyclableMemoryStream,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\RecyclableMemoryStream.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Text,StringSpanExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringSpanExtensions.cs,TrimHelper,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Text,TypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TypeSerializer.cs,ToStringDictionary,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Text,TypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TypeSerializer.cs,HasCircularReferences,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.Text,TypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TypeSerializer.cs,IndentJson,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,ConvertTo,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,ChangeValueType,Cyclomatic complexity of the method is 19
Complex Method,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,GetMembers,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,CreateDefaultValue,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,TryConvertCollections,Cyclomatic complexity of the method is 37
Complex Method,ServiceStack,AssignmentDefinition,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,AddMatch,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack,TypeConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,CreateTypeConverter,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryParse,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,MatchesContentType,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetMimeType,Cyclomatic complexity of the method is 50
Complex Method,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,MatchesContentType,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetMimeType,Cyclomatic complexity of the method is 50
Complex Method,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertValidUsage,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack,PlatformExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PlatformExtensions.cs,ToObjectDictionary,Cyclomatic complexity of the method is 21
Complex Method,ServiceStack,ReflectionExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\ReflectionExtensions.cs,GetConstructorMethodToCache,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,ExtractContents,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,GlobPath,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseShortestXsdDateTime,Cyclomatic complexity of the method is 18
Complex Method,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseManual,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,WriteWcfJsonDate,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Text.Common,DeserializeBuiltin<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeBuiltin.cs,GetParseStringSpanFn,Cyclomatic complexity of the method is 34
Complex Method,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,GetParseStringSpanMethod,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,ParseDictionary,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Text.Common,DeserializeListWithElements<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeListWithElements.cs,ParseGenericList,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Text.Common,DeserializeSpecializedCollections<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeSpecializedCollections.cs,GetParseStringSpanFn,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ObjectStringToType,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseQuotedPrimitive,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Text.Common,DeserializeTypeExensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseNumber,Cyclomatic complexity of the method is 19
Complex Method,ServiceStack.Text.Common,DeserializeTypeRef,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRef.cs,GetTypeAccessors,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Text.Common,DeserializeTypeRefJson,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJson.cs,StringToType,Cyclomatic complexity of the method is 37
Complex Method,ServiceStack.Text.Common,DeserializeTypeRefJsv,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJsv.cs,StringToType,Cyclomatic complexity of the method is 21
Complex Method,ServiceStack.Text.Common,JsReader<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\JsReader.cs,GetCoreParseStringSpanFn,Cyclomatic complexity of the method is 27
Complex Method,ServiceStack.Text.Common,JsWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\JsWriter.cs,WriteEnumFlags,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Text.Common,JsWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\JsWriter.cs,ShouldAllowRuntimeType,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Text.Common,JsWriter<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\JsWriter.cs,GetValueTypeToStringMethod,Cyclomatic complexity of the method is 27
Complex Method,ServiceStack.Text.Common,JsWriter<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\JsWriter.cs,GetCoreWriteFn,Cyclomatic complexity of the method is 17
Complex Method,ServiceStack.Text.Common,WriteLists<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteLists.cs,GetWriteFn,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Text.Common,WriteType<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Text.Common,WriteType<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,WriteProperties,Cyclomatic complexity of the method is 20
Complex Method,ServiceStack.Text.Common,WriteType<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,WriteComplexQueryStringProperties,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.Text.Common,WriteType<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,WriteQueryString,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,UnescapeJsString,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,Cyclomatic complexity of the method is 20
Complex Method,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,EatItemSeperatorOrMapEndChar,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,EatValue,Cyclomatic complexity of the method is 21
Complex Method,ServiceStack.Text.Json,JsonUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonUtils.cs,WriteString,Cyclomatic complexity of the method is 17
Complex Method,ServiceStack.Text.Jsv,JsvTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Jsv\JsvTypeSerializer.cs,EatMapKey,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Text.Jsv,JsvTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Jsv\JsvTypeSerializer.cs,EatValue,Cyclomatic complexity of the method is 20
Complex Method,ServiceStack.Text.Support,DoubleConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\DoubleConverter.cs,ToExactString,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,Cyclomatic complexity of the method is 13
Long Parameter List,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,With,The method has 33 parameters. Parameters: convertObjectTypesIntoStringDictionary' tryToParsePrimitiveTypeValues' tryToParseNumericType' parsePrimitiveFloatingPointTypes' parsePrimitiveIntegerTypes' excludeDefaultValues' includeNullValues' includeNullValuesInDictionaries' includeDefaultEnums' excludeTypeInfo' includeTypeInfo' emitCamelCaseNames' emitLowercaseUnderscoreNames' dateHandler' timeSpanHandler' propertyConvention' preferInterfaces' throwOnDeserializationError' typeAttr' dateTimeFormat' typeWriter' typeFinder' treatEnumAsInteger' skipDateTimeConversion' alwaysUseUtc' assumeUtc' appendUtcOffset' escapeUnicode' includePublicFields' maxDepth' modelFactory' excludePropertyReferences' useSystemParseMethods
Long Parameter List,ServiceStack.Text,Events,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\RecyclableMemoryStream.cs,MemoryStreamDoubleDispose,The method has 5 parameters. Parameters: guid' tag' allocationStack' disposeStack1' disposeStack2
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostStringToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostStringToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutStringToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutStringToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchStringToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchStringToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendStringToUrl,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendStringToUrlAsync,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostBytesToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostBytesToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutBytesToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutBytesToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendBytesToUrl,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendBytesToUrlAsync,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostStreamToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostStreamToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutStreamToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutStreamToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendStreamToUrl,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendStreamToUrlAsync,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,UploadFile,The method has 8 parameters. Parameters: webRequest' fileStream' fileName' mimeType' accept' requestFilter' method' field
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostStringToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostStringToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutStringToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutStringToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchStringToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchStringToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchToUrl,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchToUrlAsync,The method has 5 parameters. Parameters: url' formData' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendStringToUrl,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendStringToUrlAsync,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostBytesToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostBytesToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutBytesToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutBytesToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendBytesToUrl,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendBytesToUrlAsync,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostStreamToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostStreamToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutStreamToUrl,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutStreamToUrlAsync,The method has 6 parameters. Parameters: url' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendStreamToUrl,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,SendStreamToUrlAsync,The method has 7 parameters. Parameters: url' method' requestBody' contentType' accept' requestFilter' responseFilter
Long Parameter List,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,UploadFile,The method has 8 parameters. Parameters: webRequest' fileStream' fileName' mimeType' accept' requestFilter' method' field
Long Parameter List,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,ApprovedUsage,The method has 5 parameters. Parameters: licenseFeature' requestedFeature' allowedUsage' actualUsage' message
Long Parameter List,ServiceStack,PclExport,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.cs,Config,The method has 6 parameters. Parameters: req' allowAutoRedirect' timeout' readWriteTimeout' userAgent' preAuthenticate
Long Parameter List,ServiceStack,Net45PclExport,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,Config,The method has 6 parameters. Parameters: req' allowAutoRedirect' timeout' readWriteTimeout' userAgent' preAuthenticate
Long Parameter List,ServiceStack,PclExportExt,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,PostFileToUrl,The method has 5 parameters. Parameters: url' uploadFileInfo' uploadFileMimeType' accept' requestFilter
Long Parameter List,ServiceStack,PclExportExt,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,PutFileToUrl,The method has 5 parameters. Parameters: url' uploadFileInfo' uploadFileMimeType' accept' requestFilter
Long Parameter List,ServiceStack,TaskUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TaskUtils.cs,StartNextIteration,The method has 5 parameters. Parameters: tcs' fn' enumerator' i' next
Long Parameter List,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,ParseDictionaryType,The method has 5 parameters. Parameters: value' createMapType' argTypes' keyParseFn' valueParseFn
Long Parameter List,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,ParseDictionaryType,The method has 5 parameters. Parameters: value' createMapType' argTypes' keyParseFn' valueParseFn
Long Parameter List,ServiceStack.Text.Common,DeserializeKeyValuePair<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeKeyValuePair.cs,ParseKeyValuePairType,The method has 5 parameters. Parameters: value' createMapType' argTypes' keyParseFn' valueParseFn
Long Parameter List,ServiceStack.Text.Common,DeserializeKeyValuePair<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeKeyValuePair.cs,ParseKeyValuePairType,The method has 5 parameters. Parameters: value' createMapType' argTypes' keyParseFn' valueParseFn
Long Parameter List,ServiceStack.Text.Common,TypePropertyWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,TypePropertyWriter,The method has 14 parameters. Parameters: propertyType' propertyName' propertyDeclaredTypeName' propertyNameCLSFriendly' propertyNameLowercaseUnderscore' propertyOrder' propertySuppressDefaultConfig' propertySuppressDefaultAttribute' getterFn' writeFn' defaultValue' shouldSerialize' shouldSerializeDynamic' isEnum
Long Parameter List,ServiceStack.Text.FastMember,TypeAccessor,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,WriteGetter,The method has 5 parameters. Parameters: il' type' props' fields' isStatic
Long Parameter List,ServiceStack.Text.FastMember,TypeAccessor,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,WriteSetter,The method has 5 parameters. Parameters: il' type' props' fields' isStatic
Long Identifier,ServiceStack.Text,CsvConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\CsvConfig.cs,,The length of the parameter DefaultEscapedItemDelimiterString is 33.
Long Identifier,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,With,The length of the parameter convertObjectTypesIntoStringDictionary is 38.
Long Identifier,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,With,The length of the parameter parsePrimitiveFloatingPointTypes is 32.
Long Identifier,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,With,The length of the parameter includeNullValuesInDictionaries is 31.
Long Identifier,ServiceStack.Text,TranslateListWithElements,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TranslateListWithElements.cs,,The length of the parameter TranslateConvertibleICollectionCache is 36.
Long Identifier,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,,The length of the parameter MaxRecursionLevelForDefaultValues is 33.
Long Identifier,ServiceStack,ErrorMessages,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,,The length of the parameter ExceededServiceStackOperations is 30.
Long Identifier,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,,The length of the parameter DefaultDateTimeFormatWithFraction is 33.
Long Identifier,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,,The length of the parameter DateTimeFormatSecondsUtcOffset is 30.
Long Identifier,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,,The length of the parameter DateTimeFormatTicksNoUtcOffset is 30.
Long Identifier,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,ParseDictionary,The length of the parameter tryToParseItemsAsPrimitiveTypes is 31.
Long Identifier,ServiceStack.Text.Common,DeserializeListWithElements<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeListWithElements.cs,ParseGenericList,The length of the parameter tryToParseItemsAsPrimitiveTypes is 31.
Long Identifier,ServiceStack.Text.Common,WriteType<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,Init,The length of the parameter propertySuppressDefaultAttribute is 32.
Long Identifier,ServiceStack.Text.Common,WriteType<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,Init,The length of the parameter propertySuppressDefaultAttribute is 32.
Long Identifier,ServiceStack.Text.Common,TypePropertyWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,TypePropertyWriter,The length of the parameter propertyNameLowercaseUnderscore is 31.
Long Identifier,ServiceStack.Text.Common,TypePropertyWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,TypePropertyWriter,The length of the parameter propertySuppressDefaultAttribute is 32.
Long Identifier,ServiceStack.Text.Common,TypePropertyWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,,The length of the parameter propertySuppressDefaultAttribute is 32.
Long Identifier,ServiceStack.Text.Common,TypePropertyWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,,The length of the parameter propertyNameLowercaseUnderscore is 31.
Long Statement,ServiceStack.Text,AssemblyUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AssemblyUtils.cs,MainInterface,The length of the statement  "                var interfaceType = t.GetInterfaces().FirstOrDefault(i => !t.GetInterfaces().Any(i2 => i2.GetInterfaces().Contains(i))); " is 120.
Long Statement,ServiceStack.Text,DateTimeExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DateTimeExtensions.cs,FromUnixTimeMs,The length of the statement  "            return DateTime.SpecifyKind(UnixEpochDateTimeUnspecified + TimeSpan.FromMilliseconds(msSince1970) + offset' DateTimeKind.Local); " is 128.
Long Statement,ServiceStack.Text,DateTimeExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DateTimeExtensions.cs,FromUnixTimeMs,The length of the statement  "            return DateTime.SpecifyKind(UnixEpochDateTimeUnspecified + TimeSpan.FromMilliseconds(msSince1970) + offset' DateTimeKind.Local); " is 128.
Long Statement,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,With,The length of the statement  "                ConvertObjectTypesIntoStringDictionary = convertObjectTypesIntoStringDictionary ?? Config.Instance.ConvertObjectTypesIntoStringDictionary' " is 138.
Long Statement,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,With,The length of the statement  "                ParsePrimitiveFloatingPointTypes = parsePrimitiveFloatingPointTypes ?? Config.Instance.ParsePrimitiveFloatingPointTypes' " is 120.
Long Statement,ServiceStack.Text,JsonObject,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsonObject.cs,IsJavaScriptNumber,The length of the statement  "            if (double.TryParse(strValue' NumberStyles.Float | NumberStyles.AllowThousands' CultureInfo.InvariantCulture' out var doubleValue)) " is 131.
Long Statement,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The length of the statement  "                uint k = (uint)(data[currentIndex++] | data[currentIndex++] << 8 | data[currentIndex++] << 16 | data[currentIndex++] << 24); " is 124.
Long Statement,ServiceStack.Text,RecyclableMemoryStream,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\RecyclableMemoryStream.cs,InternalRead,The length of the statement  "                    Buffer.BlockCopy(this.blocks[blockAndOffset.Block]' blockAndOffset.Offset' buffer' bytesWritten + offset' amountToCopy); " is 120.
Long Statement,ServiceStack.Text,RecyclableMemoryStream,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\RecyclableMemoryStream.cs,EnsureCapacity,The length of the statement  "                Events.Write.MemoryStreamOverCapacity(newCapacity' this.memoryManager.MaximumStreamCapacity' this.tag' this.allocationStack); " is 125.
Long Statement,ServiceStack.Text,RecyclableMemoryStream,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\RecyclableMemoryStream.cs,EnsureCapacity,The length of the statement  "                throw new InvalidOperationException("Requested capacity is too large: " + newCapacity + ". Limit is " + this.memoryManager.MaximumStreamCapacity); " is 146.
Long Statement,ServiceStack.Text,ExpressionReflectionOptimizer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\ReflectionOptimizer.cs,GetExpressionLambda,The length of the statement  "            var instanceParam = Expression.Convert(oInstanceParam' propertyInfo.ReflectedType); //propertyInfo.DeclaringType doesn't work on Proxy types " is 140.
Long Statement,ServiceStack.Text,DynamicProxy,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\ReflectionOptimizer.Emit.cs,BindProperty,The length of the statement  "            PropertyBuilder propertyBuilder = typeBuilder.DefineProperty(propertyName' PropertyAttributes.None' propertyType' null); " is 120.
Long Statement,ServiceStack.Text,TranslateListWithElements,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TranslateListWithElements.cs,TranslateToConvertibleGenericICollectionCache,The length of the statement  "            if (TranslateConvertibleICollectionCache.TryGetValue(typeKey' out var translateToFn)) return translateToFn(from' toInstanceOfType); " is 131.
Long Statement,ServiceStack.Text,TypeConfig<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TypeConfig.cs,Create,The length of the statement  "                config.OnDeserializing = (instance' memberName' value) => JsConfig<T>.OnDeserializingFn((T)instance' memberName' value); " is 120.
Long Statement,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,CreateDefaultValue,The length of the statement  "            try // use a try/finally block to make sure we decrease the recursion level for this type no matter which code path we take' " is 124.
Long Statement,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,CreateDefaultValue,The length of the statement  "                    var valueType = Activator.CreateInstance(type' CreateDefaultValue(genericTypes[0]' recursionInfo)' CreateDefaultValue(genericTypes[1]' recursionInfo)); " is 151.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "POST"' requestBody: json' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 120.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostJsonToUrl,The length of the statement  "            return SendStringToUrl(url' method: "POST"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 124.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "POST"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 129.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutJsonToUrl,The length of the statement  "            return SendStringToUrl(url' method: "PUT"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 123.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "PUT"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 128.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "PATCH"' requestBody: json' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 121.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchJsonToUrl,The length of the statement  "            return SendStringToUrl(url' method: "PATCH"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 125.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "PATCH"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 130.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,DeleteFromUrl,The length of the statement  "            return SendStringToUrl(url' method: "DELETE"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 124.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,DeleteFromUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "DELETE"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 129.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,OptionsFromUrl,The length of the statement  "            return SendStringToUrl(url' method: "OPTIONS"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 125.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,OptionsFromUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "OPTIONS"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 130.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,HeadFromUrl,The length of the statement  "            return SendStringToUrl(url' method: "HEAD"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 122.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,HeadFromUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "HEAD"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 127.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostXmlToUrl,The length of the statement  "            return SendStringToUrl(url' method: "POST"' requestBody: data.ToXml()' contentType: MimeTypes.Xml' accept: MimeTypes.Xml' " is 121.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostCsvToUrl,The length of the statement  "            return SendStringToUrl(url' method: "POST"' requestBody: data.ToCsv()' contentType: MimeTypes.Csv' accept: MimeTypes.Csv' " is 121.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutXmlToUrl,The length of the statement  "            return SendStringToUrl(url' method: "PUT"' requestBody: data.ToXml()' contentType: MimeTypes.Xml' accept: MimeTypes.Xml' " is 120.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutCsvToUrl,The length of the statement  "            return SendStringToUrl(url' method: "PUT"' requestBody: data.ToCsv()' contentType: MimeTypes.Csv' accept: MimeTypes.Csv' " is 120.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "POST"' requestBody: json' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 120.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostJsonToUrl,The length of the statement  "            return SendStringToUrl(url' method: "POST"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 124.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "POST"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 129.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutJsonToUrl,The length of the statement  "            return SendStringToUrl(url' method: "PUT"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 123.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "PUT"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 128.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "PATCH"' requestBody: json' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 121.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchJsonToUrl,The length of the statement  "            return SendStringToUrl(url' method: "PATCH"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 125.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PatchJsonToUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "PATCH"' requestBody: data.ToJson()' contentType: MimeTypes.Json' accept: MimeTypes.Json' " is 130.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,DeleteFromUrl,The length of the statement  "            return SendStringToUrl(url' method: "DELETE"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 124.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,DeleteFromUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "DELETE"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 129.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,OptionsFromUrl,The length of the statement  "            return SendStringToUrl(url' method: "OPTIONS"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 125.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,OptionsFromUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "OPTIONS"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 130.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,HeadFromUrl,The length of the statement  "            return SendStringToUrl(url' method: "HEAD"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 122.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,HeadFromUrlAsync,The length of the statement  "            return SendStringToUrlAsync(url' method: "HEAD"' accept: accept' requestFilter: requestFilter' responseFilter: responseFilter); " is 127.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostXmlToUrl,The length of the statement  "            return SendStringToUrl(url' method: "POST"' requestBody: data.ToXml()' contentType: MimeTypes.Xml' accept: MimeTypes.Xml' " is 121.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PostCsvToUrl,The length of the statement  "            return SendStringToUrl(url' method: "POST"' requestBody: data.ToCsv()' contentType: MimeTypes.Csv' accept: MimeTypes.Csv' " is 121.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutXmlToUrl,The length of the statement  "            return SendStringToUrl(url' method: "PUT"' requestBody: data.ToXml()' contentType: MimeTypes.Xml' accept: MimeTypes.Xml' " is 120.
Long Statement,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,PutCsvToUrl,The length of the statement  "            return SendStringToUrl(url' method: "PUT"' requestBody: data.ToCsv()' contentType: MimeTypes.Csv' accept: MimeTypes.Csv' " is 120.
Long Statement,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,GetLicenseWarningMessage,The length of the statement  "                    return $"This Annual Subscription expired on '{key.Expiry:d}'' please update your License Key with this years subscription."; " is 125.
Long Statement,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertValidUsage,The length of the statement  "                            ApprovedUsage(licensedFeatures' feature' FreeQuotas.ServiceStackOperations' count' ErrorMessages.ExceededServiceStackOperations); " is 129.
Long Statement,ServiceStack,DeserializeDynamic<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Pcl.Dynamic.cs,ParseDynamic,The length of the statement  "                    container[mapKey] = DeserializeType<TSerializer>.ParsePrimitive(elementValue) ?? Serializer.UnescapeString(elementValue).Value(); " is 129.
Long Statement,ServiceStack,DeserializeDynamic<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Pcl.Dynamic.cs,VerifyAndGetStartIndex,The length of the statement  "                Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"' " is 141.
Long Statement,ServiceStack,DeserializeDynamic<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Pcl.Dynamic.cs,VerifyAndGetStartIndex,The length of the statement  "                    JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50)); " is 144.
Long Statement,ServiceStack,DynamicJson,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Pcl.Dynamic.cs,Deserialize,The length of the statement  "            var hash = deserialized.ToDictionary<KeyValuePair<string' string>' string' object>(entry => entry.Key' entry => entry.Value); " is 125.
Long Statement,ServiceStack,PclExport,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.cs,ToStableUniversalTime,The length of the statement  "            // Silverlight 3' 4 and 5 all work ok with DateTime.ToUniversalTime' but have no TimeZoneInfo.ConverTimeToUtc implementation. " is 125.
Long Statement,ServiceStack,Net45PclExport,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,ParseXsdDateTimeAsUtc,The length of the statement  "            return System.Xml.XmlConvert.ToDateTime(dateTimeStr' System.Xml.XmlDateTimeSerializationMode.Utc).Prepare(parsedAsUtc: true); " is 125.
Long Statement,ServiceStack,SerializerUtils<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,VerifyAndGetStartIndex,The length of the statement  "                Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"' " is 141.
Long Statement,ServiceStack,SerializerUtils<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,VerifyAndGetStartIndex,The length of the statement  "                    JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50)); " is 144.
Long Statement,ServiceStack,PclExportExt,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,PostFileToUrl,The length of the statement  "                webReq.UploadFile(fileStream' fileName' uploadFileMimeType' accept: accept' requestFilter: requestFilter' method: "POST"); " is 122.
Long Statement,ServiceStack,PclExportExt,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,PutFileToUrl,The length of the statement  "                webReq.UploadFile(fileStream' fileName' uploadFileMimeType' accept: accept' requestFilter: requestFilter' method: "PUT"); " is 121.
Long Statement,ServiceStack,PclExportExt,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,CompressToStream,The length of the statement  "            using (var deflateStream = new System.IO.Compression.DeflateStream(stream' System.IO.Compression.CompressionMode.Compress)) " is 123.
Long Statement,ServiceStack,PlatformExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PlatformExtensions.cs,GetCollectionType,The length of the statement  "               ?? type.GetGenericArguments().LastOrDefault() //new[] { str }.Select(x => new Type()) => WhereSelectArrayIterator<string'Type> " is 126.
Long Statement,ServiceStack,PlatformExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PlatformExtensions.cs,GetCollectionType,The length of the statement  "               ?? (type.BaseType != null && type.BaseType != typeof(object) ? type.BaseType.GetCollectionType() : null); //e.g. ArrayOfString : List<string> " is 141.
Long Statement,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,ReadToEnd,The length of the statement  "                Tracer.Instance.WriteWarning("MemoryStream wasn't created with a publiclyVisible:true byte[] bufffer' falling back to slow impl"); " is 130.
Long Statement,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,GetBufferAsMemory,The length of the statement  "                Tracer.Instance.WriteWarning("MemoryStream in GetBufferAsSpan() wasn't created with a publiclyVisible:true byte[] bufffer' falling back to slow impl"); " is 151.
Long Statement,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,GetBufferAsSpan,The length of the statement  "                Tracer.Instance.WriteWarning("MemoryStream in GetBufferAsSpan() wasn't created with a publiclyVisible:true byte[] bufffer' falling back to slow impl"); " is 151.
Long Statement,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,GetBufferAsBytes,The length of the statement  "                Tracer.Instance.WriteWarning("MemoryStream in GetBufferAsBytes() wasn't created with a publiclyVisible:true byte[] bufffer' falling back to slow impl"); " is 152.
Long Statement,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,ReadToEndAsync,The length of the statement  "                Tracer.Instance.WriteWarning("MemoryStream in ReadToEndAsync() wasn't created with a publiclyVisible:true byte[] bufffer' falling back to slow impl"); " is 150.
Long Statement,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,WriteToAsync,The length of the statement  "                Tracer.Instance.WriteWarning("MemoryStream in WriteToAsync() wasn't created with a publiclyVisible:true byte[] bufffer' falling back to slow impl"); " is 148.
Long Statement,ServiceStack,TaskExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TaskExtensions.cs,Error,The length of the statement  "                task.ContinueWith(t => fn(t.UnwrapIfSingleException())' source' taskOptions' TaskScheduler.FromCurrentSynchronizationContext()); " is 128.
Long Statement,ServiceStack,TaskExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TaskExtensions.cs,Error,The length of the statement  "                task.ContinueWith(t => fn(t.UnwrapIfSingleException())' source' taskOptions' TaskScheduler.FromCurrentSynchronizationContext()); " is 128.
Long Statement,ServiceStack,TaskUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TaskUtils.cs,StartNextIteration,The length of the statement  "            iterationTask?.ContinueWith(next' CancellationToken.None' TaskContinuationOptions.ExecuteSynchronously' TaskScheduler.Default); " is 127.
Long Statement,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseShortestXsdDateTime,The length of the statement  "                if (dateTimeStr.StartsWith(EscapedWcfJsonPrefix' StringComparison.Ordinal) || dateTimeStr.StartsWith(WcfJsonPrefix' StringComparison.Ordinal)) " is 142.
Long Statement,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseShortestXsdDateTime,The length of the statement  "                    return DateTime.ParseExact(dateTimeStr' XsdDateTimeFormatSeconds' null' DateTimeStyles.AdjustToUniversal).Prepare(parsedAsUtc: true); " is 133.
Long Statement,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,RepairXsdTimeSeparator,The length of the statement  "            if ((dateTimeStr.Length > XsdTimeSeparatorIndex) && (dateTimeStr[XsdTimeSeparatorIndex] == ' ') && dateTimeStr.EndsWith(XsdUtcSuffix)) " is 134.
Long Statement,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseWcfJsonDateOffset,The length of the statement  "            var timeString = (suffixPos < 0) ? wcfJsonDate : wcfJsonDate.Substring(WcfJsonPrefix.Length' suffixPos - WcfJsonPrefix.Length); " is 127.
Long Statement,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseWcfJsonDateOffset,The length of the statement  "            // REVIEW: DCJS shoves offset in a separate field 'offsetMinutes'' we have the offset in the format' so shouldn't we use it? " is 124.
Long Statement,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,ParseDictionary,The length of the statement  "            if (to is Dictionary<string' object> && objDeserializer != null && typeof(TSerializer) == typeof(Json.JsonTypeSerializer)) " is 122.
Long Statement,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,VerifyAndGetStartIndex,The length of the statement  "                Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"' " is 141.
Long Statement,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,VerifyAndGetStartIndex,The length of the statement  "                    JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50)); " is 144.
Long Statement,ServiceStack.Text.Common,DeserializeKeyValuePair<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeKeyValuePair.cs,GetParseStringSpanMethod,The length of the statement  "            return value => ParseKeyValuePairType(value' createMapType' keyValuePairArgs' keyTypeParseMethod' valueTypeParseMethod); " is 120.
Long Statement,ServiceStack.Text.Common,DeserializeKeyValuePair<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeKeyValuePair.cs,VerifyAndGetStartIndex,The length of the statement  "                Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"' " is 141.
Long Statement,ServiceStack.Text.Common,DeserializeKeyValuePair<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeKeyValuePair.cs,VerifyAndGetStartIndex,The length of the statement  "                    JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50)); " is 144.
Long Statement,ServiceStack.Text.Common,DeserializeListWithElements<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeListWithElements.cs,ParseGenericList,The length of the statement  "            var isReadOnly = createListType != null && (createListType.IsGenericType && createListType.GetGenericTypeDefinition() == typeof(ReadOnlyCollection<>)); " is 151.
Long Statement,ServiceStack.Text.Common,DeserializeListWithElements<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeListWithElements.cs,ParseGenericList,The length of the statement  "            //but not sure how you'd like to go about caching constructors with parameters -- I would probably build a NewExpression' .Compile to a LambdaExpression and cache " is 162.
Long Statement,ServiceStack.Text.Common,DeserializeList<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeListWithElements.cs,GetParseStringSpanFn,The length of the statement  "                var parseFn = DeserializeListWithElements<TSerializer>.GetListTypeParseStringSpanFn(createListType' elementType' supportedTypeParseMethod); " is 139.
Long Statement,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ObjectStringToType,The length of the statement  "                    var dynamicMatch = DeserializeDictionary<TSerializer>.ParseDictionary<string' object>(strType' null' v => Serializer.UnescapeString(v).ToString()' v => Serializer.UnescapeString(v).ToString()); " is 193.
Long Statement,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseQuotedPrimitive,The length of the statement  "            if (value.StartsWith(DateTimeSerializer.EscapedWcfJsonPrefix' StringComparison.Ordinal) || value.StartsWith(DateTimeSerializer.WcfJsonPrefix' StringComparison.Ordinal)) " is 168.
Long Statement,ServiceStack.Text.Common,TypeAccessor,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,GetSetPropertyMethod,The length of the statement  "                propertyInfo = propertyInfo.DeclaringType.GetProperty(propertyInfo.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 143.
Long Statement,ServiceStack.Text.Common,TypeAccessor,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,GetSetFieldMethod,The length of the statement  "                fieldInfo = fieldInfo.DeclaringType.GetField(fieldInfo.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 131.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRef,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRef.cs,GetSerializationException,The length of the statement  "            var serializationException = new SerializationException($"Failed to set property '{propertyName}' with '{propertyValueString}'"' e); " is 132.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRef,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRef.cs,GetTypeAccessors,The length of the statement  "                    accessors[i] = new KeyValuePair<string' TypeAccessor>(propertyName' TypeAccessor.Create(serializer' typeConfig' propertyInfo)); " is 127.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRef,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRef.cs,GetTypeAccessors,The length of the statement  "                    accessors[i + j] = new KeyValuePair<string' TypeAccessor>(fieldName' TypeAccessor.Create(serializer' typeConfig' fieldInfo)); " is 125.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJson,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "                var propType = possibleTypeInfo && propertyValueStr[0] == '_' ? TypeAccessor.ExtractType(Serializer' propertyValueStr) : null; " is 126.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJson,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "                        if (config.ThrowOnError) throw DeserializeTypeRef.GetSerializationException(propertyName.ToString()' propertyValueStr.ToString()' propType' e); " is 143.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJson,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "                        else Tracer.Instance.WriteWarning("WARN: failed to set dynamic property {0} with: {1}"' propertyName.ToString()' propertyValueStr.ToString()); " is 142.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJson,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "                        config.OnDeserializationError?.Invoke(instance' propType ?? typeAccessor.PropertyType' propertyName.ToString()' propertyValueStr.ToString()' e); " is 144.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJson,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "                        if (config.ThrowOnError) throw DeserializeTypeRef.GetSerializationException(propertyName.ToString()' propertyValueStr.ToString()' typeAccessor.PropertyType' e); " is 160.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJson,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJson.cs,StringToType,The length of the statement  "                        else Tracer.Instance.WriteWarning("WARN: failed to set property {0} with: {1}"' propertyName.ToString()' propertyValueStr.ToString()); " is 134.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJsv,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "                var propType = possibleTypeInfo && propertyValueStr[0] == '_' ? TypeAccessor.ExtractType(Serializer' propertyValueStr) : null; " is 126.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJsv,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "                        if (config.ThrowOnError) throw DeserializeTypeRef.GetSerializationException(propertyName.ToString()' propertyValueStr.ToString()' propType' e); " is 143.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJsv,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "                        else Tracer.Instance.WriteWarning("WARN: failed to set dynamic property {0} with: {1}"' propertyName.ToString()' propertyValueStr.ToString()); " is 142.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJsv,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "                        config.OnDeserializationError?.Invoke(instance' propType ?? typeAccessor.PropertyType' propertyName.ToString()' propertyValueStr.ToString()' e); " is 144.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJsv,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "                        if (config.ThrowOnError) throw DeserializeTypeRef.GetSerializationException(propertyName.ToString()' propertyValueStr.ToString()' propType' e); " is 143.
Long Statement,ServiceStack.Text.Common,DeserializeTypeRefJsv,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRefJsv.cs,StringToType,The length of the statement  "                        else Tracer.Instance.WriteWarning("WARN: failed to set property {0} with: {1}"' propertyName.ToString()' propertyValueStr.ToString()); " is 134.
Long Statement,ServiceStack.Text.Common,JsWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\JsWriter.cs,AssertAllowedRuntimeType,The length of the statement  "                throw new NotSupportedException($"{type.Name} is not an allowed Runtime Type. Whitelist Type with [RuntimeSerializable] or IRuntimeSerializable."); " is 147.
Long Statement,ServiceStack.Text.Common,ParseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\ParseUtils.cs,TryParseEnum,The length of the statement  "                if (Array.IndexOf(names' str) == -1)    // case sensitive ... could use Linq Contains() extension with StringComparer.InvariantCultureIgnoreCase instead for a slight penalty " is 173.
Long Statement,ServiceStack.Text.Common,ParseMethodUtilities,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\StaticParseMethod.cs,GetParseStringSpanFn,The length of the statement  "                    var typedParseDelegate = (ParseStringSpanGenericDelegate<T>)parseMethodInfo.MakeDelegate(typeof(ParseStringSpanGenericDelegate<T>)); " is 132.
Long Statement,ServiceStack.Text.Common,WriteType<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,WriteComplexQueryStringProperties,The length of the statement  "                    if (config.ExcludePropertyReferences != null && config.ExcludePropertyReferences.Contains(propertyWriter.propertyReferenceName))  " is 128.
Long Statement,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,ParseJsonString,The length of the statement  "            for (; index < json.Length; index++) { var ch = json[index]; if (!JsonUtils.IsWhiteSpace(ch)) break; } //Whitespace inline " is 122.
Long Statement,ServiceStack.Text.Jsv,JsvTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Jsv\JsvTypeSerializer.cs,WriteString,The length of the statement  "            if (JsState.QueryStringMode && !string.IsNullOrEmpty(value) && value.StartsWith(JsWriter.QuoteString) && value.EndsWith(JsWriter.QuoteString)) " is 142.
Long Statement,ServiceStack.Text.FastMember,TypeAccessor,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,CreateNew,The length of the statement  "                DynamicMethod dynGetter = new DynamicMethod(type.FullName + "_get"' typeof(object)' new Type[] { typeof(object)' typeof(string) }' type' true)' " is 143.
Long Statement,ServiceStack.Text.FastMember,TypeAccessor,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,CreateNew,The length of the statement  "                              dynSetter = new DynamicMethod(type.FullName + "_set"' null' new Type[] { typeof(object)' typeof(string)' typeof(object) }' type' true); " is 135.
Long Statement,ServiceStack.Text.FastMember,TypeAccessor,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,CreateNew,The length of the statement  "            MethodBuilder body = tb.DefineMethod(baseGetter.Name' baseGetter.Attributes & ~MethodAttributes.Abstract' typeof(object)' new Type[] { typeof(object)' typeof(string) }); " is 169.
Long Statement,ServiceStack.Text.FastMember,TypeAccessor,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,CreateNew,The length of the statement  "            body = tb.DefineMethod(baseSetter.Name' baseSetter.Attributes & ~MethodAttributes.Abstract' null' new Type[] { typeof(object)' typeof(string)' typeof(object) }); " is 161.
Long Statement,ServiceStack.Text.Pools,ObjectPool<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Pools\ObjectPool.cs,ForgetTrackedObject,The length of the statement  "                Debug.WriteLine($"TRACEOBJECTPOOLLEAKS_BEGIN\nObject of type {typeof(T)} was freed' but was not from pool. \n Callstack: \n {trace} TRACEOBJECTPOOLLEAKS_END"); " is 159.
Complex Conditional,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The conditional expression  "(cs != '{' || ce != '}') && (cs != '(' || ce != ')')"  is complex.
Complex Conditional,ServiceStack.Text,JsonObject,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsonObject.cs,WriteValue,The conditional expression  "(firstChar == JsWriter.MapStartChar && lastChar == JsWriter.MapEndChar)                      || (firstChar == JsWriter.ListStartChar && lastChar == JsWriter.ListEndChar)                      || JsonUtils.True == strValue                      || JsonUtils.False == strValue                      || IsJavaScriptNumber(strValue)"  is complex.
Complex Conditional,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,TryConvertCollections,The conditional expression  "fromElementType != null && toElementType != null && fromElementType != toElementType &&                       !(typeof(IDictionary).IsAssignableFrom(fromElementType) || typeof(IDictionary).IsAssignableFrom(toElementType))"  is complex.
Complex Conditional,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,TryConvertCollections,The conditional expression  "fromType.IsClass &&                    (typeof(IDictionary).IsAssignableFrom(toType) ||                     typeof(IEnumerable<KeyValuePair<string'object>>).IsAssignableFrom(toType) ||                     typeof(IEnumerable<KeyValuePair<string'string>>).IsAssignableFrom(toType))"  is complex.
Complex Conditional,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsBinary,The conditional expression  "secondaryType.StartsWith("pkc")                  || secondaryType.StartsWith("x-pkc")                  || secondaryType.StartsWith("font")                  || secondaryType.StartsWith("vnd.ms-")"  is complex.
Complex Conditional,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsBinary,The conditional expression  "secondaryType.StartsWith("pkc")                  || secondaryType.StartsWith("x-pkc")                  || secondaryType.StartsWith("font")                  || secondaryType.StartsWith("vnd.ms-")"  is complex.
Complex Conditional,ServiceStack,PlatformExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PlatformExtensions.cs,PopulateInstanceInternal,The conditional expression  "!def.FieldsMap.TryGetValue(entry.Key' out var fieldDef) &&                      !def.FieldsMap.TryGetValue(entry.Key.ToPascalCase()' out fieldDef)                      || entry.Value == null                       || entry.Value == DBNull.Value"  is complex.
Complex Conditional,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlEncode,The conditional expression  "charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46"  is complex.
Complex Conditional,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,ToCamelCase,The conditional expression  "firstPart && c0isUpper && (c1isUpper || i == 0)"  is complex.
Complex Conditional,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,ToLowercaseUnderscore,The conditional expression  "char.IsDigit(t) || (char.IsLetter(t) && char.IsLower(t)) || t == '_'"  is complex.
Complex Conditional,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseQuotedPrimitive,The conditional expression  "value.Length > 14 && value[10] == 'T' &&                      (value.EndsWithInvariant("Z")                      || value[value.Length - 6] == '+'                      || value[value.Length - 6] == '-')"  is complex.
Complex Conditional,ServiceStack.Text.Common,WriteType<T;TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteType.cs,WriteComplexQueryStringProperties,The conditional expression  "(propertyValue == null                           || propertyWriter.propertySuppressDefaultConfig && Equals(propertyWriter.DefaultValue' propertyValue))                          && !Serializer.IncludeNullValues"  is complex.
Complex Conditional,ServiceStack.Text.Json,JsonUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonUtils.cs,HasAnyEscapeChars,The conditional expression  "escapeHtmlChars && (c == '<' || c == '>' || c == '&' || c == '=' || c == '\\')"  is complex.
Complex Conditional,ServiceStack.Text.Jsv,JsvTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Jsv\JsvTypeSerializer.cs,WriteString,The conditional expression  "JsState.QueryStringMode && !string.IsNullOrEmpty(value) && value.StartsWith(JsWriter.QuoteString) && value.EndsWith(JsWriter.QuoteString)"  is complex.
Virtual Method Call from Constructor,ServiceStack.Text,JsConfigScope,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfigScope.cs,JsConfigScope,The constructor "JsConfigScope" calls a virtual method "BeginThreadAffinity".
Virtual Method Call from Constructor,ServiceStack.Text,RecyclableMemoryStream,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\RecyclableMemoryStream.cs,RecyclableMemoryStream,The constructor "RecyclableMemoryStream" calls a virtual method "GetStackTrace".
Virtual Method Call from Constructor,ServiceStack.Text,XmlSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\XmlSerializer.cs,XmlSerializer,The constructor "XmlSerializer" calls a virtual method "GetUTF8Encoding".
Virtual Method Call from Constructor,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,LicenseUtils,The constructor "LicenseUtils" calls a virtual method "RegisterLicenseFromConfig".
Virtual Method Call from Constructor,ServiceStack,TypeFields<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TypeFields.cs,TypeFields,The constructor "TypeFields" calls a virtual method "CreateGetter".
Virtual Method Call from Constructor,ServiceStack,TypeFields<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TypeFields.cs,TypeFields,The constructor "TypeFields" calls a virtual method "CreateSetter".
Virtual Method Call from Constructor,ServiceStack,TypeProperties<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TypeProperties.cs,TypeProperties,The constructor "TypeProperties" calls a virtual method "CreateGetter".
Virtual Method Call from Constructor,ServiceStack,TypeProperties<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TypeProperties.cs,TypeProperties,The constructor "TypeProperties" calls a virtual method "CreateSetter".
Empty Catch Block,ServiceStack.Text,Env,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Env.cs,Env,The method has an empty catch block.
Empty Catch Block,ServiceStack.Text,Env,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Env.cs,Env,The method has an empty catch block.
Empty Catch Block,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseShortestXsdDateTime,The method has an empty catch block.
Magic Number,ServiceStack.Text,DateTimeExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DateTimeExtensions.cs,FromTimeOffsetString,The following statement contains a magic number: offsetString = offsetString.Insert(offsetString.Length - 2' ":");
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following statement contains a magic number: var mid = (int) (preResult >> 32);
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: len = 32;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: len += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: buf[8 + n] != '-'
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: buf[13 + n] != '-'                      || buf[18 + n] != '-'                      || buf[23 + n] != '-'
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: buf[13 + n] != '-'                      || buf[18 + n] != '-'                      || buf[23 + n] != '-'
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: buf[13 + n] != '-'                      || buf[18 + n] != '-'                      || buf[23 + n] != '-'
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: len += 4;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: buf[8 + n] == '-'
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: a = (a1 << 24) + (a2 << 16) + (a3 << 8) + a4;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: a = (a1 << 24) + (a2 << 16) + (a3 << 8) + a4;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: a = (a1 << 24) + (a2 << 16) + (a3 << 8) + a4;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2 + dash;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: b = (short) ((b1 << 8) + b2);
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2 + dash;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: c = (short) ((c1 << 8) + c2);
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2 + dash;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2 + dash;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseGeneralStyleGuid,The following statement contains a magic number: n += 2;
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseHexByte,The following statement contains a magic number: lo == 255 || hi == 255
Magic Number,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseHexByte,The following statement contains a magic number: lo == 255 || hi == 255
Magic Number,ServiceStack.Text,SignedInteger<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseInt64,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '0')                          {                              state = ParseState.TrailingWhite;                          }                          else if (c > '0' && c <= '9')                          {                              result = -(c - '0');                              state = ParseState.Number;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                      case ParseState.Sign:                          if (c == '0')                          {                              state = ParseState.TrailingWhite;                          }                          else if (c > '0' && c <= '9')                          {                              result = -(c - '0');                              state = ParseState.Number;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                      case ParseState.Number:                          if (c >= '0' && c <= '9')                          {                              checked                              {                                  result = 10 * result - (c - '0');                              }                                if (result < minValue                              ) //check only minvalue' because in absolute value it's greater than maxvalue                                  throw DefaultMemory.CreateOverflowException(maxValue);                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                      case ParseState.TrailingWhite:                          if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                  }
Magic Number,ServiceStack.Text,UnsignedInteger<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseUInt64,The following statement contains a magic number: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                          if (c == '0')                          {                              state = ParseState.TrailingWhite;                          }                          else if (c > '0' && c <= '9')                          {                              result = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                              break;                      case ParseState.Number:                          if (c >= '0' && c <= '9')                          {                              checked                              {                                  result = 10 * result + (ulong) (c - '0');                              }                                if (result > maxValue                              ) //check only minvalue' because in absolute value it's greater than maxvalue                                  throw DefaultMemory.CreateOverflowException(maxValue);                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                      case ParseState.TrailingWhite:                          if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                  }
Magic Number,ServiceStack.Text,DirectStreamWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DirectStreamWriter.cs,Write,The following statement contains a magic number: (int)c < 128
Magic Number,ServiceStack.Text,Env,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Env.cs,Env,The following statement contains a magic number: IsUnix = platform == 4 || platform == 6 || platform == 128;
Magic Number,ServiceStack.Text,Env,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Env.cs,Env,The following statement contains a magic number: IsUnix = platform == 4 || platform == 6 || platform == 128;
Magic Number,ServiceStack.Text,Env,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Env.cs,Env,The following statement contains a magic number: IsUnix = platform == 4 || platform == 6 || platform == 128;
Magic Number,ServiceStack.Text,Env,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Env.cs,Env,The following statement contains a magic number: __releaseDate = new DateTime(2001'01'01);
Magic Number,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,CreateScope,The following statement contains a magic number: var value = parts.Length == 2 ? parts[1].ToLower() : null;
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: uint k = (uint)(data[currentIndex++] | data[currentIndex++] << 8 | data[currentIndex++] << 16 | data[currentIndex++] << 24);
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: uint k = (uint)(data[currentIndex++] | data[currentIndex++] << 8 | data[currentIndex++] << 16 | data[currentIndex++] << 24);
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: uint k = (uint)(data[currentIndex++] | data[currentIndex++] << 8 | data[currentIndex++] << 16 | data[currentIndex++] << 24);
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: length -= 4;
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: length >= 4
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length)              {                  case 3:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex++] << 8);                      h ^= (uint)(data[currentIndex] << 16);                      h *= m;                      break;                  case 2:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex] << 8);                      h *= m;                      break;                  case 1:                      h ^= data[currentIndex];                      h *= m;                      break;                  default:                      break;              }
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length)              {                  case 3:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex++] << 8);                      h ^= (uint)(data[currentIndex] << 16);                      h *= m;                      break;                  case 2:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex] << 8);                      h *= m;                      break;                  case 1:                      h ^= data[currentIndex];                      h *= m;                      break;                  default:                      break;              }
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length)              {                  case 3:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex++] << 8);                      h ^= (uint)(data[currentIndex] << 16);                      h *= m;                      break;                  case 2:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex] << 8);                      h *= m;                      break;                  case 1:                      h ^= data[currentIndex];                      h *= m;                      break;                  default:                      break;              }
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length)              {                  case 3:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex++] << 8);                      h ^= (uint)(data[currentIndex] << 16);                      h *= m;                      break;                  case 2:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex] << 8);                      h *= m;                      break;                  case 1:                      h ^= data[currentIndex];                      h *= m;                      break;                  default:                      break;              }
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: switch (length)              {                  case 3:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex++] << 8);                      h ^= (uint)(data[currentIndex] << 16);                      h *= m;                      break;                  case 2:                      h ^= (UInt16)(data[currentIndex++] | data[currentIndex] << 8);                      h *= m;                      break;                  case 1:                      h ^= data[currentIndex];                      h *= m;                      break;                  default:                      break;              }
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 13;
Magic Number,ServiceStack.Text,MurmurHash2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\MurmurHash2.cs,Hash,The following statement contains a magic number: h ^= h >> 15;
Magic Number,ServiceStack.Text,StringSpanExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringSpanExtensions.cs,ParseBoolean,The following statement contains a magic number: switch (value.Length)              {                  case 0:                      return false;                  case 1:                      switch (value[0])                      {                          case '1':                          case 't':                          case 'T':                          case 'y':                          case 'Y':                              return true;                          case '0':                          case 'f':                          case 'F':                          case 'n':                          case 'N':                              return false;                      }                      break;                  case 2:                      if (value[0] == 'o' && value[1] == 'n')                          return true;                      break;                  case 3:                      if (value[0] == 'o' && value[1] == 'f' && value[1] == 'f')                          return false;                      break;              }
Magic Number,ServiceStack.Text,StringSpanExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringSpanExtensions.cs,ParseBoolean,The following statement contains a magic number: switch (value.Length)              {                  case 0:                      return false;                  case 1:                      switch (value[0])                      {                          case '1':                          case 't':                          case 'T':                          case 'y':                          case 'Y':                              return true;                          case '0':                          case 'f':                          case 'F':                          case 'n':                          case 'N':                              return false;                      }                      break;                  case 2:                      if (value[0] == 'o' && value[1] == 'n')                          return true;                      break;                  case 3:                      if (value[0] == 'o' && value[1] == 'f' && value[1] == 'f')                          return false;                      break;              }
Magic Number,ServiceStack.Text,StringSpanExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringSpanExtensions.cs,WithoutBom,The following statement contains a magic number: return value.Length > 0 && value[0] == 65279                   ? value.Slice(1)                   : value;
Magic Number,ServiceStack.Text,StringSpanExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringSpanExtensions.cs,WithoutBom,The following statement contains a magic number: return value.Length > 3 && value[0] == 0xEF && value[1] == 0xBB && value[2] == 0xBF                   ? value.Slice(3)                   : value;
Magic Number,ServiceStack.Text,StringSpanExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringSpanExtensions.cs,WithoutBom,The following statement contains a magic number: return value.Length > 3 && value[0] == 0xEF && value[1] == 0xBB && value[2] == 0xBF                   ? value.Slice(3)                   : value;
Magic Number,ServiceStack.Text,StringSpanExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringSpanExtensions.cs,WithoutBom,The following statement contains a magic number: return value.Length > 3 && value[0] == 0xEF && value[1] == 0xBB && value[2] == 0xBF                   ? value.Slice(3)                   : value;
Magic Number,ServiceStack.Text,ConvertibleTypeKey,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\TranslateListWithElements.cs,GetHashCode,The following statement contains a magic number: return ((ToInstanceType != null ? ToInstanceType.GetHashCode() : 0) * 397)                      ^ (FromElementType != null ? FromElementType.GetHashCode() : 0);
Magic Number,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,PopulateWith,The following statement contains a magic number: var value = CreateDefaultValue(type' new Dictionary<Type' int>(20));
Magic Number,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,PopulateWith,The following statement contains a magic number: return PopulateObjectInternal(obj' new Dictionary<Type' int>(20));
Magic Number,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,GetMembers,The following statement contains a magic number: var name = info.Name.StartsWith("get_") ? info.Name.Substring(4) : info.Name;
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following statement contains a magic number: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,AssertNumbers,The following statement contains a magic number: throw new ArgumentException($"Invalid numbers passed to {name}: " +                                              $"({lhs?.GetType().Name ?? "null"} '{lhs?.ToString().SubstringWithEllipsis(0' 100)}'' " +                                              $"{rhs?.GetType().Name ?? "null"} '{rhs?.ToString().SubstringWithEllipsis(0' 100)}')");
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,AssertNumbers,The following statement contains a magic number: throw new ArgumentException($"Invalid numbers passed to {name}: " +                                              $"({lhs?.GetType().Name ?? "null"} '{lhs?.ToString().SubstringWithEllipsis(0' 100)}'' " +                                              $"{rhs?.GetType().Name ?? "null"} '{rhs?.ToString().SubstringWithEllipsis(0' 100)}')");
Magic Number,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryParse,The following statement contains a magic number: result = singleDigit - 48;
Magic Number,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsAny500,The following statement contains a magic number: return status >= HttpStatusCode.InternalServerError && (int)status < 600;
Magic Number,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,UploadFile,The following statement contains a magic number: fileStream.CopyTo(outputStream' 4096);
Magic Number,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsAny500,The following statement contains a magic number: return status >= HttpStatusCode.InternalServerError && (int)status < 600;
Magic Number,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,UploadFile,The following statement contains a magic number: fileStream.CopyTo(outputStream' 4096);
Magic Number,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetExtension,The following statement contains a magic number: parts.Length == 2
Magic Number,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetExtension,The following statement contains a magic number: parts.Length == 2
Magic Number,ServiceStack,HttpStatus,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetStatusDescription,The following statement contains a magic number: int i = statusCode / 100;
Magic Number,ServiceStack,HttpStatus,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetStatusDescription,The following statement contains a magic number: int j = statusCode % 100;
Magic Number,ServiceStack,HttpStatus,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetStatusDescription,The following statement contains a magic number: statusCode >= 100 && statusCode < 600
Magic Number,ServiceStack,HttpStatus,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetStatusDescription,The following statement contains a magic number: statusCode >= 100 && statusCode < 600
Magic Number,ServiceStack,HttpStatus,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetStatusDescription,The following statement contains a magic number: int i = statusCode / 100;
Magic Number,ServiceStack,HttpStatus,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetStatusDescription,The following statement contains a magic number: int j = statusCode % 100;
Magic Number,ServiceStack,HttpStatus,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetStatusDescription,The following statement contains a magic number: statusCode >= 100 && statusCode < 600
Magic Number,ServiceStack,HttpStatus,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetStatusDescription,The following statement contains a magic number: statusCode >= 100 && statusCode < 600
Magic Number,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertEvaluationLicense,The following statement contains a magic number: DateTime.UtcNow > new DateTime(2013' 12' 31)
Magic Number,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertEvaluationLicense,The following statement contains a magic number: DateTime.UtcNow > new DateTime(2013' 12' 31)
Magic Number,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertEvaluationLicense,The following statement contains a magic number: DateTime.UtcNow > new DateTime(2013' 12' 31)
Magic Number,ServiceStack,PathUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PathUtils.cs,ResolvePaths,The following statement contains a magic number: var prefix = schemePos >= 0                  ? path.Substring(0' schemePos + 3)                  : "";
Magic Number,ServiceStack,DeserializeDynamic<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Pcl.Dynamic.cs,VerifyAndGetStartIndex,The following statement contains a magic number: Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'                      JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));
Magic Number,ServiceStack,DeserializeDynamic<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Pcl.Dynamic.cs,VerifyAndGetStartIndex,The following statement contains a magic number: Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'                      JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));
Magic Number,ServiceStack,SerializerUtils<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,VerifyAndGetStartIndex,The following statement contains a magic number: Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'                      JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));
Magic Number,ServiceStack,SerializerUtils<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\PclExport.Net45.cs,VerifyAndGetStartIndex,The following statement contains a magic number: Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'                      JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));
Magic Number,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,WriteTo,The following statement contains a magic number: var data = new byte[4096];
Magic Number,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,CollapseWhitespace,The following statement contains a magic number: c < 32
Magic Number,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,CollapseWhitespace,The following statement contains a magic number: lastChar == 32
Magic Number,ServiceStack,StreamExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StreamExtensions.cs,CollapseWhitespace,The following statement contains a magic number: c == 32
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,BaseConvert,The following statement contains a magic number: to == 10 || d == 0
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,DecodeJsv,The following statement contains a magic number: const int endingQuotePos = 2;
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlEncode,The following statement contains a magic number: charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlEncode,The following statement contains a magic number: charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlEncode,The following statement contains a magic number: charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlEncode,The following statement contains a magic number: charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlEncode,The following statement contains a magic number: charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlEncode,The following statement contains a magic number: charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlEncode,The following statement contains a magic number: charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlEncode,The following statement contains a magic number: charCode >= 65 && charCode <= 90        // A-Z                      || charCode >= 97 && charCode <= 122    // a-z                      || charCode >= 48 && charCode <= 57     // 0-9                      || charCode >= 44 && charCode <= 46
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,UrlDecode,The following statement contains a magic number: bytes.Add(32);
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,HexUnescape,The following statement contains a magic number: var hexNo = Convert.ToInt32(text.Substring(i + 1' 2)' 16);
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,HexUnescape,The following statement contains a magic number: var hexNo = Convert.ToInt32(text.Substring(i + 1' 2)' 16);
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,HexUnescape,The following statement contains a magic number: i += 2;
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,ToRot13,The following statement contains a magic number: number += (number > 'm') ? -13 : 13;
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,ToRot13,The following statement contains a magic number: number += (number > 'm') ? -13 : 13;
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,FromUtf8Bytes,The following statement contains a magic number: return bytes == null ? null                  : bytes.Length > 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF                        ? Encoding.UTF8.GetString(bytes' 3' bytes.Length - 3)                      : Encoding.UTF8.GetString(bytes' 0' bytes.Length);
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,FromUtf8Bytes,The following statement contains a magic number: return bytes == null ? null                  : bytes.Length > 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF                        ? Encoding.UTF8.GetString(bytes' 3' bytes.Length - 3)                      : Encoding.UTF8.GetString(bytes' 0' bytes.Length);
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,FromUtf8Bytes,The following statement contains a magic number: return bytes == null ? null                  : bytes.Length > 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF                        ? Encoding.UTF8.GetString(bytes' 3' bytes.Length - 3)                      : Encoding.UTF8.GetString(bytes' 0' bytes.Length);
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,FromUtf8Bytes,The following statement contains a magic number: return bytes == null ? null                  : bytes.Length > 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF                        ? Encoding.UTF8.GetString(bytes' 3' bytes.Length - 3)                      : Encoding.UTF8.GetString(bytes' 0' bytes.Length);
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,WithoutBom,The following statement contains a magic number: return value.Length > 0 && value[0] == 65279                   ? value.Substring(1)                   : value;
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,FromBase64UrlSafe,The following statement contains a magic number: switch (output.Length % 4) // Pad with trailing '='s              {                  case 0: break; // No pad chars in this case                  case 2: output += "=="; break; // Two pad chars                  case 3: output += "="; break;  // One pad char                  default: throw new Exception("Illegal base64url string!");              }
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,FromBase64UrlSafe,The following statement contains a magic number: switch (output.Length % 4) // Pad with trailing '='s              {                  case 0: break; // No pad chars in this case                  case 2: output += "=="; break; // Two pad chars                  case 3: output += "="; break;  // One pad char                  default: throw new Exception("Illegal base64url string!");              }
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,FromBase64UrlSafe,The following statement contains a magic number: switch (output.Length % 4) // Pad with trailing '='s              {                  case 0: break; // No pad chars in this case                  case 2: output += "=="; break; // Two pad chars                  case 3: output += "="; break;  // One pad char                  default: throw new Exception("Illegal base64url string!");              }
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,StripQuotes,The following statement contains a magic number: return string.IsNullOrEmpty(text) || text.Length < 2                  ? text                  : text[0] == '"' && text[text.Length - 1] == '"'                      ? text.Substring(1' text.Length - 2)                      : text;
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,StripQuotes,The following statement contains a magic number: return string.IsNullOrEmpty(text) || text.Length < 2                  ? text                  : text[0] == '"' && text[text.Length - 1] == '"'                      ? text.Substring(1' text.Length - 2)                      : text;
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,ParseKeyValueText,The following statement contains a magic number: to[key] = parts.Length == 2 ? parts[1].Trim() : null;
Magic Number,ServiceStack,StringExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringExtensions.cs,ParseAsKeyValues,The following statement contains a magic number: to.Add(new KeyValuePair<string' string>(key' parts.Length == 2 ? parts[1].Trim() : null));
Magic Number,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseManual,The following statement contains a magic number: return dateParts.Length == 3 && dateParts[2].Length == "YYYY".Length                      ? new DateTime(int.Parse(dateParts[2])' int.Parse(dateParts[1])' int.Parse(dateParts[0])' 0' 0' 0' 0'                          dateKind)                      : new DateTime(int.Parse(dateParts[0])' int.Parse(dateParts[1])' int.Parse(dateParts[2])' 0' 0' 0' 0'                          dateKind);
Magic Number,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseManual,The following statement contains a magic number: return dateParts.Length == 3 && dateParts[2].Length == "YYYY".Length                      ? new DateTime(int.Parse(dateParts[2])' int.Parse(dateParts[1])' int.Parse(dateParts[0])' 0' 0' 0' 0'                          dateKind)                      : new DateTime(int.Parse(dateParts[0])' int.Parse(dateParts[1])' int.Parse(dateParts[2])' 0' 0' 0' 0'                          dateKind);
Magic Number,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseManual,The following statement contains a magic number: return dateParts.Length == 3 && dateParts[2].Length == "YYYY".Length                      ? new DateTime(int.Parse(dateParts[2])' int.Parse(dateParts[1])' int.Parse(dateParts[0])' 0' 0' 0' 0'                          dateKind)                      : new DateTime(int.Parse(dateParts[0])' int.Parse(dateParts[1])' int.Parse(dateParts[2])' 0' 0' 0' 0'                          dateKind);
Magic Number,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseManual,The following statement contains a magic number: return dateParts.Length == 3 && dateParts[2].Length == "YYYY".Length                      ? new DateTime(int.Parse(dateParts[2])' int.Parse(dateParts[1])' int.Parse(dateParts[0])' 0' 0' 0' 0'                          dateKind)                      : new DateTime(int.Parse(dateParts[0])' int.Parse(dateParts[1])' int.Parse(dateParts[2])' 0' 0' 0' 0'                          dateKind);
Magic Number,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseDateTimeOffset,The following statement contains a magic number: dateTimeOffsetStr.LastIndexOfAny(TimeZoneChars) < 10
Magic Number,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,VerifyAndGetStartIndex,The following statement contains a magic number: Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'                      JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));
Magic Number,ServiceStack.Text.Common,DeserializeDictionary<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,VerifyAndGetStartIndex,The following statement contains a magic number: Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'                      JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));
Magic Number,ServiceStack.Text.Common,TypesKey,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeDictionary.cs,TypesKey,The following statement contains a magic number: hashcode = Type1.GetHashCode() ^ (37 * Type2.GetHashCode());
Magic Number,ServiceStack.Text.Common,DeserializeKeyValuePair<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeKeyValuePair.cs,VerifyAndGetStartIndex,The following statement contains a magic number: Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'                      JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));
Magic Number,ServiceStack.Text.Common,DeserializeKeyValuePair<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeKeyValuePair.cs,VerifyAndGetStartIndex,The following statement contains a magic number: Tracer.Instance.WriteDebug("WARN: Map definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'                      JsWriter.MapStartChar' createMapType != null ? createMapType.Name : "Dictionary<'>"' value.Substring(0' value.Length < 50 ? value.Length : 50));
Magic Number,ServiceStack.Text.Common,DeserializeListWithElements<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeListWithElements.cs,StripList,The following statement contains a magic number: const int endQuotePos = 2;
Magic Number,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseQuotedPrimitive,The following statement contains a magic number: value.Length > 14 && value[10] == 'T' &&                      (value.EndsWithInvariant("Z")                      || value[value.Length - 6] == '+'                      || value[value.Length - 6] == '-')
Magic Number,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseQuotedPrimitive,The following statement contains a magic number: value.Length > 14 && value[10] == 'T' &&                      (value.EndsWithInvariant("Z")                      || value[value.Length - 6] == '+'                      || value[value.Length - 6] == '-')
Magic Number,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseQuotedPrimitive,The following statement contains a magic number: value.Length > 14 && value[10] == 'T' &&                      (value.EndsWithInvariant("Z")                      || value[value.Length - 6] == '+'                      || value[value.Length - 6] == '-')
Magic Number,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseQuotedPrimitive,The following statement contains a magic number: value.Length > 14 && value[10] == 'T' &&                      (value.EndsWithInvariant("Z")                      || value[value.Length - 6] == '+'                      || value[value.Length - 6] == '-')
Magic Number,ServiceStack.Text.Common,DeserializeType<TSerializer>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseQuotedPrimitive,The following statement contains a magic number: value.Length == 29 && (value.EndsWithInvariant("GMT"))
Magic Number,ServiceStack.Text.Common,TypeAccessorUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,FindPropertyAccessor,The following statement contains a magic number: var mid = (lo + hi + 1) / 2;
Magic Number,ServiceStack.Text.Common,TypeAccessorUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,FindPropertyAccessor,The following statement contains a magic number: mid = (lo + hi + 1) / 2;
Magic Number,ServiceStack.Text.Common,DeserializeTypeExensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseNumber,The following statement contains a magic number: var result = singleDigit - 48;
Magic Number,ServiceStack.Text.Common,DeserializeTypeExensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseNumber,The following statement contains a magic number: singleDigit >= 48 || singleDigit <= 57
Magic Number,ServiceStack.Text.Common,DeserializeTypeExensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeType.cs,ParseNumber,The following statement contains a magic number: singleDigit >= 48 || singleDigit <= 57
Magic Number,ServiceStack.Text.Common,DeserializeTypeRef,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRef.cs,CreateSerializationError,The following statement contains a magic number: return new SerializationException(String.Format(              "Type definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'              JsWriter.MapStartChar' type.Name' strType.Substring(0' strType.Length < 50 ? strType.Length : 50)));
Magic Number,ServiceStack.Text.Common,DeserializeTypeRef,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeTypeRef.cs,CreateSerializationError,The following statement contains a magic number: return new SerializationException(String.Format(              "Type definitions should start with a '{0}'' expecting serialized type '{1}'' got string starting with: {2}"'              JsWriter.MapStartChar' type.Name' strType.Substring(0' strType.Length < 50 ? strType.Length : 50)));
Magic Number,ServiceStack.Text.Common,MapKey,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\WriteDictionary.cs,GetHashCode,The following statement contains a magic number: return ((KeyType != null ? KeyType.GetHashCode() : 0) * 397) ^ (ValueType != null ? ValueType.GetHashCode() : 0);
Magic Number,ServiceStack.Text.Controller,PathInfo,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Controller\PathInfo.cs,Parse,The following statement contains a magic number: var controllerName = actionParts.Length == 2  									? actionParts[0]  									: null;
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,ParseString,The following statement contains a magic number: throw new Exception("Invalid unquoted string starting with: " + json.SafeSubstring(50).ToString());
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,ParseString,The following statement contains a magic number: index += 4;
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,ParseString,The following statement contains a magic number: throw new Exception("Invalid unquoted string ending with: " + json.SafeSubstring(json.Length - 50' 50).ToString());
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,ParseString,The following statement contains a magic number: throw new Exception("Invalid unquoted string ending with: " + json.SafeSubstring(json.Length - 50' 50).ToString());
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,UnescapeSafeString,The following statement contains a magic number: return value.Slice(1' value.Length - 2);
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The following statement contains a magic number: switch (c)                      {                          case 'a':                              output.Append('\a');                              count++;                              break;                          case 'b':                              output.Append('\b');                              count++;                              break;                          case 'f':                              output.Append('\f');                              count++;                              break;                          case 'n':                              output.Append('\n');                              count++;                              break;                          case 'r':                              output.Append('\r');                              count++;                              break;                          case 'v':                              output.Append('\v');                              count++;                              break;                          case 't':                              output.Append('\t');                              count++;                              break;                          case 'u':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              {                                  output.Append(c);                              }                              break;                          case 'x':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              if (count + 2 < length)                              {                                  var unicodeString = input.Slice(count + 1' 2);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 3;                              }                              else                              {                                  output.Append(input.Slice(start' count - start));                              }                              break;                          default:                              output.Append(c);                              count++;                              break;                      }
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The following statement contains a magic number: switch (c)                      {                          case 'a':                              output.Append('\a');                              count++;                              break;                          case 'b':                              output.Append('\b');                              count++;                              break;                          case 'f':                              output.Append('\f');                              count++;                              break;                          case 'n':                              output.Append('\n');                              count++;                              break;                          case 'r':                              output.Append('\r');                              count++;                              break;                          case 'v':                              output.Append('\v');                              count++;                              break;                          case 't':                              output.Append('\t');                              count++;                              break;                          case 'u':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              {                                  output.Append(c);                              }                              break;                          case 'x':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              if (count + 2 < length)                              {                                  var unicodeString = input.Slice(count + 1' 2);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 3;                              }                              else                              {                                  output.Append(input.Slice(start' count - start));                              }                              break;                          default:                              output.Append(c);                              count++;                              break;                      }
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The following statement contains a magic number: switch (c)                      {                          case 'a':                              output.Append('\a');                              count++;                              break;                          case 'b':                              output.Append('\b');                              count++;                              break;                          case 'f':                              output.Append('\f');                              count++;                              break;                          case 'n':                              output.Append('\n');                              count++;                              break;                          case 'r':                              output.Append('\r');                              count++;                              break;                          case 'v':                              output.Append('\v');                              count++;                              break;                          case 't':                              output.Append('\t');                              count++;                              break;                          case 'u':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              {                                  output.Append(c);                              }                              break;                          case 'x':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              if (count + 2 < length)                              {                                  var unicodeString = input.Slice(count + 1' 2);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 3;                              }                              else                              {                                  output.Append(input.Slice(start' count - start));                              }                              break;                          default:                              output.Append(c);                              count++;                              break;                      }
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The following statement contains a magic number: switch (c)                      {                          case 'a':                              output.Append('\a');                              count++;                              break;                          case 'b':                              output.Append('\b');                              count++;                              break;                          case 'f':                              output.Append('\f');                              count++;                              break;                          case 'n':                              output.Append('\n');                              count++;                              break;                          case 'r':                              output.Append('\r');                              count++;                              break;                          case 'v':                              output.Append('\v');                              count++;                              break;                          case 't':                              output.Append('\t');                              count++;                              break;                          case 'u':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              {                                  output.Append(c);                              }                              break;                          case 'x':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              if (count + 2 < length)                              {                                  var unicodeString = input.Slice(count + 1' 2);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 3;                              }                              else                              {                                  output.Append(input.Slice(start' count - start));                              }                              break;                          default:                              output.Append(c);                              count++;                              break;                      }
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The following statement contains a magic number: switch (c)                      {                          case 'a':                              output.Append('\a');                              count++;                              break;                          case 'b':                              output.Append('\b');                              count++;                              break;                          case 'f':                              output.Append('\f');                              count++;                              break;                          case 'n':                              output.Append('\n');                              count++;                              break;                          case 'r':                              output.Append('\r');                              count++;                              break;                          case 'v':                              output.Append('\v');                              count++;                              break;                          case 't':                              output.Append('\t');                              count++;                              break;                          case 'u':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              {                                  output.Append(c);                              }                              break;                          case 'x':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              if (count + 2 < length)                              {                                  var unicodeString = input.Slice(count + 1' 2);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 3;                              }                              else                              {                                  output.Append(input.Slice(start' count - start));                              }                              break;                          default:                              output.Append(c);                              count++;                              break;                      }
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The following statement contains a magic number: switch (c)                      {                          case 'a':                              output.Append('\a');                              count++;                              break;                          case 'b':                              output.Append('\b');                              count++;                              break;                          case 'f':                              output.Append('\f');                              count++;                              break;                          case 'n':                              output.Append('\n');                              count++;                              break;                          case 'r':                              output.Append('\r');                              count++;                              break;                          case 'v':                              output.Append('\v');                              count++;                              break;                          case 't':                              output.Append('\t');                              count++;                              break;                          case 'u':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              {                                  output.Append(c);                              }                              break;                          case 'x':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              if (count + 2 < length)                              {                                  var unicodeString = input.Slice(count + 1' 2);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 3;                              }                              else                              {                                  output.Append(input.Slice(start' count - start));                              }                              break;                          default:                              output.Append(c);                              count++;                              break;                      }
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The following statement contains a magic number: switch (c)                      {                          case 'a':                              output.Append('\a');                              count++;                              break;                          case 'b':                              output.Append('\b');                              count++;                              break;                          case 'f':                              output.Append('\f');                              count++;                              break;                          case 'n':                              output.Append('\n');                              count++;                              break;                          case 'r':                              output.Append('\r');                              count++;                              break;                          case 'v':                              output.Append('\v');                              count++;                              break;                          case 't':                              output.Append('\t');                              count++;                              break;                          case 'u':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              {                                  output.Append(c);                              }                              break;                          case 'x':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              if (count + 2 < length)                              {                                  var unicodeString = input.Slice(count + 1' 2);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 3;                              }                              else                              {                                  output.Append(input.Slice(start' count - start));                              }                              break;                          default:                              output.Append(c);                              count++;                              break;                      }
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The following statement contains a magic number: switch (c)                      {                          case 'a':                              output.Append('\a');                              count++;                              break;                          case 'b':                              output.Append('\b');                              count++;                              break;                          case 'f':                              output.Append('\f');                              count++;                              break;                          case 'n':                              output.Append('\n');                              count++;                              break;                          case 'r':                              output.Append('\r');                              count++;                              break;                          case 'v':                              output.Append('\v');                              count++;                              break;                          case 't':                              output.Append('\t');                              count++;                              break;                          case 'u':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              {                                  output.Append(c);                              }                              break;                          case 'x':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              if (count + 2 < length)                              {                                  var unicodeString = input.Slice(count + 1' 2);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 3;                              }                              else                              {                                  output.Append(input.Slice(start' count - start));                              }                              break;                          default:                              output.Append(c);                              count++;                              break;                      }
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,Unescape,The following statement contains a magic number: switch (c)                      {                          case 'a':                              output.Append('\a');                              count++;                              break;                          case 'b':                              output.Append('\b');                              count++;                              break;                          case 'f':                              output.Append('\f');                              count++;                              break;                          case 'n':                              output.Append('\n');                              count++;                              break;                          case 'r':                              output.Append('\r');                              count++;                              break;                          case 'v':                              output.Append('\v');                              count++;                              break;                          case 't':                              output.Append('\t');                              count++;                              break;                          case 'u':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              {                                  output.Append(c);                              }                              break;                          case 'x':                              if (count + 4 < length)                              {                                  var unicodeString = input.Slice(count + 1' 4);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 5;                              }                              else                              if (count + 2 < length)                              {                                  var unicodeString = input.Slice(count + 1' 2);                                  var unicodeIntVal = MemoryProvider.Instance.ParseUInt32(unicodeString' NumberStyles.HexNumber);                                  output.Append(ConvertFromUtf32((int)unicodeIntVal));                                  count += 3;                              }                              else                              {                                  output.Append(input.Slice(start' count - start));                              }                              break;                          default:                              output.Append(c);                              count++;                              break;                      }
Magic Number,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new[] {(char) ((utf32 >> 10) + 0xD800)' (char) (utf32 % 0x0400 + 0xDC00)});
Magic Number,ServiceStack.Text.Json,JsonUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonUtils.cs,WriteString,The following statement contains a magic number: var hexSeqBuffer = new char[4];
Magic Number,ServiceStack.Text.Json,JsonUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonUtils.cs,IsPrintable,The following statement contains a magic number: return c >= 32 && c <= 126;
Magic Number,ServiceStack.Text.Json,JsonUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonUtils.cs,IsPrintable,The following statement contains a magic number: return c >= 32 && c <= 126;
Magic Number,ServiceStack.Text.Json,JsonUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonUtils.cs,IntToHex,The following statement contains a magic number: hex[i] = (char)((num < 10 ? 0x30 : 0x37) + num);
Magic Number,ServiceStack.Text.Json,JsonUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonUtils.cs,IntToHex,The following statement contains a magic number: intValue >>= 4;
Magic Number,ServiceStack.Text.Pools,BufferPool,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Pools\BufferPool.cs,ResizeAndFlushLeft,The following statement contains a magic number: int newLength = buffer.Length * 2;
Magic Number,ServiceStack.Text.Pools,CharPool,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Pools\CharPool .cs,ResizeAndFlushLeft,The following statement contains a magic number: int newLength = buffer.Length * 2;
Magic Number,ServiceStack.Text.Support,DoubleConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\DoubleConverter.cs,ToExactString,The following statement contains a magic number: int exponent = (int)((bits >> 52) & 0x7ffL);
Magic Number,ServiceStack.Text.Support,DoubleConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\DoubleConverter.cs,ToExactString,The following statement contains a magic number: exponent -= 1075;
Magic Number,ServiceStack.Text.Support,DoubleConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\DoubleConverter.cs,ToExactString,The following statement contains a magic number: ad.MultiplyBy(5);
Magic Number,ServiceStack.Text.Support,ArbitraryDecimal,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\DoubleConverter.cs,MultiplyBy,The following statement contains a magic number: result[i] = (byte)(resultDigit / 10);
Magic Number,ServiceStack.Text.Support,ArbitraryDecimal,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\DoubleConverter.cs,MultiplyBy,The following statement contains a magic number: result[i + 1] = (byte)(resultDigit % 10);
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,The following statement contains a magic number: long sec = (seconds >= 60 ? seconds % 60 : seconds);
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,The following statement contains a magic number: long sec = (seconds >= 60 ? seconds % 60 : seconds);
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,The following statement contains a magic number: long min = (seconds = (seconds / 60)) >= 60 ? seconds % 60 : seconds;
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,The following statement contains a magic number: long min = (seconds = (seconds / 60)) >= 60 ? seconds % 60 : seconds;
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,The following statement contains a magic number: long min = (seconds = (seconds / 60)) >= 60 ? seconds % 60 : seconds;
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,The following statement contains a magic number: long hours = (seconds = (seconds / 60)) >= 24 ? seconds % 24 : seconds;
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,The following statement contains a magic number: long hours = (seconds = (seconds / 60)) >= 24 ? seconds % 24 : seconds;
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,The following statement contains a magic number: long hours = (seconds = (seconds / 60)) >= 24 ? seconds % 24 : seconds;
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,ToXsdDuration,The following statement contains a magic number: long days = seconds / 24;
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: var hasTime = t.Length == 2;
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: d.Length == 2
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: h.Length == 2
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: m.Length == 2
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: s.Length == 2
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: decimal totalSecs = 0                      + (days * 24 * 60 * 60)                      + (hours * 60 * 60)                      + (minutes * 60)                      + (seconds);
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: decimal totalSecs = 0                      + (days * 24 * 60 * 60)                      + (hours * 60 * 60)                      + (minutes * 60)                      + (seconds);
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: decimal totalSecs = 0                      + (days * 24 * 60 * 60)                      + (hours * 60 * 60)                      + (minutes * 60)                      + (seconds);
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: decimal totalSecs = 0                      + (days * 24 * 60 * 60)                      + (hours * 60 * 60)                      + (minutes * 60)                      + (seconds);
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: decimal totalSecs = 0                      + (days * 24 * 60 * 60)                      + (hours * 60 * 60)                      + (minutes * 60)                      + (seconds);
Magic Number,ServiceStack.Text.Support,TimeSpanConverter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TimeSpanConverter.cs,FromXsdDuration,The following statement contains a magic number: decimal totalSecs = 0                      + (days * 24 * 60 * 60)                      + (hours * 60 * 60)                      + (minutes * 60)                      + (seconds);
Magic Number,ServiceStack.Text.Support,TypePair,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Support\TypePair.cs,GetHashCode,The following statement contains a magic number: return ((Args1 != null ? Args1.GetHashCode() : 0)*397) ^ (Arg2 != null ? Arg2.GetHashCode() : 0);
Missing Default,ServiceStack.Text,DefaultMemory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,TryParseDecimal,The following switch statement is missing a default case: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                            if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Sign:                          if (c == '.')                          {                              noIntegerPart = true;                              state = ParseState.FractionNumber;                                if (i == end)                                  return false;                          }                          else if (c == '0')                          {                              state = ParseState.DecimalPoint;                          }                          else if (c > '0' && c <= '9')                          {                              preResult = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else return false;                            break;                      case ParseState.Number:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else if (allowThousands && c == ''') { }                          else return false;                            break;                      case ParseState.DecimalPoint:                          if (c == '.')                          {                              state = ParseState.FractionNumber;                          }                          else return false;                            break;                      case ParseState.FractionNumber:                          if (JsonUtils.IsWhiteSpace(c))                          {                              if (noIntegerPart)                                  return false;                              state = ParseState.TrailingWhite;                          }                          else if (c == 'e' || c == 'E')                          {                              if (noIntegerPart && scale == 0)                                  return false;                              state = ParseState.Exponent;                          }                          else if (c >= '0' && c <= '9')                          {                              if (isLargeNumber)                              {                                  checked                                  {                                      result = 10 * result + (c - '0');                                  }                              }                              else                              {                                  preResult = 10 * preResult + (ulong) (c - '0');                                  if (preResult > ulong.MaxValue / 10 - 10)                                  {                                      isLargeNumber = true;                                      result = preResult;                                  }                              }                                scale++;                          }                          else return false;                            break;                      case ParseState.Exponent:                          bool expNegative = false;                          if (c == '-')                          {                              if (i == end)                                  return false;                                expNegative = true;                              c = value[i++];                          }                          else if (c == '+')                          {                              if (i == end)                                  return false;                              c = value[i++];                          }                            //skip leading zeroes                          while (c == '0' && i < end) c = value[i++];                            if (c > '0' && c <= '9')                          {                              var exp = SignedInteger<long>.ParseInt64(value.Slice(i - 1' end - i + 1));                              if (exp < sbyte.MinValue || exp > sbyte.MaxValue)                                  return false;                                if (!expNegative)                              {                                  exp = (sbyte) -exp;                              }                                if (exp >= 0 || scale > -exp)                              {                                  scale += (sbyte) exp;                              }                              else                              {                                  for (int j = 0; j < -exp - scale; j++)                                  {                                      if (isLargeNumber)                                      {                                          checked                                          {                                              result = 10 * result;                                          }                                      }                                      else                                      {                                          preResult = 10 * preResult;                                          if (preResult > ulong.MaxValue / 10)                                          {                                              isLargeNumber = true;                                              result = preResult;                                          }                                      }                                  }                                    scale = 0;                              }                                //set i to end of string' because ParseInt16 eats number and all trailing whites                              i = end;                          }                          else return false;                            break;                      case ParseState.TrailingWhite:                          if (!JsonUtils.IsWhiteSpace(c))                              return false;                          break;                  }
Missing Default,ServiceStack.Text,SignedInteger<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseInt64,The following switch statement is missing a default case: switch (state)                  {                      case ParseState.LeadingWhite:                          if (c == '-')                          {                              negative = true;                              state = ParseState.Sign;                          }                          else if (c == '0')                          {                              state = ParseState.TrailingWhite;                          }                          else if (c > '0' && c <= '9')                          {                              result = -(c - '0');                              state = ParseState.Number;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                      case ParseState.Sign:                          if (c == '0')                          {                              state = ParseState.TrailingWhite;                          }                          else if (c > '0' && c <= '9')                          {                              result = -(c - '0');                              state = ParseState.Number;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                      case ParseState.Number:                          if (c >= '0' && c <= '9')                          {                              checked                              {                                  result = 10 * result - (c - '0');                              }                                if (result < minValue                              ) //check only minvalue' because in absolute value it's greater than maxvalue                                  throw DefaultMemory.CreateOverflowException(maxValue);                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                      case ParseState.TrailingWhite:                          if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                  }
Missing Default,ServiceStack.Text,UnsignedInteger<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DefaultMemory.cs,ParseUInt64,The following switch statement is missing a default case: switch (state)                  {                      case ParseState.LeadingWhite:                          if (JsonUtils.IsWhiteSpace(c))                              break;                          if (c == '0')                          {                              state = ParseState.TrailingWhite;                          }                          else if (c > '0' && c <= '9')                          {                              result = (ulong) (c - '0');                              state = ParseState.Number;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                              break;                      case ParseState.Number:                          if (c >= '0' && c <= '9')                          {                              checked                              {                                  result = 10 * result + (ulong) (c - '0');                              }                                if (result > maxValue                              ) //check only minvalue' because in absolute value it's greater than maxvalue                                  throw DefaultMemory.CreateOverflowException(maxValue);                          }                          else if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                      case ParseState.TrailingWhite:                          if (JsonUtils.IsWhiteSpace(c))                          {                              state = ParseState.TrailingWhite;                          }                          else throw new FormatException(MemoryProvider.BadFormat);                            break;                  }
Missing Default,ServiceStack.Text,Env,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Env.cs,Env,The following switch statement is missing a default case: switch (Environment.OSVersion.Platform)              {                  case PlatformID.Win32NT:                  case PlatformID.Win32S:                  case PlatformID.Win32Windows:                  case PlatformID.WinCE:                      IsWindows = true;                  break;              }
Missing Default,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,CreateScope,The following switch statement is missing a default case: switch (key)                  {                      case "cotisd":                      case "convertobjecttypesintostringdictionary":                          scope.ConvertObjectTypesIntoStringDictionary = boolValue;                          break;                      case "ttpptv":                      case "trytoparseprimitivetypevalues":                          scope.TryToParsePrimitiveTypeValues = boolValue;                          break;                      case "ttpnt":                      case "trytoparsenumerictype":                          scope.TryToParseNumericType = boolValue;                          break;                      case "edv":                      case "excludedefaultvalues":                          scope.ExcludeDefaultValues = boolValue;                          break;                      case "inv":                      case "includenullvalues":                          scope.IncludeNullValues = boolValue;                          break;                      case "invid":                      case "includenullvaluesindictionaries":                          scope.IncludeNullValuesInDictionaries = boolValue;                          break;                      case "ide":                      case "includedefaultenums":                          scope.IncludeDefaultEnums = boolValue;                          break;                      case "eti":                      case "excludetypeinfo":                          scope.ExcludeTypeInfo = boolValue;                          break;                      case "iti":                      case "includetypeinfo":                          scope.IncludeTypeInfo = boolValue;                          break;                      case "eccn":                      case "emitcamelcasenames":                          scope.TextCase = boolValue ? TextCase.CamelCase : scope.TextCase;                          break;                      case "elun":                      case "emitlowercaseunderscorenames":                          scope.TextCase = boolValue ? TextCase.SnakeCase : scope.TextCase;                          break;                      case "pi":                      case "preferinterfaces":                          scope.PreferInterfaces = boolValue;                          break;                      case "tode":                      case "throwondeserializationerror":                      case "toe":                      case "throwonerror":                          scope.ThrowOnError = boolValue;                          break;                      case "teai":                      case "treatenumasinteger":                          scope.TreatEnumAsInteger = boolValue;                          break;                      case "sdtc":                      case "skipdatetimeconversion":                          scope.SkipDateTimeConversion = boolValue;                          break;                      case "auu":                      case "alwaysuseutc":                          scope.AlwaysUseUtc = boolValue;                          break;                      case "au":                      case "assumeutc":                          scope.AssumeUtc = boolValue;                          break;                      case "auo":                      case "appendutcoffset":                          scope.AppendUtcOffset = boolValue;                          break;                      case "ipf":                      case "includepublicfields":                          scope.IncludePublicFields = boolValue;                          break;                      case "dh":                      case "datehandler":                          switch (value)                          {                              case "timestampoffset":                              case "to":                                  scope.DateHandler = DateHandler.TimestampOffset;                                  break;                              case "dcjsc":                              case "dcjscompatible":                                  scope.DateHandler = DateHandler.DCJSCompatible;                                  break;                              case "iso8601":                                  scope.DateHandler = DateHandler.ISO8601;                                  break;                              case "iso8601do":                              case "iso8601dateonly":                                  scope.DateHandler = DateHandler.ISO8601DateOnly;                                  break;                              case "iso8601dt":                              case "iso8601datetime":                                  scope.DateHandler = DateHandler.ISO8601DateTime;                                  break;                              case "rfc1123":                                  scope.DateHandler = DateHandler.RFC1123;                                  break;                              case "ut":                              case "unixtime":                                  scope.DateHandler = DateHandler.UnixTime;                                  break;                              case "utm":                              case "unixtimems":                                  scope.DateHandler = DateHandler.UnixTimeMs;                                  break;                          }                          break;                      case "tsh":                      case "timespanhandler":                          switch (value)                          {                              case "df":                              case "durationformat":                                  scope.TimeSpanHandler = TimeSpanHandler.DurationFormat;                                  break;                              case "sf":                              case "standardformat":                                  scope.TimeSpanHandler = TimeSpanHandler.StandardFormat;                                  break;                          }                          break;                      case "pc":                      case "propertyconvention":                          switch (value)                          {                              case "l":                              case "lenient":                                  scope.PropertyConvention = PropertyConvention.Lenient;                                  break;                              case "s":                              case "strict":                                  scope.PropertyConvention = PropertyConvention.Strict;                                  break;                          }                          break;                      case "tc":                      case "textcase":                          switch (value)                          {                              case "d":                              case "default":                                  scope.TextCase = TextCase.Default;                                  break;                              case "pc":                              case "pascalcase":                                  scope.TextCase = TextCase.PascalCase;                                  break;                              case "cc":                              case "camelcase":                                  scope.TextCase = TextCase.CamelCase;                                  break;                              case "sc":                              case "snakecase":                                  scope.TextCase = TextCase.SnakeCase;                                  break;                          }                          break;                  }
Missing Default,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,CreateScope,The following switch statement is missing a default case: switch (value)                          {                              case "timestampoffset":                              case "to":                                  scope.DateHandler = DateHandler.TimestampOffset;                                  break;                              case "dcjsc":                              case "dcjscompatible":                                  scope.DateHandler = DateHandler.DCJSCompatible;                                  break;                              case "iso8601":                                  scope.DateHandler = DateHandler.ISO8601;                                  break;                              case "iso8601do":                              case "iso8601dateonly":                                  scope.DateHandler = DateHandler.ISO8601DateOnly;                                  break;                              case "iso8601dt":                              case "iso8601datetime":                                  scope.DateHandler = DateHandler.ISO8601DateTime;                                  break;                              case "rfc1123":                                  scope.DateHandler = DateHandler.RFC1123;                                  break;                              case "ut":                              case "unixtime":                                  scope.DateHandler = DateHandler.UnixTime;                                  break;                              case "utm":                              case "unixtimems":                                  scope.DateHandler = DateHandler.UnixTimeMs;                                  break;                          }
Missing Default,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,CreateScope,The following switch statement is missing a default case: switch (value)                          {                              case "df":                              case "durationformat":                                  scope.TimeSpanHandler = TimeSpanHandler.DurationFormat;                                  break;                              case "sf":                              case "standardformat":                                  scope.TimeSpanHandler = TimeSpanHandler.StandardFormat;                                  break;                          }
Missing Default,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,CreateScope,The following switch statement is missing a default case: switch (value)                          {                              case "l":                              case "lenient":                                  scope.PropertyConvention = PropertyConvention.Lenient;                                  break;                              case "s":                              case "strict":                                  scope.PropertyConvention = PropertyConvention.Strict;                                  break;                          }
Missing Default,ServiceStack.Text,JsConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\JsConfig.cs,CreateScope,The following switch statement is missing a default case: switch (value)                          {                              case "d":                              case "default":                                  scope.TextCase = TextCase.Default;                                  break;                              case "pc":                              case "pascalcase":                                  scope.TextCase = TextCase.PascalCase;                                  break;                              case "cc":                              case "camelcase":                                  scope.TextCase = TextCase.CamelCase;                                  break;                              case "sc":                              case "snakecase":                                  scope.TextCase = TextCase.SnakeCase;                                  break;                          }
Missing Default,ServiceStack.Text,StringSpanExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringSpanExtensions.cs,ParseBoolean,The following switch statement is missing a default case: switch (value.Length)              {                  case 0:                      return false;                  case 1:                      switch (value[0])                      {                          case '1':                          case 't':                          case 'T':                          case 'y':                          case 'Y':                              return true;                          case '0':                          case 'f':                          case 'F':                          case 'n':                          case 'N':                              return false;                      }                      break;                  case 2:                      if (value[0] == 'o' && value[1] == 'n')                          return true;                      break;                  case 3:                      if (value[0] == 'o' && value[1] == 'f' && value[1] == 'f')                          return false;                      break;              }
Missing Default,ServiceStack.Text,StringSpanExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\StringSpanExtensions.cs,ParseBoolean,The following switch statement is missing a default case: switch (value[0])                      {                          case '1':                          case 't':                          case 'T':                          case 'y':                          case 'Y':                              return true;                          case '0':                          case 'f':                          case 'F':                          case 'n':                          case 'N':                              return false;                      }
Missing Default,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,TryConvertCollections,The following switch statement is missing a default case: switch (obj)                      {                          case List<KeyValuePair<string' string>> toList: {                              foreach (var key in d.Keys)                              {                                  toList.Add(new KeyValuePair<string' string>(key.ConvertTo<string>()' d[key].ConvertTo<string>()));                              }                              return toList;                          }                          case List<KeyValuePair<string' object>> toObjList: {                              foreach (var key in d.Keys)                              {                                  toObjList.Add(new KeyValuePair<string' object>(key.ConvertTo<string>()' d[key]));                              }                              return toObjList;                          }                          case IDictionary toDict: {                              if (toType.GetKeyValuePairsTypes(out var toKeyType' out var toValueType))                              {                                  foreach (var key in d.Keys)                                  {                                      var toKey = toKeyType != null                                          ? key.ConvertTo(toKeyType)                                          : key;                                      var toValue = d[key].ConvertTo(toValueType);                                      toDict[toKey] = toValue;                                  }                                  return toDict;                              }                              else                              {                                  var from = fromValue.ToObjectDictionary();                                  var to = from.FromObjectDictionary(toType);                                  return to;                              }                          }                      }
Missing Default,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,TryConvertCollections,The following switch statement is missing a default case: switch (obj) {                                  case IDictionary toDict: {                                      toType.GetKeyValuePairsTypes(out var toKeyType' out var toValueType);                                      foreach (var entry in sKvps)                                      {                                          var toKey = toKeyType != null                                              ? entry.Key.ConvertTo(toKeyType)                                              : entry.Key;                                          toDict[toKey] = toValueType != null                                              ? entry.Value.ConvertTo(toValueType)                                              : entry.Value;                                      }                                      return toDict;                                  }                                  case List<KeyValuePair<string' string>> toList: {                                      foreach (var entry in sKvps)                                      {                                          toList.Add(new KeyValuePair<string' string>(entry.Key' entry.Value));                                      }                                      return toList;                                  }                                  case List<KeyValuePair<string' object>> toObjList: {                                      foreach (var entry in sKvps)                                      {                                          toObjList.Add(new KeyValuePair<string' object>(entry.Key' entry.Value));                                      }                                      return toObjList;                                  }                              }
Missing Default,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,TryConvertCollections,The following switch statement is missing a default case: switch (obj) {                                  case IDictionary toDict:                                  {                                      toType.GetKeyValuePairsTypes(out var toKeyType' out var toValueType);                                      foreach (var entry in oKvps)                                      {                                          var toKey = entry.Key.ConvertTo<string>();                                          toDict[toKey] = toValueType != null                                              ? entry.Value.ConvertTo(toValueType)                                              : entry.Value;                                      }                                      return toDict;                                  }                                  case List<KeyValuePair<string' string>> toList: {                                      foreach (var entry in oKvps)                                      {                                          toList.Add(new KeyValuePair<string' string>(entry.Key' entry.Value.ConvertTo<string>()));                                      }                                      return toList;                                  }                                  case List<KeyValuePair<string' object>> toObjList: {                                      foreach (var entry in oKvps)                                      {                                          toObjList.Add(new KeyValuePair<string' object>(entry.Key' entry.Value));                                      }                                      return toObjList;                                  }                              }
Missing Default,ServiceStack,AutoMappingUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\AutoMappingUtils.cs,TryConvertCollections,The following switch statement is missing a default case: switch (obj) {                              case IDictionary toDict:                              {                                  var keyProp = TypeProperties.Get(toKvpDefType).GetPublicGetter("Key");                                  var valueProp = TypeProperties.Get(toKvpDefType).GetPublicGetter("Value");                                                                    foreach (var entry in values)                                  {                                      var toKvp = entry.ConvertTo(toKvpDefType);                                      var toKey = keyProp(toKvp);                                      var toValue = valueProp(toKvp);                                      toDict[toKey] = toValue;                                  }                                  return toDict;                              }                              case List<KeyValuePair<string' string>> toStringList: {                                  foreach (var entry in values)                                  {                                      var toEntry = entry.ConvertTo(toKvpDefType);                                      toStringList.Add((KeyValuePair<string' string>) toEntry);                                  }                                  return toStringList;                              }                              case List<KeyValuePair<string' object>> toObjList: {                                  foreach (var entry in values)                                  {                                      var toEntry = entry.ConvertTo(toKvpDefType);                                      toObjList.Add((KeyValuePair<string' object>) toEntry);                                  }                                  return toObjList;                              }                              case IEnumerable toList:                              {                                  var addMethod = toType.GetMethod(nameof(IList.Add)' new[] {toKvpDefType});                                  if (addMethod != null)                                  {                                      foreach (var entry in values)                                      {                                          var toEntry = entry.ConvertTo(toKvpDefType);                                          addMethod.Invoke(toList' new[] { toEntry });                                      }                                      return toList;                                  }                                  break;                              }                          }
Missing Default,ServiceStack,DynamicNumber,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\DynamicNumber.cs,TryGetRanking,The following switch statement is missing a default case: switch (type.GetTypeCode())              {                  case TypeCode.SByte:                      ranking = 1;                      break;                  case TypeCode.Byte:                      ranking = 2;                      break;                  case TypeCode.Int16:                      ranking = 3;                      break;                  case TypeCode.UInt16:                      ranking = 4;                      break;                  case TypeCode.Char:                  case TypeCode.Int32:                      ranking = 5;                      break;                  case TypeCode.UInt32:                      ranking = 6;                      break;                  case TypeCode.Int64:                      ranking = 7;                      break;                  case TypeCode.UInt64:                      ranking = 8;                      break;                  case TypeCode.Single:                      ranking = 9;                      break;                  case TypeCode.Double:                      ranking = 10;                      break;                  case TypeCode.Decimal:                      ranking = 11;                      break;              }
Missing Default,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,HasRequestBody,The following switch statement is missing a default case: switch (httpMethod)              {                  case HttpMethods.Get:                  case HttpMethods.Delete:                  case HttpMethods.Head:                  case HttpMethods.Options:                      return false;              }
Missing Default,ServiceStack,HttpUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,HasRequestBody,The following switch statement is missing a default case: switch (httpMethod)              {                  case HttpMethods.Get:                  case HttpMethods.Delete:                  case HttpMethods.Head:                  case HttpMethods.Options:                      return false;              }
Missing Default,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetExtension,The following switch statement is missing a default case: switch (mimeType)              {                  case ProtoBuf:                      return ".pbuf";              }
Missing Default,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsBinary,The following switch statement is missing a default case: switch (realContentType)              {                  case ProtoBuf:                  case MsgPack:                  case Binary:                  case Bson:                  case Wire:                  case Cert:                  case Excel:                  case MsWord:                  case Compressed:                  case WebAssembly:                      return true;              }
Missing Default,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsBinary,The following switch statement is missing a default case: switch (realContentType)              {                  case ImageSvg:                      return false;              }
Missing Default,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsBinary,The following switch statement is missing a default case: switch (primaryType)              {                  case "image":                  case "audio":                  case "video":                      return true;              }
Missing Default,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,GetExtension,The following switch statement is missing a default case: switch (mimeType)              {                  case ProtoBuf:                      return ".pbuf";              }
Missing Default,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsBinary,The following switch statement is missing a default case: switch (realContentType)              {                  case ProtoBuf:                  case MsgPack:                  case Binary:                  case Bson:                  case Wire:                  case Cert:                  case Excel:                  case MsWord:                  case Compressed:                  case WebAssembly:                      return true;              }
Missing Default,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsBinary,The following switch statement is missing a default case: switch (realContentType)              {                  case ImageSvg:                      return false;              }
Missing Default,ServiceStack,MimeTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\HttpUtils.cs,IsBinary,The following switch statement is missing a default case: switch (primaryType)              {                  case "image":                  case "audio":                  case "video":                      return true;              }
Missing Default,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertValidUsage,The following switch statement is missing a default case: switch (feature)              {                  case LicenseFeature.Redis:                      switch (quotaType)                      {                          case QuotaType.Types:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.RedisTypes' count' ErrorMessages.ExceededRedisTypes);                              return;                          case QuotaType.RequestsPerHour:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.RedisRequestPerHour' count' ErrorMessages.ExceededRedisRequests);                              return;                      }                      break;                    case LicenseFeature.OrmLite:                      switch (quotaType)                      {                          case QuotaType.Tables:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.OrmLiteTables' count' ErrorMessages.ExceededOrmLiteTables);                              return;                      }                      break;                    case LicenseFeature.Aws:                      switch (quotaType)                      {                          case QuotaType.Tables:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.AwsTables' count' ErrorMessages.ExceededAwsTables);                              return;                      }                      break;                    case LicenseFeature.ServiceStack:                      switch (quotaType)                      {                          case QuotaType.Operations:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.ServiceStackOperations' count' ErrorMessages.ExceededServiceStackOperations);                              return;                      }                      break;                    case LicenseFeature.Admin:                      switch (quotaType)                      {                          case QuotaType.PremiumFeature:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.PremiumFeature' count' ErrorMessages.ExceededAdminUi);                              return;                      }                      break;                    case LicenseFeature.Premium:                      switch (quotaType)                      {                          case QuotaType.PremiumFeature:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.PremiumFeature' count' ErrorMessages.ExceededPremiumFeature);                              return;                      }                      break;              }
Missing Default,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertValidUsage,The following switch statement is missing a default case: switch (quotaType)                      {                          case QuotaType.Types:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.RedisTypes' count' ErrorMessages.ExceededRedisTypes);                              return;                          case QuotaType.RequestsPerHour:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.RedisRequestPerHour' count' ErrorMessages.ExceededRedisRequests);                              return;                      }
Missing Default,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertValidUsage,The following switch statement is missing a default case: switch (quotaType)                      {                          case QuotaType.Tables:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.OrmLiteTables' count' ErrorMessages.ExceededOrmLiteTables);                              return;                      }
Missing Default,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertValidUsage,The following switch statement is missing a default case: switch (quotaType)                      {                          case QuotaType.Tables:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.AwsTables' count' ErrorMessages.ExceededAwsTables);                              return;                      }
Missing Default,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertValidUsage,The following switch statement is missing a default case: switch (quotaType)                      {                          case QuotaType.Operations:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.ServiceStackOperations' count' ErrorMessages.ExceededServiceStackOperations);                              return;                      }
Missing Default,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertValidUsage,The following switch statement is missing a default case: switch (quotaType)                      {                          case QuotaType.PremiumFeature:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.PremiumFeature' count' ErrorMessages.ExceededAdminUi);                              return;                      }
Missing Default,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,AssertValidUsage,The following switch statement is missing a default case: switch (quotaType)                      {                          case QuotaType.PremiumFeature:                              ApprovedUsage(licensedFeatures' feature' FreeQuotas.PremiumFeature' count' ErrorMessages.ExceededPremiumFeature);                              return;                      }
Missing Default,ServiceStack,LicenseUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\LicenseUtils.cs,GetLicensedFeatures,The following switch statement is missing a default case: switch (key.Type)              {                  case LicenseType.Free:                      return LicenseFeature.Free;                                    case LicenseType.Indie:                  case LicenseType.Business:                  case LicenseType.Enterprise:                  case LicenseType.Trial:                  case LicenseType.Site:                      return LicenseFeature.All;                    case LicenseType.TextIndie:                  case LicenseType.TextBusiness:                  case LicenseType.TextSite:                      return LicenseFeature.Text;                    case LicenseType.OrmLiteIndie:                  case LicenseType.OrmLiteBusiness:                  case LicenseType.OrmLiteSite:                      return LicenseFeature.OrmLiteSku;                    case LicenseType.AwsIndie:                  case LicenseType.AwsBusiness:                      return LicenseFeature.AwsSku;                    case LicenseType.RedisIndie:                  case LicenseType.RedisBusiness:                  case LicenseType.RedisSite:                      return LicenseFeature.RedisSku;              }
Missing Default,ServiceStack,ReflectionExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\ReflectionExtensions.cs,IsNumericType,The following switch statement is missing a default case: switch (GetTypeCode(type))              {                  case TypeCode.Byte:                  case TypeCode.Decimal:                  case TypeCode.Double:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                  case TypeCode.SByte:                  case TypeCode.Single:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return true;                    case TypeCode.Object:                      if (type.IsNullableType())                      {                          return IsNumericType(Nullable.GetUnderlyingType(type));                      }                      if (type.IsEnum)                      {                          return JsConfig.TreatEnumAsInteger || type.IsEnumFlags();                      }                      return false;              }
Missing Default,ServiceStack,ReflectionExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\ReflectionExtensions.cs,IsIntegerType,The following switch statement is missing a default case: switch (GetTypeCode(type))              {                  case TypeCode.Byte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                  case TypeCode.SByte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return true;                    case TypeCode.Object:                      if (type.IsNullableType())                      {                          return IsNumericType(Nullable.GetUnderlyingType(type));                      }                      return false;              }
Missing Default,ServiceStack,ReflectionExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\ReflectionExtensions.cs,IsRealNumberType,The following switch statement is missing a default case: switch (GetTypeCode(type))              {                  case TypeCode.Decimal:                  case TypeCode.Double:                  case TypeCode.Single:                      return true;                    case TypeCode.Object:                      if (type.IsNullableType())                      {                          return IsNumericType(Nullable.GetUnderlyingType(type));                      }                      return false;              }
Missing Default,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,ParseShortestXsdDateTime,The following switch statement is missing a default case: switch (config.DateHandler)                  {                      case DateHandler.UnixTime:                          if (int.TryParse(dateTimeStr' out var unixTime))                              return unixTime.FromUnixTime();                          break;                      case DateHandler.UnixTimeMs:                          if (long.TryParse(dateTimeStr' out var unixTimeMs))                              return unixTimeMs.FromUnixTimeMs();                          break;                      case DateHandler.ISO8601:                      case DateHandler.ISO8601DateOnly:                      case DateHandler.ISO8601DateTime:                          if (config.SkipDateTimeConversion)                              dateTimeStr = RemoveUtcOffsets(dateTimeStr' out kind);                          break;                  }
Missing Default,ServiceStack.Text.Common,DateTimeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DateTimeSerializer.cs,WriteWcfJsonDate,The following switch statement is missing a default case: switch (config.DateHandler)              {                  case DateHandler.ISO8601:                      writer.Write(dateTime.ToString("o"' CultureInfo.InvariantCulture));                      return;                  case DateHandler.ISO8601DateOnly:                      writer.Write(dateTime.ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture));                      return;                  case DateHandler.ISO8601DateTime:                      writer.Write(dateTime.ToString("yyyy-MM-dd HH:mm:ss"' CultureInfo.InvariantCulture));                      return;                  case DateHandler.RFC1123:                      writer.Write(dateTime.ToUniversalTime().ToString("R"' CultureInfo.InvariantCulture));                      return;              }
Missing Default,ServiceStack.Text.Common,DeserializeBuiltin<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeBuiltin.cs,GetParseStringSpanFn,The following switch statement is missing a default case: switch (typeCode)                  {                      case TypeCode.Boolean:                          return value => value.ParseBoolean();                      case TypeCode.SByte:                          return SignedInteger<sbyte>.ParseObject;                      case TypeCode.Byte:                          return UnsignedInteger<byte>.ParseObject;                      case TypeCode.Int16:                          return SignedInteger<short>.ParseObject;                      case TypeCode.UInt16:                          return UnsignedInteger<ushort>.ParseObject;                      case TypeCode.Int32:                          return SignedInteger<int>.ParseObject;                      case TypeCode.UInt32:                          return UnsignedInteger<uint>.ParseObject;                      case TypeCode.Int64:                          return SignedInteger<long>.ParseObject;                      case TypeCode.UInt64:                          return UnsignedInteger<ulong>.ParseObject;                        case TypeCode.Single:                          return value => MemoryProvider.Instance.ParseFloat(value);                      case TypeCode.Double:                          return value => MemoryProvider.Instance.ParseDouble(value);                      case TypeCode.Decimal:                          return value => MemoryProvider.Instance.ParseDecimal(value);                      case TypeCode.DateTime:                          return value => DateTimeSerializer.ParseShortestXsdDateTime(value.ToString());                      case TypeCode.Char:                          return value => value.Length == 0 ? (char)0 : value.Length == 1 ? value[0] : JsonTypeSerializer.Unescape(value)[0];                  }
Missing Default,ServiceStack.Text.Common,DeserializeBuiltin<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\DeserializeBuiltin.cs,GetParseStringSpanFn,The following switch statement is missing a default case: switch (typeCode)                  {                      case TypeCode.Boolean:                          return value => value.IsNullOrEmpty()                               ? (bool?)null                               : value.ParseBoolean();                      case TypeCode.SByte:                          return SignedInteger<sbyte>.ParseNullableObject;                      case TypeCode.Byte:                          return UnsignedInteger<byte>.ParseNullableObject;                      case TypeCode.Int16:                          return SignedInteger<short>.ParseNullableObject;                      case TypeCode.UInt16:                          return UnsignedInteger<ushort>.ParseNullableObject;                      case TypeCode.Int32:                          return SignedInteger<int>.ParseNullableObject;                      case TypeCode.UInt32:                          return UnsignedInteger<uint>.ParseNullableObject;                      case TypeCode.Int64:                          return SignedInteger<long>.ParseNullableObject;                      case TypeCode.UInt64:                          return UnsignedInteger<ulong>.ParseNullableObject;                        case TypeCode.Single:                          return value => value.IsNullOrEmpty() ? (float?)null : value.ParseFloat();                      case TypeCode.Double:                          return value => value.IsNullOrEmpty() ? (double?)null : value.ParseDouble();                      case TypeCode.Decimal:                          return value => value.IsNullOrEmpty() ? (decimal?)null : value.ParseDecimal();                      case TypeCode.DateTime:                          return value => DateTimeSerializer.ParseShortestNullableXsdDateTime(value.ToString());                      case TypeCode.Char:                          return value => value.IsEmpty ? (char?)null : value.Length == 1 ? value[0] : JsonTypeSerializer.Unescape(value)[0];                  }
Missing Default,ServiceStack.Text.Common,JsWriter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Common\JsWriter.cs,ShouldUseDefaultToStringMethod,The following switch statement is missing a default case: switch (underlyingType.GetTypeCode())              {                  case TypeCode.SByte:                  case TypeCode.Byte:                  case TypeCode.Int16:                  case TypeCode.UInt16:                  case TypeCode.Int32:                  case TypeCode.UInt32:                  case TypeCode.Int64:                  case TypeCode.UInt64:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                  case TypeCode.DateTime:                      return true;              }
Missing Default,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,WriteDateTime,The following switch statement is missing a default case: switch (JsConfig.DateHandler)              {                  case DateHandler.UnixTime:                      writer.Write(dateTime.ToUnixTime());                      return;                  case DateHandler.UnixTimeMs:                      writer.Write(dateTime.ToUnixTimeMs());                      return;              }
Missing Default,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,EatMapKey,The following switch statement is missing a default case: switch (valueChar)              {                  //If we are at the end' return.                  case JsWriter.ItemSeperator:                  case JsWriter.MapEndChar:                      return default(ReadOnlySpan<char>);                    //Is Within Quotes' i.e. "..."                  case JsWriter.QuoteChar:                      return ParseString(value' ref i);              }
Missing Default,ServiceStack.Text.Json,JsonTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonTypeSerializer.cs,EatValue,The following switch statement is missing a default case: switch (valueChar)              {                  //If we are at the end' return.                  case JsWriter.ItemSeperator:                  case JsWriter.MapEndChar:                      return default;                    //Is Within Quotes' i.e. "..."                  case JsWriter.QuoteChar:                      return ParseString(value' ref i);                    //Is Type/Map' i.e. {...}                  case JsWriter.MapStartChar:                      while (++i < valueLength)                      {                          valueChar = buf[i];                            if (valueChar == JsonUtils.EscapeChar)                          {                              i++;                              continue;                          }                            if (valueChar == JsWriter.QuoteChar)                              withinQuotes = !withinQuotes;                            if (withinQuotes)                              continue;                            if (valueChar == JsWriter.MapStartChar)                              endsToEat++;                            if (valueChar == JsWriter.MapEndChar && --endsToEat == 0)                          {                              i++;                              break;                          }                      }                      return value.Slice(tokenStartPos' i - tokenStartPos);                    //Is List' i.e. [...]                  case JsWriter.ListStartChar:                      while (++i < valueLength)                      {                          valueChar = buf[i];                            if (valueChar == JsonUtils.EscapeChar)                          {                              i++;                              continue;                          }                            if (valueChar == JsWriter.QuoteChar)                              withinQuotes = !withinQuotes;                            if (withinQuotes)                              continue;                            if (valueChar == JsWriter.ListStartChar)                              endsToEat++;                            if (valueChar == JsWriter.ListEndChar && --endsToEat == 0)                          {                              i++;                              break;                          }                      }                      return value.Slice(tokenStartPos' i - tokenStartPos);              }
Missing Default,ServiceStack.Text.Json,JsonUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonUtils.cs,WriteString,The following switch statement is missing a default case: switch (c)                  {                      case LineFeedChar:                          writer.Write(EscapedLineFeed);                          continue;                        case CarriageReturnChar:                          writer.Write(EscapedCarriageReturn);                          continue;                        case TabChar:                          writer.Write(EscapedTab);                          continue;                        case QuoteChar:                          writer.Write(EscapedQuote);                          continue;                        case EscapeChar:                          writer.Write(EscapedBackslash);                          continue;                        case FormFeedChar:                          writer.Write(EscapedFormFeed);                          continue;                        case BackspaceChar:                          writer.Write(EscapedBackspace);                          continue;                  }
Missing Default,ServiceStack.Text.Json,JsonUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Json\JsonUtils.cs,WriteString,The following switch statement is missing a default case: switch (c)                      {                          case '<':                              writer.Write("\\u003c");                              continue;                          case '>':                              writer.Write("\\u003e");                              continue;                          case '&':                              writer.Write("\\u0026");                              continue;                          case '=':                              writer.Write("\\u003d");                              continue;                          case '\'':                              writer.Write("\\u0027");                              continue;                      }
Missing Default,ServiceStack.Text.Jsv,JsvTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Jsv\JsvTypeSerializer.cs,WriteDateTime,The following switch statement is missing a default case: switch (JsConfig.DateHandler)              {                  case DateHandler.UnixTime:                      writer.Write(dateTime.ToUnixTime());                      return;                  case DateHandler.UnixTimeMs:                      writer.Write(dateTime.ToUnixTimeMs());                      return;              }
Missing Default,ServiceStack.Text.Jsv,JsvTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Jsv\JsvTypeSerializer.cs,EatMapKey,The following switch statement is missing a default case: switch (valueChar)              {                  case JsWriter.QuoteChar:                      while (++i < valueLength)                      {                          valueChar = value[i];                            if (valueChar != JsWriter.QuoteChar) continue;                            var isLiteralQuote = i + 1 < valueLength && value[i + 1] == JsWriter.QuoteChar;                            i++; //skip quote                          if (!isLiteralQuote)                              break;                      }                      return value.Slice(tokenStartPos' i - tokenStartPos);                    //Is Type/Map' i.e. {...}                  case JsWriter.MapStartChar:                      var endsToEat = 1;                      var withinQuotes = false;                      while (++i < valueLength && endsToEat > 0)                      {                          valueChar = value[i];                            if (valueChar == JsWriter.QuoteChar)                              withinQuotes = !withinQuotes;                            if (withinQuotes)                              continue;                            if (valueChar == JsWriter.MapStartChar)                              endsToEat++;                            if (valueChar == JsWriter.MapEndChar)                              endsToEat--;                      }                      return value.Slice(tokenStartPos' i - tokenStartPos);              }
Missing Default,ServiceStack.Text.Jsv,JsvTypeSerializer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.Text\src\ServiceStack.Text\Jsv\JsvTypeSerializer.cs,EatValue,The following switch statement is missing a default case: switch (valueChar)              {                  //If we are at the end' return.                  case JsWriter.ItemSeperator:                  case JsWriter.MapEndChar:                      return default;                    //Is Within Quotes' i.e. "..."                  case JsWriter.QuoteChar:                      while (++i < valueLength)                      {                          valueChar = value[i];                            if (valueChar != JsWriter.QuoteChar) continue;                            var isLiteralQuote = i + 1 < valueLength && value[i + 1] == JsWriter.QuoteChar;                            i++; //skip quote                          if (!isLiteralQuote)                              break;                      }                      return value.Slice(tokenStartPos' i - tokenStartPos);                    //Is Type/Map' i.e. {...}                  case JsWriter.MapStartChar:                      while (++i < valueLength && endsToEat > 0)                      {                          valueChar = value[i];                            if (valueChar == JsWriter.QuoteChar)                              withinQuotes = !withinQuotes;                            if (withinQuotes)                              continue;                            if (valueChar == JsWriter.MapStartChar)                              endsToEat++;                            if (valueChar == JsWriter.MapEndChar)                              endsToEat--;                      }                      return value.Slice(tokenStartPos' i - tokenStartPos);                    //Is List' i.e. [...]                  case JsWriter.ListStartChar:                      while (++i < valueLength && endsToEat > 0)                      {                          valueChar = value[i];                            if (valueChar == JsWriter.QuoteChar)                              withinQuotes = !withinQuotes;                            if (withinQuotes)                              continue;                            if (valueChar == JsWriter.ListStartChar)                              endsToEat++;                            if (valueChar == JsWriter.ListEndChar)                              endsToEat--;                      }                      return value.Slice(tokenStartPos' i - tokenStartPos);              }
