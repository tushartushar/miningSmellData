Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Web.NHaml.IO,HamlRuleFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\IO\HamlRuleFactory.cs,ParseHamlRule,Cyclomatic complexity of the method is 15
Complex Method,System.Web.NHaml.Walkers.CodeDom,HamlWalkerFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Walkers\CodeDom\HamlNodeWalkerFactory.cs,GetNodeWalker,Cyclomatic complexity of the method is 12
Long Parameter List,System.Web.NHaml.IO,HamlLine,C:\repos\NHaml_NHaml\src\System.Web.NHaml\IO\HamlLine.cs,HamlLine,The method has 5 parameters. Parameters: content' hamlRule' indent' sourceFileLineNum' isInline
Long Parameter List,System.Web.NHaml,TemplateFactoryFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\TemplateFactoryFactory.cs,TemplateFactoryFactory,The method has 6 parameters. Parameters: contentProvider' treeParser' treeWalker' templateCompiler' imports' referencedAssemblyLocations
Long Statement,System.Web.NHaml.Compilers,CodeDomTemplateTypeBuilder,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Compilers\CodeDomTemplateTypeBuilder.cs,GetClassFileInfo,The length of the statement  "            var fileInfo = new FileInfo(string.Format("{0}\\{1}.{2}"' directoryInfo.FullName' typeName' _codeDomProvider.FileExtension)); " is 125.
Long Statement,System.Web.NHaml.Configuration,NHamlConfigurationSection,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Configuration\NHamlConfigurationSection.cs,GetAssemblyLocation,The length of the statement  "                var message = string.Format("Could not load Assembly '{0}'.Did you forget to fully qualify it? For example 'System.Xml' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089'"' assemblyName); " is 203.
Long Statement,System.Web.NHaml.Configuration,XmlConfigurator,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Configuration\XmlConfigurator.cs,GetTemplateEngine,The length of the statement  "            return GetTemplateEngine(new FileTemplateContentProvider()' nhamlConfiguration' new List<string>()' new List<string>()); " is 120.
Long Statement,System.Web.NHaml.TemplateBase,DocTypeFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\TemplateBase\DocTypeFactory.cs,GetFramesetDocType,The length of the statement  "                    return @"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Frameset//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"">";" is 128.
Long Statement,System.Web.NHaml.TemplateBase,DocTypeFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\TemplateBase\DocTypeFactory.cs,GetStrictDocType,The length of the statement  "                    return @"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">";" is 124.
Long Statement,System.Web.NHaml.TemplateBase,DocTypeFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\TemplateBase\DocTypeFactory.cs,GetBasicDocType,The length of the statement  "            return @"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML Basic 1.1//EN"" ""http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd"">";" is 124.
Long Statement,System.Web.NHaml.TemplateBase,DocTypeFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\TemplateBase\DocTypeFactory.cs,GetMobileDocType,The length of the statement  "            return @"<!DOCTYPE html PUBLIC ""-//WAPFORUM//DTD XHTML Mobile 1.2//EN"" ""http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd"">";" is 141.
Long Statement,System.Web.NHaml.TemplateBase,DocTypeFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\TemplateBase\DocTypeFactory.cs,GetTransitionalDocType,The length of the statement  "                    return @"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">";" is 136.
Long Statement,System.Web.NHaml.Walkers.CodeDom,HamlNodeDocTypeWalker,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Walkers\CodeDom\HamlNodeDocTypeWalker.cs,Walk,The length of the statement  "                throw new System.InvalidCastException("HamlNodeDocTypeWalker requires that HamlNode object be of type HamlNodeDocType.");" is 121.
Long Statement,System.Web.NHaml.Walkers.CodeDom,HamlNodeHtmlCommentWalker,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Walkers\CodeDom\HamlNodeHtmlCommentWalker.cs,Walk,The length of the statement  "                throw new System.InvalidCastException("HamlNodeHtmlCommentWalker requires that HamlNode object be of type HamlNodeHtmlComment.");" is 129.
Long Statement,System.Web.NHaml.Walkers.CodeDom,HamlNodeTagWalker,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Walkers\CodeDom\HamlNodeTagWalker.cs,GetClassValues,The length of the statement  "            classValues.AddRange(nodeTag.Children.OfType<HamlNodeTagClass>().Select(x => new HamlNodeTextContainer(x.SourceFileLineNum' x.Content))); " is 137.
Long Statement,System.Web.NHaml.Walkers.CodeDom,HamlNodeTextLiteralWalker,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Walkers\CodeDom\HamlNodeTextLiteralWalker.cs,Walk,The length of the statement  "                throw new System.InvalidCastException("HamlNodeTextLiteralWalker requires that HamlNode object be of type HamlNodeTextLiteral."); " is 129.
Long Statement,System.Web.NHaml.Walkers.CodeDom,HamlNodeTextVariableWalker,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Walkers\CodeDom\HamlNodeTextVariableWalker.cs,Walk,The length of the statement  "                throw new InvalidCastException("HamlNodeTextVariableWalker requires that HamlNode object be of type HamlNodeTextVariable."); " is 124.
Long Statement,System.Web.NHaml.Walkers.CodeDom,HamlNodeHtmlAttributeCollectionWalker,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Walkers\CodeDom\HamlNodeHtmlAttributeCollectionWalker.cs,Walk,The length of the statement  "                throw new System.InvalidCastException("HamlNodeHtmlAttributeCollectionWalker requires that HamlNode object be of type HamlNodeHtmlAttributeCollection."); " is 153.
Magic Number,System.Web.NHaml.Compilers,CodeDomTemplateTypeBuilder,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Compilers\CodeDomTemplateTypeBuilder.cs,GetNHamlTempDirectoryInfo,The following statement contains a magic number: var codeBase = Assembly.GetExecutingAssembly().GetName().CodeBase.Remove(0' 8);
Magic Number,System.Web.NHaml.IO,HamlRuleFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\IO\HamlRuleFactory.cs,ParseHamlRule,The following statement contains a magic number: if (content.StartsWith("!!!"))              {                  content = content.Substring(3);                  return HamlRuleEnum.DocType;              }
Magic Number,System.Web.NHaml.IO,HamlRuleFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\IO\HamlRuleFactory.cs,ParseHamlRule,The following statement contains a magic number: if (content.StartsWith("-#"))              {                  content = content.Substring(2);                  return HamlRuleEnum.HamlComment;              }
Magic Number,System.Web.NHaml.IO,HamlLine,C:\repos\NHaml_NHaml\src\System.Web.NHaml\IO\HamlLine.cs,GetIndentCount,The following statement contains a magic number: return chars.Sum(curChar => curChar == '\t' ? 2 : 1);
Magic Number,System.Web.NHaml.Parser.Rules,HamlNodeHtmlAttribute,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Parser\Rules\HamlNodeHtmlAttribute.cs,RemoveQuotes,The following statement contains a magic number: if (input.Length < 2 || IsQuoted(input) == false)                  return input;
Magic Number,System.Web.NHaml.Parser.Rules,HamlNodeHtmlAttribute,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Parser\Rules\HamlNodeHtmlAttribute.cs,RemoveQuotes,The following statement contains a magic number: return input.Substring(1' input.Length - 2);
Magic Number,System.Web.NHaml.Parser.Rules,HamlNodeTextContainer,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Parser\Rules\HamlNodeTextContainer.cs,GetNextNode,The following statement contains a magic number: for (; index < content.Length; index++)              {                  if (isInTag)                  {                      result += content[index];                      if (IsEndTagToken(content' index))                      {                          index++;                          return (result.Length > 3)                              ? new HamlNodeTextVariable(SourceFileLineNum' result)                              : (HamlNode)new HamlNodeTextLiteral(SourceFileLineNum' result);                      }                  }                  else if (IsTagToken(content' index))                  {                      if (isEscaped == false)                          return new HamlNodeTextLiteral(SourceFileLineNum' result);                      result = RemoveEscapeCharacter(result) + content[index];                  }                  else                  {                      result += content[index];                      if (IsEscapeToken(content' index))                      {                          if (isEscaped) result = RemoveEscapeCharacter(result);                          isEscaped = !isEscaped;                      }                  }              }
Magic Number,System.Web.NHaml.TemplateBase,DocTypeFactory,C:\repos\NHaml_NHaml\src\System.Web.NHaml\TemplateBase\DocTypeFactory.cs,GetXmlDocType,The following statement contains a magic number: string encoding = docTypeParts.Count < 2                 ? "utf-8"                 : docTypeParts[1];
Missing Default,System.Web.NHaml.Parser.Rules,HamlNodeTag,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Parser\Rules\HamlNodeTag.cs,ParseWhitespaceRemoval,The following switch statement is missing a default case: switch (content[pos])              {                  case '>':                      _whitespaceRemoval = WhitespaceRemoval.Surrounding;                      pos++;                      return true;                  case '<':                      _whitespaceRemoval = WhitespaceRemoval.Internal;                      pos++;                      return true;              }
Missing Default,System.Web.NHaml.Crosscutting,HtmlStringHelper,C:\repos\NHaml_NHaml\src\System.Web.NHaml\Crosscutting\HtmlStringHelper.cs,ExtractTokenFromTagString,The following switch statement is missing a default case: switch (state)                 {                     case AttributeParseStates.Normal:                         if (inputString[index] == '\'')                             state = AttributeParseStates.SingleQuoteEscaped;                         else if (inputString[index] == '\"')                             state = AttributeParseStates.DoubleQuoteEscaped;                         else if (endMarkers.Contains(inputString[index]))                             return inputString.Substring(startIndex' index - startIndex + 1);                         break;                     case AttributeParseStates.SingleQuoteEscaped:                         if (inputString[index] == '\'')                             state = AttributeParseStates.Normal;                         break;                     case AttributeParseStates.DoubleQuoteEscaped:                         if (inputString[index] == '\"')                             state = AttributeParseStates.Normal;                         break;                 }
