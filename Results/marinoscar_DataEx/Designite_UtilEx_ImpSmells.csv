Implementation smell,Namespace,Class,File,Method,Description
Complex Method,UtilEx,SqlFormatter,C:\repos\marinoscar_DataEx\UtilEx\SqlFormatter.cs,Format,Cyclomatic complexity of the method is 18
Long Statement,UtilEx,NumericBaseConverter,C:\repos\marinoscar_DataEx\UtilEx\NumericBaseConverter.cs,FromBase,The length of the statement  "	var values = value.ToUpperInvariant ().ToCharArray ().Select (i => _baseValues.IndexOf (i.ToString (CultureInfo.InvariantCulture))).ToArray (); " is 143.
Long Statement,UtilEx,CacheItems,C:\repos\marinoscar_DataEx\UtilEx\ObjectCacheProvider.cs,GetCacheItem,The length of the statement  "		throw new ArgumentNullException ("The key {0} is not cached and no function was provided to properly store the value in cache".Fi (key)); " is 137.
Long Statement,UtilEx,FastReflectionObjectAccessor,C:\repos\marinoscar_DataEx\UtilEx\FastReflectionObjectAccessor.cs,GetPropertyValue,The length of the statement  "	var provider = ObjectCacheProvider.GetProvider<Tuple<Type' string>' MemberGetter> (ReflectionMemberGetterCacheProvider); " is 120.
Long Statement,UtilEx,FastReflectionObjectAccessor,C:\repos\marinoscar_DataEx\UtilEx\FastReflectionObjectAccessor.cs,SetPropertyValue,The length of the statement  "	var provider = ObjectCacheProvider.GetProvider<Tuple<Type' string>' MemberSetter> (ReflectionMemberSetterCacheProvider); " is 120.
Magic Number,UtilEx,IpAddressExtension,C:\repos\marinoscar_DataEx\UtilEx\IPAddressExtension.cs,ToInt,The following statement contains a magic number: 3.Times (i =>  {  	result = result + (uint)(array [i] * Math.Pow (256d' Convert.ToDouble (3 - i)));  });  
Magic Number,UtilEx,IpAddressExtension,C:\repos\marinoscar_DataEx\UtilEx\IPAddressExtension.cs,ToInt,The following statement contains a magic number: 3.Times (i =>  {  	result = result + (uint)(array [i] * Math.Pow (256d' Convert.ToDouble (3 - i)));  });  
Magic Number,UtilEx,IpAddressExtension,C:\repos\marinoscar_DataEx\UtilEx\IPAddressExtension.cs,ToInt,The following statement contains a magic number: result = result + (uint)(array [i] * Math.Pow (256d' Convert.ToDouble (3 - i)));  
Magic Number,UtilEx,IpAddressExtension,C:\repos\marinoscar_DataEx\UtilEx\IPAddressExtension.cs,ToInt,The following statement contains a magic number: result = result + array [3];  
Magic Number,UtilEx,NumericBaseConverter,C:\repos\marinoscar_DataEx\UtilEx\NumericBaseConverter.cs,ValidateBase,The following statement contains a magic number: if (numericBase < 2 || numericBase > _baseValues.Count ())  	throw new ArgumentException ("The numeric base needs to be between 2 and {0}".Fi (_baseValues.Count ()));  
Magic Number,UtilEx,NumericBaseConverter,C:\repos\marinoscar_DataEx\UtilEx\NumericBaseConverter.cs,ToBinary,The following statement contains a magic number: return ToBase (value' 2);  
Magic Number,UtilEx,NumericBaseConverter,C:\repos\marinoscar_DataEx\UtilEx\NumericBaseConverter.cs,ToHex,The following statement contains a magic number: return ToBase (value' 16);  
Magic Number,UtilEx,NumericBaseConverter,C:\repos\marinoscar_DataEx\UtilEx\NumericBaseConverter.cs,ToBase36,The following statement contains a magic number: return ToBase (value' 36);  
Magic Number,UtilEx,SqlFormatter,C:\repos\marinoscar_DataEx\UtilEx\SqlFormatter.cs,Format,The following statement contains a magic number: if (o is ICollection<byte>) {  	var bytes = (o as ICollection<byte>);  	var builder = new StringBuilder (prefix + "0x"' bytes.Count * 2 + 8);  	foreach (var b in bytes) {  		builder.Append (b.ToHex ());  	}  	return builder.ToString ();  }  
Magic Number,UtilEx,SqlFormatter,C:\repos\marinoscar_DataEx\UtilEx\SqlFormatter.cs,Format,The following statement contains a magic number: if (o is ICollection<byte>) {  	var bytes = (o as ICollection<byte>);  	var builder = new StringBuilder (prefix + "0x"' bytes.Count * 2 + 8);  	foreach (var b in bytes) {  		builder.Append (b.ToHex ());  	}  	return builder.ToString ();  }  
Magic Number,UtilEx,SqlFormatter,C:\repos\marinoscar_DataEx\UtilEx\SqlFormatter.cs,Format,The following statement contains a magic number: if (o is IEnumerable) {  	var builder = new StringBuilder (prefix' 32);  	builder.Append ("(");  	foreach (var item in (IEnumerable)o) {  		builder.AppendFormat ("{0}'"' Format (null' item));  	}  	if (1 == builder.Length) {  		builder.Append ("NULL");  	}  	else {  		builder.Length -= 1;  	}  	builder.Append (")");  	return builder.ToString ();  }  
