Implementation smell,Namespace,Class,File,Method,Description
Long Method,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,AddType,The method has 140 lines of code.
Long Method,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,InheritDocumentation,The method has 131 lines of code.
Long Method,SharpDoc,DocIdHelper,C:\repos\xoofx_SharpDoc\src\SharpDoc\DocIdHelper.cs,GetXmlDocPathRecursive,The method has 173 lines of code.
Long Method,SharpDoc,DocIdHelper,C:\repos\xoofx_SharpDoc\src\SharpDoc\DocIdHelper.cs,GetXmlDocParameterPathRecursive,The method has 182 lines of code.
Long Method,SharpDoc,SharpDocApp,C:\repos\xoofx_SharpDoc\src\SharpDoc\SharpDocApp.cs,ParseArguments,The method has 134 lines of code.
Long Method,SharpDoc,TopicBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\TopicBuilder.cs,Run,The method has 100 lines of code.
Long Method,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,GetBlockPattern,The method has 127 lines of code.
Complex Method,SharpDoc,MonoCecilAssemblyManager,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilAssemblyManager.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,SharpDoc,MonoCecilAssemblyManager,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilAssemblyManager.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,SharpDoc,ModelProcessor,C:\repos\xoofx_SharpDoc\src\SharpDoc\ModelProcessor.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,SharpDoc,ModelProcessor,C:\repos\xoofx_SharpDoc\src\SharpDoc\ModelProcessor.cs,ProcessInheritance,Cyclomatic complexity of the method is 17
Complex Method,SharpDoc,DynamicDictionaryMetaObject,C:\repos\xoofx_SharpDoc\src\SharpDoc\DynamicHelper.cs,BindInvokeMember,Cyclomatic complexity of the method is 9
Complex Method,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,AddType,Cyclomatic complexity of the method is 22
Complex Method,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,ReplacePrimitive,Cyclomatic complexity of the method is 13
Complex Method,SharpDoc,DocIdHelper,C:\repos\xoofx_SharpDoc\src\SharpDoc\DocIdHelper.cs,GetXmlDocExplicitIfaceImplPath,Cyclomatic complexity of the method is 10
Complex Method,SharpDoc,DocIdHelper,C:\repos\xoofx_SharpDoc\src\SharpDoc\DocIdHelper.cs,GetXmlDocPathRecursive,Cyclomatic complexity of the method is 10
Complex Method,SharpDoc,SharpDocApp,C:\repos\xoofx_SharpDoc\src\SharpDoc\SharpDocApp.cs,ParseArguments,Cyclomatic complexity of the method is 13
Complex Method,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,ToUrl,Cyclomatic complexity of the method is 11
Complex Method,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,UseStyle,Cyclomatic complexity of the method is 10
Complex Method,SharpDoc,TopicBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\TopicBuilder.cs,Run,Cyclomatic complexity of the method is 11
Complex Method,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,handleTrailingParens,Cyclomatic complexity of the method is 9
Complex Method,SharpDoc.Model,NTopic,C:\repos\xoofx_SharpDoc\src\SharpDoc\Model\NTopic.cs,Init,Cyclomatic complexity of the method is 14
Long Parameter List,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,ToUrl,The method has 5 parameters. Parameters: reference' linkName' forceLocal' attributes' useSelf
Long Parameter List,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,ToUrl,The method has 6 parameters. Parameters: id' linkName' forceLocal' attributes' localReference' useSelf
Long Parameter List,SharpDoc,PageTemplateDoc,C:\repos\xoofx_SharpDoc\src\SharpDoc\PageTemplateDoc.cs,ToUrl,The method has 5 parameters. Parameters: modelRef' content' forceLocal' attributes' useSelf
Long Parameter List,SharpDoc,PageTemplateDoc,C:\repos\xoofx_SharpDoc\src\SharpDoc\PageTemplateDoc.cs,ToUrl,The method has 5 parameters. Parameters: id' content' forceLocal' attributes' useSelf
Long Parameter List,SharpDoc.Logging,ConsoleLogger,C:\repos\xoofx_SharpDoc\src\SharpDoc\Logging\ConsoleLogger.cs,Log,The method has 6 parameters. Parameters: logLevel' logLocation' context' message' exception' parameters
Long Parameter List,SharpDoc.Logging,ILogger,C:\repos\xoofx_SharpDoc\src\SharpDoc\Logging\ILogger.cs,Log,The method has 6 parameters. Parameters: logLevel' logLocation' context' message' exception' parameters
Long Parameter List,SharpDoc.Logging,LoggerBase,C:\repos\xoofx_SharpDoc\src\SharpDoc\Logging\LoggerBase.cs,Log,The method has 6 parameters. Parameters: logLevel' logLocation' context' message' exception' parameters
Long Parameter List,SharpDoc.Logging,LoggerBase,C:\repos\xoofx_SharpDoc\src\SharpDoc\Logging\LoggerBase.cs,FormatMessage,The method has 6 parameters. Parameters: logLevel' logLocation' context' message' exception' parameters
Long Identifier,SharpDoc,StyleDefinition,C:\repos\xoofx_SharpDoc\src\SharpDoc\StyleDefinition.cs,,The length of the parameter DefaultBootableTemplateFilename is 31.
Long Identifier,SharpDoc,MsdnRegistry,C:\repos\xoofx_SharpDoc\src\SharpDoc\MsdnRegistry.cs,,The length of the parameter MsdnRegistryCachingFilePostfix is 30.
Long Identifier,SharpDoc.MTPS,getContentResponse,C:\repos\xoofx_SharpDoc\src\SharpDoc\Service References\MTPS\Reference.cs,,The length of the parameter availableVersionsAndLocalesField is 32.
Long Statement,SharpDoc,MonoCecilAssemblyManager,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilAssemblyManager.cs,Load,The length of the statement  "                    Logger.Fatal("Cannot load from multiple ([{0}]) documentation sources for assembly [{1}]"' countXmlDocFound' assemblyName); " is 123.
Long Statement,SharpDoc,DynamicDictionaryMetaObject,C:\repos\xoofx_SharpDoc\src\SharpDoc\DynamicHelper.cs,BindInvokeMember,The length of the statement  "                    throw new InvalidOperationException(string.Format(System.Globalization.CultureInfo.InvariantCulture' "Unable to find target method [{0}]"' binder.Name)); " is 153.
Long Statement,SharpDoc,DynamicDictionaryMetaObject,C:\repos\xoofx_SharpDoc\src\SharpDoc\DynamicHelper.cs,BindInvokeMember,The length of the statement  "                var computeResult = Expression.Call(Expression.Constant(helperMethodInstance.Template)' helperMethodInstance.Method' methodParams); " is 131.
Long Statement,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,IsMemberToDisplay,The length of the statement  "            // So this is a temporary hardcoded workaround' though we must be able to select the level to display (public/protected/private...etc.) " is 135.
Long Statement,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,IsMemberToDisplay,The length of the statement  "            if (eventInfo != null && (eventInfo.AddMethod.IsPublic || eventInfo.AddMethod.IsFamilyOrAssembly || eventInfo.AddMethod.IsFamily)) " is 130.
Long Statement,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,IsMemberToDisplay,The length of the statement  "                (property.GetMethod != null && (property.GetMethod.IsPublic || property.GetMethod.IsFamilyOrAssembly || property.GetMethod.IsFamily)) || (property.SetMethod != null && (property.SetMethod.IsPublic || property.SetMethod.IsFamilyOrAssembly || property.SetMethod.IsFamily)))) " is 272.
Long Statement,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,CreateMethodFromDefinition,The length of the statement  "                // If a constructor doesn't have any documentation' use inherited documentation even if <inheritdoc/> tag is not present " is 120.
Long Statement,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,CreateMethodFromDefinition,The length of the statement  "                // If an overridden method doesn't have any documentation' use inherited documentation even if <inheritdoc/> tag is not present " is 127.
Long Statement,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,AddMethod,The length of the statement  "            if (methodDef == null || (!isSpecialMethod && methodDef.IsSpecialName && (methodDef.IsGetter || methodDef.IsSetter || methodDef.IsAddOn || methodDef.IsRemoveOn))) " is 162.
Long Statement,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,AddMethod,The length of the statement  "                    var extensionMethod = extensionMethodList.FirstOrDefault(m => m.ExtendedType.Id == extendedType.Id && m.Method.Id == method.Id); " is 128.
Long Statement,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,AddProperty,The length of the statement  "                    property.Implements = GetReference(parent.Namespace' MonoCecilHelper.GetBaseImplementInInterfaceHierarchy(propertyDef)); " is 120.
Long Statement,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,UpdatePageTitle,The length of the statement  "            member.PageTitle = (member.DeclaringType != null ? member.DeclaringType.Name + "." : string.Empty) + member.Name + " " + member.Category + " (" + member.Namespace.FullName + ")";            " is 178.
Long Statement,SharpDoc,SharpDocApp,C:\repos\xoofx_SharpDoc\src\SharpDoc\SharpDocApp.cs,TopicLoader,The length of the statement  "            Logger.Warning("Template loading failed for file [{0}]. Extension is not supported: Only .htm' .html' .md"' Path.GetFileName(filePath)); " is 136.
Long Statement,SharpDoc,SharpDocApp,C:\repos\xoofx_SharpDoc\src\SharpDoc\SharpDocApp.cs,ParseArguments,The length of the statement  "                                  {"wL|webdocLogin="' "(optional) Authentification file for the extern documentation site (first line: username' second line: password)"'  " is 135.
Long Statement,SharpDoc,SharpDocApp,C:\repos\xoofx_SharpDoc\src\SharpDoc\SharpDocApp.cs,ParseArguments,The length of the statement  "                                  "[Assembly1.dll Assembly1.xml...] Source files' if a config file is not specified' load source assembly and xml from the specified list of files"' " is 146.
Long Statement,SharpDoc,SharpDocApp,C:\repos\xoofx_SharpDoc\src\SharpDoc\SharpDocApp.cs,ParseArguments,The length of the statement  "                UsageError("At least one option is missing. Either a valid config file (-config) or a direct list of assembly/xml files must be specified"); " is 140.
Long Statement,SharpDoc,StyleDefinition,C:\repos\xoofx_SharpDoc\src\SharpDoc\StyleDefinition.cs,ToString,The length of the statement  "            return string.Format(System.Globalization.CultureInfo.InvariantCulture' "Name: {0}' Path: {1}{2}"' Name' DirectoryPath' HasBaseStyle?"' Base: " + BaseStyle:""); " is 160.
Long Statement,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,ProcessAssemblies,The length of the statement  "                modelProcessor = new ModelProcessor { AssemblyManager = new MonoCecilAssemblyManager()' ModelBuilder = new MonoCecilModelBuilder()' PageIdFunction = PageIdFunction }; " is 166.
Long Statement,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,ToUrl,The length of the statement  "                    if ((id == CurrentContext.Id || (declaringType != null && declaringType.Id == CurrentContext.Id && (!id.StartsWith("T:") && !declaringType.Id.StartsWith("T:")))) && useSelf) " is 173.
Long Statement,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,Loadfile,The length of the statement  "                Logger.Fatal("Cannot find file [{0}] from the following Template Directories [{1}]"' file' string.Join("'"' StyleDirectories)); " is 127.
Long Statement,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,GetTemplate,The length of the statement  "                Logger.Fatal("Cannot find template [{0}] from the following Template Directories [{1}]"' name' string.Join("'"' StyleDirectories)); " is 131.
Long Statement,SharpDoc,TopicBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\TopicBuilder.cs,Run,The length of the statement  "                            //Logger.Warning("Index [{0}] for Topic [{1}] is already used. Need to reassign a new index."' topic.Index' topic.Name); " is 120.
Long Statement,SharpDoc,Utility,C:\repos\xoofx_SharpDoc\src\SharpDoc\Utility.cs,EscapeHtml,The length of the statement  "            return stringToEscape.Replace("&"' "&amp;").Replace("<"' "&lt;").Replace(">"' "&gt;").Replace("\""' "&quot;").Replace("'"' "&apos;"); " is 133.
Long Statement,SharpDoc,Utility,C:\repos\xoofx_SharpDoc\src\SharpDoc\Utility.cs,GetFrameworkRootDirectory,The length of the statement  "                frameworkRootDirectory = Path.GetFullPath(Registry.LocalMachine.OpenSubKey(@"Software\Microsoft\.NetFramework"' false).GetValue("InstallRoot").ToString()); " is 155.
Long Statement,SharpDoc,MsdnRegistry,C:\repos\xoofx_SharpDoc\src\SharpDoc\MsdnRegistry.cs,FindUrl,The length of the statement  "                    var request = new getContentRequest { contentIdentifier = "AssetId:" + HttpUtility.UrlEncode(assetId)' locale = Locale }; " is 121.
Long Statement,SharpDoc,WebDocumentation,C:\repos\xoofx_SharpDoc\src\SharpDoc\WebDocumentation.cs,PrepareRequest,The length of the statement  "            request.UserAgent = "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/30.0.1599.69 Safari/537.36"; " is 131.
Long Statement,SharpDoc.Logging,LoggerBase,C:\repos\xoofx_SharpDoc\src\SharpDoc\Logging\LoggerBase.cs,FormatMessage,The length of the statement  "            lineMessage.AppendFormat("{0}:{1}"' levelName == "fatal" ? "error:fatal":levelName ' FormatMessage(context' message' parameters)); " is 130.
Long Statement,SharpDoc.Logging,LoggerBase,C:\repos\xoofx_SharpDoc\src\SharpDoc\Logging\LoggerBase.cs,FormatMessage,The length of the statement  "            lineMessage.AppendFormat("{0}{1}"' (context != null) ? " in " + context + " " : ""' message != null ? string.Format(message' parameters) : ""); " is 143.
Long Statement,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,AnchorRefShortcutEvaluator,The length of the statement  "            string linkID = Regex.Replace(linkText.ToLowerInvariant()' @"[ ]*\n[ ]*"' " ");  // lower case and remove newlines / extra spaces " is 129.
Long Statement,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,ProcessListItems,The length of the statement  "                    if (!isInsideParagraphlessListItem) // only the outer-most item should run this' otherwise it's run multiple times for the inner ones " is 133.
Long Statement,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,BlockQuoteEvaluator,The length of the statement  "            bq = Regex.Replace(bq' @"(\s*<pre>.+?</pre>)"' new MatchEvaluator(BlockQuoteEvaluator2)' RegexOptions.IgnorePatternWhitespace | RegexOptions.Singleline); " is 153.
Long Statement,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,handleTrailingParens,The length of the statement  "            // We're not using a *real* lookbehind' because of links with in links' like <a href="http://web.archive.org/web/20121130000728/http://www.google.com/"> " is 152.
Long Statement,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,DoAutoLinks,The length of the statement  "                text = Regex.Replace(text' pattern' new MatchEvaluator(EmailEvaluator)' RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 136.
Long Statement,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,EscapeSpecialCharsWithinTagAttributes,The length of the statement  "                    if (_autoHyperlink && value.StartsWith("<!")) // escape slashes in comments to prevent autolinking there -- http://meta.stackoverflow.com/questions/95987/html-comment-containing-url-breaks-if-followed-by-another-html-comment " is 224.
Long Statement,SharpDoc.Model,NTopic,C:\repos\xoofx_SharpDoc\src\SharpDoc\Model\NTopic.cs,ToString,The length of the statement  "            return string.Format(System.Globalization.CultureInfo.InvariantCulture' "Id: {0}' PageId: {1}' Name: {2}' FullName: {3}' FileName: {4}' SubTopics.Count: {5}"' Id' PageId' Name' FullName' FileName' SubTopics.Count); " is 214.
Long Statement,SharpDoc.MTPS,ContentServicePortTypeClient,C:\repos\xoofx_SharpDoc\src\SharpDoc\Service References\MTPS\Reference.cs,GetNavigationPaths,The length of the statement  "            SharpDoc.MTPS.GetNavigationPathsResponse1 retVal = ((SharpDoc.MTPS.ContentServicePortType)(this)).GetNavigationPaths(inValue); " is 126.
Complex Conditional,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,IsMemberToDisplay,The conditional expression  "method != null && (method.IsPublic || method.IsFamilyOrAssembly || method.IsFamily)"  is complex.
Complex Conditional,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,IsMemberToDisplay,The conditional expression  "field != null && (field.IsPublic || field.IsFamilyOrAssembly || field.IsFamily)"  is complex.
Complex Conditional,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,IsMemberToDisplay,The conditional expression  "eventInfo != null && (eventInfo.AddMethod.IsPublic || eventInfo.AddMethod.IsFamilyOrAssembly || eventInfo.AddMethod.IsFamily)"  is complex.
Complex Conditional,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,IsMemberToDisplay,The conditional expression  "property != null && (                  (property.GetMethod != null && (property.GetMethod.IsPublic || property.GetMethod.IsFamilyOrAssembly || property.GetMethod.IsFamily)) || (property.SetMethod != null && (property.SetMethod.IsPublic || property.SetMethod.IsFamilyOrAssembly || property.SetMethod.IsFamily)))"  is complex.
Complex Conditional,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,AddMethod,The conditional expression  "methodDef == null || (!isSpecialMethod && methodDef.IsSpecialName && (methodDef.IsGetter || methodDef.IsSetter || methodDef.IsAddOn || methodDef.IsRemoveOn))"  is complex.
Complex Conditional,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,ToUrl,The conditional expression  "(id == CurrentContext.Id || (declaringType != null && declaringType.Id == CurrentContext.Id && (!id.StartsWith("T:") && !declaringType.Id.StartsWith("T:")))) && useSelf"  is complex.
Empty Catch Block,SharpDoc,MonoCecilAssemblyManager,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilAssemblyManager.cs,LoadAssembly,The method has an empty catch block.
Empty Catch Block,SharpDoc,MsdnRegistry,C:\repos\xoofx_SharpDoc\src\SharpDoc\MsdnRegistry.cs,LoadCacheFromDisk,The method has an empty catch block.
Empty Catch Block,SharpDoc.Model,NDocumentApi,C:\repos\xoofx_SharpDoc\src\SharpDoc\Model\NDocumentApi.cs,Load,The method has an empty catch block.
Magic Number,SharpDoc,MonoCecilModelBuilder,C:\repos\xoofx_SharpDoc\src\SharpDoc\MonoCecilModelBuilder.cs,InheritDocumentation,The following statement contains a magic number: if (cref != null)              {                  var crefName = cref.Value;                    // As the <inheritdoc> is an unknown documentation tag for visual studio' its attributes are qualified by "!"                  // So to retrive the real cref name' we throw away the "!:"                  if (crefName.StartsWith("!:"))                      crefName = crefName.Substring(2);                    var crefMember = _registry.FindById(crefName) as INMemberReference;                  if (crefMember == null)                  {                      member.InheritDoc = null;                      return;                  }                    member.CopyDocumentation(crefMember);              }              else              {                  // For types' copy the base class documentation                  if (member is NType)                  {                      var type = member as NType;                      if (type.Bases.Count > 1)                      {                          var baseType = _registry.FindById(type.Bases[0].Id) as NType;                          if (baseType != null)                          {                              if (baseType.InheritDoc != null)                                  InheritDocumentation(baseType);                                member.CopyDocumentation(baseType);                          }                          member.InheritDoc = null;                          return;                      }                      else                      {                          member.InheritDoc = null;                          return;                      }                  }                    // For constructor' copy the documentation of the constructor of the base class that match the parameters                  else if (member is NConstructor)                  {                      var constructor = member as NConstructor;                      var declaringType = _registry.FindById(constructor.DeclaringType.Id) as NType;                      if (declaringType.Bases.Count > 1)                      {                          var baseType = _registry.FindById(declaringType.Bases[0].Id) as NType;                            if (baseType != null)                          {                              NConstructor baseConstructor = null;                              NParameterComparator comp = new NParameterComparator();                              foreach (var constr in baseType.Constructors)                              {                                  if (constr.Parameters.Count() == constructor.Parameters.Count                                      && (constructor.Parameters.Count == 0 || constr.Parameters.SequenceEqual(constructor.Parameters' comp)))                                  {                                      baseConstructor = constr;                                      break;                                  }                              }                                if (baseConstructor != null)                              {                                  if (baseConstructor.InheritDoc != null)                                      InheritDocumentation(baseConstructor);                                  constructor.CopyDocumentation(baseConstructor);                              }                          }                          constructor.InheritDoc = null;                          return;                      }                      else                      {                          constructor.InheritDoc = null;                          return;                      }                  }                    // For methods' copy the documentation of the method of the base or the interface that match the signature                  else if (member is NMethod)                  {                      var method = member as NMethod;                                          NMethod parentMethod = null;                        // Search a corresponding method in the base only if the method is overrided                      if (method.Overrides != null)                          parentMethod = method.Overrides as NMethod;                        // Search a corresponding method in the interfaces only if the method is not overrided in the declaring class                      if (parentMethod == null && method.Implements != null)                          parentMethod = method.Implements as NMethod;                        if (parentMethod != null)                      {                          if (parentMethod.InheritDoc != null)                              InheritDocumentation(parentMethod);                          method.CopyDocumentation(parentMethod);                      }                        method.InheritDoc = null;                      return;                  }                    // For overrided members' copy the documentation of the override or implement                  else if (member is IOverridable)                  {                      var overridableMember = member as IOverridable;                      INMemberReference reference = null;                        // Search a corresponding property in the base only if the method is overrided                      if (overridableMember.HasOverrides)                          reference = overridableMember.Overrides;                        // Search a corresponding property in the interfaces only if the property is not overrided in the declaring class                      if (reference == null && overridableMember.HasImplements)                          reference = overridableMember.Implements;                        if (reference != null)                      {                          var parentMember = _registry.FindById(reference.Id) as INMemberReference;                            if (parentMember != null)                          {                              if (overridableMember.HasOverrides)                                  overridableMember.Overrides = parentMember;                              else                                  overridableMember.Implements = parentMember;                                if (parentMember.InheritDoc != null)                                  InheritDocumentation(parentMember);                              member.CopyDocumentation(parentMember);                          }                      }                        member.InheritDoc = null;                      return;                  }              }
Magic Number,SharpDoc,SharpDocApp,C:\repos\xoofx_SharpDoc\src\SharpDoc\SharpDocApp.cs,ParseArguments,The following statement contains a magic number: var options = new OptionSet()                                {                                    "Copyright (c) 2010-2013 SharpDoc - Alexandre Mutel"'                                    "Usage: SharpDoc [options]* [--config file.xml | Assembly1.dll Assembly1.xml...]*"'                                    "Documentation generator for .Net languages"'                                    ""'                                    "options:"'                                    {"c|config="' "Configuration file"' opt => Config = Config.Load(opt' TopicLoader)}'                                      {                                        "D="' "Define a template parameter with an (optional) value."'                                        (param' value) =>                                            {                                                if (param == null)                                                    throw new OptionException("Missing parameter name for option -D."' "-D");                                                configParams.Add(new ConfigParam(param' value));                                            }                                        }'                                    {                                        "S="' "Define a style parameter with a (optional) value."'                                        (style' value) =>                                            {                                                if (style == null)                                                    throw new OptionException("Missing parameter name/value for option -S."' "-S");                                                styleParams.Add(new ConfigParam(style' value));                                            }                                        }'                                    {"d|style-dir="' "Add a style directory"' opt => Config.StyleDirectories.Add(opt) }'                                    {"s|style="' "Specify the style to use [default: Standard]"' opt => Config.StyleNames.Add(opt)}'                                    {"o|output="' "Specify the output directory [default: Output]"' opt => Config.OutputDirectory = opt}'                                    {"r|searchdir="' "Add search directory in order to load source assemblies"' additionalSearchDirectories.Add}'                                    {"w|webdoc="' "Url of the extern documentation site [with the protocol to use' ex: http(s)://...]"'                                         (protocol' domain) =>                                          {                                              if (protocol == null || domain == null)                                                  throw new OptionException("Missing parameter web site home page url for option -w."' "-w");                                              webDocumentationUrl = WebDocumentation.BuildWebDocumentationUrl(protocol' domain);                                          }                                        }'                                    {"wL|webdocLogin="' "(optional) Authentification file for the extern documentation site (first line: username' second line: password)"'                                         opt =>                                          {                                              if (opt == null)                                                  throw new OptionException("Missing parameter web site auth file for option -wL."' "-wL");                                              if (!File.Exists(opt))                                                  throw new OptionException("Auth config file doesn't exist."' "-wL");                                              var lines = File.ReadAllLines(opt);                                              if (lines.Length < 2)                                                  throw new OptionException("Invalid auth config file' should be one line for username' one line for password"' "-wL");                                              webDocumentationLogin = new NetworkCredential(lines[0]' lines[1]);                                          }                                        }'                                    ""'                                    {"h|help"' "Show this message and exit"' opt => showHelp = opt != null}'                                    ""'                                    "[Assembly1.dll Assembly1.xml...] Source files' if a config file is not specified' load source assembly and xml from the specified list of files"'                                    // default                                    {"<>"' opt => files.AddRange(opt.Split(' '' '\t')) }'                                };
Magic Number,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,ToUrl,The following statement contains a magic number: if (id.StartsWith("!:"))                  id = id.Substring(2);
Magic Number,SharpDoc,TemplateContext,C:\repos\xoofx_SharpDoc\src\SharpDoc\TemplateContext.cs,debug2,The following statement contains a magic number: var i = 2;
Magic Number,SharpDoc,MsdnRegistry,C:\repos\xoofx_SharpDoc\src\SharpDoc\MsdnRegistry.cs,FindUrl,The following statement contains a magic number: if (assetId.Length < 3 || !assetId.Substring(2).StartsWith("System.") || IsDisabled)                  return null;
Magic Number,SharpDoc,MsdnRegistry,C:\repos\xoofx_SharpDoc\src\SharpDoc\MsdnRegistry.cs,FindUrl,The following statement contains a magic number: if (assetId.Length < 3 || !assetId.Substring(2).StartsWith("System.") || IsDisabled)                  return null;
Magic Number,SharpDoc.Logging,LoggerBase,C:\repos\xoofx_SharpDoc\src\SharpDoc\Logging\LoggerBase.cs,LogException,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  Match match = regex.Match(line);                  if (match.Success)                  {                      string methodLocation = match.Groups[1].Value;                      string fileName = match.Groups[2].Value;                      int lineNumber;                      int.TryParse(match.Groups[3].Value' out lineNumber);                      Log( LogLevel.Error' new LogLocation(fileName' lineNumber' 1)' methodLocation' "Exception"' null);                  }                  else                  {                      // Escape a line                      Log(LogLevel.Error' logLocation' null' line.Replace("{"' "{{").Replace("}"' "}}")' null);                  }              }
Magic Number,SharpDoc.Logging,LoggerBase,C:\repos\xoofx_SharpDoc\src\SharpDoc\Logging\LoggerBase.cs,LogException,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  Match match = regex.Match(line);                  if (match.Success)                  {                      string methodLocation = match.Groups[1].Value;                      string fileName = match.Groups[2].Value;                      int lineNumber;                      int.TryParse(match.Groups[3].Value' out lineNumber);                      Log( LogLevel.Error' new LogLocation(fileName' lineNumber' 1)' methodLocation' "Exception"' null);                  }                  else                  {                      // Escape a line                      Log(LogLevel.Error' logLocation' null' line.Replace("{"' "{{").Replace("}"' "}}")' null);                  }              }
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,FormParagraphs,The following statement contains a magic number: for (int i = 0; i < grafs.Length; i++)              {                  if (grafs[i].StartsWith("\x1AH"))                  {                      // unhashify HTML blocks                      if (unhash)                      {                          int sanityCheck = 50; // just for safety' guard against an infinite loop                          bool keepGoing = true; // as long as replacements where made' keep going                          while (keepGoing && sanityCheck > 0)                          {                              keepGoing = false;                              grafs[i] = _htmlBlockHash.Replace(grafs[i]' match =>                              {                                  keepGoing = true;                                  return _htmlBlocks[match.Value];                              });                              sanityCheck--;                          }                          /* if (keepGoing)                          {                              // Logging of an infinite loop goes here.                              // If such a thing should happen' please open a new issue on http://code.google.com/p/markdownsharp/                              // with the input that caused it.                          }*/                      }                  }                  else                  {                      // do span level processing inside the block' then wrap result in <p> tags                      grafs[i] = _leadingWhitespace.Replace(RunSpanGamut(grafs[i])' "<p>") + "</p>";                  }              }
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,LinkEvaluator,The following statement contains a magic number: _urls[linkID] = EncodeAmpsAndAngles(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,LinkEvaluator,The following statement contains a magic number: if (match.Groups[3] != null && match.Groups[3].Length > 0)                  _titles[linkID] = match.Groups[3].Value.Replace("\""' "&quot;");
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,LinkEvaluator,The following statement contains a magic number: if (match.Groups[3] != null && match.Groups[3].Length > 0)                  _titles[linkID] = match.Groups[3].Value.Replace("\""' "&quot;");
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,LinkEvaluator,The following statement contains a magic number: if (match.Groups[3] != null && match.Groups[3].Length > 0)                  _titles[linkID] = match.Groups[3].Value.Replace("\""' "&quot;");
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,AnchorRefEvaluator,The following statement contains a magic number: string linkText = SaveFromAutoLinking(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,AnchorRefEvaluator,The following statement contains a magic number: string linkID = match.Groups[3].Value.ToLowerInvariant();
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,AnchorRefShortcutEvaluator,The following statement contains a magic number: string linkText = SaveFromAutoLinking(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,AnchorInlineEvaluator,The following statement contains a magic number: string linkText = SaveFromAutoLinking(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,AnchorInlineEvaluator,The following statement contains a magic number: string url = match.Groups[3].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,AnchorInlineEvaluator,The following statement contains a magic number: string title = match.Groups[6].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,AnchorInlineEvaluator,The following statement contains a magic number: if (url.StartsWith("<") && url.EndsWith(">"))                  url = url.Substring(1' url.Length - 2);
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,ImageReferenceEvaluator,The following statement contains a magic number: string altText = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,ImageReferenceEvaluator,The following statement contains a magic number: string linkID = match.Groups[3].Value.ToLowerInvariant();
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,ImageInlineEvaluator,The following statement contains a magic number: string alt = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,ImageInlineEvaluator,The following statement contains a magic number: string url = match.Groups[3].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,ImageInlineEvaluator,The following statement contains a magic number: string title = match.Groups[6].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,ImageInlineEvaluator,The following statement contains a magic number: if (url.StartsWith("<") && url.EndsWith(">"))                  url = url.Substring(1' url.Length - 2);
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,SetextHeaderEvaluator,The following statement contains a magic number: int level = match.Groups[2].Value.StartsWith("=") ? 1 : 2;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,SetextHeaderEvaluator,The following statement contains a magic number: int level = match.Groups[2].Value.StartsWith("=") ? 1 : 2;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,AtxHeaderEvaluator,The following statement contains a magic number: string header = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,GetListEvaluator,The following statement contains a magic number: return new MatchEvaluator(match =>                  {                      string list = match.Groups[1].Value;                      string listType = Regex.IsMatch(match.Groups[3].Value' _markerUL) ? "ul" : "ol";                      string result;                        result = ProcessListItems(list' listType == "ul" ? _markerUL : _markerOL' isInsideParagraphlessListItem);                        result = string.Format("<{0}>\n{1}</{0}>\n"' listType' result);                      return result;                  });
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,ProcessListItems,The following statement contains a magic number: MatchEvaluator ListItemEvaluator = (Match match) =>              {                  string item = match.Groups[3].Value;                    bool endsWithDoubleNewline = item.EndsWith("\n\n");                  bool containsDoubleNewline = endsWithDoubleNewline || item.Contains("\n\n");                    if (containsDoubleNewline || lastItemHadADoubleNewline)                      // we could correct any bad indentation here..                      item = RunBlockGamut(Outdent(item) + "\n"' unhash: false);                  else                  {                      // recursion for sub-lists                      item = DoLists(Outdent(item)' isInsideParagraphlessListItem: true);                      item = item.TrimEnd('\n');                      if (!isInsideParagraphlessListItem) // only the outer-most item should run this' otherwise it's run multiple times for the inner ones                          item = RunSpanGamut(item);                  }                  lastItemHadADoubleNewline = endsWithDoubleNewline;                  return string.Format("<li>{0}</li>\n"' item);              };
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,FencedCodeBlockEvaluator,The following statement contains a magic number: string codeBlock = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,CodeSpanEvaluator,The following statement contains a magic number: string span = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,handleTrailingParens,The following statement contains a magic number: var protocol = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,handleTrailingParens,The following statement contains a magic number: var link = match.Groups[3].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,EncodeEmailAddress,The following statement contains a magic number: var sb = new StringBuilder(addr.Length * 5);
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,EncodeEmailAddress,The following statement contains a magic number: foreach (char c in addr)              {                  r = rand.Next(1' 100);                  if ((r > 90 || c == ':') && c != '@')                      sb.Append(c);                         // m                  else if (r < 45)                      sb.AppendFormat("&#x{0:x};"' (int)c); // &#x6D                  else                      sb.AppendFormat("&#{0};"' (int)c);    // &#109              }
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,EncodeEmailAddress,The following statement contains a magic number: foreach (char c in addr)              {                  r = rand.Next(1' 100);                  if ((r > 90 || c == ':') && c != '@')                      sb.Append(c);                         // m                  else if (r < 45)                      sb.AppendFormat("&#x{0:x};"' (int)c); // &#x6D                  else                      sb.AppendFormat("&#{0};"' (int)c);    // &#109              }
Magic Number,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,EncodeEmailAddress,The following statement contains a magic number: foreach (char c in addr)              {                  r = rand.Next(1' 100);                  if ((r > 90 || c == ':') && c != '@')                      sb.Append(c);                         // m                  else if (r < 45)                      sb.AppendFormat("&#x{0:x};"' (int)c); // &#x6D                  else                      sb.AppendFormat("&#{0};"' (int)c);    // &#109              }
Magic Number,SharpDoc.Model,MemberRegistry,C:\repos\xoofx_SharpDoc\src\SharpDoc\Model\MemberRegistry.cs,FindById,The following statement contains a magic number: if (!_mapIdToModelElement.TryGetValue(id' out refFound))              {                  // Special case for external references' try to resolve them to a non-prefixed version                  if (id.StartsWith("X:"))                    {                      _mapIdToModelElement.TryGetValue(id.Substring(2)' out refFound);                  }              }
Magic Number,SharpDoc.Model,NNamespace,C:\repos\xoofx_SharpDoc\src\SharpDoc\Model\NNamespace.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Name != null ? Name.GetHashCode() : 0)*397) ^ (Assembly != null ? Assembly.GetHashCode() : 0);              }
Missing Default,MarkdownSharp,Markdown,C:\repos\xoofx_SharpDoc\src\SharpDoc\MarkdownSharp.cs,Markdown,The following switch statement is missing a default case: switch (key)                  {                      case "Markdown.AutoHyperlink":                          _autoHyperlink = Convert.ToBoolean(settings[key]);                          break;                      case "Markdown.AutoNewlines":                          _autoNewlines = Convert.ToBoolean(settings[key]);                          break;                      case "Markdown.EmptyElementSuffix":                          _emptyElementSuffix = settings[key];                          break;                      case "Markdown.EncodeProblemUrlCharacters":                          _encodeProblemUrlCharacters = Convert.ToBoolean(settings[key]);                          break;                      case "Markdown.LinkEmails":                          _linkEmails = Convert.ToBoolean(settings[key]);                          break;                      case "Markdown.StrictBoldItalic":                          _strictBoldItalic = Convert.ToBoolean(settings[key]);                          break;                  }
