Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingNegative,The length of the statement  "			Assert.AreEqual(-1' CreateBS(new byte[] { 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 1 }).ReadProtobufVarInt()); " is 123.
Long Statement,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingNegative,The length of the statement  "			Assert.AreEqual(-200000000' CreateBS(new byte[] { 0x80' 0xfc' 0xd0' 0xa0' 0xff' 0xff' 0xff' 0xff' 0xff' 1 }).ReadProtobufVarInt()); " is 131.
Long Statement,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingNegative,The length of the statement  "			Assert.AreEqual(-2000000000' CreateBS(new byte[] { 0x80' 0xd8' 0xa9' 0xc6' 0xf8' 0xff' 0xff' 0xff' 0xff' 1 }).ReadProtobufVarInt()); " is 132.
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,Init,The following statement contains a magic number: rng = new Random(1337);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,Init,The following statement contains a magic number: data = new byte[128 * 1024];
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,Init,The following statement contains a magic number: data = new byte[128 * 1024];
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestReadInt,The following statement contains a magic number: int totalBits = data.Length * 8;
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestReadInt,The following statement contains a magic number: int thisTime = Math.Min(rng.Next(32) + 1' totalBits - bitOffset);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestReadSignedInt,The following statement contains a magic number: int totalBits = data.Length * 8;
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestReadSignedInt,The following statement contains a magic number: int thisTime = Math.Min(rng.Next(32) + 1' totalBits - bitOffset);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestReadByte,The following statement contains a magic number: int totalBits = data.Length * 8;
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestReadByte,The following statement contains a magic number: int thisTime = Math.Min(rng.Next(8) + 1' totalBits - bitOffset);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestReadBits,The following statement contains a magic number: int totalBits = data.Length * 8;
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestReadBits,The following statement contains a magic number: int thisTime = Math.Min(rng.Next(512) + 1' totalBits - bitOffset);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingPositive,The following statement contains a magic number: Assert.AreEqual(150' CreateBS(new byte[] { 0x96' 0x01 }).ReadProtobufVarInt());
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingPositive,The following statement contains a magic number: Assert.AreEqual(300' CreateBS(new byte[] { 172' 2 }).ReadProtobufVarInt());
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingPositive,The following statement contains a magic number: Assert.AreEqual(300' CreateBS(new byte[] { 172' 2 }).ReadProtobufVarInt());
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingPositive,The following statement contains a magic number: Assert.AreEqual(300' CreateBS(new byte[] { 172' 2 }).ReadProtobufVarInt());
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingPositive,The following statement contains a magic number: Assert.AreEqual(200000000' CreateBS(new byte[] { 0x80' 0x84' 0xaf' 0x5f }).ReadProtobufVarInt());
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingPositive,The following statement contains a magic number: Assert.AreEqual(2000000000' CreateBS(new byte[] { 0x80' 0xa8' 0xd6' 0xb9' 7 }).ReadProtobufVarInt());
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingPositive,The following statement contains a magic number: Assert.AreEqual(2000000000' CreateBS(new byte[] { 0x80' 0xa8' 0xd6' 0xb9' 7 }).ReadProtobufVarInt());
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingNegative,The following statement contains a magic number: Assert.AreEqual(-200000000' CreateBS(new byte[] { 0x80' 0xfc' 0xd0' 0xa0' 0xff' 0xff' 0xff' 0xff' 0xff' 1 }).ReadProtobufVarInt());
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestVarintDecodingNegative,The following statement contains a magic number: Assert.AreEqual(-2000000000' CreateBS(new byte[] { 0x80' 0xd8' 0xa9' 0xc6' 0xf8' 0xff' 0xff' 0xff' 0xff' 1 }).ReadProtobufVarInt());
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestBasicChunking,The following statement contains a magic number: dbgAll.BeginChunk((128 * 1024 - 2) * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestBasicChunking,The following statement contains a magic number: dbgAll.BeginChunk((128 * 1024 - 2) * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestBasicChunking,The following statement contains a magic number: dbgAll.BeginChunk((128 * 1024 - 2) * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestBasicChunking,The following statement contains a magic number: dbgAll.BeginChunk((128 * 1024 - 2) * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestBasicChunking,The following statement contains a magic number: dbgAll.ReadBytes(128 * 1024 - 2);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestBasicChunking,The following statement contains a magic number: dbgAll.ReadBytes(128 * 1024 - 2);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestBasicChunking,The following statement contains a magic number: dbgAll.ReadBytes(128 * 1024 - 2);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingPartial,The following statement contains a magic number: dbgAll.BeginChunk(2);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingLarge,The following statement contains a magic number: dbgAll.BeginChunk(4097 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingLarge,The following statement contains a magic number: dbgAll.BeginChunk(4097 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingLarge,The following statement contains a magic number: dbgAll.BeginChunk(4096 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingLarge,The following statement contains a magic number: dbgAll.BeginChunk(4096 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingLargePartial,The following statement contains a magic number: dbgAll.BeginChunk(8193 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingLargePartial,The following statement contains a magic number: dbgAll.BeginChunk(8193 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingLargePartial,The following statement contains a magic number: dbgAll.ReadBytes(4097);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingRandom,The following statement contains a magic number: int totalBits = data.Length * 8;
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingRandom,The following statement contains a magic number: int thisTime = Math.Min(rng.Next(4096) + 16' totalBits - bitOffset - 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingRandom,The following statement contains a magic number: int thisTime = Math.Min(rng.Next(4096) + 16' totalBits - bitOffset - 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingRandom,The following statement contains a magic number: int thisTime = Math.Min(rng.Next(4096) + 16' totalBits - bitOffset - 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingRandom,The following statement contains a magic number: bitOffset += thisTime + 8;
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkSkippingRandom,The following statement contains a magic number: bitOffset < totalBits - 16
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNesting,The following statement contains a magic number: dbgAll.BeginChunk(3);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingComplex,The following statement contains a magic number: dbgAll.BeginChunk(5);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingComplex,The following statement contains a magic number: dbgAll.BeginChunk(4);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingComplex,The following statement contains a magic number: dbgAll.BeginChunk(3);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingComplex,The following statement contains a magic number: dbgAll.BeginChunk(2);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingCompletely,The following statement contains a magic number: dbgAll.BeginChunk(8192 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingCompletely,The following statement contains a magic number: dbgAll.BeginChunk(8192 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingCompletely,The following statement contains a magic number: dbgAll.BeginChunk(4096 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingCompletely,The following statement contains a magic number: dbgAll.BeginChunk(4096 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingCompletely,The following statement contains a magic number: dbgAll.BeginChunk(4096 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingCompletely,The following statement contains a magic number: dbgAll.BeginChunk(4096 * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingCompletely,The following statement contains a magic number: dbgAll.ReadBytes(4096);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingCompletely,The following statement contains a magic number: dbgAll.ReadBytes(4096);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingRandom,The following statement contains a magic number: int depth = 0' remaining = data.Length * 8 - 1;
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingRandom,The following statement contains a magic number: switch (rng.Next(2 + ((remainingStack.Count > 0) ? 1 : 0))) {  				case 0: // begin new chunk  					int chunksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.BeginChunk(chunksize);  					remainingStack.Push(remaining - chunksize);  					remaining = chunksize;  					break;  				case 1: // read stuff  					int blocksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.ReadBits(blocksize);  					remaining -= blocksize;  					break;  				case 2: // end current chunk  					dbgAll.EndChunk();  					remaining = remainingStack.Pop();  					break;  				default:  					throw new NotImplementedException();  				}
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingRandom,The following statement contains a magic number: switch (rng.Next(2 + ((remainingStack.Count > 0) ? 1 : 0))) {  				case 0: // begin new chunk  					int chunksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.BeginChunk(chunksize);  					remainingStack.Push(remaining - chunksize);  					remaining = chunksize;  					break;  				case 1: // read stuff  					int blocksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.ReadBits(blocksize);  					remaining -= blocksize;  					break;  				case 2: // end current chunk  					dbgAll.EndChunk();  					remaining = remainingStack.Pop();  					break;  				default:  					throw new NotImplementedException();  				}
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingRandom,The following statement contains a magic number: switch (rng.Next(2 + ((remainingStack.Count > 0) ? 1 : 0))) {  				case 0: // begin new chunk  					int chunksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.BeginChunk(chunksize);  					remainingStack.Push(remaining - chunksize);  					remaining = chunksize;  					break;  				case 1: // read stuff  					int blocksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.ReadBits(blocksize);  					remaining -= blocksize;  					break;  				case 2: // end current chunk  					dbgAll.EndChunk();  					remaining = remainingStack.Pop();  					break;  				default:  					throw new NotImplementedException();  				}
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingRandom,The following statement contains a magic number: switch (rng.Next(2 + ((remainingStack.Count > 0) ? 1 : 0))) {  				case 0: // begin new chunk  					int chunksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.BeginChunk(chunksize);  					remainingStack.Push(remaining - chunksize);  					remaining = chunksize;  					break;  				case 1: // read stuff  					int blocksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.ReadBits(blocksize);  					remaining -= blocksize;  					break;  				case 2: // end current chunk  					dbgAll.EndChunk();  					remaining = remainingStack.Pop();  					break;  				default:  					throw new NotImplementedException();  				}
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingRandom,The following statement contains a magic number: switch (rng.Next(2 + ((remainingStack.Count > 0) ? 1 : 0))) {  				case 0: // begin new chunk  					int chunksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.BeginChunk(chunksize);  					remainingStack.Push(remaining - chunksize);  					remaining = chunksize;  					break;  				case 1: // read stuff  					int blocksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.ReadBits(blocksize);  					remaining -= blocksize;  					break;  				case 2: // end current chunk  					dbgAll.EndChunk();  					remaining = remainingStack.Pop();  					break;  				default:  					throw new NotImplementedException();  				}
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestChunkNestingRandom,The following statement contains a magic number: switch (rng.Next(2 + ((remainingStack.Count > 0) ? 1 : 0))) {  				case 0: // begin new chunk  					int chunksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.BeginChunk(chunksize);  					remainingStack.Push(remaining - chunksize);  					remaining = chunksize;  					break;  				case 1: // read stuff  					int blocksize = Math.Min(rng.Next(5000 * 8)' remaining);  					dbgAll.ReadBits(blocksize);  					remaining -= blocksize;  					break;  				case 2: // end current chunk  					dbgAll.EndChunk();  					remaining = remainingStack.Pop();  					break;  				default:  					throw new NotImplementedException();  				}
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestStreamEndChunkBoundary,The following statement contains a magic number: dbgAll.BeginChunk(data.Length * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestStreamEndChunkBoundary,The following statement contains a magic number: dbgAll.BeginChunk(data.Length * 8);
Magic Number,Testing,TestBitstreams,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\TestBitstreams.cs,TestStreamEndChunkBoundaryData,The following statement contains a magic number: dbgAll.BeginChunk(data.Length * 8);
Magic Number,Testing,AwkwardStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\Testing\AwkwardStream.cs,Read,The following statement contains a magic number: return Underlying.Read(buffer' offset' Rng.Next((Rng.Next(1) == 0) ? 4 : count) + 1);
