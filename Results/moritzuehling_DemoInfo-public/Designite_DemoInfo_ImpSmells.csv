Implementation smell,Namespace,Class,File,Method,Description
Long Method,DemoInfo,Equipment,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Events.cs,MapEquipment,The method has 169 lines of code.
Long Method,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,Apply,The method has 290 lines of code.
Complex Method,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseNextTick,Cyclomatic complexity of the method is 11
Complex Method,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,Cyclomatic complexity of the method is 8
Complex Method,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,MapEquipment,Cyclomatic complexity of the method is 9
Complex Method,DemoInfo,Equipment,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Events.cs,MapEquipment,Cyclomatic complexity of the method is 48
Complex Method,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,DemoInfo,GameEvent,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEvent.cs,Parse,Cyclomatic complexity of the method is 16
Complex Method,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,DemoInfo,SendTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,DemoInfo,SendProp,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,DemoInfo.DP,DemoPacketParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\DemoPacketParser.cs,ParsePacket,Cyclomatic complexity of the method is 9
Complex Method,DemoInfo.DP,PropertyEntry,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Entity.cs,Decode,Cyclomatic complexity of the method is 15
Complex Method,DemoInfo.DP,PropertyEntry,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Entity.cs,Emit,Cyclomatic complexity of the method is 14
Complex Method,DemoInfo.DP.FastNetmessages,UserMessage,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UserMessage.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,Apply,Cyclomatic complexity of the method is 56
Complex Method,DemoInfo.DP.Handler,PropertyCollector,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PacketEntitesHandler.cs,PropertyCollector,Cyclomatic complexity of the method is 8
Complex Method,DemoInfo.DP.Handler,PropertyCollector,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PacketEntitesHandler.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,DemoInfo.DP.Handler,PropDecoder,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PropDecoder.cs,DecodeProp,Cyclomatic complexity of the method is 8
Complex Method,DemoInfo.DP.Handler,PropDecoder,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PropDecoder.cs,DecodeSpecialFloat,Cyclomatic complexity of the method is 10
Complex Method,DemoInfo.DP.Handler,CreateStringTableUserInfoHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\CreateStringTableUserInfoHandler.cs,Apply,Cyclomatic complexity of the method is 18
Complex Method,DemoInfo.ST,StringTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\ST\StringTableParser.cs,ParseStringTable,Cyclomatic complexity of the method is 11
Complex Method,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,Cyclomatic complexity of the method is 9
Complex Method,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,EndChunk,Cyclomatic complexity of the method is 10
Long Identifier,DemoInfo,NETTick,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\NETTick.cs,,The length of the parameter HostComputationTimeStdDeviation is 31.
Long Identifier,DemoInfo,NETTick,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\NETTick.cs,,The length of the parameter HostFramestartTimeStdDeviation is 30.
Long Identifier,DemoInfo.DP.Handler,PropDecoder,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PropDecoder.cs,,The length of the parameter COORD_FRACTIONAL_BITS_MP_LOWPRECISION is 37.
Long Identifier,DemoInfo.DP.Handler,PropDecoder,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PropDecoder.cs,,The length of the parameter COORD_DENOMINATOR_LOWPRECISION is 30.
Long Statement,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseNextTick,The length of the statement  "				throw new InvalidOperationException ("You need to call ParseHeader first before you call ParseToEnd or ParseNextTick!"); " is 120.
Long Statement,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,HandlePlayers,The length of the statement  "			SendTableParser.FindByName("CCSPlayer").OnNewEntity += (object sender' EntityCreatedEventArgs e) => HandleNewPlayer (e.Entity); " is 127.
Long Statement,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,HandleNewPlayer,The length of the statement  "			playerEntity.FindProperty("m_unRoundStartEquipmentValue").IntRecived += (sender' e) => p.RoundStartEquipmentValue = e.Value; " is 124.
Long Statement,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,HandleNewPlayer,The length of the statement  "			playerEntity.FindProperty("m_unFreezetimeEndEquipmentValue").IntRecived += (sender' e) => p.FreezetimeEndEquipmentValue = e.Value; " is 130.
Long Statement,DemoInfo.DP,PropertyEntry,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Entity.cs,CheckBindings,The length of the statement  "			if (VectorRecived != null && (this.Entry.Prop.Type != SendPropertyType.Vector && this.Entry.Prop.Type != SendPropertyType.VectorXY)) " is 132.
Long Statement,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,Apply,The length of the statement  "			//if (eventDescriptor.Name != "player_footstep" && eventDescriptor.Name != "weapon_fire" && eventDescriptor.Name != "player_jump") { " is 132.
Long Statement,DemoInfo.DT,DataTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DT\DataTableParser.cs,GatherProps_IterateProps,The length of the statement  "                if (property.Flags.HasFlagFast(SendPropertyFlags.InsideArray) || property.Flags.HasFlagFast(SendPropertyFlags.Exclude) || IsPropExcluded(table' property)) " is 154.
Long Statement,DemoInfo.DT,FlattenedPropEntry,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DT\ServerClass.cs,ToString,The length of the statement  "			return string.Format("[FlattenedPropEntry: PropertyName={2}' Prop={0}' ArrayElementProp={1}]"' Prop' ArrayElementProp' PropertyName); " is 133.
Long Statement,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The length of the statement  "			Debug.Assert(mayOverflow || ((Offset + numBits) <= (BitsInBuffer + (SLED * 8)))' "gg"' "This code just fell apart. We're all dead. Offset={0} numBits={1} BitsInBuffer={2}"' Offset' numBits' BitsInBuffer); " is 204.
Long Statement,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The length of the statement  "			return (uint)((BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits)) >> ((8 * 8) - numBits)); " is 133.
Long Statement,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The length of the statement  "			var result = (int)(((long)(BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits))) >> ((8 * 8) - numBits)); " is 146.
Long Statement,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The length of the statement  "			Debug.Assert(mayOverflow || ((Offset + numBits) <= (BitsInBuffer + (SLED * 8)))' "gg"' "This code just fell apart. We're all dead. Offset={0} numBits={1} BitsInBuffer={2}"' Offset' numBits' BitsInBuffer); " is 204.
Long Statement,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The length of the statement  "			return (uint)(((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - ((Offset & ((8 * 4) - 1))) - numBits)) >> ((8 * 8) - numBits)); " is 136.
Long Statement,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The length of the statement  "			var result = (int)(((long)((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - (Offset & ((8 * 4) - 1)) - numBits))) >> ((8 * 8) - numBits)); " is 147.
Complex Conditional,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadProtobufVarIntStub,The conditional expression  "(count < 4) || ((count == 4) && (((b & 0xF8) == 0) || ((b & 0xF8) == 0xF8)))"  is complex.
Complex Conditional,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,Apply,The conditional expression  "kill.Killer != null && kill.Weapon.Class != EquipmentClass.Grenade  						&& kill.Weapon.Weapon != EquipmentElement.Revolver  						&& kill.Killer.Weapons.Any() && kill.Weapon.Weapon != EquipmentElement.World"  is complex.
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseHeader,The following statement contains a magic number: header.Protocol != 4
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: IngameTick = (int)BitStream.ReadInt(32);
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: switch (command) {  			case DemoCommand.Synctick:  				break;  			case DemoCommand.Stop:  				return false;  			case DemoCommand.ConsoleCommand:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.DataTables:  				BitStream.BeginChunk (BitStream.ReadSignedInt (32) * 8);  				SendTableParser.ParsePacket (BitStream);  				BitStream.EndChunk ();    				//Map the weapons in the equipmentMapping-Dictionary.  				MapEquipment ();    				//And now we have the entities' we can bind events on them.   				BindEntites();    				break;  			case DemoCommand.StringTables:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				StringTables.ParsePacket(BitStream' this);  				BitStream.EndChunk();  				break;  			case DemoCommand.UserCommand:  				BitStream.ReadInt(32);  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.Signon:  			case DemoCommand.Packet:  				ParseDemoPacket();  				break;  			default:  				throw new Exception("Can't handle Demo-Command " + command);  			}
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: switch (command) {  			case DemoCommand.Synctick:  				break;  			case DemoCommand.Stop:  				return false;  			case DemoCommand.ConsoleCommand:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.DataTables:  				BitStream.BeginChunk (BitStream.ReadSignedInt (32) * 8);  				SendTableParser.ParsePacket (BitStream);  				BitStream.EndChunk ();    				//Map the weapons in the equipmentMapping-Dictionary.  				MapEquipment ();    				//And now we have the entities' we can bind events on them.   				BindEntites();    				break;  			case DemoCommand.StringTables:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				StringTables.ParsePacket(BitStream' this);  				BitStream.EndChunk();  				break;  			case DemoCommand.UserCommand:  				BitStream.ReadInt(32);  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.Signon:  			case DemoCommand.Packet:  				ParseDemoPacket();  				break;  			default:  				throw new Exception("Can't handle Demo-Command " + command);  			}
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: switch (command) {  			case DemoCommand.Synctick:  				break;  			case DemoCommand.Stop:  				return false;  			case DemoCommand.ConsoleCommand:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.DataTables:  				BitStream.BeginChunk (BitStream.ReadSignedInt (32) * 8);  				SendTableParser.ParsePacket (BitStream);  				BitStream.EndChunk ();    				//Map the weapons in the equipmentMapping-Dictionary.  				MapEquipment ();    				//And now we have the entities' we can bind events on them.   				BindEntites();    				break;  			case DemoCommand.StringTables:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				StringTables.ParsePacket(BitStream' this);  				BitStream.EndChunk();  				break;  			case DemoCommand.UserCommand:  				BitStream.ReadInt(32);  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.Signon:  			case DemoCommand.Packet:  				ParseDemoPacket();  				break;  			default:  				throw new Exception("Can't handle Demo-Command " + command);  			}
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: switch (command) {  			case DemoCommand.Synctick:  				break;  			case DemoCommand.Stop:  				return false;  			case DemoCommand.ConsoleCommand:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.DataTables:  				BitStream.BeginChunk (BitStream.ReadSignedInt (32) * 8);  				SendTableParser.ParsePacket (BitStream);  				BitStream.EndChunk ();    				//Map the weapons in the equipmentMapping-Dictionary.  				MapEquipment ();    				//And now we have the entities' we can bind events on them.   				BindEntites();    				break;  			case DemoCommand.StringTables:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				StringTables.ParsePacket(BitStream' this);  				BitStream.EndChunk();  				break;  			case DemoCommand.UserCommand:  				BitStream.ReadInt(32);  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.Signon:  			case DemoCommand.Packet:  				ParseDemoPacket();  				break;  			default:  				throw new Exception("Can't handle Demo-Command " + command);  			}
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: switch (command) {  			case DemoCommand.Synctick:  				break;  			case DemoCommand.Stop:  				return false;  			case DemoCommand.ConsoleCommand:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.DataTables:  				BitStream.BeginChunk (BitStream.ReadSignedInt (32) * 8);  				SendTableParser.ParsePacket (BitStream);  				BitStream.EndChunk ();    				//Map the weapons in the equipmentMapping-Dictionary.  				MapEquipment ();    				//And now we have the entities' we can bind events on them.   				BindEntites();    				break;  			case DemoCommand.StringTables:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				StringTables.ParsePacket(BitStream' this);  				BitStream.EndChunk();  				break;  			case DemoCommand.UserCommand:  				BitStream.ReadInt(32);  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.Signon:  			case DemoCommand.Packet:  				ParseDemoPacket();  				break;  			default:  				throw new Exception("Can't handle Demo-Command " + command);  			}
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: switch (command) {  			case DemoCommand.Synctick:  				break;  			case DemoCommand.Stop:  				return false;  			case DemoCommand.ConsoleCommand:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.DataTables:  				BitStream.BeginChunk (BitStream.ReadSignedInt (32) * 8);  				SendTableParser.ParsePacket (BitStream);  				BitStream.EndChunk ();    				//Map the weapons in the equipmentMapping-Dictionary.  				MapEquipment ();    				//And now we have the entities' we can bind events on them.   				BindEntites();    				break;  			case DemoCommand.StringTables:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				StringTables.ParsePacket(BitStream' this);  				BitStream.EndChunk();  				break;  			case DemoCommand.UserCommand:  				BitStream.ReadInt(32);  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.Signon:  			case DemoCommand.Packet:  				ParseDemoPacket();  				break;  			default:  				throw new Exception("Can't handle Demo-Command " + command);  			}
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: switch (command) {  			case DemoCommand.Synctick:  				break;  			case DemoCommand.Stop:  				return false;  			case DemoCommand.ConsoleCommand:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.DataTables:  				BitStream.BeginChunk (BitStream.ReadSignedInt (32) * 8);  				SendTableParser.ParsePacket (BitStream);  				BitStream.EndChunk ();    				//Map the weapons in the equipmentMapping-Dictionary.  				MapEquipment ();    				//And now we have the entities' we can bind events on them.   				BindEntites();    				break;  			case DemoCommand.StringTables:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				StringTables.ParsePacket(BitStream' this);  				BitStream.EndChunk();  				break;  			case DemoCommand.UserCommand:  				BitStream.ReadInt(32);  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.Signon:  			case DemoCommand.Packet:  				ParseDemoPacket();  				break;  			default:  				throw new Exception("Can't handle Demo-Command " + command);  			}
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: switch (command) {  			case DemoCommand.Synctick:  				break;  			case DemoCommand.Stop:  				return false;  			case DemoCommand.ConsoleCommand:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.DataTables:  				BitStream.BeginChunk (BitStream.ReadSignedInt (32) * 8);  				SendTableParser.ParsePacket (BitStream);  				BitStream.EndChunk ();    				//Map the weapons in the equipmentMapping-Dictionary.  				MapEquipment ();    				//And now we have the entities' we can bind events on them.   				BindEntites();    				break;  			case DemoCommand.StringTables:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				StringTables.ParsePacket(BitStream' this);  				BitStream.EndChunk();  				break;  			case DemoCommand.UserCommand:  				BitStream.ReadInt(32);  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.Signon:  			case DemoCommand.Packet:  				ParseDemoPacket();  				break;  			default:  				throw new Exception("Can't handle Demo-Command " + command);  			}
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseTick,The following statement contains a magic number: switch (command) {  			case DemoCommand.Synctick:  				break;  			case DemoCommand.Stop:  				return false;  			case DemoCommand.ConsoleCommand:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.DataTables:  				BitStream.BeginChunk (BitStream.ReadSignedInt (32) * 8);  				SendTableParser.ParsePacket (BitStream);  				BitStream.EndChunk ();    				//Map the weapons in the equipmentMapping-Dictionary.  				MapEquipment ();    				//And now we have the entities' we can bind events on them.   				BindEntites();    				break;  			case DemoCommand.StringTables:  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				StringTables.ParsePacket(BitStream' this);  				BitStream.EndChunk();  				break;  			case DemoCommand.UserCommand:  				BitStream.ReadInt(32);  				BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);  				BitStream.EndChunk();  				break;  			case DemoCommand.Signon:  			case DemoCommand.Packet:  				ParseDemoPacket();  				break;  			default:  				throw new Exception("Can't handle Demo-Command " + command);  			}
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseDemoPacket,The following statement contains a magic number: BitStream.ReadInt(32);
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseDemoPacket,The following statement contains a magic number: BitStream.ReadInt(32);
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseDemoPacket,The following statement contains a magic number: BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,ParseDemoPacket,The following statement contains a magic number: BitStream.BeginChunk(BitStream.ReadSignedInt(32) * 8);
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,HandlePlayers,The following statement contains a magic number: SendTableParser.FindByName("CCSPlayerResource").OnNewEntity += (blahblah' playerResources) => {  				for(int i = 0; i < 64; i++)  				{  					//Since this is passed as reference to the delegates  					int iForTheMethod = i;  					string iString = i.ToString().PadLeft(3' '0');    					playerResources.Entity.FindProperty("m_szClan."+iString).StringRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Clantag = e.Value;  					};    					playerResources.Entity.FindProperty("m_iPing."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Ping = e.Value;  					};    					playerResources.Entity.FindProperty("m_iScore."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Score = e.Value;  					};    					playerResources.Entity.FindProperty("m_iKills."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Kills = e.Value;  					};    					playerResources.Entity.FindProperty("m_iDeaths."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Deaths = e.Value;  					};      					playerResources.Entity.FindProperty("m_iAssists."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Assists = e.Value;  					};    					playerResources.Entity.FindProperty("m_iMVPs."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].MVPs = e.Value;  					};    					playerResources.Entity.FindProperty("m_iTotalCashSpent."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].TotalCashSpent = e.Value;  					};    					#if DEBUG  					playerResources.Entity.FindProperty("m_iArmor."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].ScoreboardArmor = e.Value;  					};    					playerResources.Entity.FindProperty("m_iHealth."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].ScoreboardHP = e.Value;  					};    					#endif  				}  			};
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,HandlePlayers,The following statement contains a magic number: SendTableParser.FindByName("CCSPlayerResource").OnNewEntity += (blahblah' playerResources) => {  				for(int i = 0; i < 64; i++)  				{  					//Since this is passed as reference to the delegates  					int iForTheMethod = i;  					string iString = i.ToString().PadLeft(3' '0');    					playerResources.Entity.FindProperty("m_szClan."+iString).StringRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Clantag = e.Value;  					};    					playerResources.Entity.FindProperty("m_iPing."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Ping = e.Value;  					};    					playerResources.Entity.FindProperty("m_iScore."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Score = e.Value;  					};    					playerResources.Entity.FindProperty("m_iKills."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Kills = e.Value;  					};    					playerResources.Entity.FindProperty("m_iDeaths."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Deaths = e.Value;  					};      					playerResources.Entity.FindProperty("m_iAssists."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].Assists = e.Value;  					};    					playerResources.Entity.FindProperty("m_iMVPs."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].MVPs = e.Value;  					};    					playerResources.Entity.FindProperty("m_iTotalCashSpent."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].TotalCashSpent = e.Value;  					};    					#if DEBUG  					playerResources.Entity.FindProperty("m_iArmor."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].ScoreboardArmor = e.Value;  					};    					playerResources.Entity.FindProperty("m_iHealth."+iString).IntRecived += (sender' e) => {  						additionalInformations[iForTheMethod].ScoreboardHP = e.Value;  					};    					#endif  				}  			};
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,HandleNewPlayer,The following statement contains a magic number: playerEntity.FindProperty(weaponPrefix + i.ToString().PadLeft(3' '0')).IntRecived += (sender' e) => {    					int index = e.Value & INDEX_MASK;    					if (index != INDEX_MASK) {  						if(cache[iForTheMethod] != 0) //Player already has a weapon in this slot.   						{  							p.rawWeapons.Remove(cache[iForTheMethod]);  							cache[iForTheMethod] = 0;  						}  						cache[iForTheMethod] = index;    						AttributeWeapon(index' p);  					} else {  						if (cache[iForTheMethod] != 0 && p.rawWeapons.ContainsKey(cache[iForTheMethod]))  						{  							p.rawWeapons[cache[iForTheMethod]].Owner = null;  						}  						p.rawWeapons.Remove(cache[iForTheMethod]);    						cache[iForTheMethod] = 0;  					}  				};
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,HandleNewPlayer,The following statement contains a magic number: playerEntity.FindProperty ("m_iAmmo." + i.ToString ().PadLeft (3' '0')).IntRecived += (sender' e) => {  					p.AmmoLeft [iForTheMethod] = e.Value;  				};
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,HandleNewPlayer,The following statement contains a magic number: i < 32
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,MapEquipment,The following statement contains a magic number: var s = sc.DTName.Substring (9).ToLower ();
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,MapEquipment,The following statement contains a magic number: sc.BaseClasses [7].Name == "CWeaponCSBaseGun"
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,MapEquipment,The following statement contains a magic number: sc.BaseClasses.Count > 7
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,MapEquipment,The following statement contains a magic number: sc.BaseClasses.Count > 6 && sc.BaseClasses [6].Name == "CWeaponCSBase"
Magic Number,DemoInfo,DemoParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DemoParser.cs,MapEquipment,The following statement contains a magic number: sc.BaseClasses.Count > 6 && sc.BaseClasses [6].Name == "CWeaponCSBase"
Magic Number,DemoInfo,Helper,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Helper.cs,ReadInt32SwapEndian,The following statement contains a magic number: return BitConverter.ToInt32(reader.ReadBytes(4).Reverse().ToArray()' 0);
Magic Number,DemoInfo,Helper,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Helper.cs,ReadInt64SwapEndian,The following statement contains a magic number: return BitConverter.ToInt64(reader.ReadBytes(8).Reverse().ToArray()' 0);
Magic Number,DemoInfo,Helper,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Helper.cs,ReadCString,The following statement contains a magic number: return encoding.GetString(reader.ReadBytes(length)).Split(new char[] { '\0' }' 2)[0];
Magic Number,DemoInfo,Helper,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Helper.cs,ReadVarInt32,The following statement contains a magic number: count > 5
Magic Number,DemoInfo,Helper,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Helper.cs,ReadVarInt32,The following statement contains a magic number: result |= ( b & 0x7F ) << ( 7 * count );
Magic Number,DemoInfo,Helper,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Helper.cs,ReadNullTerminatedString,The following statement contains a magic number: return ReadNullTerminatedString(reader' encoding' 512);
Magic Number,DemoInfo,DemoHeader,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,ParseFrom,The following statement contains a magic number: return new DemoHeader() {                  Filestamp = reader.ReadCString(8)'                  Protocol = reader.ReadSignedInt(32)'  				NetworkProtocol = reader.ReadSignedInt(32)'                  ServerName = reader.ReadCString(MAX_OSPATH)'                    ClientName = reader.ReadCString(MAX_OSPATH)'                  MapName = reader.ReadCString(MAX_OSPATH)'                  GameDirectory = reader.ReadCString(MAX_OSPATH)'  				PlaybackTime = reader.ReadFloat()'    				PlaybackTicks = reader.ReadSignedInt(32)'  				PlaybackFrames = reader.ReadSignedInt(32)'  				SignonLength = reader.ReadSignedInt(32)'              };
Magic Number,DemoInfo,DemoHeader,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,ParseFrom,The following statement contains a magic number: return new DemoHeader() {                  Filestamp = reader.ReadCString(8)'                  Protocol = reader.ReadSignedInt(32)'  				NetworkProtocol = reader.ReadSignedInt(32)'                  ServerName = reader.ReadCString(MAX_OSPATH)'                    ClientName = reader.ReadCString(MAX_OSPATH)'                  MapName = reader.ReadCString(MAX_OSPATH)'                  GameDirectory = reader.ReadCString(MAX_OSPATH)'  				PlaybackTime = reader.ReadFloat()'    				PlaybackTicks = reader.ReadSignedInt(32)'  				PlaybackFrames = reader.ReadSignedInt(32)'  				SignonLength = reader.ReadSignedInt(32)'              };
Magic Number,DemoInfo,DemoHeader,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,ParseFrom,The following statement contains a magic number: return new DemoHeader() {                  Filestamp = reader.ReadCString(8)'                  Protocol = reader.ReadSignedInt(32)'  				NetworkProtocol = reader.ReadSignedInt(32)'                  ServerName = reader.ReadCString(MAX_OSPATH)'                    ClientName = reader.ReadCString(MAX_OSPATH)'                  MapName = reader.ReadCString(MAX_OSPATH)'                  GameDirectory = reader.ReadCString(MAX_OSPATH)'  				PlaybackTime = reader.ReadFloat()'    				PlaybackTicks = reader.ReadSignedInt(32)'  				PlaybackFrames = reader.ReadSignedInt(32)'  				SignonLength = reader.ReadSignedInt(32)'              };
Magic Number,DemoInfo,DemoHeader,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,ParseFrom,The following statement contains a magic number: return new DemoHeader() {                  Filestamp = reader.ReadCString(8)'                  Protocol = reader.ReadSignedInt(32)'  				NetworkProtocol = reader.ReadSignedInt(32)'                  ServerName = reader.ReadCString(MAX_OSPATH)'                    ClientName = reader.ReadCString(MAX_OSPATH)'                  MapName = reader.ReadCString(MAX_OSPATH)'                  GameDirectory = reader.ReadCString(MAX_OSPATH)'  				PlaybackTime = reader.ReadFloat()'    				PlaybackTicks = reader.ReadSignedInt(32)'  				PlaybackFrames = reader.ReadSignedInt(32)'  				SignonLength = reader.ReadSignedInt(32)'              };
Magic Number,DemoInfo,DemoHeader,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,ParseFrom,The following statement contains a magic number: return new DemoHeader() {                  Filestamp = reader.ReadCString(8)'                  Protocol = reader.ReadSignedInt(32)'  				NetworkProtocol = reader.ReadSignedInt(32)'                  ServerName = reader.ReadCString(MAX_OSPATH)'                    ClientName = reader.ReadCString(MAX_OSPATH)'                  MapName = reader.ReadCString(MAX_OSPATH)'                  GameDirectory = reader.ReadCString(MAX_OSPATH)'  				PlaybackTime = reader.ReadFloat()'    				PlaybackTicks = reader.ReadSignedInt(32)'  				PlaybackFrames = reader.ReadSignedInt(32)'  				SignonLength = reader.ReadSignedInt(32)'              };
Magic Number,DemoInfo,DemoHeader,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,ParseFrom,The following statement contains a magic number: return new DemoHeader() {                  Filestamp = reader.ReadCString(8)'                  Protocol = reader.ReadSignedInt(32)'  				NetworkProtocol = reader.ReadSignedInt(32)'                  ServerName = reader.ReadCString(MAX_OSPATH)'                    ClientName = reader.ReadCString(MAX_OSPATH)'                  MapName = reader.ReadCString(MAX_OSPATH)'                  GameDirectory = reader.ReadCString(MAX_OSPATH)'  				PlaybackTime = reader.ReadFloat()'    				PlaybackTicks = reader.ReadSignedInt(32)'  				PlaybackFrames = reader.ReadSignedInt(32)'  				SignonLength = reader.ReadSignedInt(32)'              };
Magic Number,DemoInfo,Split,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,Parse,The following statement contains a magic number: return new Split              {                  Flags = reader.ReadSignedInt(32)'                  viewOrigin = Vector.Parse(reader)'                  viewAngles = QAngle.Parse(reader)'                  localViewAngles = QAngle.Parse(reader)'                    viewOrigin2 = Vector.Parse(reader)'                  viewAngles2 = QAngle.Parse(reader)'                  localViewAngles2 = QAngle.Parse(reader)'              };
Magic Number,DemoInfo,CommandInfo,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,Parse,The following statement contains a magic number: return new CommandInfo               {                  u = new Split[2] { Split.Parse(reader)' Split.Parse(reader) }              };
Magic Number,DemoInfo,PlayerInfo,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,PlayerInfo,The following statement contains a magic number: Name = reader.ReadCString(128);
Magic Number,DemoInfo,PlayerInfo,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,PlayerInfo,The following statement contains a magic number: GUID = reader.ReadCString(33);
Magic Number,DemoInfo,PlayerInfo,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\Structs.cs,PlayerInfo,The following statement contains a magic number: FriendsName = reader.ReadCString(128);
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: uint ret = bs.ReadInt(6);
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following statement contains a magic number: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadString,The following statement contains a magic number: var result = new List<byte>(512);
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadString,The following statement contains a magic number: (b == 0) || (b == 10)
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadCString,The following statement contains a magic number: return Encoding.Default.GetString(reader.ReadBytes(length)).Split(new char[] { '\0' }' 2)[0];
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadVarInt,The following statement contains a magic number: count > 5
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadVarInt,The following statement contains a magic number: result |= (tmpByte & 0x7F) << (7 * count);
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadProtobufVarIntStub,The following statement contains a magic number: result |= (b & ~0x80) << (7 * count);
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadProtobufVarIntStub,The following statement contains a magic number: (count < 4) || ((count == 4) && (((b & 0xF8) == 0) || ((b & 0xF8) == 0xF8)))
Magic Number,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadProtobufVarIntStub,The following statement contains a magic number: (count < 4) || ((count == 4) && (((b & 0xF8) == 0) || ((b & 0xF8) == 0xF8)))
Magic Number,DemoInfo,NETTick,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\NETTick.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,NETTick,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\NETTick.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,NETTick,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\NETTick.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 1:  					Tick = val;  					break;  				case 4:  					HostComputationTime = val;  					break;  				case 5:  					HostComputationTimeStdDeviation = val;  					break;  				case 6:  					HostFramestartTimeStdDeviation = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,NETTick,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\NETTick.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 1:  					Tick = val;  					break;  				case 4:  					HostComputationTime = val;  					break;  				case 5:  					HostComputationTimeStdDeviation = val;  					break;  				case 6:  					HostFramestartTimeStdDeviation = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,NETTick,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\NETTick.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 1:  					Tick = val;  					break;  				case 4:  					HostComputationTime = val;  					break;  				case 5:  					HostComputationTimeStdDeviation = val;  					break;  				case 6:  					HostFramestartTimeStdDeviation = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: bitstream.BeginChunk(len * 8);
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: (fieldnum == 7) && (wireType == 2)
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: (fieldnum == 7) && (wireType == 2)
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 1:  					MaxEntries = val;  					break;  				case 2:  					UpdatedEntries = val;  					break;  				case 3:  					_IsDelta = val;  					break;  				case 4:  					_UpdateBaseline = val;  					break;  				case 5:  					Baseline = val;  					break;  				case 6:  					DeltaFrom = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 1:  					MaxEntries = val;  					break;  				case 2:  					UpdatedEntries = val;  					break;  				case 3:  					_IsDelta = val;  					break;  				case 4:  					_UpdateBaseline = val;  					break;  				case 5:  					Baseline = val;  					break;  				case 6:  					DeltaFrom = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 1:  					MaxEntries = val;  					break;  				case 2:  					UpdatedEntries = val;  					break;  				case 3:  					_IsDelta = val;  					break;  				case 4:  					_UpdateBaseline = val;  					break;  				case 5:  					Baseline = val;  					break;  				case 6:  					DeltaFrom = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 1:  					MaxEntries = val;  					break;  				case 2:  					UpdatedEntries = val;  					break;  				case 3:  					_IsDelta = val;  					break;  				case 4:  					_UpdateBaseline = val;  					break;  				case 5:  					Baseline = val;  					break;  				case 6:  					DeltaFrom = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,PacketEntities,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\PacketEntities.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 1:  					MaxEntries = val;  					break;  				case 2:  					UpdatedEntries = val;  					break;  				case 3:  					_IsDelta = val;  					break;  				case 4:  					_UpdateBaseline = val;  					break;  				case 5:  					Baseline = val;  					break;  				case 6:  					DeltaFrom = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,GameEventList,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEventList.cs,ReadDescriptors,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,GameEventList,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEventList.cs,ReadDescriptors,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,GameEventList,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEventList.cs,ReadDescriptors,The following statement contains a magic number: (wireType != 2) || (fieldnum != 1)
Magic Number,DemoInfo,GameEventList,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEventList.cs,ReadDescriptors,The following statement contains a magic number: bitstream.BeginChunk(length * 8);
Magic Number,DemoInfo,Key,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEventList.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,Key,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEventList.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,Descriptor,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEventList.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,Descriptor,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEventList.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,GameEvent,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEvent.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,GameEvent,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEvent.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,GameEvent,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\GameEvent.cs,Parse,The following statement contains a magic number: (wireType == 2) && (fieldnum == 1)
Magic Number,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,The following statement contains a magic number: wireType == 2
Magic Number,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 2:  					MaxEntries = val;  					break;  				case 3:  					NumEntries = val;  					break;  				case 4:  					_UserDataFixedSize = val;  					break;  				case 5:  					UserDataSize = val;  					break;  				case 6:  					UserDataSizeBits = val;  					break;  				case 7:  					Flags = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 2:  					MaxEntries = val;  					break;  				case 3:  					NumEntries = val;  					break;  				case 4:  					_UserDataFixedSize = val;  					break;  				case 5:  					UserDataSize = val;  					break;  				case 6:  					UserDataSizeBits = val;  					break;  				case 7:  					Flags = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 2:  					MaxEntries = val;  					break;  				case 3:  					NumEntries = val;  					break;  				case 4:  					_UserDataFixedSize = val;  					break;  				case 5:  					UserDataSize = val;  					break;  				case 6:  					UserDataSizeBits = val;  					break;  				case 7:  					Flags = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 2:  					MaxEntries = val;  					break;  				case 3:  					NumEntries = val;  					break;  				case 4:  					_UserDataFixedSize = val;  					break;  				case 5:  					UserDataSize = val;  					break;  				case 6:  					UserDataSizeBits = val;  					break;  				case 7:  					Flags = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 2:  					MaxEntries = val;  					break;  				case 3:  					NumEntries = val;  					break;  				case 4:  					_UserDataFixedSize = val;  					break;  				case 5:  					UserDataSize = val;  					break;  				case 6:  					UserDataSizeBits = val;  					break;  				case 7:  					Flags = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,CreateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\CreateStringTable.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 2:  					MaxEntries = val;  					break;  				case 3:  					NumEntries = val;  					break;  				case 4:  					_UserDataFixedSize = val;  					break;  				case 5:  					UserDataSize = val;  					break;  				case 6:  					UserDataSizeBits = val;  					break;  				case 7:  					Flags = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,UpdateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UpdateStringTable.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,UpdateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UpdateStringTable.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,UpdateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UpdateStringTable.cs,Parse,The following statement contains a magic number: bitstream.BeginChunk(len * 8);
Magic Number,DemoInfo,UpdateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UpdateStringTable.cs,Parse,The following statement contains a magic number: (wireType == 2) && (fieldnum == 3)
Magic Number,DemoInfo,UpdateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UpdateStringTable.cs,Parse,The following statement contains a magic number: (wireType == 2) && (fieldnum == 3)
Magic Number,DemoInfo,UpdateStringTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UpdateStringTable.cs,Parse,The following statement contains a magic number: switch (fieldnum) {  				case 1:  					TableId = val;  					break;  				case 2:  					NumChangedEntries = val;  					break;  				default:  					// silently drop  					break;  				}
Magic Number,DemoInfo,SendTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,SendTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,SendTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,The following statement contains a magic number: fieldnum == 2
Magic Number,DemoInfo,SendTable,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,The following statement contains a magic number: wireType == 2
Magic Number,DemoInfo,SendProp,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo,SendProp,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo,SendProp,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,The following statement contains a magic number: fieldnum == 2
Magic Number,DemoInfo,SendProp,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SendTable.cs,Parse,The following statement contains a magic number: wireType == 2
Magic Number,DemoInfo.DP,DemoPacketParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\DemoPacketParser.cs,ParsePacket,The following statement contains a magic number: bitstream.BeginChunk(length * 8);
Magic Number,DemoInfo.DP,Entity,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Entity.cs,ReadFieldIndex,The following statement contains a magic number: ret = (int)reader.ReadInt(3);
Magic Number,DemoInfo.DP.FastNetmessages,RankUpdate,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\RankUpdate.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo.DP.FastNetmessages,RankUpdate,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\RankUpdate.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo.DP.FastNetmessages,SayText,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SayText.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo.DP.FastNetmessages,SayText,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SayText.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo.DP.FastNetmessages,SayText2,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SayText2.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo.DP.FastNetmessages,SayText2,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\SayText2.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo.DP.FastNetmessages,ServerRankUpdate,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\ServerRankUpdate.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo.DP.FastNetmessages,ServerRankUpdate,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\ServerRankUpdate.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo.DP.FastNetmessages,ServerRankUpdate,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\ServerRankUpdate.cs,Parse,The following statement contains a magic number: bitstream.BeginChunk(bitstream.ReadProtobufVarInt() * 8);
Magic Number,DemoInfo.DP.FastNetmessages,ServerRankUpdate,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\ServerRankUpdate.cs,Parse,The following statement contains a magic number: wireType == 2 && fieldnum == 1
Magic Number,DemoInfo.DP.FastNetmessages,UserMessage,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UserMessage.cs,Parse,The following statement contains a magic number: var wireType = desc & 7;
Magic Number,DemoInfo.DP.FastNetmessages,UserMessage,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UserMessage.cs,Parse,The following statement contains a magic number: var fieldnum = desc >> 3;
Magic Number,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,GetCommunityID,The following statement contains a magic number: long authServer = Convert.ToInt64(steamID.Substring(8' 1));
Magic Number,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,GetCommunityID,The following statement contains a magic number: long authID = Convert.ToInt64(steamID.Substring(10));
Magic Number,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,GetCommunityID,The following statement contains a magic number: return (76561197960265728 + (authID * 2) + authServer);
Magic Number,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,GetCommunityID,The following statement contains a magic number: return (76561197960265728 + (authID * 2) + authServer);
Magic Number,DemoInfo.DP.Handler,PacketEntitesHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PacketEntitesHandler.cs,ReadEnterPVS,The following statement contains a magic number: reader.ReadInt(10);
Magic Number,DemoInfo.DP.Handler,PropDecoder,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PropDecoder.cs,DecodeString,The following statement contains a magic number: return Encoding.Default.GetString(reader.ReadBytes((int)reader.ReadInt(9)));
Magic Number,DemoInfo.DP.Handler,PropDecoder,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PropDecoder.cs,ReadBitCoord,The following statement contains a magic number: intVal = (int)reader.ReadInt(14) + 1;
Magic Number,DemoInfo.DP.Handler,PropDecoder,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\PropDecoder.cs,ReadBitCoordMP,The following statement contains a magic number: value = (float)( reader.ReadInt(11) + 1 );
Magic Number,DemoInfo.DP.Handler,CreateStringTableUserInfoHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\CreateStringTableUserInfoHandler.cs,Apply,The following statement contains a magic number: int index = (int)reader.ReadInt(5);
Magic Number,DemoInfo.DP.Handler,CreateStringTableUserInfoHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\CreateStringTableUserInfoHandler.cs,Apply,The following statement contains a magic number: int bytestocopy = (int)reader.ReadInt(5);
Magic Number,DemoInfo.DP.Handler,CreateStringTableUserInfoHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\CreateStringTableUserInfoHandler.cs,Apply,The following statement contains a magic number: entry += reader.ReadString(1024);
Magic Number,DemoInfo.DP.Handler,CreateStringTableUserInfoHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\CreateStringTableUserInfoHandler.cs,Apply,The following statement contains a magic number: history.Count > 31
Magic Number,DemoInfo.DT,DataTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DT\DataTableParser.cs,ParsePacket,The following statement contains a magic number: bitstream.BeginChunk(size * 8);
Magic Number,DemoInfo.DT,DataTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DT\DataTableParser.cs,ParsePacket,The following statement contains a magic number: int serverClassCount = checked((int)bitstream.ReadInt(16));
Magic Number,DemoInfo.DT,DataTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DT\DataTableParser.cs,ParsePacket,The following statement contains a magic number: entry.ClassID = checked((int)bitstream.ReadInt(16));
Magic Number,DemoInfo.DT,DataTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DT\DataTableParser.cs,FlattenDataTable,The following statement contains a magic number: priorities.Add(64);
Magic Number,DemoInfo.DT,DataTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DT\DataTableParser.cs,FlattenDataTable,The following statement contains a magic number: prop.Priority == priority || (priority == 64 && prop.Flags.HasFlagFast(SendPropertyFlags.ChangesOften))
Magic Number,DemoInfo.ST,StringTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\ST\StringTableParser.cs,ParseStringTable,The following statement contains a magic number: int numStrings = (int)reader.ReadInt(16);
Magic Number,DemoInfo.ST,StringTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\ST\StringTableParser.cs,ParseStringTable,The following statement contains a magic number: stringName.Length >= 100
Magic Number,DemoInfo.ST,StringTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\ST\StringTableParser.cs,ParseStringTable,The following statement contains a magic number: int userDataSize = (int)reader.ReadInt(16);
Magic Number,DemoInfo.ST,StringTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\ST\StringTableParser.cs,ParseStringTable,The following statement contains a magic number: int numstrings = (int)reader.ReadInt(16);
Magic Number,DemoInfo.ST,StringTableParser,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\ST\StringTableParser.cs,ParseStringTable,The following statement contains a magic number: int userDataSize = ( int )reader.ReadInt(16);
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadByte,The following statement contains a magic number: return (byte)ReadInt(8);
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,PeekBools,The following statement contains a magic number: buffer[idx++] = 49;
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadSignedInt,The following statement contains a magic number: return ( ( (int)ReadInt(numBits) ) << ( 32 - numBits ) ) >> ( 32 - numBits );
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadSignedInt,The following statement contains a magic number: return ( ( (int)ReadInt(numBits) ) << ( 32 - numBits ) ) >> ( 32 - numBits );
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadFloat,The following statement contains a magic number: return BitConverter.ToSingle(ReadBytes(4)' 0);
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadBits,The following statement contains a magic number: byte[] result = new byte[(bits + 7) / 8];
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadBits,The following statement contains a magic number: byte[] result = new byte[(bits + 7) / 8];
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadBits,The following statement contains a magic number: i < (bits / 8)
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadBits,The following statement contains a magic number: result[bits / 8] = ReadByte(bits % 8);
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadBits,The following statement contains a magic number: result[bits / 8] = ReadByte(bits % 8);
Magic Number,DemoInfo.BitStreamImpl,BitArrayStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitArrayStream.cs,ReadBits,The following statement contains a magic number: (bits % 8) != 0
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,Initialize,The following statement contains a magic number: Offset = SLED * 8;
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,RefillBuffer,The following statement contains a magic number: Buffer[i] = Buffer[(BitsInBuffer / 8) + i];
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,RefillBuffer,The following statement contains a magic number: int offset' thisTime = 1337;
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,RefillBuffer,The following statement contains a magic number: (offset < 4) && (thisTime != 0)
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,RefillBuffer,The following statement contains a magic number: BitsInBuffer = 8 * offset;
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,RefillBuffer,The following statement contains a magic number: BitsInBuffer += SLED * 8;
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(32' numBits);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: Debug.Assert(mayOverflow || ((Offset + numBits) <= (BitsInBuffer + (SLED * 8)))' "gg"' "This code just fell apart. We're all dead. Offset={0} numBits={1} BitsInBuffer={2}"' Offset' numBits' BitsInBuffer);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)((BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)((BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)((BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)((BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)((BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)((BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)((BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)((BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(32' numBits);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)(BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)(BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)(BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)(BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)(BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)(BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)(BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)(BitConverter.ToUInt64(Buffer' (Offset / 8) & ~3) << ((8 * 8) - (Offset % (8 * 4)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadBit,The following statement contains a magic number: bool bit = (Buffer[Offset / 8] & (1 << (Offset & 7))) != 0;
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadBit,The following statement contains a magic number: bool bit = (Buffer[Offset / 8] & (1 << (Offset & 7))) != 0;
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadByte,The following statement contains a magic number: return ReadByte(8);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadByte,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(8' bits);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadFloat,The following statement contains a magic number: return BitConverter.ToSingle(ReadBytes(4)' 0);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadBits,The following statement contains a magic number: byte[] result = new byte[(bits + 7) / 8];
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadBits,The following statement contains a magic number: byte[] result = new byte[(bits + 7) / 8];
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadBits,The following statement contains a magic number: i < (bits / 8)
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadBits,The following statement contains a magic number: result[bits / 8] = ReadByte(bits % 8);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadBits,The following statement contains a magic number: result[bits / 8] = ReadByte(bits % 8);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadBits,The following statement contains a magic number: (bits % 8) != 0
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: var availableBits = BitsInBuffer + (SLED * 8) - Offset;
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: uint buf = PeekInt(32' true);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 1 * 8);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 1 * 8);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: result |= (buf & MSK_3) >> 2;
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 2 * 8);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 2 * 8);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: result |= (buf & MSK_4) >> 3;
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 3 * 8);
Magic Number,DemoInfo.BitStreamImpl,ManagedBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\ManagedBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 3 * 8);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,Initialize,The following statement contains a magic number: Offset = SLED * 8;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,RefillBuffer,The following statement contains a magic number: *(uint*)PBuffer = *(uint*)(PBuffer + (BitsInBuffer >> 3));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,RefillBuffer,The following statement contains a magic number: int offset' thisTime = 1337;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,RefillBuffer,The following statement contains a magic number: (offset < 4) && (thisTime != 0)
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,RefillBuffer,The following statement contains a magic number: BitsInBuffer = 8 * offset;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,RefillBuffer,The following statement contains a magic number: BitsInBuffer += SLED * 8;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(32' numBits);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: Debug.Assert(mayOverflow || ((Offset + numBits) <= (BitsInBuffer + (SLED * 8)))' "gg"' "This code just fell apart. We're all dead. Offset={0} numBits={1} BitsInBuffer={2}"' Offset' numBits' BitsInBuffer);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)(((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - ((Offset & ((8 * 4) - 1))) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)(((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - ((Offset & ((8 * 4) - 1))) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)(((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - ((Offset & ((8 * 4) - 1))) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)(((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - ((Offset & ((8 * 4) - 1))) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)(((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - ((Offset & ((8 * 4) - 1))) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)(((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - ((Offset & ((8 * 4) - 1))) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)(((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - ((Offset & ((8 * 4) - 1))) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,PeekInt,The following statement contains a magic number: return (uint)(((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - ((Offset & ((8 * 4) - 1))) - numBits)) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadBit,The following statement contains a magic number: bool bit = (PBuffer[Offset >> 3] & (1 << (Offset & 7))) != 0;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadBit,The following statement contains a magic number: bool bit = (PBuffer[Offset >> 3] & (1 << (Offset & 7))) != 0;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadByte,The following statement contains a magic number: var ret = (byte)PeekInt(8);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadByte,The following statement contains a magic number: TryAdvance(8)
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadByte,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(8' bits);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadBytes,The following statement contains a magic number: bytes < 3
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,HyperspeedCopyRound,The following statement contains a magic number: int misalign = 8 - (Offset & 7);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,HyperspeedCopyRound,The following statement contains a magic number: int misalign = 8 - (Offset & 7);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,HyperspeedCopyRound,The following statement contains a magic number: int realign = sizeof(ulong) * 8 - misalign;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,HyperspeedCopyRound,The following statement contains a magic number: var inptr = (ulong*)(PBuffer + (Offset >> 3));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,HyperspeedCopyRound,The following statement contains a magic number: Offset += (bytes - rest - 1) * 8;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,HyperspeedCopyRound,The following statement contains a magic number: bout[0] = (byte)((ReadInt(8 - misalign) << misalign) | step);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(32' numBits);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - (Offset & ((8 * 4) - 1)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - (Offset & ((8 * 4) - 1)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - (Offset & ((8 * 4) - 1)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - (Offset & ((8 * 4) - 1)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - (Offset & ((8 * 4) - 1)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - (Offset & ((8 * 4) - 1)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - (Offset & ((8 * 4) - 1)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadSignedInt,The following statement contains a magic number: var result = (int)(((long)((*(ulong*)(PBuffer + ((Offset >> 3) & ~3))) << ((8 * 8) - (Offset & ((8 * 4) - 1)) - numBits))) >> ((8 * 8) - numBits));
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadFloat,The following statement contains a magic number: uint iResult = PeekInt(32);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadFloat,The following statement contains a magic number: TryAdvance(32)
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadBits,The following statement contains a magic number: byte[] result = new byte[(bits + 7) >> 3];
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadBits,The following statement contains a magic number: byte[] result = new byte[(bits + 7) >> 3];
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadBits,The following statement contains a magic number: ReadBytes(result' bits >> 3);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadBits,The following statement contains a magic number: result[bits >> 3] = ReadByte(bits & 7);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadBits,The following statement contains a magic number: result[bits >> 3] = ReadByte(bits & 7);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadBits,The following statement contains a magic number: (bits & 7) != 0
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: var availableBits = BitsInBuffer + (SLED * 8) - Offset;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: uint buf = PeekInt(32' true);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 1 * 8);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 1 * 8);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: result |= (buf & MSK_3) >> 2;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 2 * 8);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 2 * 8);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: result |= (buf & MSK_4) >> 3;
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 3 * 8);
Magic Number,DemoInfo.BitStreamImpl,UnsafeBitStream,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\UnsafeBitStream.cs,ReadProtobufVarInt,The following statement contains a magic number: BitStreamUtil.AssertMaxBits(availableBits' 3 * 8);
Missing Default,DemoInfo,BitStreamUtil,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\BitStream\BitStreamUtil.cs,ReadUBitInt,The following switch statement is missing a default case: switch (ret & (16 | 32))  			{  			case 16:  				ret = (ret & 15) | (bs.ReadInt(4) << 4);  				break;  			case 32:  				ret = (ret & 15) | (bs.ReadInt(8) << 4);  				break;  			case 48:  				ret = (ret & 15) | (bs.ReadInt(32 - 4) << 4);  				break;  			}
Missing Default,DemoInfo.DP,Entity,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Entity.cs,ReadFieldIndex,The following switch statement is missing a default case: switch (ret & ( 32 | 64 )) {  				case 32:  					ret = ( ret & ~96 ) | ( (int)reader.ReadInt(2) << 5 );  					break;  				case 64:  					ret = ( ret & ~96 ) | ( (int)reader.ReadInt(4) << 5 );  					break;  				case 96:  					ret = ( ret & ~96 ) | ( (int)reader.ReadInt(7) << 5 );  					break;  				}
Missing Default,DemoInfo.DP.FastNetmessages,UserMessage,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\FastNetmessages\UserMessage.cs,Parse,The following switch statement is missing a default case: switch (MsgType)  						{  							// This is where you can add others UserMessage parsing logic  							case (int)User_Messages.um_SayText:  								new SayText().Parse(bitstream' parser);  								break;  							case (int)User_Messages.um_SayText2:  								new SayText2().Parse(bitstream' parser);  								break;  							case (int)User_Messages.um_ServerRankUpdate:  								new ServerRankUpdate().Parse(bitstream' parser);  								break;  						}
Missing Default,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,Apply,The following switch statement is missing a default case: switch (eventDescriptor.Name) {  			case "weapon_fire":    				data = MapData (eventDescriptor' rawEvent);    				WeaponFiredEventArgs fire = new WeaponFiredEventArgs ();  				fire.Shooter = parser.Players.ContainsKey ((int)data ["userid"]) ? parser.Players [(int)data ["userid"]] : null;  				fire.Weapon = new Equipment ((string)data ["weapon"]);    				if (fire.Shooter != null && fire.Shooter.ActiveWeapon != null && fire.Weapon.Class != EquipmentClass.Grenade) {  					fire.Weapon = fire.Shooter.ActiveWeapon;  				}    				parser.RaiseWeaponFired(fire);  				break;  			case "player_death":  				data = MapData(eventDescriptor' rawEvent);    				PlayerKilledEventArgs kill = new PlayerKilledEventArgs();                    kill.Victim = parser.Players.ContainsKey((int)data["userid"]) ? parser.Players[(int)data["userid"]] : null;  				kill.Killer = parser.Players.ContainsKey((int)data["attacker"]) ? parser.Players[(int)data["attacker"]] : null;  				kill.Assister = parser.Players.ContainsKey((int)data["assister"]) ? parser.Players[(int)data["assister"]] : null;  				kill.Headshot = (bool)data["headshot"];  				kill.Weapon = new Equipment((string)data["weapon"]' (string)data["weapon_itemid"]);                  if (data.ContainsKey("assistedflash"))                      kill.AssistedFlash = (bool)data["assistedflash"];        				if (kill.Killer != null && kill.Weapon.Class != EquipmentClass.Grenade  						&& kill.Weapon.Weapon != EquipmentElement.Revolver  						&& kill.Killer.Weapons.Any() && kill.Weapon.Weapon != EquipmentElement.World) {  					#if DEBUG  					if(kill.Weapon.Weapon != kill.Killer.ActiveWeapon.Weapon)  						throw new InvalidDataException();  					#endif  					kill.Weapon = kill.Killer.ActiveWeapon;  				}      				kill.PenetratedObjects = (int)data["penetrated"];    				parser.RaisePlayerKilled(kill);  				break;  			case "player_hurt":  				data = MapData (eventDescriptor' rawEvent);    				PlayerHurtEventArgs hurt = new PlayerHurtEventArgs ();  				hurt.Player = parser.Players.ContainsKey ((int)data ["userid"]) ? parser.Players [(int)data ["userid"]] : null;  				hurt.Attacker = parser.Players.ContainsKey ((int)data ["attacker"]) ? parser.Players [(int)data ["attacker"]] : null;  				hurt.Health = (int)data ["health"];  				hurt.Armor = (int)data ["armor"];  				hurt.HealthDamage = (int)data ["dmg_health"];  				hurt.ArmorDamage = (int)data ["dmg_armor"];  				hurt.Hitgroup = (Hitgroup)((int)data ["hitgroup"]);    				hurt.Weapon = new Equipment ((string)data ["weapon"]' "");    				if (hurt.Attacker != null && hurt.Weapon.Class != EquipmentClass.Grenade && hurt.Attacker.Weapons.Any ()) {  					hurt.Weapon = hurt.Attacker.ActiveWeapon;  				}    				parser.RaisePlayerHurt (hurt);  				break;    				#region Nades  			case "player_blind":  				data = MapData(eventDescriptor' rawEvent);    				if (parser.Players.ContainsKey((int)data["userid"])) {  					var blindPlayer = parser.Players.ContainsKey((int)data["userid"]) ? parser.Players[(int)data["userid"]] : null;    					if (blindPlayer != null && blindPlayer.Team != Team.Spectate)  					{  						BlindEventArgs blind = new BlindEventArgs();  						blind.Player = blindPlayer;  						if (data.ContainsKey("attacker") && parser.Players.ContainsKey((int)data["attacker"])) {  							blind.Attacker = parser.Players[(int)data["attacker"]];  						} else {  							blind.Attacker = null;  						}    						if (data.ContainsKey("blind_duration"))  							blind.FlashDuration = (float?)data["blind_duration"];  						else  							blind.FlashDuration = null;    						parser.RaiseBlind(blind);  					}    					//previous blind implementation  					blindPlayers.Add(parser.Players[(int)data["userid"]]);  				}    				break;  			case "flashbang_detonate":  				var args = FillNadeEvent<FlashEventArgs>(MapData(eventDescriptor' rawEvent)' parser);  				args.FlashedPlayers = blindPlayers.ToArray(); //prev blind implementation  				parser.RaiseFlashExploded(args);  				blindPlayers.Clear(); //prev blind implementation  				break;  			case "hegrenade_detonate":  				parser.RaiseGrenadeExploded(FillNadeEvent<GrenadeEventArgs>(MapData(eventDescriptor' rawEvent)' parser));  				break;  			case "decoy_started":  				parser.RaiseDecoyStart(FillNadeEvent<DecoyEventArgs>(MapData(eventDescriptor' rawEvent)' parser));  				break;  			case "decoy_detonate":  				parser.RaiseDecoyEnd(FillNadeEvent<DecoyEventArgs>(MapData(eventDescriptor' rawEvent)' parser));  				break;  			case "smokegrenade_detonate":  				parser.RaiseSmokeStart(FillNadeEvent<SmokeEventArgs>(MapData(eventDescriptor' rawEvent)' parser));  				break;  			case "smokegrenade_expired":  				parser.RaiseSmokeEnd(FillNadeEvent<SmokeEventArgs>(MapData(eventDescriptor' rawEvent)' parser));  				break;  			case "inferno_startburn":  				var fireData = MapData(eventDescriptor' rawEvent);  				var fireArgs = FillNadeEvent<FireEventArgs>(fireData' parser);  				var fireStarted = new Tuple<int' FireEventArgs>((int)fireData["entityid"]' fireArgs);  				parser.GEH_StartBurns.Enqueue(fireStarted);  				parser.RaiseFireStart(fireArgs);  				break;  			case "inferno_expire":  				var fireEndData = MapData(eventDescriptor' rawEvent);  				var fireEndArgs = FillNadeEvent<FireEventArgs>(fireEndData' parser);  				int entityID = (int)fireEndData["entityid"];  				fireEndArgs.ThrownBy = parser.InfernoOwners[entityID];  				parser.RaiseFireEnd(fireEndArgs);  				break;  				#endregion    			case "player_connect":  				data = MapData (eventDescriptor' rawEvent);    				PlayerInfo player = new PlayerInfo ();  				player.UserID = (int)data ["userid"];  				player.Name = (string)data ["name"];  				player.GUID = (string)data ["networkid"];  				player.XUID = player.GUID == "BOT" ? 0 : GetCommunityID (player.GUID);      				//player.IsFakePlayer = (bool)data["bot"];    				int index = (int)data["index"];    				parser.RawPlayers[index] = player;      				break;  			case "player_disconnect":  				data = MapData(eventDescriptor' rawEvent);    				PlayerDisconnectEventArgs disconnect = new PlayerDisconnectEventArgs();  				disconnect.Player = parser.Players.ContainsKey((int)data["userid"]) ? parser.Players[(int)data["userid"]] : null;  				parser.RaisePlayerDisconnect(disconnect);    				int toDelete = (int)data["userid"];  				for (int i = 0; i < parser.RawPlayers.Length; i++) {    					if (parser.RawPlayers[i] != null && parser.RawPlayers[i].UserID == toDelete) {  						parser.RawPlayers[i] = null;  						break;  					}  				}    				if (parser.Players.ContainsKey(toDelete))  				{  					parser.Players.Remove(toDelete);  				}    				break;    			case "player_team":  				data = MapData(eventDescriptor' rawEvent);  				PlayerTeamEventArgs playerTeamEvent = new PlayerTeamEventArgs();    				Team t = Team.Spectate;    				int team = (int)data["team"];    				if (team == parser.tID)  					t = Team.Terrorist;  				else if (team == parser.ctID)  					t = Team.CounterTerrorist;  				playerTeamEvent.NewTeam = t;    				t = Team.Spectate;  				team = (int)data["oldteam"];  				if (team == parser.tID)  					t = Team.Terrorist;  				else if (team == parser.ctID)  					t = Team.CounterTerrorist;  				playerTeamEvent.OldTeam = t;    				playerTeamEvent.Swapped = parser.Players.ContainsKey((int)data["userid"]) ? parser.Players[(int)data["userid"]] : null;  				playerTeamEvent.IsBot = (bool)data["isbot"];  				playerTeamEvent.Silent = (bool)data["silent"];    				parser.RaisePlayerTeam(playerTeamEvent);  				break;  			case "bomb_beginplant": //When the bomb is starting to get planted  			case "bomb_abortplant": //When the bomb planter stops planting the bomb  			case "bomb_planted": //When the bomb has been planted  			case "bomb_defused": //When the bomb has been defused  			case "bomb_exploded": //When the bomb has exploded  				data = MapData(eventDescriptor' rawEvent);    				var bombEventArgs = new BombEventArgs();                  bombEventArgs.Player = parser.Players.ContainsKey((int)data["userid"]) ? parser.Players[(int)data["userid"]] : null;    				int site = (int)data["site"];    				if (site == parser.bombsiteAIndex) {  					bombEventArgs.Site = 'A';  				} else if (site == parser.bombsiteBIndex) {  					bombEventArgs.Site = 'B';  				} else {  					var relevantTrigger = parser.triggers.Single(a => a.Index == site);  					if (relevantTrigger.Contains(parser.bombsiteACenter)) {  						//planted at A.  						bombEventArgs.Site = 'A';  						parser.bombsiteAIndex = site;  					} else {  						//planted at B.  						bombEventArgs.Site = 'B';  						parser.bombsiteBIndex = site;  					}   				}          				switch (eventDescriptor.Name) {  				case "bomb_beginplant":  					parser.RaiseBombBeginPlant(bombEventArgs);  					break;  				case "bomb_abortplant":  					parser.RaiseBombAbortPlant(bombEventArgs);  					break;  				case "bomb_planted":  					parser.RaiseBombPlanted(bombEventArgs);  					break;  				case "bomb_defused":  					parser.RaiseBombDefused(bombEventArgs);  					break;  				case "bomb_exploded":  					parser.RaiseBombExploded(bombEventArgs);  					break;  				}    				break;  			case "bomb_begindefuse":  				data = MapData(eventDescriptor' rawEvent);  				var e = new BombDefuseEventArgs();                  e.Player = parser.Players.ContainsKey((int)data["userid"]) ? parser.Players[(int)data["userid"]] : null;  				e.HasKit = (bool)data["haskit"];  				parser.RaiseBombBeginDefuse(e);  				break;  			case "bomb_abortdefuse":  				data = MapData(eventDescriptor' rawEvent);  				var e2 = new BombDefuseEventArgs();                  e2.Player = parser.Players.ContainsKey((int)data["userid"]) ? parser.Players[(int)data["userid"]] : null;  				e2.HasKit = e2.Player.HasDefuseKit;  				parser.RaiseBombAbortDefuse(e2);  				break;  			}
Missing Default,DemoInfo.DP.Handler,GameEventHandler,C:\research\architectureSmells\repos\moritzuehling_DemoInfo-public\DemoInfo\DP\Handler\GameEventHandler.cs,Apply,The following switch statement is missing a default case: switch (eventDescriptor.Name) {  				case "bomb_beginplant":  					parser.RaiseBombBeginPlant(bombEventArgs);  					break;  				case "bomb_abortplant":  					parser.RaiseBombAbortPlant(bombEventArgs);  					break;  				case "bomb_planted":  					parser.RaiseBombPlanted(bombEventArgs);  					break;  				case "bomb_defused":  					parser.RaiseBombDefused(bombEventArgs);  					break;  				case "bomb_exploded":  					parser.RaiseBombExploded(bombEventArgs);  					break;  				}
