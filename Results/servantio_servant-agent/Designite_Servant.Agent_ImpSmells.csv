Implementation smell,Namespace,Class,File,Method,Description
Long Method,Servant.Agent,SocketClient,C:\repos\servantio_servant-agent\src\Servant.Agent\SocketClient.cs,InitializeConnection,The method has 207 lines of code.
Complex Method,Servant.Agent.Infrastructure,Deployer,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Deployer.cs,Deploy,Cyclomatic complexity of the method is 9
Complex Method,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,ParseSite,Cyclomatic complexity of the method is 8
Complex Method,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,UpdateSite,Cyclomatic complexity of the method is 18
Complex Method,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,CreateSite,Cyclomatic complexity of the method is 18
Complex Method,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,GetBindingInUse,Cyclomatic complexity of the method is 8
Complex Method,Servant.Agent.Infrastructure,Validators,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Validators.cs,ValidateSite,Cyclomatic complexity of the method is 10
Complex Method,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 17
Complex Method,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ConstructType,Cyclomatic complexity of the method is 9
Long Parameter List,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,UpdateSite,The method has 15 parameters.
Long Parameter List,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,CreateSite,The method has 5 parameters.
Long Parameter List,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,UpdateApplicationPool,The method has 5 parameters.
Long Parameter List,TinyIoC,TypeExtensions,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetGenericMethod,The method has 5 parameters.
Long Parameter List,TinyIoC,TypeExtensions,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetMethod,The method has 12 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,TryResolve,The method has 5 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegisterInternal,The method has 5 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,IsIgnoredAssembly,The method has 8 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,IsIgnoredType,The method has 7 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ConstructType,The method has 5 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ResolveAllInternal,The method has 5 parameters.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegisterInternal,The length of the parameter ignoreDuplicateImplementations is 30.
Long Statement,Servant.Agent,SocketClient,C:\repos\servantio_servant-agent\src\Servant.Agent\SocketClient.cs,ReplyOverHttp,The length of the statement  "	var url = Configuration.ServantIoHost + "/client/response?installationGuid=" + Configuration.InstallationGuid + "&organizationId=" + Configuration.ServantIoKey; " is 160.
Long Statement,Servant.Agent.Infrastructure,Deployer,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Deployer.cs,Deploy,The length of the statement  "	SendResponse (deployment.Id' DeploymentResponseType.PackageDownload' string.Format ("Completed package download in {0} seconds."' sw.Elapsed.TotalSeconds)); " is 156.
Long Statement,Servant.Agent.Infrastructure,Deployer,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Deployer.cs,Deploy,The length of the statement  "	SendResponse (deployment.Id' DeploymentResponseType.ChangeSitePath' string.Format ("Changed site path to {0}. Deployment completed in {1} seconds."' fullPath' fullSw.Elapsed.TotalSeconds)); " is 189.
Long Statement,Servant.Agent.Infrastructure,Deployer,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Deployer.cs,Deploy,The length of the statement  "		var msg = warmupResult == null ? "Could not contact IIS site" : string.Format ("Site locally returned HTTP {0} {1}."' (int)warmupResult.StatusCode' warmupResult.StatusCode); " is 173.
Long Statement,Servant.Agent.Infrastructure,Deployer,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Deployer.cs,Deploy,The length of the statement  "				SendResponse (deployment.Id' DeploymentResponseType.Rollback' string.Format ("Rollback completed. Site path is now: {0}."' originalPath)); " is 138.
Long Statement,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,ParseSite,The length of the statement  "		ObjectState applicationPoolState = applicationPools.Single (x => x.Name == site.Applications [0].ApplicationPoolName).State; " is 124.
Long Statement,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,UpdateSite,The length of the statement  "		var applicationsToDelete = iisSite.Applications.Skip (1).Where (application => !site.Applications.Where (x => x.IsApplication).Select (a => a.Path).Contains (application.Path)).ToList (); " is 187.
Long Statement,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,UpdateSite,The length of the statement  "		var directoriesToDelete = mainApplication.VirtualDirectories.Where (directory => directory.Path != "/" && !site.Applications.Where (x => !x.IsApplication).Select (a => a.Path).Contains (directory.Path)).ToList (); " is 213.
Long Statement,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,GetDefaultApplicationPool,The length of the statement  "			ServiceUnavailableResponseType = manager.ApplicationPoolDefaults.Failure.LoadBalancerCapabilities.ToString ().ToLower ()' " is 121.
Long Statement,Servant.Agent.Infrastructure,Validators,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Validators.cs,ValidateSite,The length of the statement  "	if (site.Name != null && existingSite != null && site.Name.ToLower () == existingSite.Name.ToLower () && existingSite.IisId != originalSite.IisId) " is 146.
Long Statement,Servant.Agent.Infrastructure,Validators,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Validators.cs,ValidateSite,The length of the statement  "			result.Errors.Add ("Log File Directory cannot contain the following characters: ?' ;' :' @' &' =' +' $' '' |' \"' <' >' *."); " is 125.
Long Statement,TinyIoC,TypeExtensions,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetMethod,The length of the statement  "	var methods = sourceType.GetMethods (bindingFlags).Where (mi => string.Equals (methodName' mi.Name' StringComparison.Ordinal)).Where (mi => mi.ContainsGenericParameters).Where (mi => mi.GetGenericArguments ().Length == genericTypes.Length).Where (mi => mi.GetParameters ().Length == parameterTypes.Length).Select (mi => mi.MakeGenericMethod (genericTypes)).Where (mi => mi.GetParameters ().Select (pi => pi.ParameterType).SequenceEqual (parameterTypes)).ToList (); " is 464.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' true' registrationPredicate); " is 129.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' ignoreDuplicateImplementations' null); " is 138.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' ignoreDuplicateImplementations' registrationPredicate); " is 155.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegister,The length of the statement  "	            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' ignoreDuplicateImplementations' registrationPredicate);" is 122.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,Register,The length of the statement  "	return this.RegisterInternal (registerType' string.Empty' GetDefaultObjectFactory (registerType' registerImplementation)); " is 122.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,Register,The length of the statement  "	return RegisterInternal (registerType' string.Empty' new InstanceFactory (registerType' registerImplementation' instance)); " is 123.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,RegisterMultiple,The length of the statement  "			throw new ArgumentException (String.Format ("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 137.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,Resolve,The length of the statement  "	return ResolveInternal (new TypeRegistration (resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 123.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,CanResolve,The length of the statement  "	return CanResolveInternal (new TypeRegistration (resolveType)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 120.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,CanResolve,The length of the statement  "	return CanResolveInternal (new TypeRegistration (resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 126.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		var types = assemblies.SelectMany (a => a.SafeGetTypes ()).Where (t => !IsIgnoredType (t' registrationPredicate)).ToList (); " is 124.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		where (type.IsClass () == true) && (type.IsAbstract () == false) && (type != this.GetType () && (type.DeclaringType != this.GetType ()) && (!type.IsGenericTypeDefinition ())) " is 174.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		where ((type.IsInterface () == true || type.IsAbstract () == true) && (type.DeclaringType != this.GetType ()) && (!type.IsGenericTypeDefinition ())) " is 148.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,IsIgnoredType,The length of the statement  "		t => (t.GetConstructors (BindingFlags.Instance | BindingFlags.Public).Length == 0) && !(t.IsInterface () || t.IsAbstract ())' " is 125.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,CanResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) { " is 133.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,CanResolveInternal,The length of the statement  "	if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType () && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 209.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,CanResolveInternal,The length of the statement  "		return (GetBestConstructor (checkType' parameters' options) != null) ? true : (_Parent != null) ? _Parent.CanResolveInternal (registration' parameters' options) : false; " is 169.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "	//			if ((genericType == typeof(Func<''>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String' object>))) " is 192.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "	if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<String' object>))) " is 167.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 124.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) { " is 146.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ResolveInternal,The length of the statement  "	if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType () && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) { " is 219.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any()); " is 141.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String)); " is 199.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "	//			if ((genericType == typeof(Func<''>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string' object>))) " is 164.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "	if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<string' object>)))//#endif " is 175.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads)); " is 269.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		var resolveCall = Expression.Call (Expression.Constant (this)' resolveMethod' name' Expression.Call (typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 172.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "	//			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll"' type.GenericTypeArguments' new[] { typeof(bool) }); " is 132.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "	var genericResolveAllMethod = this.GetType ().GetGenericMethod (BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments ()' new[] { " is 159.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,CanConstruct,The length of the statement  "		if (!isParameterOverload && !CanResolveInternal (new TypeRegistration (parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 139.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ConstructType,The length of the statement  "		constructor = GetBestConstructor (typeToConstruct' parameters' options) ?? GetTypeConstructors (typeToConstruct).LastOrDefault (); " is 130.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ConstructType,The length of the statement  "			args [parameterIndex] = parameters.ContainsKey (currentParam.Name) ? parameters [currentParam.Name] : ResolveInternal (new TypeRegistration (currentParam.ParameterType)' NamedParameterOverloads.Default' options); " is 212.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,BuildUpInternal,The length of the statement  "	//							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType " is 128.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,BuildUpInternal,The length of the statement  "				property.SetValue (input' ResolveInternal (new TypeRegistration (property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 145.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ResolveAllInternal,The length of the statement  "	var registrations = _RegisteredTypes.Keys.Where (tr => tr.Type == resolveType).Concat (GetParentRegistrationsForType (resolveType)); " is 132.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,ResolveAllInternal,The length of the statement  "	return registrations.Select (registration => this.ResolveInternal (registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 139.
Complex Conditional,Servant.Agent.Infrastructure,Validators,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Validators.cs,ValidateSite,The conditional expression  "site.Name != null && existingSite != null && site.Name.ToLower () == existingSite.Name.ToLower () && existingSite.IisId != originalSite.IisId"  is complex.
Empty Catch Block,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,ReportException,The method has an empty catch block.
Empty Catch Block,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,WriteLine,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Magic Number,Servant.Agent,Servant,C:\repos\servantio_servant-agent\src\Servant.Agent\Servant.cs,Servant,The following statement contains a magic number: Timer = new Timer (60 * 60 * 1000);  
Magic Number,Servant.Agent,Servant,C:\repos\servantio_servant-agent\src\Servant.Agent\Servant.cs,Servant,The following statement contains a magic number: Timer = new Timer (60 * 60 * 1000);  
Magic Number,Servant.Agent,Servant,C:\repos\servantio_servant-agent\src\Servant.Agent\Servant.cs,Servant,The following statement contains a magic number: Timer = new Timer (60 * 60 * 1000);  
Magic Number,Servant.Agent,Servant,C:\repos\servantio_servant-agent\src\Servant.Agent\Servant.cs,Update,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6) {  	update.StartInfo.Verb = "runas";  }  
Magic Number,Servant.Agent,SocketClient,C:\repos\servantio_servant-agent\src\Servant.Agent\SocketClient.cs,Connect,The following statement contains a magic number: _connection.Start ().Wait (TimeSpan.FromSeconds (5));  
Magic Number,Servant.Agent.Infrastructure,Deployer,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Deployer.cs,Deploy,The following statement contains a magic number: if (deployment.WarmupAfterDeploy) {  	System.Threading.Thread.Sleep (1000);  	// Waits for IIS to complete  	var warmupResult = Warmup (site' deployment.WarmupUrl);  	SendResponse (deployment.Id' DeploymentResponseType.WarmupResult' Json.SerializeToString (warmupResult));  	var msg = warmupResult == null ? "Could not contact IIS site" : string.Format ("Site locally returned HTTP {0} {1}."' (int)warmupResult.StatusCode' warmupResult.StatusCode);  	SendResponse (deployment.Id' DeploymentResponseType.Warmup' msg' warmupResult.StatusCode == HttpStatusCode.OK);  	if (deployment.RollbackOnError) {  		// Roll-back if not 200 OK  		if (warmupResult.StatusCode != HttpStatusCode.OK) {  			site.SitePath = originalPath;  			SiteManager.UpdateSite (site);  			if (site.ApplicationPoolState == InstanceState.Started) {  				SiteManager.RecycleApplicationPool (site.ApplicationPool);  			}  			rollbackCompleted = true;  			Warmup (site' deployment.WarmupUrl);  			SendResponse (deployment.Id' DeploymentResponseType.Rollback' string.Format ("Rollback completed. Site path is now: {0}."' originalPath));  		}  	}  }  
Magic Number,Servant.Agent.Infrastructure,Deployer,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\Deployer.cs,Deploy,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,WriteLine,The following statement contains a magic number: try {  	File.AppendAllText (filePath' string.Format ("{0}: {1}"' DateTime.Now' line + Environment.NewLine));  	var logFile = new FileInfo (filePath);  	if (logFile.Length > (5 * 1024 * 1024)) {  		var lines = File.ReadAllLines (filePath).Skip (30).ToArray ();  		File.WriteAllLines (filePath' lines);  	}  }  catch (IOException) {  	// The file might already be in use -- that's okay' we can live without that log line.  }  
Magic Number,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,WriteLine,The following statement contains a magic number: try {  	File.AppendAllText (filePath' string.Format ("{0}: {1}"' DateTime.Now' line + Environment.NewLine));  	var logFile = new FileInfo (filePath);  	if (logFile.Length > (5 * 1024 * 1024)) {  		var lines = File.ReadAllLines (filePath).Skip (30).ToArray ();  		File.WriteAllLines (filePath' lines);  	}  }  catch (IOException) {  	// The file might already be in use -- that's okay' we can live without that log line.  }  
Magic Number,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,WriteLine,The following statement contains a magic number: try {  	File.AppendAllText (filePath' string.Format ("{0}: {1}"' DateTime.Now' line + Environment.NewLine));  	var logFile = new FileInfo (filePath);  	if (logFile.Length > (5 * 1024 * 1024)) {  		var lines = File.ReadAllLines (filePath).Skip (30).ToArray ();  		File.WriteAllLines (filePath' lines);  	}  }  catch (IOException) {  	// The file might already be in use -- that's okay' we can live without that log line.  }  
Magic Number,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,WriteLine,The following statement contains a magic number: try {  	File.AppendAllText (filePath' string.Format ("{0}: {1}"' DateTime.Now' line + Environment.NewLine));  	var logFile = new FileInfo (filePath);  	if (logFile.Length > (5 * 1024 * 1024)) {  		var lines = File.ReadAllLines (filePath).Skip (30).ToArray ();  		File.WriteAllLines (filePath' lines);  	}  }  catch (IOException) {  	// The file might already be in use -- that's okay' we can live without that log line.  }  
Magic Number,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,WriteLine,The following statement contains a magic number: if (logFile.Length > (5 * 1024 * 1024)) {  	var lines = File.ReadAllLines (filePath).Skip (30).ToArray ();  	File.WriteAllLines (filePath' lines);  }  
Magic Number,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,WriteLine,The following statement contains a magic number: if (logFile.Length > (5 * 1024 * 1024)) {  	var lines = File.ReadAllLines (filePath).Skip (30).ToArray ();  	File.WriteAllLines (filePath' lines);  }  
Magic Number,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,WriteLine,The following statement contains a magic number: if (logFile.Length > (5 * 1024 * 1024)) {  	var lines = File.ReadAllLines (filePath).Skip (30).ToArray ();  	File.WriteAllLines (filePath' lines);  }  
Magic Number,Servant.Agent.Infrastructure,MessageHandler,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\MessageHandler.cs,WriteLine,The following statement contains a magic number: if (logFile.Length > (5 * 1024 * 1024)) {  	var lines = File.ReadAllLines (filePath).Skip (30).ToArray ();  	File.WriteAllLines (filePath' lines);  }  
Magic Number,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,CreateSite,The following statement contains a magic number: using (var manager = new ServerManager ()) {  	if (manager.Sites.Any (x => x.Name == site.Name)) {  		result.Result = SiteResult.NameAlreadyInUse;  		return result;  	}  	// Create site  	manager.Sites.Add (site.Name' "http"' bindingInformations.First ()' site.SitePath);  	var iisSite = manager.Sites.SingleOrDefault (x => x.Name == site.Name);  	// Add bindings  	iisSite.Bindings.Clear ();  	foreach (var binding in bindingInformations)  		iisSite.Bindings.Add (binding' "http");  	// Set/create application pool  	if (string.IsNullOrWhiteSpace (site.ApplicationPool))// Auto create application pool  	 {  		var appPoolName = site.Name;  		var existingApplicationPoolNames = manager.ApplicationPools.Select (x => x.Name).ToList ();  		var newNameCount = 1;  		while (existingApplicationPoolNames.Contains (appPoolName)) {  			appPoolName = site.Name + "_" + newNameCount;  			newNameCount++;  		}  		manager.ApplicationPools.Add (appPoolName);  		iisSite.ApplicationDefaults.ApplicationPoolName = appPoolName;  	}  	else {  		iisSite.ApplicationDefaults.ApplicationPoolName = site.ApplicationPool;  	}  	//Add Virtual apps/directories  	foreach (var application in site.Applications) {  		if (!application.Path.StartsWith ("/"))  			application.Path = "/" + application.Path;  		if (application.IsApplication) {  			if (application.Path.EndsWith ("/")) {  				application.Path.Remove (application.Path.Length - 1' 1);  			}  			iisSite.Applications.Add (application.Path' application.DiskPath);  		}  		else// Directory  		 {  			iisSite.Applications.First ().VirtualDirectories.Add (application.Path' application.DiskPath);  		}  	}  	manager.CommitChanges ();  	var created = false;  	var sw = new Stopwatch ();  	sw.Start ();  	while (!created && sw.Elapsed.TotalSeconds < 3) {  		try {  			if (iisSite.State == ObjectState.Started || iisSite.State == ObjectState.Stopped) {  				created = true;  			}  		}  		catch (COMException) {  			System.Threading.Thread.Sleep (100);  		}  	}  	sw.Stop ();  	if (created) {  		result.Result = SiteResult.Success;  		result.IisSiteId = (int)iisSite.Id;  	}  	else {  		result.Result = SiteResult.Failed;  	}  	return result;  }  
Magic Number,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,CreateSite,The following statement contains a magic number: using (var manager = new ServerManager ()) {  	if (manager.Sites.Any (x => x.Name == site.Name)) {  		result.Result = SiteResult.NameAlreadyInUse;  		return result;  	}  	// Create site  	manager.Sites.Add (site.Name' "http"' bindingInformations.First ()' site.SitePath);  	var iisSite = manager.Sites.SingleOrDefault (x => x.Name == site.Name);  	// Add bindings  	iisSite.Bindings.Clear ();  	foreach (var binding in bindingInformations)  		iisSite.Bindings.Add (binding' "http");  	// Set/create application pool  	if (string.IsNullOrWhiteSpace (site.ApplicationPool))// Auto create application pool  	 {  		var appPoolName = site.Name;  		var existingApplicationPoolNames = manager.ApplicationPools.Select (x => x.Name).ToList ();  		var newNameCount = 1;  		while (existingApplicationPoolNames.Contains (appPoolName)) {  			appPoolName = site.Name + "_" + newNameCount;  			newNameCount++;  		}  		manager.ApplicationPools.Add (appPoolName);  		iisSite.ApplicationDefaults.ApplicationPoolName = appPoolName;  	}  	else {  		iisSite.ApplicationDefaults.ApplicationPoolName = site.ApplicationPool;  	}  	//Add Virtual apps/directories  	foreach (var application in site.Applications) {  		if (!application.Path.StartsWith ("/"))  			application.Path = "/" + application.Path;  		if (application.IsApplication) {  			if (application.Path.EndsWith ("/")) {  				application.Path.Remove (application.Path.Length - 1' 1);  			}  			iisSite.Applications.Add (application.Path' application.DiskPath);  		}  		else// Directory  		 {  			iisSite.Applications.First ().VirtualDirectories.Add (application.Path' application.DiskPath);  		}  	}  	manager.CommitChanges ();  	var created = false;  	var sw = new Stopwatch ();  	sw.Start ();  	while (!created && sw.Elapsed.TotalSeconds < 3) {  		try {  			if (iisSite.State == ObjectState.Started || iisSite.State == ObjectState.Stopped) {  				created = true;  			}  		}  		catch (COMException) {  			System.Threading.Thread.Sleep (100);  		}  	}  	sw.Stop ();  	if (created) {  		result.Result = SiteResult.Success;  		result.IisSiteId = (int)iisSite.Id;  	}  	else {  		result.Result = SiteResult.Failed;  	}  	return result;  }  
Magic Number,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,CreateSite,The following statement contains a magic number: while (!created && sw.Elapsed.TotalSeconds < 3) {  	try {  		if (iisSite.State == ObjectState.Started || iisSite.State == ObjectState.Stopped) {  			created = true;  		}  	}  	catch (COMException) {  		System.Threading.Thread.Sleep (100);  	}  }  
Magic Number,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,CreateSite,The following statement contains a magic number: while (!created && sw.Elapsed.TotalSeconds < 3) {  	try {  		if (iisSite.State == ObjectState.Started || iisSite.State == ObjectState.Stopped) {  			created = true;  		}  	}  	catch (COMException) {  		System.Threading.Thread.Sleep (100);  	}  }  
Magic Number,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,CreateSite,The following statement contains a magic number: try {  	if (iisSite.State == ObjectState.Started || iisSite.State == ObjectState.Stopped) {  		created = true;  	}  }  catch (COMException) {  	System.Threading.Thread.Sleep (100);  }  
Magic Number,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,CreateSite,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,Servant.Agent.Infrastructure,SiteManager,C:\repos\servantio_servant-agent\src\Servant.Agent\Infrastructure\SiteManager.cs,DeleteSite,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,Servant.Agent.Service,ServantAgentService,C:\repos\servantio_servant-agent\src\Servant.Agent\Service\ServantClientService.cs,SetRecoveryOptions,The following statement contains a magic number: using (var process = new Process ()) {  	var startInfo = process.StartInfo;  	startInfo.FileName = "sc";  	startInfo.WindowStyle = ProcessWindowStyle.Hidden;  	// tell Windows that the service should restart if it fails  	startInfo.Arguments = string.Format ("failure \"{0}\" reset= 0 actions= restart/60000"' serviceName);  	if (Environment.OSVersion.Version.Major >= 6) {  		startInfo.Verb = "runas";  	}  	process.Start ();  	process.WaitForExit ();  	exitCode = process.ExitCode;  }  
Magic Number,Servant.Agent.Service,ServantAgentService,C:\repos\servantio_servant-agent\src\Servant.Agent\Service\ServantClientService.cs,SetRecoveryOptions,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6) {  	startInfo.Verb = "runas";  }  
Magic Number,TinyIoC,TinyIoCContainer,C:\repos\servantio_servant-agent\src\Servant.Agent\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<string' object>)))//#endif   {  	Type returnType = genericArguments [2];  	var name = Expression.Parameter (typeof(string)' "name");  	var parameters = Expression.Parameter (typeof(IDictionary<string' object>)' "parameters");  	//#if NETFX_CORE  	//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));  	//#else  	MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod ("Resolve"' new Type[] {  		typeof(String)'  		typeof(NamedParameterOverloads)  	});  	//#endif  	resolveMethod = resolveMethod.MakeGenericMethod (returnType);  	var resolveCall = Expression.Call (Expression.Constant (this)' resolveMethod' name' Expression.Call (typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));  	var resolveLambda = Expression.Lambda (resolveCall' name' parameters).Compile ();  	return resolveLambda;  }  
Missing Default,Servant.Agent,SocketClient,C:\repos\servantio_servant-agent\src\Servant.Agent\SocketClient.cs,InitializeConnection,The following switch statement is missing a default case: switch (request.Command) {  case CommandRequestType.Unauthorized:  	IsStopped = true;  	MessageHandler.LogException ("Servant.io key was not recognized.");  	_connection.Stop ();  	break;  case CommandRequestType.GetSites:  	var sites = SiteManager.GetSites ();  	var result = Json.SerializeToString (sites);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = result'  		Success = true  	});  	break;  case CommandRequestType.UpdateSite:  	var site = Json.DeserializeFromString<IisSite> (request.JsonObject);  	var originalSite = SiteManager.GetSiteByName (request.Value);  	if (originalSite == null) {  		ReplyOverHttp (new CommandResponse (request.Guid) {  			Message = Json.SerializeToString (new ManageSiteResult {  				Result = SiteResult.SiteNameNotFound  			})'  			Success = false  		});  		return;  	}  	var validationResult = Validators.ValidateSite (site' originalSite);  	if (validationResult.Errors.Any ()) {  		ReplyOverHttp (new CommandResponse (request.Guid) {  			Message = Json.SerializeToString (validationResult)  		});  		return;  	}  	site.IisId = originalSite.IisId;  	var updateResult = SiteManager.UpdateSite (site);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = Json.SerializeToString (updateResult)'  		Success = true  	});  	break;  case CommandRequestType.GetAll:  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = Json.SerializeToString (new AllResponse {  			Sites = SiteManager.GetSites ().ToList ()'  			FrameworkVersions = NetFrameworkHelper.GetAllVersions ().ToList ()'  			ApplicationPools = SiteManager.GetApplicationPools ()'  			Certificates = SiteManager.GetCertificates ().ToList ()'  			DefaultApplicationPool = SiteManager.GetDefaultApplicationPool ()  		})'  		Success = true  	});  	break;  case CommandRequestType.GetApplicationPools:  	var appPools = SiteManager.GetApplicationPools ();  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = Json.SerializeToString (appPools)'  		Success = true  	});  	break;  case CommandRequestType.GetCertificates:  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = Json.SerializeToString (SiteManager.GetCertificates ())'  		Success = true  	});  	break;  case CommandRequestType.StartSite:  	var startSite = SiteManager.GetSiteByName (request.Value);  	var startResult = SiteManager.StartSite (startSite);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Success = startResult == SiteStartResult.Started'  		Message = Json.SerializeToString (startResult)  	});  	break;  case CommandRequestType.StopSite:  	var stopSite = SiteManager.GetSiteByName (request.Value);  	SiteManager.StopSite (stopSite);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Success = true  	});  	break;  case CommandRequestType.RestartSite:  	var restartSite = SiteManager.GetSiteByName (request.Value);  	SiteManager.RestartSite (restartSite.IisId);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = "ok"'  		Success = true  	});  	break;  case CommandRequestType.DeleteSite:  	var deleteSite = SiteManager.GetSiteByName (request.Value);  	SiteManager.DeleteSite (deleteSite.IisId);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = "ok"'  		Success = true  	});  	break;  case CommandRequestType.CreateSite:  	var createSite = Json.DeserializeFromString<IisSite> (request.JsonObject);  	var createResult = SiteManager.CreateSite (createSite);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = Json.SerializeToString (createResult)'  		Success = true  	});  	break;  case CommandRequestType.ForceUpdate:  	Servant.Update ();  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = "Started"'  		Success = true  	});  	break;  case CommandRequestType.DeploySite:  	Task.Factory.StartNew (() => deployer.Deploy (Json.DeserializeFromString<Deployment> (request.JsonObject)));  	break;  case CommandRequestType.RollbackDeployment:  	Task.Factory.StartNew (() => deployer.Rollback (int.Parse (request.Value)));  	break;  case CommandRequestType.CmdExeCommand:  	if (!Configuration.DisableConsoleAccess) {  		var manager = TinyIoCContainer.Current.Resolve<ConsoleManager> ();  		manager.SendCommand (request.Value);  	}  	break;  case CommandRequestType.UpdateApplicationPool:  	var applicationPool = Json.DeserializeFromString<ApplicationPool> (request.JsonObject);  	var originalName = request.Value;  	SiteManager.UpdateApplicationPool (originalName' applicationPool);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Success = true  	});  	break;  case CommandRequestType.StartApplicationPool:  	SiteManager.StartApplicationPool (request.Value);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Success = true  	});  	break;  case CommandRequestType.StopApplicationPool:  	SiteManager.StopApplicationPool (request.Value);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Success = true  	});  	break;  case CommandRequestType.RecycleApplicationPool:  	SiteManager.RecycleApplicationPool (request.Value);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = "ok"'  		Success = true  	});  	break;  case CommandRequestType.DeleteApplicationPool:  	SiteManager.DeleteApplicationPool (request.Value);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = "ok"'  		Success = true  	});  	break;  case CommandRequestType.CreateApplicationPool:  	var applicationPoolToCreate = Json.DeserializeFromString<ApplicationPool> (request.JsonObject);  	SiteManager.CreateApplicationPool (applicationPoolToCreate);  	ReplyOverHttp (new CommandResponse (request.Guid) {  		Message = "ok"'  		Success = true  	});  	break;  }  
Missing Default,Servant.Agent,SocketClient,C:\repos\servantio_servant-agent\src\Servant.Agent\SocketClient.cs,InitializeConnection,The following switch statement is missing a default case: switch (change.NewState) {  case ConnectionState.Disconnected:  	Connect ();  	break;  case ConnectionState.Connected:  	SendServerInfo (Configuration);  	break;  }  
