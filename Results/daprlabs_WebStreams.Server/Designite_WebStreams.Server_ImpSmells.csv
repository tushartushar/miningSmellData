Implementation smell,Namespace,Class,File,Method,Description
Long Method,WebStreams.Server,ControllerBuilder,C:\repos\daprlabs_WebStreams.Server\ControllerBuilder.cs,GetControllerMethod,The method has 157 lines of code.
Complex Method,WebStreams.Server,ControllerRouteExtensions,C:\repos\daprlabs_WebStreams.Server\ControllerRouteExtensions.cs,IncomingMessagePump,Cyclomatic complexity of the method is 8
Long Parameter List,WebStreams.Server,ControllerRoute,C:\repos\daprlabs_WebStreams.Server\ControllerRoute.cs,ControllerRoute,The method has 5 parameters. Parameters: route' controllerType' invoker' observableParameters' hasBodyParameter
Long Parameter List,WebStreams.Server,ControllerRouteExtensions,C:\repos\daprlabs_WebStreams.Server\ControllerRouteExtensions.cs,HttpRequestHandler,The method has 5 parameters. Parameters: route' controller' args' environment' cancellationToken
Long Statement,WebStreams.Server,ControllerRouteExtensions,C:\repos\daprlabs_WebStreams.Server\ControllerRouteExtensions.cs,IncomingMessagePump,The length of the statement  "            foreach (var subscription in observableParams.Values.Where(subscription => !subscription.Subscription.IsCancellationRequested)) " is 127.
Long Statement,WebStreams.Server,ControllerBuilder,C:\repos\daprlabs_WebStreams.Server\ControllerBuilder.cs,IsStreamMethod,The length of the statement  "            var isObservable = method.ReturnType.IsGenericType && method.ReturnType.GetGenericTypeDefinition() == typeof(IObservable<>); " is 124.
Long Statement,WebStreams.Server,ControllerBuilder,C:\repos\daprlabs_WebStreams.Server\ControllerBuilder.cs,GetControllerMethod,The length of the statement  "            var deserialize = typeof(JsonConvert).GetMethod("DeserializeObject"' new[] { typeof(string)' typeof(Type)' typeof(JsonSerializerSettings) }); " is 141.
Long Statement,WebStreams.Server,ControllerBuilder,C:\repos\daprlabs_WebStreams.Server\ControllerBuilder.cs,GetControllerMethod,The length of the statement  "                new[] { method.ReturnType' typeof(Func<'>).MakeGenericType(method.ReturnType.GenericTypeArguments[0]' typeof(string)) }' " is 120.
Long Statement,WebStreams.Server,ControllerBuilder,C:\repos\daprlabs_WebStreams.Server\ControllerBuilder.cs,GetControllerMethod,The length of the statement  "            Expression<Func<object' string>> serialize = input => JsonConvert.SerializeObject(input' settings.JsonSerializerSettings); " is 122.
Long Statement,WebStreams.Server,ControllerBuilder,C:\repos\daprlabs_WebStreams.Server\ControllerBuilder.cs,GetControllerMethod,The length of the statement  "            var outgoingStringObservable = Expression.Call(null' selectToString' new Expression[] { outgoingObservable' serialize }); " is 121.
Long Statement,WebStreams.Server,ControllerBuilder,C:\repos\daprlabs_WebStreams.Server\ControllerBuilder.cs,GetControllerMethod,The length of the statement  "            var lambda = Expression.Lambda<ControllerRoute.Invoker>(body' controllerParameter' parametersParameter' getObservableParameter); " is 128.
Long Statement,WebStreams.Server,OwinExtensions,C:\repos\daprlabs_WebStreams.Server\OwinExtensions.cs,UseWebStreams,The length of the statement  "                _ => _.GetCustomAttribute<RoutePrefixAttribute>() != null || _.GetCustomAttribute<StreamControllerAttribute>() != null); " is 120.
Long Statement,WebStreams.Server,OwinExtensions,C:\repos\daprlabs_WebStreams.Server\OwinExtensions.cs,UseWebStreams,The length of the statement  "                        var accept = environment.Get<Action<IDictionary<string' object>' Func<IDictionary<string' object>' Task>>>(WebSocketConstants.Accept); " is 134.
Magic Number,WebStreams.Server,ControllerRouteExtensions,C:\repos\daprlabs_WebStreams.Server\ControllerRouteExtensions.cs,HttpRequestHandler,The following statement contains a magic number: var subscription = outgoing.Subscribe(                  msg => pump.Schedule(                      async () =>                      {                          try                          {                              if (!headersWritten[0])                              {                                  headersWritten[0] = true;                                    // Set the response headers.                                  response.StatusCode = 200;                              }                                await response.WriteAsync(msg' cancellationToken);                              await response.Body.FlushAsync(cancellationToken);                          }                          catch                          {                              pump.Complete();                              throw;                          }                      })'                  e => pump.Schedule(                      async () =>                      {                          try                          {                              if (!headersWritten[0])                              {                                  // Set the response headers.                                  response.StatusCode = 500;                                  headersWritten[0] = true;                              }                                await response.WriteAsync(e.ToString()' cancellationToken);                              await response.Body.FlushAsync(cancellationToken);                          }                          finally                          {                              pump.Complete();                          }                      })'                  () => pump.Schedule(                      () =>                      {                          if (!headersWritten[0])                          {                              // No content.                              response.StatusCode = 204;                              response.Body.Close();                              response.Body = Stream.Null;                              headersWritten[0] = true;                          }                            pump.Complete();                          return Task.FromResult(0);                      }));
Magic Number,WebStreams.Server,ControllerRouteExtensions,C:\repos\daprlabs_WebStreams.Server\ControllerRouteExtensions.cs,HttpRequestHandler,The following statement contains a magic number: var subscription = outgoing.Subscribe(                  msg => pump.Schedule(                      async () =>                      {                          try                          {                              if (!headersWritten[0])                              {                                  headersWritten[0] = true;                                    // Set the response headers.                                  response.StatusCode = 200;                              }                                await response.WriteAsync(msg' cancellationToken);                              await response.Body.FlushAsync(cancellationToken);                          }                          catch                          {                              pump.Complete();                              throw;                          }                      })'                  e => pump.Schedule(                      async () =>                      {                          try                          {                              if (!headersWritten[0])                              {                                  // Set the response headers.                                  response.StatusCode = 500;                                  headersWritten[0] = true;                              }                                await response.WriteAsync(e.ToString()' cancellationToken);                              await response.Body.FlushAsync(cancellationToken);                          }                          finally                          {                              pump.Complete();                          }                      })'                  () => pump.Schedule(                      () =>                      {                          if (!headersWritten[0])                          {                              // No content.                              response.StatusCode = 204;                              response.Body.Close();                              response.Body = Stream.Null;                              headersWritten[0] = true;                          }                            pump.Complete();                          return Task.FromResult(0);                      }));
Magic Number,WebStreams.Server,ControllerRouteExtensions,C:\repos\daprlabs_WebStreams.Server\ControllerRouteExtensions.cs,HttpRequestHandler,The following statement contains a magic number: var subscription = outgoing.Subscribe(                  msg => pump.Schedule(                      async () =>                      {                          try                          {                              if (!headersWritten[0])                              {                                  headersWritten[0] = true;                                    // Set the response headers.                                  response.StatusCode = 200;                              }                                await response.WriteAsync(msg' cancellationToken);                              await response.Body.FlushAsync(cancellationToken);                          }                          catch                          {                              pump.Complete();                              throw;                          }                      })'                  e => pump.Schedule(                      async () =>                      {                          try                          {                              if (!headersWritten[0])                              {                                  // Set the response headers.                                  response.StatusCode = 500;                                  headersWritten[0] = true;                              }                                await response.WriteAsync(e.ToString()' cancellationToken);                              await response.Body.FlushAsync(cancellationToken);                          }                          finally                          {                              pump.Complete();                          }                      })'                  () => pump.Schedule(                      () =>                      {                          if (!headersWritten[0])                          {                              // No content.                              response.StatusCode = 204;                              response.Body.Close();                              response.Body = Stream.Null;                              headersWritten[0] = true;                          }                            pump.Complete();                          return Task.FromResult(0);                      }));
Magic Number,WebStreams.Server,ControllerRouteExtensions,C:\repos\daprlabs_WebStreams.Server\ControllerRouteExtensions.cs,GetIdiomaticHttpRequestHandler,The following statement contains a magic number: return async environment =>              {                  var response = environment.Response;                  int code;                  string body;                  try                  {                      body = await route.Invoke(controller' args' _ => Observable.Empty<string>()).FirstAsync();                      code = 200;                  }                  catch (Exception e)                  {                      body = e.ToString();                      code = 500;                  }                    response.StatusCode = code;                  response.ContentType = "application/json";                  await response.WriteAsync(body);              };
Magic Number,WebStreams.Server,ControllerRouteExtensions,C:\repos\daprlabs_WebStreams.Server\ControllerRouteExtensions.cs,GetIdiomaticHttpRequestHandler,The following statement contains a magic number: return async environment =>              {                  var response = environment.Response;                  int code;                  string body;                  try                  {                      body = await route.Invoke(controller' args' _ => Observable.Empty<string>()).FirstAsync();                      code = 200;                  }                  catch (Exception e)                  {                      body = e.ToString();                      code = 500;                  }                    response.StatusCode = code;                  response.ContentType = "application/json";                  await response.WriteAsync(body);              };
Magic Number,WebStreams.Server,WebSocket,C:\repos\daprlabs_WebStreams.Server\WebSocket.cs,ReceiveString,The following statement contains a magic number: var buffer = new ArraySegment<byte>(new byte[4096]);
Missing Default,WebStreams.Server,ControllerRouteExtensions,C:\repos\daprlabs_WebStreams.Server\ControllerRouteExtensions.cs,IncomingMessagePump,The following switch statement is missing a default case: switch (message[0])                      {                          case ResponseKind.Final:                              {                                  var payload = message.Substring(nameIndex + 1);                                  observer.OnNext(payload);                                  observer.OnCompleted();                                    // Remove the observable' it will never be called again.                                  observableParams.Remove(name);                                  break;                              }                            case ResponseKind.Next:                              {                                  var payload = message.Substring(nameIndex + 1);                                  observer.OnNext(payload);                                  break;                              }                            case ResponseKind.Error:                              {                                  var payload = message.Substring(nameIndex + 1);                                  observer.OnError(new Exception(payload));                                    // Remove the observable' it will never be called again.                                  observableParams.Remove(name);                                  break;                              }                            case ResponseKind.Completed:                              {                                  observer.OnCompleted();                                    // Remove the observable' it will never be called again.                                  observableParams.Remove(name);                                  break;                              }                      }
