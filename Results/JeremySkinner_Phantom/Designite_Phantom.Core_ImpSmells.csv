Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Phantom.Core,Glob,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Glob.cs,PatternToRegex,Cyclomatic complexity of the method is 9
Complex Method,Phantom.Core,Glob,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Glob.cs,UngroupGlobs,Cyclomatic complexity of the method is 8
Complex Method,Phantom.Core,GlobMatcher,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Glob.cs,DoGlob,Cyclomatic complexity of the method is 13
Complex Method,Mono.Options,Option,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 12
Complex Method,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,Phantom.Core,PlatformAdaptationLayer,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Glob.cs,OpenInputFileStream,The method has 5 parameters. Parameters: path' mode' access' share' bufferSize
Long Parameter List,Phantom.Core,Target,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Target.cs,Target,The method has 5 parameters. Parameters: name' block' dependencies' description' parentScript
Long Parameter List,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,Phantom.Core.Builtins,mspec,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Builtins\MSpec.cs,GetMSpecExePath,The length of the statement  "            return Directory.Exists("packages/Machine.Specifications.0.5.6.0/tools") ? "packages/Machine.Specifications.0.5.6.0/tools/" : "lib/mspec"; " is 138.
Long Statement,Phantom.Core.Builtins,xslt,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Builtins\XSLT.cs,Run,The length of the statement  "				throw new InvalidOperationException("'data' parameter must be specified. This should point to the path of the xml file."); " is 122.
Long Statement,Phantom.Core.Builtins,xslt,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Builtins\XSLT.cs,Run,The length of the statement  "				throw new InvalidOperationException("'transform' parameter must be specified. This should point to the path of the XSLT file."); " is 128.
Long Statement,Phantom.Core.Builtins,msbuild,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Builtins\MSBuild.cs,Execute,The length of the statement  "			string args = "\"" + file + "\" /p:Configuration=" + configuration + " /t:" + string.Join(";"' targets) + " /v:" + verbosity; " is 125.
Complex Conditional,Mono.Options,Option,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Magic Number,Phantom.Core,BuildRunner,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\BuildRunner.cs,OutputTargets,The following statement contains a magic number: foreach (var target in script.OrderBy(x => x.Name)) {  				string name = target.Name.PadRight(maxTargetLength + 10' ' ');  				string description = target.Description ?? string.Empty;    				if (description.Length > 47) {  					description = description.Substring(0' 47) + "...";  				}    				Log.WriteLine(name + description);  			}
Magic Number,Phantom.Core,BuildRunner,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\BuildRunner.cs,OutputTargets,The following statement contains a magic number: foreach (var target in script.OrderBy(x => x.Name)) {  				string name = target.Name.PadRight(maxTargetLength + 10' ' ');  				string description = target.Description ?? string.Empty;    				if (description.Length > 47) {  					description = description.Substring(0' 47) + "...";  				}    				Log.WriteLine(name + description);  			}
Magic Number,Phantom.Core,BuildRunner,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\BuildRunner.cs,OutputTargets,The following statement contains a magic number: foreach (var target in script.OrderBy(x => x.Name)) {  				string name = target.Name.PadRight(maxTargetLength + 10' ' ');  				string description = target.Description ?? string.Empty;    				if (description.Length > 47) {  					description = description.Substring(0' 47) + "...";  				}    				Log.WriteLine(name + description);  			}
Magic Number,Phantom.Core,Glob,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Glob.cs,FnMatch,The following statement contains a magic number: if (((flags & Constants.FNM_DOTMATCH) == 0) && path.Length > 0 && path[0] == '.') {                  // Starting dot requires an explicit dot in the pattern                  if (regexPattern.Length < 4 || regexPattern[2] != '[' || regexPattern[3] != '.') {                      return false;                  }              }
Magic Number,Phantom.Core,Glob,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Glob.cs,FnMatch,The following statement contains a magic number: if (((flags & Constants.FNM_DOTMATCH) == 0) && path.Length > 0 && path[0] == '.') {                  // Starting dot requires an explicit dot in the pattern                  if (regexPattern.Length < 4 || regexPattern[2] != '[' || regexPattern[3] != '.') {                      return false;                  }              }
Magic Number,Phantom.Core,Glob,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Glob.cs,FnMatch,The following statement contains a magic number: if (((flags & Constants.FNM_DOTMATCH) == 0) && path.Length > 0 && path[0] == '.') {                  // Starting dot requires an explicit dot in the pattern                  if (regexPattern.Length < 4 || regexPattern[2] != '[' || regexPattern[3] != '.') {                      return false;                  }              }
Magic Number,Phantom.Core,GlobMatcher,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Glob.cs,TestPath,The following statement contains a magic number: if (_stripTwo) {                      pathName = pathName.Substring(2);                  }
Magic Number,Phantom.Core.Builtins,ncover_explorer,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Builtins\NCoverExplorer.cs,ncover_explorer,The following statement contains a magic number: minimum = 90;
Magic Number,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;  				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				bool indent = false;  				string prefix = new string (' '' OptionWidth+2);  				foreach (string line in GetLines (localizer (GetDescription (p.Description)))) {  					if (indent)   						o.Write (prefix);  					o.WriteLine (line);  					indent = true;  				}  			}
Magic Number,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {  				string[] names = s.GetNames ();  				if (names == null || names.Length == 0)  					continue;    				int written = 0;    				Write (o' ref written' "  ");  				Write (o' ref written' names [0]);  				for (int i = 1; i < names.Length; ++i) {  					Write (o' ref written' "' ");  					Write (o' ref written' names [i]);  				}    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				bool indent = false;  				string prefix = new string (' '' OptionWidth+2);  				foreach (string line in GetLines (localizer (GetDescription (s.Description)))) {  					if (indent)   						o.Write (prefix);  					o.WriteLine (line);  					indent = true;  				}  			}
Magic Number,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,GetLines,The following statement contains a magic number: return StringCoda.WrappedLines (description'   					80 - OptionWidth'   					80 - OptionWidth - 2);
Magic Number,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,GetLines,The following statement contains a magic number: return StringCoda.WrappedLines (description'   					80 - OptionWidth'   					80 - OptionWidth - 2);
Magic Number,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,GetLines,The following statement contains a magic number: return StringCoda.WrappedLines (description'   					80 - OptionWidth'   					80 - OptionWidth - 2);
Missing Default,Mono.Options,OptionSet,C:\repos\JeremySkinner_Phantom\src\Phantom.Core\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
