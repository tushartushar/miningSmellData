Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Cinephile.ViewModels,UpcomingMoviesListViewModel,C:\repos\reactiveui_ReactiveUI\samples\xamarin-forms\Cinephile\ViewModels\UpcomingMoviesListViewModel.cs,UpcomingMoviesListViewModel,The following statement contains a magic number: this.WhenActivated((CompositeDisposable disposables) =>             {                 SelectedItem = null;                  LoadMovies                     .Where(movies => movies != null)                     .Select(movies => movies.Select(movie => new UpcomingMoviesCellViewModel(movie)))                     .SelectMany(movieCell => movieCell)                     .Where(movieCell => !Movies.Select(m => m.Title).Contains(movieCell.Title))                     .Do(_ => Debug.WriteLine($"Adding Movie Items"))                     .Subscribe(movieViewModel => Movies.Add(movieViewModel))                     .DisposeWith(disposables);                  this                     .WhenAnyValue(x => x.SelectedItem)                     .Where(x => x != null)                     .Subscribe(x => LoadSelectedPage(x))                     .DisposeWith(disposables);                  LoadMovies                     .ThrownExceptions                     .Subscribe((obj) =>                     {                         Debug.WriteLine(obj.Message);                     });                   m_isRefreshing =                     LoadMovies                         .IsExecuting                         .Select(x => x)                         .ToProperty(this' x => x.IsRefreshing' true)                         .DisposeWith(disposables);                   this.WhenAnyValue(x=> x.ItemAppearing)                     .Select(item =>                     {                         if (item == null)                             return -1; //causes initial load                          return Movies.IndexOf(item);                     })                     .Do(index => Debug.WriteLine($"==> index {index} >= {Movies.Count - 5} = {index >= Movies.Count - 5}"))                     .Where(index => index >= Movies.Count - 5)                     .InvokeCommand(LoadMovies)                     .DisposeWith(disposables);              });
Magic Number,Cinephile.ViewModels,UpcomingMoviesListViewModel,C:\repos\reactiveui_ReactiveUI\samples\xamarin-forms\Cinephile\ViewModels\UpcomingMoviesListViewModel.cs,UpcomingMoviesListViewModel,The following statement contains a magic number: this.WhenActivated((CompositeDisposable disposables) =>             {                 SelectedItem = null;                  LoadMovies                     .Where(movies => movies != null)                     .Select(movies => movies.Select(movie => new UpcomingMoviesCellViewModel(movie)))                     .SelectMany(movieCell => movieCell)                     .Where(movieCell => !Movies.Select(m => m.Title).Contains(movieCell.Title))                     .Do(_ => Debug.WriteLine($"Adding Movie Items"))                     .Subscribe(movieViewModel => Movies.Add(movieViewModel))                     .DisposeWith(disposables);                  this                     .WhenAnyValue(x => x.SelectedItem)                     .Where(x => x != null)                     .Subscribe(x => LoadSelectedPage(x))                     .DisposeWith(disposables);                  LoadMovies                     .ThrownExceptions                     .Subscribe((obj) =>                     {                         Debug.WriteLine(obj.Message);                     });                   m_isRefreshing =                     LoadMovies                         .IsExecuting                         .Select(x => x)                         .ToProperty(this' x => x.IsRefreshing' true)                         .DisposeWith(disposables);                   this.WhenAnyValue(x=> x.ItemAppearing)                     .Select(item =>                     {                         if (item == null)                             return -1; //causes initial load                          return Movies.IndexOf(item);                     })                     .Do(index => Debug.WriteLine($"==> index {index} >= {Movies.Count - 5} = {index >= Movies.Count - 5}"))                     .Where(index => index >= Movies.Count - 5)                     .InvokeCommand(LoadMovies)                     .DisposeWith(disposables);              });
Magic Number,Cinephile.ViewModels,UpcomingMoviesListViewModel,C:\repos\reactiveui_ReactiveUI\samples\xamarin-forms\Cinephile\ViewModels\UpcomingMoviesListViewModel.cs,UpcomingMoviesListViewModel,The following statement contains a magic number: this.WhenActivated((CompositeDisposable disposables) =>             {                 SelectedItem = null;                  LoadMovies                     .Where(movies => movies != null)                     .Select(movies => movies.Select(movie => new UpcomingMoviesCellViewModel(movie)))                     .SelectMany(movieCell => movieCell)                     .Where(movieCell => !Movies.Select(m => m.Title).Contains(movieCell.Title))                     .Do(_ => Debug.WriteLine($"Adding Movie Items"))                     .Subscribe(movieViewModel => Movies.Add(movieViewModel))                     .DisposeWith(disposables);                  this                     .WhenAnyValue(x => x.SelectedItem)                     .Where(x => x != null)                     .Subscribe(x => LoadSelectedPage(x))                     .DisposeWith(disposables);                  LoadMovies                     .ThrownExceptions                     .Subscribe((obj) =>                     {                         Debug.WriteLine(obj.Message);                     });                   m_isRefreshing =                     LoadMovies                         .IsExecuting                         .Select(x => x)                         .ToProperty(this' x => x.IsRefreshing' true)                         .DisposeWith(disposables);                   this.WhenAnyValue(x=> x.ItemAppearing)                     .Select(item =>                     {                         if (item == null)                             return -1; //causes initial load                          return Movies.IndexOf(item);                     })                     .Do(index => Debug.WriteLine($"==> index {index} >= {Movies.Count - 5} = {index >= Movies.Count - 5}"))                     .Where(index => index >= Movies.Count - 5)                     .InvokeCommand(LoadMovies)                     .DisposeWith(disposables);              });
