Implementation smell,Namespace,Class,File,Method,Description
Long Method,Neo4jRestNet.Core,Path,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Path.cs,Path,The method has 65 lines of code.
Long Method,Neo4jRestNet.Core.CypherQuery,Cypher,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\Cypher.cs,Execute,The method has 60 lines of code.
Long Method,Neo4jRestNet.Core.CypherQuery,ParseWhereLambda,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\ParseWhereLambda.cs,Parse,The method has 92 lines of code.
Long Method,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The method has 96 lines of code.
Long Method,Neo4jRestNet.GremlinPlugin,ParseJavaLambda,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\ParseJavaLambda.cs,Parse,The method has 66 lines of code.
Complex Method,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,ParseJsonGraphObject,Cyclomatic complexity of the method is 11
Complex Method,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,ParseJsonResponse,Cyclomatic complexity of the method is 10
Complex Method,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,ParseRelationshipJson,Cyclomatic complexity of the method is 8
Complex Method,Neo4jRestNet.Core,Path,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Path.cs,Path,Cyclomatic complexity of the method is 23
Complex Method,Neo4jRestNet.Core,Properties,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Properties.cs,DefaultTypeValue,Cyclomatic complexity of the method is 16
Complex Method,Neo4jRestNet.Core,Properties,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Properties.cs,ParseToken,Cyclomatic complexity of the method is 10
Complex Method,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,ParseNodeJson,Cyclomatic complexity of the method is 9
Complex Method,Neo4jRestNet.Core.CypherQuery,Cypher,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\Cypher.cs,Execute,Cyclomatic complexity of the method is 15
Complex Method,Neo4jRestNet.Core.CypherQuery,ParseWhereLambda,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\ParseWhereLambda.cs,Parse,Cyclomatic complexity of the method is 65
Complex Method,Neo4jRestNet.ExpressionTreeParser,ExpressionParser,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\ExpressionTreeParser\ExpressionParser.cs,ParseExpression,Cyclomatic complexity of the method is 30
Complex Method,Neo4jRestNet.ExpressionTreeParser,ExpressionParser,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\ExpressionTreeParser\ExpressionParser.cs,GetAssignExpression,Cyclomatic complexity of the method is 10
Complex Method,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,Cyclomatic complexity of the method is 42
Complex Method,Neo4jRestNet.GremlinPlugin,ParseJavaLambda,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\ParseJavaLambda.cs,Parse,Cyclomatic complexity of the method is 53
Long Parameter List,Neo4jRestNet.Core,BatchNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchNodeStore.cs,GetNode,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchNodeStore.cs,CreateUniqueNode,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchNodeStore.cs,CreateRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchNodeStore.cs,AddToIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchNodeStore.cs,RemoveFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchNodeStore.cs,RemoveFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,GetRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,CreateRelationship,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,CreateUniqueRelationship,The method has 9 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,AddToIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,RemoveFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,RemoveFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,GetNode,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,CreateUniqueNode,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,CreateRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,AddToIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,RemoveFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,RemoveFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,GetRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,CreateRelationship,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,CreateUniqueRelationship,The method has 9 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,AddToIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,RemoveFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,RemoveFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateRelationship,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateUniqueRelationship,The method has 9 parameters.
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,GetRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,AddToIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,RemoveFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,RemoveFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,GetRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,CreateRelationship,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,CreateUniqueRelationship,The method has 9 parameters.
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,AddToIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,RemoveFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,RemoveFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,INodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\INodeStore.cs,GetNode,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,INodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\INodeStore.cs,CreateUniqueNode,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,INodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\INodeStore.cs,CreateRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,INodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\INodeStore.cs,AddToIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,INodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\INodeStore.cs,RemoveFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,INodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\INodeStore.cs,RemoveFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,GetNode,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,CreateUniqueNode,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,AddToIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,RemoveFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,RemoveFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,CreateRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,CreateUniqueNode,The method has 7 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,CreateUniqueNode,The method has 7 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,Initilize,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,GetNode,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,GetNode,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,GetNode,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,GetNode,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,AddToIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,AddToIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,RemoveFromIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,RemoveFromIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,SetProperty,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,SetProperty,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateRelationship,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateRelationship,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateUniqueRelationship,The method has 10 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateUniqueRelationship,The method has 10 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,GetRelationship,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,GetRelationship,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,GetRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,GetRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,AddToIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,AddToIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,RemoveFromIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,RemoveFromIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherOrderBy,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherOrderBy.cs,Node,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherOrderBy,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherOrderBy.cs,Node,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherOrderBy,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherOrderBy.cs,Relationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherOrderBy,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherOrderBy.cs,Relationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherOrderBy,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherOrderBy.cs,OrderByClause,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,Any,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,Any,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,To,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,To,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,From,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,From,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,From,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,From,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,SortestPath,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,Path,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,Path,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,Path,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,Path,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherStart,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherStart.cs,Node,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherStart,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherStart.cs,Node,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherStart,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherStart.cs,Node,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherStart,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherStart.cs,Node,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherStart,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherStart.cs,Relationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherStart,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherStart.cs,Relationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherStart,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherStart.cs,Relationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherStart,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherStart.cs,Relationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Core.CypherQuery,ParseWhereLambda,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\ParseWhereLambda.cs,InvokeExpression,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateUniqueNode,The method has 7 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertyOnNode,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertyOnNode,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateRelationship,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateUniqueRelationship,The method has 10 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertyOnRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertyOnRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationshipsOnNode,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateNodeIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateRelationshipIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddNodeToIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddNodeToIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddRelationshipToIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddRelationshipToIndex,The method has 6 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveNodeFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveNodeFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveRelationshipFromIndex,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveRelationshipFromIndex,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetNode,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetNode,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationship,The method has 5 parameters.
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationship,The method has 4 parameters.
Long Parameter List,Neo4jRestNet.Rest,HttpRest,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\HttpRest.cs,BaseRestRequest,The method has 4 parameters.
Long Statement,Neo4jRestNet.Core,BatchRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,CreateUniqueRelationship,The length of the statement  "	return _batchStore.CreateUniqueRelationship (connection' startNode' endNode' name' properties' indexName' key' value' uniqueness); " is 130.
Long Statement,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,Execute,The length of the statement  "	var status = HttpRest.Post (Connection.GetServiceRoot (connection.DbUrl).Batch' jsonJobs.ToString (Formatting.None' new IsoDateTimeConverter ())' out response); " is 160.
Long Statement,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,ParseJsonResponse,The length of the statement  "			_jobs [id].GraphObject = jobResponse ["body"].Value<JArray> ().Select (objBody => ParseJsonGraphObject ((JObject)objBody' _jobs [id].ReloadProperties)).ToList (); " is 162.
Long Statement,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,RemoveFromIndex,The length of the statement  "		To = string.IsNullOrEmpty (key) ? string.Format ("/index/node/{0}/{1}"' indexName' node.Id) : value == null ? string.Format ("/index/node/{0}/{1}/{2}"' indexName' key' node.Id) : string.Format ("/index/node/{0}/{1}/{2}/{3}"' indexName' key' value is string ? Uri.EscapeDataString (value.ToString ()) : value.ToString ()' node.Id)' " is 330.
Long Statement,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,RemoveFromIndex,The length of the statement  "		To = string.IsNullOrEmpty (key) ? string.Format ("/index/relationship/{0}/{1}"' indexName' relationship.Id) : value == null ? string.Format ("/index/relationship/{0}/{1}/{2}"' indexName' key' relationship.Id) : string.Format ("/index/relationship/{0}/{1}/{2}/{3}"' indexName' key' value is string ? Uri.EscapeDataString (value.ToString ()) : value.ToString ()' relationship.Id)' " is 378.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateRelationship,The length of the statement  "	var status = Neo4jRestApi.CreateRelationship (connection.DbUrl' startNode.Id' endNode.Id' name' properties.ToString ()' out response); " is 134.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateUniqueRelationship,The length of the statement  "	var status = Neo4jRestApi.CreateUniqueRelationship (connection.DbUrl' startNode.Id' endNode.Id' name' properties.ToString ()' indexName' key' value' uniqueness' out response); " is 175.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,DeleteRelationship,The length of the statement  "		throw new Exception (string.Format ("Error deleting relationship (relationship id:{0} http response:{1})"' Id' status)); " is 120.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,AddToIndex,The length of the statement  "	var status = Neo4jRestApi.AddRelationshipToIndex (connection.DbUrl' relationship.Id' indexName' key' value' out response); " is 122.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,RemoveFromIndex,The length of the statement  "		throw new Exception (string.Format ("Error remove relationship from index (relationship id:{0} index name:{1} http response:{2})"' relationship.Id' indexName' status)); " is 168.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,RemoveFromIndex,The length of the statement  "		throw new Exception (string.Format ("Error remove relationship from index (relationship id:{0} index name:{1} key:{2} http response:{3})"' relationship.Id' indexName' key' status)); " is 181.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,RemoveFromIndex,The length of the statement  "		throw new Exception (string.Format ("Error remove relationship from index (relationship id:{0} index name:{1} key:{2} http response:{3})"' relationship.Id' indexName' key' status)); " is 181.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,GetProperties,The length of the statement  "		throw new Exception (string.Format ("Error retrieving properties on relationship (relationship id:{0} http response:{1})"' Id' status)); " is 136.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,SaveProperties,The length of the statement  "		throw new Exception (string.Format ("Error setting properties on relationship (relationship id:{0} http response:{1})"' Id' status)); " is 133.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateRelationshipFromJson,The length of the statement  "	return new Relationship (new RestRelationshipStore (self.Value<string> ()' relationshipJson.ToString (Formatting.None' new IsoDateTimeConverter ()))' Properties.ParseJson (properties.ToString (Formatting.None' new IsoDateTimeConverter ()))); " is 241.
Long Statement,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,CreateUniqueNode,The length of the statement  "	var status = Neo4jRestApi.CreateUniqueNode (connection.DbUrl' properties.ToString ()' indexName' key' value' uniqueness' out response); " is 135.
Long Statement,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,RemoveFromIndex,The length of the statement  "		throw new Exception (string.Format ("Error remove node from index (node id:{0} index name:{1} http response:{2})"' node.Id' indexName' status)); " is 144.
Long Statement,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,RemoveFromIndex,The length of the statement  "		throw new Exception (string.Format ("Error remove node from index (node id:{0} index name:{1} key:{2} http response:{3})"' node.Id' indexName' key' status)); " is 157.
Long Statement,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,RemoveFromIndex,The length of the statement  "		throw new Exception (string.Format ("Error remove node from index (node id:{0} index name:{1} key:{2} http response:{3})"' node.Id' indexName' key' status)); " is 157.
Long Statement,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,GetProperties,The length of the statement  "		throw new Exception (string.Format ("Error retrieving properties on node (node id:{0} http response:{1})"' Id' status)); " is 120.
Long Statement,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,CreateNodeFromJson,The length of the statement  "	return new Node (new RestNodeStore (self.Value<string> ()' nodeJson.ToString (Formatting.None' new IsoDateTimeConverter ()))' Properties.ParseJson (properties.ToString (Formatting.None' new IsoDateTimeConverter ()))); " is 217.
Long Statement,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,GetRelationships,The length of the statement  "		throw new Exception (string.Format ("Error retrieving relationships on node (node id:{0} http response:{1})"' Id' status)); " is 123.
Long Statement,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,CreateRelationship,The length of the statement  "	var status = Neo4jRestApi.CreateRelationship (DbUrl' startNode.Id' endNode.Id' relationshipType' properties == null ? null : properties.ToString ()' out response); " is 163.
Long Statement,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,CreateRelationship,The length of the statement  "		throw new Exception (string.Format ("Error creationg relationship on node (node id:{0} http response:{1})"' Id' status)); " is 121.
Long Statement,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,RemoveFromIndex,The length of the statement  "	return string.IsNullOrWhiteSpace (key) ? _nodeGraphStore.RemoveFromIndex (DefaultConnection' this' indexName) : value == null ? _nodeGraphStore.RemoveFromIndex (DefaultConnection' this' indexName' key) : _nodeGraphStore.RemoveFromIndex (DefaultConnection' this' indexName' key' value); " is 285.
Long Statement,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,RemoveFromIndex,The length of the statement  "	return RemoveFromIndex (node' indexName.ToString ()' key == null ? null : key.ToString ()' value' nodeStore' connection); " is 121.
Long Statement,Neo4jRestNet.Core,Node,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,RemoveFromIndex,The length of the statement  "	return key == null ? nodeStore.RemoveFromIndex (connection' node' indexName) : value == null ? nodeStore.RemoveFromIndex (connection' node' indexName' key) : nodeStore.RemoveFromIndex (connection' node' indexName' key' value); " is 226.
Long Statement,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateUniqueRelationship,The length of the statement  "	return CreateUniqueRelationship (startNode' endNode' name.ToString ()' indexName.ToString ()' key.ToString ()' value' uniqueness' properties' relationshipStore' connection); " is 173.
Long Statement,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateUniqueRelationship,The length of the statement  "	return relationshipStore.CreateUniqueRelationship (connection' startNode' endNode' name' properties' indexName' key' value' uniqueness); " is 136.
Long Statement,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,RemoveFromIndex,The length of the statement  "	return key == null ? _relationshipGraphStore.RemoveFromIndex (DefaultConnection' this' indexName) : value == null ? _relationshipGraphStore.RemoveFromIndex (DefaultConnection' this' indexName' key) : _relationshipGraphStore.RemoveFromIndex (DefaultConnection' this' indexName' key' value); " is 289.
Long Statement,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,RemoveFromIndex,The length of the statement  "	return RemoveFromIndex (relationship' indexName.ToString ()' key == null ? null : key.ToString ()' value' relationshipStore' connection); " is 137.
Long Statement,Neo4jRestNet.Core,Relationship,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,RemoveFromIndex,The length of the statement  "	return key == null ? relationshipStore.RemoveFromIndex (connection' relationship' indexName) : value == null ? relationshipStore.RemoveFromIndex (connection' relationship' indexName' key) : relationshipStore.RemoveFromIndex (connection' relationship' indexName' key' value); " is 274.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherSet,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherSet.cs,Node,The length of the statement  "	_sb.Append (properties.Aggregate (new StringBuilder ()' (sb' p) => sb.AppendFormat ("{0}{1}.{2} = {3}"' sb.Length == 0 ? " " : "'"' name' p.Key' p.Value == null ? "null" : JToken.FromObject (p.Value).ToString (Formatting.None' new IsoDateTimeConverter ())))); " is 259.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherSet,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherSet.cs,Relationship,The length of the statement  "	_sb.Append (properties.Aggregate (new StringBuilder ()' (sb' p) => sb.AppendFormat ("{0}{1}.{2} = {3}"' sb.Length == 0 ? " " : "'"' name' p.Key' JToken.FromObject (p.Value).ToString (Formatting.None' new IsoDateTimeConverter ())))); " is 232.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherDelete,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherDelete.cs,Node,The length of the statement  "	Append ("{0}"' propertyName.Aggregate (new StringBuilder ()' (sb' propName) => sb.AppendFormat ("{0}{1}.{2}"' sb.Length == 0 ? string.Empty : "'"' name' propName))); " is 165.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherDelete,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherDelete.cs,Node,The length of the statement  "	Append ("{0}"' propertyName.Aggregate (new StringBuilder ()' (sb' propName) => sb.AppendFormat ("{0}{1}.{2}"' sb.Length == 0 ? string.Empty : "'"' name' propName.ToString ()))); " is 177.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherDelete,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherDelete.cs,Relationship,The length of the statement  "	Append ("{0}"' propertyName.Aggregate (new StringBuilder ()' (sb' propName) => sb.AppendFormat ("{0}{1}.{2}"' sb.Length == 0 ? string.Empty : "'"' name' propName))); " is 165.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherDelete,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherDelete.cs,Relationship,The length of the statement  "	Append ("{0}"' propertyName.Aggregate (new StringBuilder ()' (sb' propName) => sb.AppendFormat ("{0}{1}.{2}"' sb.Length == 0 ? string.Empty : "'"' name' propName.ToString ()))); " is 177.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherOrderBy,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherOrderBy.cs,OrderByClause,The length of the statement  "	_sb.AppendFormat ("{0} {1}.{2}{4} {3}"' _isStringEmpty ? string.Empty : "'"' name' property' order == Order.Decending ? "DESC" : string.Empty' optional ? "?" : string.Empty); " is 174.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherWhere,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherWhere.cs,In,The length of the statement  "	_sb.Append (string.Format (" in [{0}]"' items.Aggregate (new StringBuilder ()' (sb' item) => sb.AppendFormat ("{1}{2}{0}{2}"' item' sb.Length > 0 ? "'" : string.Empty' typeof(T) == typeof(string) ? "'" : string.Empty)))); " is 221.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherReturn,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherReturn.cs,Count,The length of the statement  "	_sb.AppendFormat ("{1} count({2}{0})"' name' _isStringEmpty ? string.Empty : "'"' distinct ? "distinct " : string.Empty); " is 121.
Long Statement,Neo4jRestNet.Core.CypherQuery,Cypher,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\Cypher.cs,Execute,The length of the statement  "				dt.Columns.Add (jaColumns [colIndex].ToString ()' colIndex < returnTypes.Count ? returnTypes [colIndex] : typeof(object)); " is 122.
Long Statement,Neo4jRestNet.Core.CypherQuery,ParseWhereLambda,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\ParseWhereLambda.cs,Parse,The length of the statement  "		sbFilter.Append (body.ToString () == "null" ? "null" : Expression.Lambda (_ep.ParseExpression (body)).Compile ().DynamicInvoke ().ToString ()); " is 143.
Long Statement,Neo4jRestNet.Core.CypherQuery,ParseWhereLambda,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\ParseWhereLambda.cs,Parse,The length of the statement  "		sbFilter.AppendFormat (body.Type == typeof(string) ? "'{0}'" : "{0}"' Expression.Lambda (body).Compile ().DynamicInvoke ()); " is 124.
Long Statement,Neo4jRestNet.Core.CypherQuery,ParseWhereLambda,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\ParseWhereLambda.cs,Parse,The length of the statement  "		sbFilter.Append (convert.Operand.Type == typeof(DateTime) ? string.Format ("'{0:s}'"' Expression.Lambda (body).Compile ().DynamicInvoke ()) : // Format DateTime to ISO8601  " is 171.
Long Statement,Neo4jRestNet.ExpressionTreeParser,ExpressionParser,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\ExpressionTreeParser\ExpressionParser.cs,ParseExpression,The length of the statement  "					assignExpressions.Add (Expression.Constant (String.Format ("'{0}'"' Expression.Lambda (mce.Object).Compile ().DynamicInvoke ().ToString ()))); " is 142.
Long Statement,Neo4jRestNet.ExpressionTreeParser,ExpressionParser,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\ExpressionTreeParser\ExpressionParser.cs,GetAssignExpression,The length of the statement  "		return Expression.Assign (parameter' Expression.NewArrayInit (expression.Type.GetElementType ()' ((NewArrayExpression)expression).Expressions)); " is 144.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,In,The length of the statement  "	var relationships = relationshipName.Aggregate (new StringBuilder ()' (sb' item) => sb.AppendFormat ("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 157.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,InE,The length of the statement  "	var relationships = relationshipName.Aggregate (new StringBuilder ()' (sb' item) => sb.AppendFormat ("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 157.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,InV,The length of the statement  "	var relationships = relationshipName.Aggregate (new StringBuilder ()' (sb' item) => sb.AppendFormat ("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 157.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,Out,The length of the statement  "	var relationships = relationshipName.Aggregate (new StringBuilder ()' (sb' item) => sb.AppendFormat ("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 157.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,OutE,The length of the statement  "	var relationships = relationshipName.Aggregate (new StringBuilder ()' (sb' item) => sb.AppendFormat ("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 157.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,OutV,The length of the statement  "	var relationships = relationshipName.Aggregate (new StringBuilder ()' (sb' item) => sb.AppendFormat ("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 157.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,Array,The length of the statement  "	return query.Append (string.Format ("[{0}]"' items.Aggregate (new StringBuilder ()' (sb' item) => sb.AppendFormat ("{1}{2}{0}{2}"' item' sb.Length > 0 ? "'" : string.Empty' typeof(T) == typeof(string) ? "'" : string.Empty)))); " is 226.
Long Statement,Neo4jRestNet.GremlinPlugin,ParseJavaLambda,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\ParseJavaLambda.cs,Parse,The length of the statement  "		sbFilter.Append (convert.Operand.Type == typeof(DateTime) ? string.Format ("'{0:s}'"' Expression.Lambda (body).Compile ().DynamicInvoke ()) : // Format DateTime to ISO8601  " is 171.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateNode,The length of the statement  "	return HttpRest.Post (Connection.GetServiceRoot (dbUrl).Node' string.IsNullOrWhiteSpace (jsonProperties) ? null : jsonProperties' out response); " is 144.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateUniqueNode,The length of the statement  "	return HttpRest.Post (string.Concat (Connection.GetServiceRoot (dbUrl).NodeIndex' "/"' indexName' "?uniqueness="' uniqueness)' jo.ToString (Formatting.None' new IsoDateTimeConverter ())' out response); " is 201.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertiesOnNode,The length of the statement  "	return HttpRest.Put (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' nodeId.ToString ()' "/properties")' jsonProperties); " is 133.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertiesOnNode,The length of the statement  "	return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' nodeId.ToString ()' "/properties")' out response); " is 131.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemovePropertiesFromNode,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' nodeId.ToString ()' "/properties")); " is 120.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertyOnNode,The length of the statement  "	return HttpRest.Put (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' nodeId.ToString ()' "/properties/"' propertyName)' JToken.FromObject (value).ToString (Formatting.None' new IsoDateTimeConverter ())); " is 215.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertyOnNode,The length of the statement  "	return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' nodeId.ToString ()' "/properties/"' propertyName)' out response); " is 146.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemovePropertyFromNode,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' nodeId.ToString ()' "/properties/"' propertyName)); " is 135.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateRelationship,The length of the statement  "	return HttpRest.Post (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' startNodeId.ToString ()' "/relationships")' jo.ToString (Formatting.None' new IsoDateTimeConverter ())' out response); " is 200.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateUniqueRelationship,The length of the statement  "	return HttpRest.Post (string.Concat (Connection.GetServiceRoot (dbUrl).RelationshipIndex' "/"' indexName' "?uniqueness="' uniqueness)' jo.ToString ()' out response); " is 165.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertiesOnRelationship,The length of the statement  "	return HttpRest.Put (string.Concat (Connection.GetServiceRoot (dbUrl).Relationship' "/"' relationshipId.ToString ()' "/properties")' jsonProperties); " is 149.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertiesOnRelationship,The length of the statement  "	return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).Relationship' "/"' relationshipId.ToString ()' "/properties")' out response); " is 147.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemovePropertiesFromRelationship,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' relationshipId.ToString ()' "/properties")); " is 128.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertyOnRelationship,The length of the statement  "	return HttpRest.Put (string.Concat (Connection.GetServiceRoot (dbUrl).Relationship' "/"' relationshipId.ToString ()' "/properties/"' propertyName)' JToken.FromObject (value).ToString ()); " is 187.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertyOnRelationship,The length of the statement  "	return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).Relationship' "/"' relationshipId.ToString ()' "/properties/"' propertyName)' out response); " is 162.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemovePropertyFromRelationship,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).Relationship' "/"' relationshipId.ToString ()' "/properties/"' propertyName)); " is 151.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,DeleteRelationship,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).Relationship' "/"' relationshipId.ToString ())); " is 121.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationshipsOnNode,The length of the statement  "		return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' nodeId.ToString ()' "/relationships/"' direction.ToString ())' out response); " is 158.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationshipsOnNode,The length of the statement  "	return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).Node' "/"' nodeId.ToString ()' "/relationships/"' direction.ToString ()' "/"' string.Join ("&"' relationships))' out response); " is 197.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateNodeIndex,The length of the statement  "	return HttpRest.Post (Connection.GetServiceRoot (dbUrl).NodeIndex' jo.ToString (Formatting.None' new IsoDateTimeConverter ())' out response); " is 141.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateRelationshipIndex,The length of the statement  "	return HttpRest.Post (Connection.GetServiceRoot (dbUrl).RelationshipIndex' jo.ToString (Formatting.None' new IsoDateTimeConverter ())' out response); " is 149.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddNodeToIndex,The length of the statement  "	return HttpRest.Post (string.Concat (Connection.GetServiceRoot (dbUrl).NodeIndex' "/"' indexName)' jo.ToString (Formatting.None' new IsoDateTimeConverter ())' out response); " is 173.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddRelationshipToIndex,The length of the statement  "	return HttpRest.Post (string.Concat (Connection.GetServiceRoot (dbUrl).RelationshipIndex' "/"' indexName)' jo.ToString (Formatting.None' new IsoDateTimeConverter ())' out response); " is 181.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveNodeFromIndex,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).NodeIndex' "/"' indexName' "/"' key' "/"' strValue' "/"' nodeId)); " is 139.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveNodeFromIndex,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).NodeIndex' "/"' indexName' "/"' key' "/"' nodeId)); " is 124.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveRelationshipFromIndex,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).RelationshipIndex' "/"' indexName' "/"' key' "/"' strValue' "/"' relationshipId)); " is 155.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveRelationshipFromIndex,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).RelationshipIndex' "/"' indexName' "/"' key' "/"' relationshipId)); " is 140.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveRelationshipFromIndex,The length of the statement  "	return HttpRest.Delete (string.Concat (Connection.GetServiceRoot (dbUrl).RelationshipIndex' "/"' indexName' "/"' relationshipId)); " is 130.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetNode,The length of the statement  "	return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).NodeIndex' "/"' indexName' "/"' key' "/"' strValue)' out response); " is 137.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetNode,The length of the statement  "	return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).NodeIndex' "/"' indexName' "?query="' Uri.EscapeDataString (searchQuery))' out response); " is 159.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationship,The length of the statement  "	return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).RelationshipIndex' "/"' indexName' "/"' key' "/"' strValue)' out response); " is 145.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationship,The length of the statement  "	return HttpRest.Get (string.Concat (Connection.GetServiceRoot (dbUrl).RelationshipIndex' "/"' indexName' "?query="' Uri.EscapeDataString (searchQuery))' out response); " is 167.
Magic Number,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,ParseJsonGraphObject,The following statement contains a magic number: if (selfArray.Length < 2) {  	throw new Exception ("Invalid response from batch");  }  
Magic Number,Neo4jRestNet.Core,BatchStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,ParseJsonGraphObject,The following statement contains a magic number: switch (selfArray [selfArray.Length - 2]) {  case "node":  	var node = RestNodeStore.CreateNodeFromJson (jsonGraphObject);  	if (reloadProperties) {  		node.Properties = null;  	}  	return node;  case "relationship":  	var relationship = RestRelationshipStore.CreateRelationshipFromJson (jsonGraphObject);  	if (reloadProperties) {  		relationship.Properties = null;  	}  	return relationship;  default:  	throw new Exception ("Invalid response from batch");  }  
Magic Number,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,IsSelfARelationship,The following statement contains a magic number: return (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship");  
Magic Number,Neo4jRestNet.Core,RestRelationshipStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,IsSelfARelationship,The following statement contains a magic number: return (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship");  
Magic Number,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,IsSelfANode,The following statement contains a magic number: return (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node");  
Magic Number,Neo4jRestNet.Core,RestNodeStore,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,IsSelfANode,The following statement contains a magic number: return (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node");  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (JArray jRow in jaData) {  	var row = new List<object> ();  	foreach (var jCol in jRow) {  		switch (jCol.Type) {  		case JTokenType.String:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  			break;  		case JTokenType.Object:  			if (jCol ["self"] == null) {  				row.Add (jCol.ToString ());  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  					colIndex++;  				}  			} else {  				string self = jCol ["self"].ToString ();  				string[] selfArray = self.Split ('/');  				if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  					row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  						colIndex++;  					}  				} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  					row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  						colIndex++;  					}  				} else {  					// Not a Node or Relationship - return as string  					row.Add (jCol.ToString ());  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  						colIndex++;  					}  				}  			}  			break;  		case JTokenType.Integer:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  				colIndex++;  			}  			break;  		case JTokenType.Float:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  				colIndex++;  			}  			break;  		case JTokenType.Date:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  				colIndex++;  			}  			break;  		case JTokenType.Boolean:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  				colIndex++;  			}  			break;  		default:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  			break;  		}  	}  	initColumns = false;  	var dtRow = dt.NewRow ();  	dtRow.ItemArray = row.ToArray ();  	dt.Rows.Add (dtRow);  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (JArray jRow in jaData) {  	var row = new List<object> ();  	foreach (var jCol in jRow) {  		switch (jCol.Type) {  		case JTokenType.String:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  			break;  		case JTokenType.Object:  			if (jCol ["self"] == null) {  				row.Add (jCol.ToString ());  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  					colIndex++;  				}  			} else {  				string self = jCol ["self"].ToString ();  				string[] selfArray = self.Split ('/');  				if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  					row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  						colIndex++;  					}  				} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  					row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  						colIndex++;  					}  				} else {  					// Not a Node or Relationship - return as string  					row.Add (jCol.ToString ());  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  						colIndex++;  					}  				}  			}  			break;  		case JTokenType.Integer:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  				colIndex++;  			}  			break;  		case JTokenType.Float:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  				colIndex++;  			}  			break;  		case JTokenType.Date:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  				colIndex++;  			}  			break;  		case JTokenType.Boolean:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  				colIndex++;  			}  			break;  		default:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  			break;  		}  	}  	initColumns = false;  	var dtRow = dt.NewRow ();  	dtRow.ItemArray = row.ToArray ();  	dt.Rows.Add (dtRow);  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (JArray jRow in jaData) {  	var row = new List<object> ();  	foreach (var jCol in jRow) {  		switch (jCol.Type) {  		case JTokenType.String:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  			break;  		case JTokenType.Object:  			if (jCol ["self"] == null) {  				row.Add (jCol.ToString ());  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  					colIndex++;  				}  			} else {  				string self = jCol ["self"].ToString ();  				string[] selfArray = self.Split ('/');  				if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  					row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  						colIndex++;  					}  				} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  					row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  						colIndex++;  					}  				} else {  					// Not a Node or Relationship - return as string  					row.Add (jCol.ToString ());  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  						colIndex++;  					}  				}  			}  			break;  		case JTokenType.Integer:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  				colIndex++;  			}  			break;  		case JTokenType.Float:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  				colIndex++;  			}  			break;  		case JTokenType.Date:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  				colIndex++;  			}  			break;  		case JTokenType.Boolean:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  				colIndex++;  			}  			break;  		default:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  			break;  		}  	}  	initColumns = false;  	var dtRow = dt.NewRow ();  	dtRow.ItemArray = row.ToArray ();  	dt.Rows.Add (dtRow);  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (JArray jRow in jaData) {  	var row = new List<object> ();  	foreach (var jCol in jRow) {  		switch (jCol.Type) {  		case JTokenType.String:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  			break;  		case JTokenType.Object:  			if (jCol ["self"] == null) {  				row.Add (jCol.ToString ());  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  					colIndex++;  				}  			} else {  				string self = jCol ["self"].ToString ();  				string[] selfArray = self.Split ('/');  				if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  					row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  						colIndex++;  					}  				} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  					row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  						colIndex++;  					}  				} else {  					// Not a Node or Relationship - return as string  					row.Add (jCol.ToString ());  					if (initColumns) {  						dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  						colIndex++;  					}  				}  			}  			break;  		case JTokenType.Integer:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  				colIndex++;  			}  			break;  		case JTokenType.Float:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  				colIndex++;  			}  			break;  		case JTokenType.Date:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  				colIndex++;  			}  			break;  		case JTokenType.Boolean:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  				colIndex++;  			}  			break;  		default:  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  			break;  		}  	}  	initColumns = false;  	var dtRow = dt.NewRow ();  	dtRow.ItemArray = row.ToArray ();  	dt.Rows.Add (dtRow);  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (var jCol in jRow) {  	switch (jCol.Type) {  	case JTokenType.String:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  		break;  	case JTokenType.Object:  		if (jCol ["self"] == null) {  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  		} else {  			string self = jCol ["self"].ToString ();  			string[] selfArray = self.Split ('/');  			if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  				row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  					colIndex++;  				}  			} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  				row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  					colIndex++;  				}  			} else {  				// Not a Node or Relationship - return as string  				row.Add (jCol.ToString ());  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  					colIndex++;  				}  			}  		}  		break;  	case JTokenType.Integer:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  			colIndex++;  		}  		break;  	case JTokenType.Float:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  			colIndex++;  		}  		break;  	case JTokenType.Date:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  			colIndex++;  		}  		break;  	case JTokenType.Boolean:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  			colIndex++;  		}  		break;  	default:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  		break;  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (var jCol in jRow) {  	switch (jCol.Type) {  	case JTokenType.String:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  		break;  	case JTokenType.Object:  		if (jCol ["self"] == null) {  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  		} else {  			string self = jCol ["self"].ToString ();  			string[] selfArray = self.Split ('/');  			if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  				row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  					colIndex++;  				}  			} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  				row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  					colIndex++;  				}  			} else {  				// Not a Node or Relationship - return as string  				row.Add (jCol.ToString ());  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  					colIndex++;  				}  			}  		}  		break;  	case JTokenType.Integer:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  			colIndex++;  		}  		break;  	case JTokenType.Float:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  			colIndex++;  		}  		break;  	case JTokenType.Date:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  			colIndex++;  		}  		break;  	case JTokenType.Boolean:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  			colIndex++;  		}  		break;  	default:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  		break;  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (var jCol in jRow) {  	switch (jCol.Type) {  	case JTokenType.String:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  		break;  	case JTokenType.Object:  		if (jCol ["self"] == null) {  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  		} else {  			string self = jCol ["self"].ToString ();  			string[] selfArray = self.Split ('/');  			if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  				row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  					colIndex++;  				}  			} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  				row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  					colIndex++;  				}  			} else {  				// Not a Node or Relationship - return as string  				row.Add (jCol.ToString ());  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  					colIndex++;  				}  			}  		}  		break;  	case JTokenType.Integer:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  			colIndex++;  		}  		break;  	case JTokenType.Float:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  			colIndex++;  		}  		break;  	case JTokenType.Date:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  			colIndex++;  		}  		break;  	case JTokenType.Boolean:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  			colIndex++;  		}  		break;  	default:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  		break;  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (var jCol in jRow) {  	switch (jCol.Type) {  	case JTokenType.String:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  		break;  	case JTokenType.Object:  		if (jCol ["self"] == null) {  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  		} else {  			string self = jCol ["self"].ToString ();  			string[] selfArray = self.Split ('/');  			if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  				row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  					colIndex++;  				}  			} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  				row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  					colIndex++;  				}  			} else {  				// Not a Node or Relationship - return as string  				row.Add (jCol.ToString ());  				if (initColumns) {  					dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  					colIndex++;  				}  			}  		}  		break;  	case JTokenType.Integer:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  			colIndex++;  		}  		break;  	case JTokenType.Float:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  			colIndex++;  		}  		break;  	case JTokenType.Date:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  			colIndex++;  		}  		break;  	case JTokenType.Boolean:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  			colIndex++;  		}  		break;  	default:  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  		break;  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: switch (jCol.Type) {  case JTokenType.String:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  	break;  case JTokenType.Object:  	if (jCol ["self"] == null) {  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  	} else {  		string self = jCol ["self"].ToString ();  		string[] selfArray = self.Split ('/');  		if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  			row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  				colIndex++;  			}  		} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  			row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  				colIndex++;  			}  		} else {  			// Not a Node or Relationship - return as string  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  		}  	}  	break;  case JTokenType.Integer:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  		colIndex++;  	}  	break;  case JTokenType.Float:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  		colIndex++;  	}  	break;  case JTokenType.Date:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  		colIndex++;  	}  	break;  case JTokenType.Boolean:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  		colIndex++;  	}  	break;  default:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  	break;  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: switch (jCol.Type) {  case JTokenType.String:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  	break;  case JTokenType.Object:  	if (jCol ["self"] == null) {  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  	} else {  		string self = jCol ["self"].ToString ();  		string[] selfArray = self.Split ('/');  		if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  			row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  				colIndex++;  			}  		} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  			row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  				colIndex++;  			}  		} else {  			// Not a Node or Relationship - return as string  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  		}  	}  	break;  case JTokenType.Integer:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  		colIndex++;  	}  	break;  case JTokenType.Float:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  		colIndex++;  	}  	break;  case JTokenType.Date:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  		colIndex++;  	}  	break;  case JTokenType.Boolean:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  		colIndex++;  	}  	break;  default:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  	break;  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: switch (jCol.Type) {  case JTokenType.String:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  	break;  case JTokenType.Object:  	if (jCol ["self"] == null) {  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  	} else {  		string self = jCol ["self"].ToString ();  		string[] selfArray = self.Split ('/');  		if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  			row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  				colIndex++;  			}  		} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  			row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  				colIndex++;  			}  		} else {  			// Not a Node or Relationship - return as string  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  		}  	}  	break;  case JTokenType.Integer:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  		colIndex++;  	}  	break;  case JTokenType.Float:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  		colIndex++;  	}  	break;  case JTokenType.Date:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  		colIndex++;  	}  	break;  case JTokenType.Boolean:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  		colIndex++;  	}  	break;  default:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  	break;  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: switch (jCol.Type) {  case JTokenType.String:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  	break;  case JTokenType.Object:  	if (jCol ["self"] == null) {  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  	} else {  		string self = jCol ["self"].ToString ();  		string[] selfArray = self.Split ('/');  		if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  			row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  				colIndex++;  			}  		} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  			row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  				colIndex++;  			}  		} else {  			// Not a Node or Relationship - return as string  			row.Add (jCol.ToString ());  			if (initColumns) {  				dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  				colIndex++;  			}  		}  	}  	break;  case JTokenType.Integer:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(int));  		colIndex++;  	}  	break;  case JTokenType.Float:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(float));  		colIndex++;  	}  	break;  case JTokenType.Date:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(DateTime));  		colIndex++;  	}  	break;  case JTokenType.Boolean:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(bool));  		colIndex++;  	}  	break;  default:  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  	break;  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (jCol ["self"] == null) {  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  } else {  	string self = jCol ["self"].ToString ();  	string[] selfArray = self.Split ('/');  	if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  		row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  			colIndex++;  		}  	} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  		row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  			colIndex++;  		}  	} else {  		// Not a Node or Relationship - return as string  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (jCol ["self"] == null) {  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  } else {  	string self = jCol ["self"].ToString ();  	string[] selfArray = self.Split ('/');  	if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  		row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  			colIndex++;  		}  	} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  		row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  			colIndex++;  		}  	} else {  		// Not a Node or Relationship - return as string  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (jCol ["self"] == null) {  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  } else {  	string self = jCol ["self"].ToString ();  	string[] selfArray = self.Split ('/');  	if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  		row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  			colIndex++;  		}  	} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  		row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  			colIndex++;  		}  	} else {  		// Not a Node or Relationship - return as string  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (jCol ["self"] == null) {  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  } else {  	string self = jCol ["self"].ToString ();  	string[] selfArray = self.Split ('/');  	if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  		row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  			colIndex++;  		}  	} else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  		row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  			colIndex++;  		}  	} else {  		// Not a Node or Relationship - return as string  		row.Add (jCol.ToString ());  		if (initColumns) {  			dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  			colIndex++;  		}  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  	row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  		colIndex++;  	}  } else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  	row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  		colIndex++;  	}  } else {  	// Not a Node or Relationship - return as string  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  	row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  		colIndex++;  	}  } else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  	row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  		colIndex++;  	}  } else {  	// Not a Node or Relationship - return as string  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  	row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  		colIndex++;  	}  } else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  	row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  		colIndex++;  	}  } else {  	// Not a Node or Relationship - return as string  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "node") {  	row.Add (RestNodeStore.CreateNodeFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Node));  		colIndex++;  	}  } else if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  	row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  		colIndex++;  	}  } else {  	// Not a Node or Relationship - return as string  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  	row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  		colIndex++;  	}  } else {  	// Not a Node or Relationship - return as string  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  }  
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,D:\newReposJune17\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: if (selfArray.Length > 2 && selfArray [selfArray.Length - 2] == "relationship") {  	row.Add (RestRelationshipStore.CreateRelationshipFromJson ((JObject)jCol));  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(Relationship));  		colIndex++;  	}  } else {  	// Not a Node or Relationship - return as string  	row.Add (jCol.ToString ());  	if (initColumns) {  		dt.Columns.Add (jaColumns [colIndex].ToString ()' typeof(string));  		colIndex++;  	}  }  
