Implementation smell,Namespace,Class,File,Method,Description
Long Method,Neo4jRestNet.Core.CypherQuery,ParseWhereLambda,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\ParseWhereLambda.cs,Parse,The method has 117 lines of code.
Long Method,Neo4jRestNet.GremlinPlugin,Gremlin,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The method has 118 lines of code.
Complex Method,Neo4jRestNet.Core,Path,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Path.cs,Path,Cyclomatic complexity of the method is 11
Complex Method,Neo4jRestNet.Core,Properties,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Properties.cs,DefaultTypeValue,Cyclomatic complexity of the method is 16
Long Parameter List,Neo4jRestNet.Core,BatchNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchNodeStore.cs,CreateUniqueNode,The method has 6 parameters. Parameters: connection' properties' indexName' key' value' uniqueness
Long Parameter List,Neo4jRestNet.Core,BatchNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchNodeStore.cs,AddToIndex,The method has 5 parameters. Parameters: connection' node' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,BatchNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchNodeStore.cs,RemoveFromIndex,The method has 5 parameters. Parameters: connection' node' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,CreateRelationship,The method has 5 parameters. Parameters: connection' startNode' endNode' name' properties
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,CreateUniqueRelationship,The method has 9 parameters. Parameters: connection' startNode' endNode' name' properties' indexName' key' value' uniqueness
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,AddToIndex,The method has 5 parameters. Parameters: connection' relationship' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,BatchRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,RemoveFromIndex,The method has 5 parameters. Parameters: connection' relationship' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,CreateUniqueNode,The method has 6 parameters. Parameters: connection' properties' indexName' key' value' uniqueness
Long Parameter List,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,AddToIndex,The method has 5 parameters. Parameters: connection' node' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,RemoveFromIndex,The method has 5 parameters. Parameters: connection' node' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,CreateRelationship,The method has 5 parameters. Parameters: connection' startNode' endNode' name' properties
Long Parameter List,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,CreateUniqueRelationship,The method has 9 parameters. Parameters: connection' startNode' endNode' name' properties' indexName' key' value' uniqueness
Long Parameter List,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,AddToIndex,The method has 5 parameters. Parameters: connection' relationship' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,RemoveFromIndex,The method has 5 parameters. Parameters: connection' relationship' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateRelationship,The method has 5 parameters. Parameters: connection' startNode' endNode' name' properties
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateUniqueRelationship,The method has 9 parameters. Parameters: connection' startNode' endNode' name' properties' indexName' key' value' uniqueness
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,AddToIndex,The method has 5 parameters. Parameters: connection' relationship' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,RemoveFromIndex,The method has 5 parameters. Parameters: connection' relationship' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,CreateRelationship,The method has 5 parameters. Parameters: connection' startNode' endNode' name' properties
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,CreateUniqueRelationship,The method has 9 parameters. Parameters: connection' startNode' endNode' name' properties' indexName' key' value' uniqueness
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,AddToIndex,The method has 5 parameters. Parameters: connection' relationship' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,IRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\IRelationshipStore.cs,RemoveFromIndex,The method has 5 parameters. Parameters: connection' relationship' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,INodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\INodeStore.cs,CreateUniqueNode,The method has 6 parameters. Parameters: connection' properties' indexName' key' value' uniqueness
Long Parameter List,Neo4jRestNet.Core,INodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\INodeStore.cs,AddToIndex,The method has 5 parameters. Parameters: connection' node' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,INodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\INodeStore.cs,RemoveFromIndex,The method has 5 parameters. Parameters: connection' node' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,CreateUniqueNode,The method has 6 parameters. Parameters: connection' properties' indexName' key' value' uniqueness
Long Parameter List,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,AddToIndex,The method has 5 parameters. Parameters: connection' node' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,RemoveFromIndex,The method has 5 parameters. Parameters: connection' node' indexName' key' value
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,CreateUniqueNode,The method has 7 parameters. Parameters: indexName' key' value' uniqueness' properties' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,CreateUniqueNode,The method has 7 parameters. Parameters: indexName' key' value' uniqueness' properties' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,GetNode,The method has 5 parameters. Parameters: indexName' key' value' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,GetNode,The method has 5 parameters. Parameters: indexName' key' value' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,AddToIndex,The method has 6 parameters. Parameters: node' indexName' key' value' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,AddToIndex,The method has 6 parameters. Parameters: node' indexName' key' value' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,RemoveFromIndex,The method has 6 parameters. Parameters: node' indexName' key' value' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,RemoveFromIndex,The method has 6 parameters. Parameters: node' indexName' key' value' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,SetProperty,The method has 5 parameters. Parameters: node' key' value' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Node,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Node.cs,SetProperty,The method has 5 parameters. Parameters: node' key' value' nodeStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateRelationship,The method has 6 parameters. Parameters: startNode' endNode' name' properties' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateRelationship,The method has 6 parameters. Parameters: startNode' endNode' name' properties' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateUniqueRelationship,The method has 10 parameters. Parameters: startNode' endNode' name' indexName' key' value' uniqueness' properties' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateUniqueRelationship,The method has 10 parameters. Parameters: startNode' endNode' name' indexName' key' value' uniqueness' properties' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,GetRelationship,The method has 5 parameters. Parameters: indexName' key' value' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,GetRelationship,The method has 5 parameters. Parameters: indexName' key' value' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,AddToIndex,The method has 6 parameters. Parameters: relationship' indexName' key' value' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,AddToIndex,The method has 6 parameters. Parameters: relationship' indexName' key' value' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,RemoveFromIndex,The method has 6 parameters. Parameters: relationship' indexName' key' value' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,RemoveFromIndex,The method has 6 parameters. Parameters: relationship' indexName' key' value' relationshipStore' connection
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,To,The method has 5 parameters. Parameters: name' relationship' minHops' maxHops' optional
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,To,The method has 5 parameters. Parameters: name' relationship' minHops' maxHops' optional
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,From,The method has 5 parameters. Parameters: name' relationship' minHops' maxHops' optional
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,From,The method has 5 parameters. Parameters: name' relationship' minHops' maxHops' optional
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,Path,The method has 6 parameters. Parameters: name' fromNodeName' relationship' minHops' maxHops' toNodeName
Long Parameter List,Neo4jRestNet.Core.CypherQuery,CypherMatch,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherMatch.cs,Path,The method has 6 parameters. Parameters: name' fromNodeName' relationship' minHops' maxHops' toNodeName
Long Parameter List,Neo4jRestNet.Core.CypherQuery,ParseWhereLambda,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\ParseWhereLambda.cs,InvokeExpression,The method has 5 parameters. Parameters: leftExpression' strOperator' rightExpression' leftParens' rightParens
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateUniqueNode,The method has 7 parameters. Parameters: dbUrl' jsonProperties' indexName' key' value' uniqueness' response
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateRelationship,The method has 6 parameters. Parameters: dbUrl' startNodeId' endNodeId' name' jsonProperties' response
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateUniqueRelationship,The method has 10 parameters. Parameters: dbUrl' startNodeId' endNodeId' name' jsonProperties' indexName' key' value' uniqueness' response
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationshipsOnNode,The method has 5 parameters. Parameters: dbUrl' nodeId' direction' relationships' response
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddNodeToIndex,The method has 6 parameters. Parameters: dbUrl' nodeId' indexName' key' value' response
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddNodeToIndex,The method has 6 parameters. Parameters: dbUrl' nodeSelf' indexName' key' value' response
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddRelationshipToIndex,The method has 6 parameters. Parameters: dbUrl' relationshipId' indexName' key' value' response
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddRelationshipToIndex,The method has 6 parameters. Parameters: dbUrl' relationshipself' indexName' key' value' response
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveNodeFromIndex,The method has 5 parameters. Parameters: dbUrl' nodeId' indexName' key' value
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveRelationshipFromIndex,The method has 5 parameters. Parameters: dbUrl' relationshipId' indexName' key' value
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetNode,The method has 5 parameters. Parameters: dbUrl' indexName' key' value' response
Long Parameter List,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationship,The method has 5 parameters. Parameters: dbUrl' indexName' key' value' response
Long Statement,Neo4jRestNet.Core,BatchRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchRelationshipStore.cs,CreateUniqueRelationship,The length of the statement  "			return _batchStore.CreateUniqueRelationship(connection' startNode' endNode' name' properties' indexName' key' value' uniqueness); " is 129.
Long Statement,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,Execute,The length of the statement  "			var status = HttpRest.Post(Connection.GetServiceRoot(connection.DbUrl).Batch' jsonJobs.ToString(Formatting.None' new IsoDateTimeConverter())' out response); " is 156.
Long Statement,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,ParseJsonResponse,The length of the statement  "						_jobs[id].GraphObject = jobResponse["body"].Value<JArray>().Select(objBody => ParseJsonGraphObject((JObject)objBody' _jobs[id].ReloadProperties)).ToList(); " is 155.
Long Statement,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,GetGraphObject,The length of the statement  "			return (from graphObj in (IEnumerable<IGraphObject>) _jobs[(int) graphObjects.First().Id].GraphObject select (T) graphObj).ToList(); " is 132.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateRelationship,The length of the statement  "			var status = Neo4jRestApi.CreateRelationship(connection.DbUrl' startNode.Id' endNode.Id' name' properties.ToString()' out response); " is 132.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateUniqueRelationship,The length of the statement  "			var status = Neo4jRestApi.CreateUniqueRelationship(connection.DbUrl' startNode.Id' endNode.Id' name' properties.ToString()' indexName' key' value' uniqueness' out response); " is 173.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,AddToIndex,The length of the statement  "			var status = Neo4jRestApi.AddRelationshipToIndex(connection.DbUrl' relationship.Id' indexName' key' value' out response); " is 121.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,RemoveFromIndex,The length of the statement  "				throw new Exception(string.Format("Error remove relationship from index (relationship id:{0} index name:{1} http response:{2})"' relationship.Id' indexName' status)); " is 166.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,RemoveFromIndex,The length of the statement  "				throw new Exception(string.Format("Error remove relationship from index (relationship id:{0} index name:{1} key:{2} http response:{3})"' relationship.Id' indexName' key' status)); " is 179.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,RemoveFromIndex,The length of the statement  "				throw new Exception(string.Format("Error remove relationship from index (relationship id:{0} index name:{1} key:{2} http response:{3})"' relationship.Id' indexName' key' status)); " is 179.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,GetProperties,The length of the statement  "				throw new Exception(string.Format("Error retrieving properties on relationship (relationship id:{0} http response:{1})"' Id' status)); " is 134.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,SaveProperties,The length of the statement  "				throw new Exception(string.Format("Error setting properties on relationship (relationship id:{0} http response:{1})"' Id' status)); " is 131.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,ParseRelationshipJson,The length of the statement  "					relationships.AddRange(from JObject jsonRelationship in jo["root"] select CreateRelationshipFromJson(jsonRelationship)); " is 120.
Long Statement,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,CreateRelationshipFromJson,The length of the statement  "			return new Relationship(new RestRelationshipStore(self.Value<string>()' relationshipJson.ToString(Formatting.None' new IsoDateTimeConverter()))' Properties.ParseJson(properties.ToString(Formatting.None' new IsoDateTimeConverter()))); " is 233.
Long Statement,Neo4jRestNet.Core,Encryption,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\EncryptId.cs,Decrypt,The length of the statement  "				byte[] encryptedData = Convert.FromBase64String(textToBeDecrypted.Replace('-'' '/').Replace('_'' '+')); // replace reserved HTTP charactors " is 139.
Long Statement,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,CreateUniqueNode,The length of the statement  "			var status = Neo4jRestApi.CreateUniqueNode(connection.DbUrl' properties.ToString()' indexName' key' value' uniqueness' out response); " is 133.
Long Statement,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,RemoveFromIndex,The length of the statement  "				throw new Exception(string.Format("Error remove node from index (node id:{0} index name:{1} http response:{2})"' node.Id' indexName' status)); " is 142.
Long Statement,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,RemoveFromIndex,The length of the statement  "				throw new Exception(string.Format("Error remove node from index (node id:{0} index name:{1} key:{2} http response:{3})"' node.Id' indexName' key' status)); " is 155.
Long Statement,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,RemoveFromIndex,The length of the statement  "				throw new Exception(string.Format("Error remove node from index (node id:{0} index name:{1} key:{2} http response:{3})"' node.Id' indexName' key' status)); " is 155.
Long Statement,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,CreateNodeFromJson,The length of the statement  "			return new Node(new RestNodeStore(self.Value<string>()' nodeJson.ToString(Formatting.None' new IsoDateTimeConverter()))' Properties.ParseJson(properties.ToString(Formatting.None' new IsoDateTimeConverter()))); " is 209.
Long Statement,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,GetRelationships,The length of the statement  "				throw new Exception(string.Format("Error retrieving relationships on node (node id:{0} http response:{1})"' Id' status)); " is 121.
Long Statement,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateUniqueRelationship,The length of the statement  "			return CreateUniqueRelationship(startNode' endNode' name.ToString()' indexName.ToString()' key.ToString()' value' uniqueness' properties' relationshipStore' connection); " is 169.
Long Statement,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,CreateUniqueRelationship,The length of the statement  "			return relationshipStore.CreateUniqueRelationship(connection' startNode' endNode' name' properties' indexName' key' value' uniqueness); " is 135.
Long Statement,Neo4jRestNet.Core,Relationship,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\Relationship.cs,RemoveFromIndex,The length of the statement  "			return RemoveFromIndex(relationship' indexName.ToString()' key == null ? null : key.ToString()' value' relationshipStore' connection); " is 134.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherDelete,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherDelete.cs,Node,The length of the statement  "			Append("{0}"' propertyName.Aggregate(new StringBuilder()' (sb' propName) => sb.AppendFormat("{0}{1}.{2}"' sb.Length == 0 ? string.Empty : "'"' name' propName))); " is 161.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherDelete,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherDelete.cs,Node,The length of the statement  "			Append("{0}"' propertyName.Aggregate(new StringBuilder()' (sb' propName) => sb.AppendFormat("{0}{1}.{2}"' sb.Length == 0 ? string.Empty : "'"' name' propName.ToString()))); " is 172.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherDelete,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherDelete.cs,Relationship,The length of the statement  "			Append("{0}"' propertyName.Aggregate(new StringBuilder()' (sb' propName) => sb.AppendFormat("{0}{1}.{2}"' sb.Length == 0 ? string.Empty : "'"' name' propName))); " is 161.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherDelete,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherDelete.cs,Relationship,The length of the statement  "			Append("{0}"' propertyName.Aggregate(new StringBuilder()' (sb' propName) => sb.AppendFormat("{0}{1}.{2}"' sb.Length == 0 ? string.Empty : "'"' name' propName.ToString()))); " is 172.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherOrderBy,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherOrderBy.cs,OrderByClause,The length of the statement  "			_sb.AppendFormat("{0} {1}.{2}{4} {3}"' _isStringEmpty ? string.Empty : "'"' name' property' order == Order.Decending ? "DESC" : string.Empty' optional ? "?" : string.Empty); " is 173.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherWhere,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherWhere.cs,In,The length of the statement  "				items.Aggregate(new StringBuilder()' (sb' item) => sb.AppendFormat("{1}{2}{0}{2}"' item' sb.Length > 0 ? "'" : string.Empty' typeof(T) == typeof(string) ? "'" : string.Empty)))); " is 178.
Long Statement,Neo4jRestNet.Core.CypherQuery,CypherReturn,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\CypherReturn.cs,Count,The length of the statement  "			_sb.AppendFormat("{1} count({2}{0})"' name' _isStringEmpty ? string.Empty : "'"' distinct ? "distinct " : string.Empty); " is 120.
Long Statement,Neo4jRestNet.Core.CypherQuery,ParseWhereLambda,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\CypherQuery\ParseWhereLambda.cs,Parse,The length of the statement  "					sbFilter.AppendFormat(body.Type == typeof (string) ? "'{0}'" : "{0}"' Expression.Lambda(body).Compile().DynamicInvoke()); " is 121.
Long Statement,Neo4jRestNet.ExpressionTreeParser,ExpressionParser,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\ExpressionTreeParser\ExpressionParser.cs,ParseExpression,The length of the statement  "									assignExpressions.Add(Expression.Constant(String.Format("'{0}'"' Expression.Lambda(mce.Object).Compile().DynamicInvoke().ToString()))); " is 135.
Long Statement,Neo4jRestNet.ExpressionTreeParser,ExpressionParser,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\ExpressionTreeParser\ExpressionParser.cs,GetAssignExpression,The length of the statement  "					return Expression.Assign(parameter' Expression.NewArrayInit(expression.Type.GetElementType()' ((NewArrayExpression)expression).Expressions)); " is 141.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,In,The length of the statement  "			var relationships = relationshipName.Aggregate(new StringBuilder()' (sb' item) => sb.AppendFormat("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 154.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,InE,The length of the statement  "			var relationships = relationshipName.Aggregate(new StringBuilder()' (sb' item) => sb.AppendFormat("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 154.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,InV,The length of the statement  "			var relationships = relationshipName.Aggregate(new StringBuilder()' (sb' item) => sb.AppendFormat("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 154.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,Out,The length of the statement  "			var relationships = relationshipName.Aggregate(new StringBuilder()' (sb' item) => sb.AppendFormat("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 154.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,OutE,The length of the statement  "			var relationships = relationshipName.Aggregate(new StringBuilder()' (sb' item) => sb.AppendFormat("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 154.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,OutV,The length of the statement  "			var relationships = relationshipName.Aggregate(new StringBuilder()' (sb' item) => sb.AppendFormat("{1}'{0}'"' item' sb.Length == 0 ? string.Empty : "'")); " is 154.
Long Statement,Neo4jRestNet.GremlinPlugin,GremlinScriptCommands,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\GremlinScriptCommands.cs,Array,The length of the statement  "				items.Aggregate(new StringBuilder()' (sb' item) => sb.AppendFormat("{1}{2}{0}{2}"' item' sb.Length > 0 ? "'" : string.Empty' typeof(T) == typeof(string) ? "'" : string.Empty)))); " is 178.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateNode,The length of the statement  "			return HttpRest.Post(Connection.GetServiceRoot(dbUrl).Node' string.IsNullOrWhiteSpace(jsonProperties) ? null : jsonProperties' out response); " is 141.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateUniqueNode,The length of the statement  "			return HttpRest.Post(string.Concat(Connection.GetServiceRoot(dbUrl).NodeIndex' "/"' indexName' "?uniqueness="' uniqueness)' jo.ToString(Formatting.None' new IsoDateTimeConverter())' out response); " is 196.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertiesOnNode,The length of the statement  "			return HttpRest.Put(string.Concat(Connection.GetServiceRoot(dbUrl).Node' "/"' nodeId.ToString()' "/properties")' jsonProperties); " is 129.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertiesOnNode,The length of the statement  "			return HttpRest.Get(string.Concat(Connection.GetServiceRoot(dbUrl).Node' "/"' nodeId.ToString()' "/properties")' out response); " is 127.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertyOnNode,The length of the statement  "			return HttpRest.Put(string.Concat(Connection.GetServiceRoot(dbUrl).Node' "/"' nodeId.ToString()' "/properties/"' propertyName)' " is 127.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertyOnNode,The length of the statement  "			return HttpRest.Get(string.Concat(Connection.GetServiceRoot(dbUrl).Node' "/"' nodeId.ToString()' "/properties/"' propertyName)' out response); " is 142.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemovePropertyFromNode,The length of the statement  "			return HttpRest.Delete(string.Concat(Connection.GetServiceRoot(dbUrl).Node' "/"' nodeId.ToString()' "/properties/"' propertyName)); " is 131.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateRelationship,The length of the statement  "			return HttpRest.Post(string.Concat(Connection.GetServiceRoot(dbUrl).Node' "/"' startNodeId.ToString()' "/relationships")' jo.ToString(Formatting.None' new IsoDateTimeConverter())' out response); " is 194.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateUniqueRelationship,The length of the statement  "			return HttpRest.Post(string.Concat(Connection.GetServiceRoot(dbUrl).RelationshipIndex' "/"' indexName' "?uniqueness="' uniqueness)' jo.ToString()' out response); " is 161.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertiesOnRelationship,The length of the statement  "			return HttpRest.Put(string.Concat(Connection.GetServiceRoot(dbUrl).Relationship' "/"' relationshipId.ToString()' "/properties")' jsonProperties); " is 145.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertiesOnRelationship,The length of the statement  "			return HttpRest.Get(string.Concat(Connection.GetServiceRoot(dbUrl).Relationship' "/"' relationshipId.ToString()' "/properties")' out response); " is 143.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemovePropertiesFromRelationship,The length of the statement  "			return HttpRest.Delete(string.Concat(Connection.GetServiceRoot(dbUrl).Node' "/"' relationshipId.ToString()' "/properties")); " is 124.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,SetPropertyOnRelationship,The length of the statement  "					string.Concat(Connection.GetServiceRoot(dbUrl).Relationship' "/"' relationshipId.ToString()' "/properties/"' propertyName)' " is 123.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetPropertyOnRelationship,The length of the statement  "					string.Concat(Connection.GetServiceRoot(dbUrl).Relationship' "/"' relationshipId.ToString()' "/properties/"' propertyName)' " is 123.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemovePropertyFromRelationship,The length of the statement  "			return HttpRest.Delete(string.Concat(Connection.GetServiceRoot(dbUrl).Relationship' "/"' relationshipId.ToString()' "/properties/"' " is 131.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationshipsOnNode,The length of the statement  "					string.Concat(Connection.GetServiceRoot(dbUrl).Node' "/"' nodeId.ToString()' "/relationships/"' direction.ToString()' "/"' " is 122.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateNodeIndex,The length of the statement  "			return HttpRest.Post(Connection.GetServiceRoot(dbUrl).NodeIndex' jo.ToString(Formatting.None' new IsoDateTimeConverter())' out response); " is 137.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,CreateRelationshipIndex,The length of the statement  "			return HttpRest.Post(Connection.GetServiceRoot(dbUrl).RelationshipIndex' jo.ToString(Formatting.None' new IsoDateTimeConverter())' out response); " is 145.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,AddNodeToIndex,The length of the statement  "			return HttpRest.Post(string.Concat(Connection.GetServiceRoot(dbUrl).NodeIndex' "/"' indexName)' jo.ToString(Formatting.None' new IsoDateTimeConverter())' out response); " is 168.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveNodeFromIndex,The length of the statement  "			return HttpRest.Delete(string.Concat(Connection.GetServiceRoot(dbUrl).NodeIndex' "/"' indexName' "/"' key' "/"' strValue' "/"' nodeId)); " is 136.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveNodeFromIndex,The length of the statement  "			return HttpRest.Delete(string.Concat(Connection.GetServiceRoot(dbUrl).NodeIndex' "/"' indexName' "/"' key' "/"' nodeId)); " is 121.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveRelationshipFromIndex,The length of the statement  "			return HttpRest.Delete(string.Concat(Connection.GetServiceRoot(dbUrl).RelationshipIndex' "/"' indexName' "/"' key' "/"' strValue' "/"' relationshipId)); " is 152.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveRelationshipFromIndex,The length of the statement  "			return HttpRest.Delete(string.Concat(Connection.GetServiceRoot(dbUrl).RelationshipIndex' "/"' indexName' "/"' key' "/"' relationshipId)); " is 137.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,RemoveRelationshipFromIndex,The length of the statement  "			return HttpRest.Delete(string.Concat(Connection.GetServiceRoot(dbUrl).RelationshipIndex' "/"' indexName' "/"' relationshipId)); " is 127.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetNode,The length of the statement  "			return HttpRest.Get(string.Concat(Connection.GetServiceRoot(dbUrl).NodeIndex' "/"' indexName' "/"' key' "/"' strValue)' out response); " is 134.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetNode,The length of the statement  "			return HttpRest.Get(string.Concat(Connection.GetServiceRoot(dbUrl).NodeIndex' "/"' indexName' "?query="' Uri.EscapeDataString(searchQuery))' out response); " is 155.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationship,The length of the statement  "			return HttpRest.Get(string.Concat(Connection.GetServiceRoot(dbUrl).RelationshipIndex' "/"' indexName' "/"' key' "/"' strValue)' out response); " is 142.
Long Statement,Neo4jRestNet.Rest,Neo4jRestApi,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Rest\Neo4jRestApi.cs,GetRelationship,The length of the statement  "			return HttpRest.Get(string.Concat(Connection.GetServiceRoot(dbUrl).RelationshipIndex' "/"' indexName' "?query="' Uri.EscapeDataString(searchQuery))' out response); " is 163.
Magic Number,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,ParseJsonGraphObject,The following statement contains a magic number: if (selfArray.Length < 2)  			{  				throw new Exception("Invalid response from batch");  			}
Magic Number,Neo4jRestNet.Core,BatchStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\BatchStore.cs,ParseJsonGraphObject,The following statement contains a magic number: switch (selfArray[selfArray.Length - 2])  			{  				case "node":  					var node = RestNodeStore.CreateNodeFromJson(jsonGraphObject);  					if (reloadProperties)  					{  						node.Properties = null;  					}    					return node;    				case "relationship":  					var relationship = RestRelationshipStore.CreateRelationshipFromJson(jsonGraphObject);  					if (reloadProperties)  					{  						relationship.Properties = null;  					}    					return relationship;    				default:  					throw new Exception("Invalid response from batch");  			}
Magic Number,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,IsSelfARelationship,The following statement contains a magic number: return (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "relationship");
Magic Number,Neo4jRestNet.Core,RestRelationshipStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestRelationshipStore.cs,IsSelfARelationship,The following statement contains a magic number: return (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "relationship");
Magic Number,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,IsSelfANode,The following statement contains a magic number: return (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "node");
Magic Number,Neo4jRestNet.Core,RestNodeStore,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\Core\RestNodeStore.cs,IsSelfANode,The following statement contains a magic number: return (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "node");
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (JArray jRow in jaData)  			{  				var row = new List<object>();  				foreach (var jCol in jRow)  				{  					switch (jCol.Type)  					{  						case JTokenType.String:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  								colIndex++;  							}  							break;    						case JTokenType.Object:  							if (jCol["self"] == null)  							{  								row.Add(jCol.ToString());    								if (initColumns)  								{  									dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  									colIndex++;  								}  							}  							else  							{  								string self = jCol["self"].ToString();  								string[] selfArray = self.Split('/');  								if (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "node"  )  								{  									row.Add(RestNodeStore.CreateNodeFromJson((JObject)jCol));    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(Node));  										colIndex++;  									}  								}  								else if (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "relationship")  								{  									row.Add(RestRelationshipStore.CreateRelationshipFromJson((JObject)jCol));    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(Relationship));  										colIndex++;  									}  								}  								else  								{  									// Not a Node or Relationship - return as string  									row.Add(jCol.ToString());    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  										colIndex++;  									}  								}  							}  							break;    						case JTokenType.Integer:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(int));  								colIndex++;  							}  							break;    						case JTokenType.Float:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(float));  								colIndex++;  							}  							break;    						case JTokenType.Date:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(DateTime));  								colIndex++;  							}  							break;    						case JTokenType.Boolean:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(bool));  								colIndex++;  							}  							break;    						default:  							row.Add(jCol.ToString());    							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  								colIndex++;  							}  							break;  					}  				}    				initColumns = false;  				var dtRow = dt.NewRow();  				dtRow.ItemArray = row.ToArray();  				dt.Rows.Add(dtRow);  			}
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (JArray jRow in jaData)  			{  				var row = new List<object>();  				foreach (var jCol in jRow)  				{  					switch (jCol.Type)  					{  						case JTokenType.String:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  								colIndex++;  							}  							break;    						case JTokenType.Object:  							if (jCol["self"] == null)  							{  								row.Add(jCol.ToString());    								if (initColumns)  								{  									dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  									colIndex++;  								}  							}  							else  							{  								string self = jCol["self"].ToString();  								string[] selfArray = self.Split('/');  								if (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "node"  )  								{  									row.Add(RestNodeStore.CreateNodeFromJson((JObject)jCol));    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(Node));  										colIndex++;  									}  								}  								else if (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "relationship")  								{  									row.Add(RestRelationshipStore.CreateRelationshipFromJson((JObject)jCol));    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(Relationship));  										colIndex++;  									}  								}  								else  								{  									// Not a Node or Relationship - return as string  									row.Add(jCol.ToString());    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  										colIndex++;  									}  								}  							}  							break;    						case JTokenType.Integer:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(int));  								colIndex++;  							}  							break;    						case JTokenType.Float:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(float));  								colIndex++;  							}  							break;    						case JTokenType.Date:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(DateTime));  								colIndex++;  							}  							break;    						case JTokenType.Boolean:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(bool));  								colIndex++;  							}  							break;    						default:  							row.Add(jCol.ToString());    							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  								colIndex++;  							}  							break;  					}  				}    				initColumns = false;  				var dtRow = dt.NewRow();  				dtRow.ItemArray = row.ToArray();  				dt.Rows.Add(dtRow);  			}
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (JArray jRow in jaData)  			{  				var row = new List<object>();  				foreach (var jCol in jRow)  				{  					switch (jCol.Type)  					{  						case JTokenType.String:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  								colIndex++;  							}  							break;    						case JTokenType.Object:  							if (jCol["self"] == null)  							{  								row.Add(jCol.ToString());    								if (initColumns)  								{  									dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  									colIndex++;  								}  							}  							else  							{  								string self = jCol["self"].ToString();  								string[] selfArray = self.Split('/');  								if (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "node"  )  								{  									row.Add(RestNodeStore.CreateNodeFromJson((JObject)jCol));    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(Node));  										colIndex++;  									}  								}  								else if (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "relationship")  								{  									row.Add(RestRelationshipStore.CreateRelationshipFromJson((JObject)jCol));    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(Relationship));  										colIndex++;  									}  								}  								else  								{  									// Not a Node or Relationship - return as string  									row.Add(jCol.ToString());    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  										colIndex++;  									}  								}  							}  							break;    						case JTokenType.Integer:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(int));  								colIndex++;  							}  							break;    						case JTokenType.Float:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(float));  								colIndex++;  							}  							break;    						case JTokenType.Date:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(DateTime));  								colIndex++;  							}  							break;    						case JTokenType.Boolean:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(bool));  								colIndex++;  							}  							break;    						default:  							row.Add(jCol.ToString());    							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  								colIndex++;  							}  							break;  					}  				}    				initColumns = false;  				var dtRow = dt.NewRow();  				dtRow.ItemArray = row.ToArray();  				dt.Rows.Add(dtRow);  			}
Magic Number,Neo4jRestNet.GremlinPlugin,Gremlin,C:\repos\SepiaGroup_Neo4jRestNet\Neo4jRestNet\GremlinPlugin\Gremlin.cs,GetTable,The following statement contains a magic number: foreach (JArray jRow in jaData)  			{  				var row = new List<object>();  				foreach (var jCol in jRow)  				{  					switch (jCol.Type)  					{  						case JTokenType.String:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  								colIndex++;  							}  							break;    						case JTokenType.Object:  							if (jCol["self"] == null)  							{  								row.Add(jCol.ToString());    								if (initColumns)  								{  									dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  									colIndex++;  								}  							}  							else  							{  								string self = jCol["self"].ToString();  								string[] selfArray = self.Split('/');  								if (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "node"  )  								{  									row.Add(RestNodeStore.CreateNodeFromJson((JObject)jCol));    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(Node));  										colIndex++;  									}  								}  								else if (selfArray.Length > 2 && selfArray[selfArray.Length - 2] == "relationship")  								{  									row.Add(RestRelationshipStore.CreateRelationshipFromJson((JObject)jCol));    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(Relationship));  										colIndex++;  									}  								}  								else  								{  									// Not a Node or Relationship - return as string  									row.Add(jCol.ToString());    									if (initColumns)  									{  										dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  										colIndex++;  									}  								}  							}  							break;    						case JTokenType.Integer:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(int));  								colIndex++;  							}  							break;    						case JTokenType.Float:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(float));  								colIndex++;  							}  							break;    						case JTokenType.Date:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(DateTime));  								colIndex++;  							}  							break;    						case JTokenType.Boolean:  							row.Add(jCol.ToString());  							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(bool));  								colIndex++;  							}  							break;    						default:  							row.Add(jCol.ToString());    							if (initColumns)  							{  								dt.Columns.Add(jaColumns[colIndex].ToString()' typeof(string));  								colIndex++;  							}  							break;  					}  				}    				initColumns = false;  				var dtRow = dt.NewRow();  				dtRow.ItemArray = row.ToArray();  				dt.Rows.Add(dtRow);  			}
