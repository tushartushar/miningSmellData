Implementation smell,Namespace,Class,File,Method,Description
Long Method,Samples.FastZipDemo,MainClass,C:\repos\Gremlin2_Fb2Fix\SharpZipLib\samples\cs\FastZip\Main.cs,Run,The method has 190 lines of code.
Complex Method,Samples.FastZipDemo,MainClass,C:\repos\Gremlin2_Fb2Fix\SharpZipLib\samples\cs\FastZip\Main.cs,ListZipFile,Cyclomatic complexity of the method is 10
Complex Method,Samples.FastZipDemo,MainClass,C:\repos\Gremlin2_Fb2Fix\SharpZipLib\samples\cs\FastZip\Main.cs,Run,Cyclomatic complexity of the method is 83
Long Statement,Samples.FastZipDemo,MainClass,C:\repos\Gremlin2_Fb2Fix\SharpZipLib\samples\cs\FastZip\Main.cs,Run,The length of the statement  "		Console.WriteLine ("FastZip v0.5\n" + "  Usage: FastZip {options} operation args\n" + "Operation Options: (only one permitted)\n" + "  -x zipfile targetdir : Extract files from Zip\n" + "  -c zipfile sourcedir : Create zip file\n" + "  -l zipfile|dir       : List elements\n" + "\n" + "Behavioural options:\n" + "  -dir={dirFilter}\n" + "  -file={fileFilter}\n" + "  -e Process empty directories\n" + "  -i Progress interval in seconds\n" + "  -p Show file progress\n" + "  -r Recurse directories\n" + "  -v Verbose output\n" + "  -oa Restore file attributes on extract\n" + "  -ot Restore file date time on extract\n" + "  -overwrite=prompt|always|never   : Overwrite on extract handling\n"); " is 693.
Magic Number,Samples.FastZipDemo,MainClass,C:\repos\Gremlin2_Fb2Fix\SharpZipLib\samples\cs\FastZip\Main.cs,Run,The following statement contains a magic number: switch (op) {  case Operation.Create:  	if (argCount == 2) {  		Console.WriteLine ("Creating Zip");  		fastZip.CreateZip (arg1' arg2' recurse' fileFilter' dirFilter);  	}  	else  		Console.WriteLine ("Invalid arguments");  	break;  case Operation.Extract:  	if (argCount == 2) {  		Console.WriteLine ("Extracting Zip");  		fastZip.ExtractZip (arg1' arg2' overwrite' confirmOverwrite' fileFilter' dirFilter' recurse);  	}  	else  		Console.WriteLine ("zipfile and target directory not specified");  	break;  case Operation.List:  	if (File.Exists (arg1)) {  		ListZipFile (arg1' fileFilter' dirFilter);  	}  	else if (Directory.Exists (arg1)) {  		ListFileSystem (arg1' recurse' fileFilter' dirFilter);  	}  	else {  		Console.WriteLine ("No valid list file or directory");  	}  	break;  case Operation.Unknown:  	Console.WriteLine ("FastZip v0.5\n" + "  Usage: FastZip {options} operation args\n" + "Operation Options: (only one permitted)\n" + "  -x zipfile targetdir : Extract files from Zip\n" + "  -c zipfile sourcedir : Create zip file\n" + "  -l zipfile|dir       : List elements\n" + "\n" + "Behavioural options:\n" + "  -dir={dirFilter}\n" + "  -file={fileFilter}\n" + "  -e Process empty directories\n" + "  -i Progress interval in seconds\n" + "  -p Show file progress\n" + "  -r Recurse directories\n" + "  -v Verbose output\n" + "  -oa Restore file attributes on extract\n" + "  -ot Restore file date time on extract\n" + "  -overwrite=prompt|always|never   : Overwrite on extract handling\n");  	break;  case Operation.Error:  	// Do nothing for now...  	break;  }  
Magic Number,Samples.FastZipDemo,MainClass,C:\repos\Gremlin2_Fb2Fix\SharpZipLib\samples\cs\FastZip\Main.cs,Run,The following statement contains a magic number: switch (op) {  case Operation.Create:  	if (argCount == 2) {  		Console.WriteLine ("Creating Zip");  		fastZip.CreateZip (arg1' arg2' recurse' fileFilter' dirFilter);  	}  	else  		Console.WriteLine ("Invalid arguments");  	break;  case Operation.Extract:  	if (argCount == 2) {  		Console.WriteLine ("Extracting Zip");  		fastZip.ExtractZip (arg1' arg2' overwrite' confirmOverwrite' fileFilter' dirFilter' recurse);  	}  	else  		Console.WriteLine ("zipfile and target directory not specified");  	break;  case Operation.List:  	if (File.Exists (arg1)) {  		ListZipFile (arg1' fileFilter' dirFilter);  	}  	else if (Directory.Exists (arg1)) {  		ListFileSystem (arg1' recurse' fileFilter' dirFilter);  	}  	else {  		Console.WriteLine ("No valid list file or directory");  	}  	break;  case Operation.Unknown:  	Console.WriteLine ("FastZip v0.5\n" + "  Usage: FastZip {options} operation args\n" + "Operation Options: (only one permitted)\n" + "  -x zipfile targetdir : Extract files from Zip\n" + "  -c zipfile sourcedir : Create zip file\n" + "  -l zipfile|dir       : List elements\n" + "\n" + "Behavioural options:\n" + "  -dir={dirFilter}\n" + "  -file={fileFilter}\n" + "  -e Process empty directories\n" + "  -i Progress interval in seconds\n" + "  -p Show file progress\n" + "  -r Recurse directories\n" + "  -v Verbose output\n" + "  -oa Restore file attributes on extract\n" + "  -ot Restore file date time on extract\n" + "  -overwrite=prompt|always|never   : Overwrite on extract handling\n");  	break;  case Operation.Error:  	// Do nothing for now...  	break;  }  
Magic Number,Samples.FastZipDemo,MainClass,C:\repos\Gremlin2_Fb2Fix\SharpZipLib\samples\cs\FastZip\Main.cs,Run,The following statement contains a magic number: if (argCount == 2) {  	Console.WriteLine ("Creating Zip");  	fastZip.CreateZip (arg1' arg2' recurse' fileFilter' dirFilter);  }  else  	Console.WriteLine ("Invalid arguments");  
Magic Number,Samples.FastZipDemo,MainClass,C:\repos\Gremlin2_Fb2Fix\SharpZipLib\samples\cs\FastZip\Main.cs,Run,The following statement contains a magic number: if (argCount == 2) {  	Console.WriteLine ("Extracting Zip");  	fastZip.ExtractZip (arg1' arg2' overwrite' confirmOverwrite' fileFilter' dirFilter' recurse);  }  else  	Console.WriteLine ("zipfile and target directory not specified");  
Missing Default,Samples.FastZipDemo,MainClass,C:\repos\Gremlin2_Fb2Fix\SharpZipLib\samples\cs\FastZip\Main.cs,Run,The following switch statement is missing a default case: switch (op) {  case Operation.Create:  	if (argCount == 2) {  		Console.WriteLine ("Creating Zip");  		fastZip.CreateZip (arg1' arg2' recurse' fileFilter' dirFilter);  	}  	else  		Console.WriteLine ("Invalid arguments");  	break;  case Operation.Extract:  	if (argCount == 2) {  		Console.WriteLine ("Extracting Zip");  		fastZip.ExtractZip (arg1' arg2' overwrite' confirmOverwrite' fileFilter' dirFilter' recurse);  	}  	else  		Console.WriteLine ("zipfile and target directory not specified");  	break;  case Operation.List:  	if (File.Exists (arg1)) {  		ListZipFile (arg1' fileFilter' dirFilter);  	}  	else if (Directory.Exists (arg1)) {  		ListFileSystem (arg1' recurse' fileFilter' dirFilter);  	}  	else {  		Console.WriteLine ("No valid list file or directory");  	}  	break;  case Operation.Unknown:  	Console.WriteLine ("FastZip v0.5\n" + "  Usage: FastZip {options} operation args\n" + "Operation Options: (only one permitted)\n" + "  -x zipfile targetdir : Extract files from Zip\n" + "  -c zipfile sourcedir : Create zip file\n" + "  -l zipfile|dir       : List elements\n" + "\n" + "Behavioural options:\n" + "  -dir={dirFilter}\n" + "  -file={fileFilter}\n" + "  -e Process empty directories\n" + "  -i Progress interval in seconds\n" + "  -p Show file progress\n" + "  -r Recurse directories\n" + "  -v Verbose output\n" + "  -oa Restore file attributes on extract\n" + "  -ot Restore file date time on extract\n" + "  -overwrite=prompt|always|never   : Overwrite on extract handling\n");  	break;  case Operation.Error:  	// Do nothing for now...  	break;  }  
