Implementation smell,Namespace,Class,File,Method,Description
Complex Method,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,GetToken,Cyclomatic complexity of the method is 13
Complex Method,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseValue,Cyclomatic complexity of the method is 9
Complex Method,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,Escape,Cyclomatic complexity of the method is 24
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: fixed (char* p = json) {  	switch (token) {  	case JsonToken.True:  		Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return true;  	case JsonToken.False:  		Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  		index += 5;  		return false;  	case JsonToken.Null:  		Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return null;  	default:  		throw new ArgumentException ("参数错误!");  	}  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: fixed (char* p = json) {  	switch (token) {  	case JsonToken.True:  		Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return true;  	case JsonToken.False:  		Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  		index += 5;  		return false;  	case JsonToken.Null:  		Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return null;  	default:  		throw new ArgumentException ("参数错误!");  	}  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: fixed (char* p = json) {  	switch (token) {  	case JsonToken.True:  		Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return true;  	case JsonToken.False:  		Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  		index += 5;  		return false;  	case JsonToken.Null:  		Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return null;  	default:  		throw new ArgumentException ("参数错误!");  	}  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: fixed (char* p = json) {  	switch (token) {  	case JsonToken.True:  		Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return true;  	case JsonToken.False:  		Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  		index += 5;  		return false;  	case JsonToken.Null:  		Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return null;  	default:  		throw new ArgumentException ("参数错误!");  	}  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: fixed (char* p = json) {  	switch (token) {  	case JsonToken.True:  		Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return true;  	case JsonToken.False:  		Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  		index += 5;  		return false;  	case JsonToken.Null:  		Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return null;  	default:  		throw new ArgumentException ("参数错误!");  	}  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: fixed (char* p = json) {  	switch (token) {  	case JsonToken.True:  		Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return true;  	case JsonToken.False:  		Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  		index += 5;  		return false;  	case JsonToken.Null:  		Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  		index += 4;  		return null;  	default:  		throw new ArgumentException ("参数错误!");  	}  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: switch (token) {  case JsonToken.True:  	Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return true;  case JsonToken.False:  	Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  	index += 5;  	return false;  case JsonToken.Null:  	Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return null;  default:  	throw new ArgumentException ("参数错误!");  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: switch (token) {  case JsonToken.True:  	Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return true;  case JsonToken.False:  	Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  	index += 5;  	return false;  case JsonToken.Null:  	Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return null;  default:  	throw new ArgumentException ("参数错误!");  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: switch (token) {  case JsonToken.True:  	Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return true;  case JsonToken.False:  	Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  	index += 5;  	return false;  case JsonToken.Null:  	Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return null;  default:  	throw new ArgumentException ("参数错误!");  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: switch (token) {  case JsonToken.True:  	Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return true;  case JsonToken.False:  	Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  	index += 5;  	return false;  case JsonToken.Null:  	Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return null;  default:  	throw new ArgumentException ("参数错误!");  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: switch (token) {  case JsonToken.True:  	Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return true;  case JsonToken.False:  	Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  	index += 5;  	return false;  case JsonToken.Null:  	Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return null;  default:  	throw new ArgumentException ("参数错误!");  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: switch (token) {  case JsonToken.True:  	Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return true;  case JsonToken.False:  	Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  	index += 5;  	return false;  case JsonToken.Null:  	Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  	index += 4;  	return null;  default:  	throw new ArgumentException ("参数错误!");  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: Assert (string.CompareOrdinal ("true"' new string (p' index' 4)) != 0' "JSON格式错误!");  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: index += 4;  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: Assert (string.CompareOrdinal ("false"' new string (p' index' 5)) != 0' "JSON格式错误!");  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: index += 5;  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: Assert (string.CompareOrdinal ("null"' new string (p' index' 4)) != 0' "JSON格式错误!");  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,ParseOtherValue,The following statement contains a magic number: index += 4;  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,IsNumberChar,The following statement contains a magic number: return (ch - '0' >= 0) && (ch - '0' <= 9);  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,Escape,The following statement contains a magic number: switch (*(++p)) {  case '"':  case '\\':  case '/':  	ch = *p;  	break;  case 'b':  	ch = '\b';  	break;  case 'f':  	ch = '\f';  	break;  case 'n':  	ch = '\n';  	break;  case 'r':  	ch = '\r';  	break;  case 't':  	ch = '\t';  	break;  case 'u':  	ch = Unicode (++p);  	p += 3;  	break;  }  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,Escape,The following statement contains a magic number: p += 3;  
Magic Number,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,Unicode,The following statement contains a magic number: return (char)int.Parse (new string (p' 0' 4)' NumberStyles.HexNumber);  
Missing Default,JsonHelper,JsonParser,C:\repos\wowhy_json\JsonHelper\JsonHelper\JsonParser.cs,Escape,The following switch statement is missing a default case: switch (*(++p)) {  case '"':  case '\\':  case '/':  	ch = *p;  	break;  case 'b':  	ch = '\b';  	break;  case 'f':  	ch = '\f';  	break;  case 'n':  	ch = '\n';  	break;  case 'r':  	ch = '\r';  	break;  case 't':  	ch = '\t';  	break;  case 'u':  	ch = Unicode (++p);  	p += 3;  	break;  }  
