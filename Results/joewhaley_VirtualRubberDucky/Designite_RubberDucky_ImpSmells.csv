Implementation smell,Namespace,Class,File,Method,Description
Long Method,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The method has 203 lines of code.
Complex Method,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,Cyclomatic complexity of the method is 12
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,StringToVirtualKeyCode,The length of the statement  "		if (String.Equals (value' "CAPS"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "CAPSLOCK"' StringComparison.OrdinalIgnoreCase)) " is 143.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,StringToVirtualKeyCode,The length of the statement  "		if (String.Equals (value' "WINDOWS"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "GUI"' StringComparison.OrdinalIgnoreCase)) " is 141.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,StringToVirtualKeyCode,The length of the statement  "		if (String.Equals (value' "MENU"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "APP"' StringComparison.OrdinalIgnoreCase)) " is 138.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,StringToDirectInputKeyCode,The length of the statement  "		if (String.Equals (value' "CAPS"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "CAPSLOCK"' StringComparison.OrdinalIgnoreCase)) " is 143.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,StringToDirectInputKeyCode,The length of the statement  "		if (String.Equals (value' "WINDOWS"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "GUI"' StringComparison.OrdinalIgnoreCase)) " is 141.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,StringToDirectInputKeyCode,The length of the statement  "		if (String.Equals (value' "MENU"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "APP"' StringComparison.OrdinalIgnoreCase)) " is 138.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The length of the statement  "	if (String.Equals (a [0]' "DEFAULTDELAY"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [0]' "DEFAULT_DELAY"' StringComparison.OrdinalIgnoreCase)) { " is 158.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The length of the statement  "	if (String.Equals (a [0]' "GUI"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [0]' "WINDOWS"' StringComparison.OrdinalIgnoreCase)) { " is 143.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The length of the statement  "	if (String.Equals (a [0]' "APP"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [0]' "MENU"' StringComparison.OrdinalIgnoreCase)) { " is 140.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The length of the statement  "	if (String.Equals (a [0]' "CONTROL"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [0]' "CTRL"' StringComparison.OrdinalIgnoreCase)) { " is 144.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The length of the statement  "	if (String.Equals (a [0]' "CTRL-ALT"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [0]' "CONTROL-ALT"' StringComparison.OrdinalIgnoreCase)) { " is 152.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The length of the statement  "	if (String.Equals (a [0]' "CTRL-SHIFT"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [0]' "CONTROL-SHIFT"' StringComparison.OrdinalIgnoreCase)) { " is 156.
Long Statement,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The length of the statement  "		UseDirectKeyMode = String.Equals (a [1]' "on"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [1]' "true"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [1]' "1"' StringComparison.OrdinalIgnoreCase); " is 218.
Long Statement,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,OnLoad,The length of the statement  "	NativeMethods.RegisterHotKey (Handle' GetHashCode ()' NativeMethods.MOD_CONTROL | NativeMethods.MOD_ALT' VirtualKeyCode.VK_P); " is 126.
Long Statement,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,RefreshWindow,The length of the statement  "	NativeMethods.RedrawWindow (window' IntPtr.Zero' IntPtr.Zero' NativeMethods.RedrawWindowFlags.Frame | NativeMethods.RedrawWindowFlags.Invalidate | NativeMethods.RedrawWindowFlags.UpdateNow | NativeMethods.RedrawWindowFlags.AllChildren); " is 236.
Long Statement,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,IsValidWindow,The length of the statement  "	if (window == IntPtr.Zero || !NativeMethods.IsWindow (window) || window == selectedWindowHandle || window == this.Handle) { " is 123.
Long Statement,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The length of the statement  "						ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber)); " is 124.
Complex Conditional,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,IsValidWindow,The conditional expression  "window == IntPtr.Zero || !NativeMethods.IsWindow (window) || window == selectedWindowHandle || window == this.Handle"  is complex.
Empty Catch Block,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,StringToVirtualKeyCode,The method has an empty catch block.
Empty Catch Block,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,StringToDirectInputKeyCode,The method has an empty catch block.
Magic Number,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The following statement contains a magic number: if (String.Equals (a [0]' "DEFAULTDELAY"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [0]' "DEFAULT_DELAY"' StringComparison.OrdinalIgnoreCase)) {  	if (a.Length < 2) {  		Console.WriteLine ("Error: {0} needs an argument"' a [0]);  		return null;  	}  	return new DefaultDelayCommand (int.Parse (a [1]));  }  
Magic Number,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The following statement contains a magic number: if (a.Length < 2) {  	Console.WriteLine ("Error: {0} needs an argument"' a [0]);  	return null;  }  
Magic Number,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The following statement contains a magic number: if (String.Equals (a [0]' "DELAY"' StringComparison.OrdinalIgnoreCase)) {  	if (a.Length < 2) {  		Console.WriteLine ("Error: {0} needs an argument"' a [0]);  		return null;  	}  	return new DelayCommand (int.Parse (a [1]));  }  
Magic Number,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The following statement contains a magic number: if (a.Length < 2) {  	Console.WriteLine ("Error: {0} needs an argument"' a [0]);  	return null;  }  
Magic Number,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The following statement contains a magic number: if (String.Equals (a [0]' "STRING"' StringComparison.OrdinalIgnoreCase)) {  	string arg = line.Substring (7);  	if (UseDirectKeyMode)  		return new DirectStringCommand (arg' DefaultKeystrokeDelay);  	else  		return new StringCommand (arg);  }  
Magic Number,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The following statement contains a magic number: if (String.Equals (a [0]' "REPEAT"' StringComparison.OrdinalIgnoreCase)) {  	if (a.Length < 2) {  		Console.WriteLine ("Error: {0} needs an argument"' a [0]);  		return null;  	}  	if (commands.Count == 0) {  		Console.WriteLine ("Error: {0} needs a previous command"' a [0]);  		return null;  	}  	return new RepeatCommand (commands [commands.Count - 1]' int.Parse (a [1]));  }  
Magic Number,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The following statement contains a magic number: if (a.Length < 2) {  	Console.WriteLine ("Error: {0} needs an argument"' a [0]);  	return null;  }  
Magic Number,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The following statement contains a magic number: if (String.Equals (a [0]' "DIRECTINPUT"' StringComparison.OrdinalIgnoreCase)) {  	if (a.Length < 2) {  		Console.WriteLine ("Error: {0} needs an argument"' a [0]);  		return null;  	}  	UseDirectKeyMode = String.Equals (a [1]' "on"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [1]' "true"' StringComparison.OrdinalIgnoreCase) || String.Equals (a [1]' "1"' StringComparison.OrdinalIgnoreCase);  	return null;  }  
Magic Number,RubberDucky,DuckyScript,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\DuckyScript.cs,ParseCommand,The following statement contains a magic number: if (a.Length < 2) {  	Console.WriteLine ("Error: {0} needs an argument"' a [0]);  	return null;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,FindVMwareViewWindow,The following statement contains a magic number: foreach (var p in processes) {  	if (p.MainWindowHandle != IntPtr.Zero) {  		var sb = new StringBuilder (256);  		if (NativeMethods.GetClassName (p.MainWindowHandle' sb' sb.Capacity) != 0) {  			if (String.Equals (sb.ToString ()' "#32770")) {  				return p.MainWindowHandle;  			}  		}  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,FindVMwareViewWindow,The following statement contains a magic number: if (p.MainWindowHandle != IntPtr.Zero) {  	var sb = new StringBuilder (256);  	if (NativeMethods.GetClassName (p.MainWindowHandle' sb' sb.Capacity) != 0) {  		if (String.Equals (sb.ToString ()' "#32770")) {  			return p.MainWindowHandle;  		}  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,inputSimulator_Click,The following statement contains a magic number: script.sim.Mouse.MoveMouseToPositionOnVirtualDesktop (x * 65535.0 / maxX' y * 65535.0 / maxY);  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,inputSimulator_Click,The following statement contains a magic number: script.sim.Mouse.MoveMouseToPositionOnVirtualDesktop (x * 65535.0 / maxX' y * 65535.0 / maxY);  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,inputSimulator_Click,The following statement contains a magic number: Task.Run (() =>  {  	if (stealthMode) {  		NativeMethods.SendMessage (selectedWindowHandle' WM_SETREDRAW' false' 0);  	}  	try {  		script.Run (ProgressDelegate);  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		inputSimulatorButton.Enabled = true;  	});  	if (stealthMode) {  		System.Threading.Thread.Sleep (500);  		NativeMethods.InvalidateRect (selectedWindowHandle' IntPtr.Zero' true);  		NativeMethods.SendMessage (selectedWindowHandle' WM_SETREDRAW' true' 0);  		NativeMethods.InvalidateRect (selectedWindowHandle' IntPtr.Zero' true);  	}  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,inputSimulator_Click,The following statement contains a magic number: if (stealthMode) {  	System.Threading.Thread.Sleep (500);  	NativeMethods.InvalidateRect (selectedWindowHandle' IntPtr.Zero' true);  	NativeMethods.SendMessage (selectedWindowHandle' WM_SETREDRAW' true' 0);  	NativeMethods.InvalidateRect (selectedWindowHandle' IntPtr.Zero' true);  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,inputSimulator_Click,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: Task.Run (() =>  {  	try {  		using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  			var sim = new InputSimulator ();  			UInt64 bytes = 0;  			uint expectedFrameNumber = 0;  			int retries = 0;  			for (uint loopIterations = 0; ; ++loopIterations) {  				NativeMethods.SetForegroundWindow (selectedWindowHandle);  				Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  				if (result == null) {  					// No QR code (yet)' keep waiting.  					if ((++retries % 10) == 0) {  						// Regenerate QR code.  						sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  					}  					else {  						System.Threading.Thread.Sleep (SnarfPollingTime);  					}  					continue;  				}  				byte[] b = Convert.FromBase64String (result.Text);  				if (b.Length < 4) {  					ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  				if (actualFrameNumber + 1 == expectedFrameNumber) {  					if ((++retries % 64) != 0) {  						// Previous QR code' keep waiting.  						System.Threading.Thread.Sleep (SnarfPollingTime);  						continue;  					}  				}  				if (actualFrameNumber < expectedFrameNumber) {  					// Dropped a keypress?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  					continue;  				}  				if (actualFrameNumber > expectedFrameNumber) {  					// Skipped a code?  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  					continue;  				}  				if (expectedFrameNumber != actualFrameNumber) {  					ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  					break;  				}  				outStream.Write (b' 4' b.Length - 4);  				bytes += (UInt64)b.Length - 4;  				if ((b [3] & 1) == 0) {  					ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  					outStream.Close ();  					break;  				}  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				++expectedFrameNumber;  				retries = 0;  			}  		}  	}  	catch (Exception exception) {  		ProgressDelegate (exception.ToString ());  	}  	Invoke ((MethodInvoker)delegate {  		snarfDataButton.Enabled = true;  	});  });  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: try {  	using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  		var sim = new InputSimulator ();  		UInt64 bytes = 0;  		uint expectedFrameNumber = 0;  		int retries = 0;  		for (uint loopIterations = 0; ; ++loopIterations) {  			NativeMethods.SetForegroundWindow (selectedWindowHandle);  			Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  			if (result == null) {  				// No QR code (yet)' keep waiting.  				if ((++retries % 10) == 0) {  					// Regenerate QR code.  					sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  				}  				else {  					System.Threading.Thread.Sleep (SnarfPollingTime);  				}  				continue;  			}  			byte[] b = Convert.FromBase64String (result.Text);  			if (b.Length < 4) {  				ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  			if (actualFrameNumber + 1 == expectedFrameNumber) {  				if ((++retries % 64) != 0) {  					// Previous QR code' keep waiting.  					System.Threading.Thread.Sleep (SnarfPollingTime);  					continue;  				}  			}  			if (actualFrameNumber < expectedFrameNumber) {  				// Dropped a keypress?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  				continue;  			}  			if (actualFrameNumber > expectedFrameNumber) {  				// Skipped a code?  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  				continue;  			}  			if (expectedFrameNumber != actualFrameNumber) {  				ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  				break;  			}  			outStream.Write (b' 4' b.Length - 4);  			bytes += (UInt64)b.Length - 4;  			if ((b [3] & 1) == 0) {  				ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  				outStream.Close ();  				break;  			}  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			++expectedFrameNumber;  			retries = 0;  		}  	}  }  catch (Exception exception) {  	ProgressDelegate (exception.ToString ());  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: using (System.IO.Stream outStream = saveFileDialog.OpenFile ()) {  	var sim = new InputSimulator ();  	UInt64 bytes = 0;  	uint expectedFrameNumber = 0;  	int retries = 0;  	for (uint loopIterations = 0; ; ++loopIterations) {  		NativeMethods.SetForegroundWindow (selectedWindowHandle);  		Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  		if (result == null) {  			// No QR code (yet)' keep waiting.  			if ((++retries % 10) == 0) {  				// Regenerate QR code.  				sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  			}  			else {  				System.Threading.Thread.Sleep (SnarfPollingTime);  			}  			continue;  		}  		byte[] b = Convert.FromBase64String (result.Text);  		if (b.Length < 4) {  			ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  		if (actualFrameNumber + 1 == expectedFrameNumber) {  			if ((++retries % 64) != 0) {  				// Previous QR code' keep waiting.  				System.Threading.Thread.Sleep (SnarfPollingTime);  				continue;  			}  		}  		if (actualFrameNumber < expectedFrameNumber) {  			// Dropped a keypress?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  			continue;  		}  		if (actualFrameNumber > expectedFrameNumber) {  			// Skipped a code?  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  			continue;  		}  		if (expectedFrameNumber != actualFrameNumber) {  			ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  			break;  		}  		outStream.Write (b' 4' b.Length - 4);  		bytes += (UInt64)b.Length - 4;  		if ((b [3] & 1) == 0) {  			ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  			outStream.Close ();  			break;  		}  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		++expectedFrameNumber;  		retries = 0;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: for (uint loopIterations = 0; ; ++loopIterations) {  	NativeMethods.SetForegroundWindow (selectedWindowHandle);  	Result result = ScreenScraper.ReadQRCode (selectedWindowHandle);  	if (result == null) {  		// No QR code (yet)' keep waiting.  		if ((++retries % 10) == 0) {  			// Regenerate QR code.  			sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  		}  		else {  			System.Threading.Thread.Sleep (SnarfPollingTime);  		}  		continue;  	}  	byte[] b = Convert.FromBase64String (result.Text);  	if (b.Length < 4) {  		ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	uint actualFrameNumber = (uint)(b [0] & 0xFF) | (uint)(b [1] & 0xFF) << 8 | (uint)(b [2] & 0xFF) << 16;  	if (actualFrameNumber + 1 == expectedFrameNumber) {  		if ((++retries % 64) != 0) {  			// Previous QR code' keep waiting.  			System.Threading.Thread.Sleep (SnarfPollingTime);  			continue;  		}  	}  	if (actualFrameNumber < expectedFrameNumber) {  		// Dropped a keypress?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  		continue;  	}  	if (actualFrameNumber > expectedFrameNumber) {  		// Skipped a code?  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_P);  		continue;  	}  	if (expectedFrameNumber != actualFrameNumber) {  		ProgressDelegate (String.Format ("Wrong frame number (expected: {0} actual: {1})"' expectedFrameNumber' actualFrameNumber));  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  		break;  	}  	outStream.Write (b' 4' b.Length - 4);  	bytes += (UInt64)b.Length - 4;  	if ((b [3] & 1) == 0) {  		ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  		outStream.Close ();  		break;  	}  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_N);  	++expectedFrameNumber;  	retries = 0;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: if (result == null) {  	// No QR code (yet)' keep waiting.  	if ((++retries % 10) == 0) {  		// Regenerate QR code.  		sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  	}  	else {  		System.Threading.Thread.Sleep (SnarfPollingTime);  	}  	continue;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: if ((++retries % 10) == 0) {  	// Regenerate QR code.  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_R);  }  else {  	System.Threading.Thread.Sleep (SnarfPollingTime);  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: if (b.Length < 4) {  	ProgressDelegate (String.Format ("Message too short: {0}"' b.Length));  	sim.Keyboard.KeyPress (DirectInputKeyCode.DIK_Q);  	break;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: if (actualFrameNumber + 1 == expectedFrameNumber) {  	if ((++retries % 64) != 0) {  		// Previous QR code' keep waiting.  		System.Threading.Thread.Sleep (SnarfPollingTime);  		continue;  	}  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: if ((++retries % 64) != 0) {  	// Previous QR code' keep waiting.  	System.Threading.Thread.Sleep (SnarfPollingTime);  	continue;  }  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: outStream.Write (b' 4' b.Length - 4);  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: outStream.Write (b' 4' b.Length - 4);  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: bytes += (UInt64)b.Length - 4;  
Magic Number,RubberDucky,RubberDuckyForm,C:\repos\joewhaley_VirtualRubberDucky\RubberDucky\RubberDuckyForm.cs,snarfButtonClicked,The following statement contains a magic number: if ((b [3] & 1) == 0) {  	ProgressDelegate (String.Format ("Saved {0} bytes"' bytes));  	outStream.Close ();  	break;  }  
