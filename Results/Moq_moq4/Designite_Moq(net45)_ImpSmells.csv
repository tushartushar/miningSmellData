Implementation smell,Namespace,Class,File,Method,Description
Long Method,Moq,ActionObserver,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ActionObserver.cs,ReconstructExpression,The method has 168 lines of code.
Long Method,Moq,ExpressionExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ExpressionExtensions.cs,Split,The method has 193 lines of code.
Complex Method,Moq,ExpressionComparer,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ExpressionComparer.cs,Equals,Cyclomatic complexity of the method is 19
Complex Method,Moq,Extensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Extensions.cs,CompareTo,Cyclomatic complexity of the method is 8
Complex Method,Moq,HandleEventSubscription,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,Cyclomatic complexity of the method is 14
Complex Method,Moq,Return,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,Cyclomatic complexity of the method is 9
Complex Method,Moq,HandleAutoSetupProperties,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,VerifyNoOtherCalls,Cyclomatic complexity of the method is 8
Complex Method,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,RaiseEvent,Cyclomatic complexity of the method is 8
Complex Method,Moq,InvocationShape,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\InvocationShape.cs,Equals,Cyclomatic complexity of the method is 11
Complex Method,Moq,MatcherFactory,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MatcherFactory.cs,CreateMatcher,Cyclomatic complexity of the method is 13
Complex Method,Moq,MatcherFactory,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MatcherFactory.cs,CreateMatcher,Cyclomatic complexity of the method is 11
Complex Method,Moq,StringBuilderExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs,AppendExpression,Cyclomatic complexity of the method is 19
Complex Method,Moq,StringBuilderExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs,AppendExpression,Cyclomatic complexity of the method is 9
Complex Method,Moq,StringBuilderExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs,AppendValueOf,Cyclomatic complexity of the method is 11
Complex Method,Moq,Times,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Times.cs,GetExceptionMessage,Cyclomatic complexity of the method is 10
Complex Method,Moq.Protected,DuckReplacer,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Protected\ProtectedAsMock.cs,IsCorrespondingMethod,Cyclomatic complexity of the method is 8
Complex Method,Moq.Protected,ProtectedMock<T>,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Protected\ProtectedMock.cs,ToArgTypes,Cyclomatic complexity of the method is 12
Long Parameter List,Moq,FluentMockVisitor,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\FluentMockVisitor.cs,TranslateFluent,The method has 6 parameters. Parameters: objectType' returnType' targetMethod' instance' lambdaParam' lambdaBody
Long Parameter List,Moq,MockException,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MockException.cs,NoMatchingCalls,The method has 5 parameters. Parameters: rootMock' expression' failMessage' times' callCount
Long Parameter List,Moq,ReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.cs,ReturnsAsync,The method has 5 parameters. Parameters: mock' value' minDelay' maxDelay' random
Long Parameter List,Moq,ReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.cs,ReturnsAsync,The method has 5 parameters. Parameters: mock' value' minDelay' maxDelay' random
Long Parameter List,Moq,ReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.cs,ThrowsAsync,The method has 5 parameters. Parameters: mock' exception' minDelay' maxDelay' random
Long Parameter List,Moq,ReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.cs,ThrowsAsync,The method has 5 parameters. Parameters: mock' exception' minDelay' maxDelay' random
Long Parameter List,Moq,StringBuilderExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs,AppendCommaSeparated,The method has 5 parameters. Parameters: stringBuilder' prefix' source' append' suffix
Long Identifier,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,VerifyNoOtherCalls,The length of the parameter remainingUnverifiedInvocations is 30.
Long Identifier,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,GetMatchingInvocationCount,The length of the parameter invocationsToBeMarkedAsVerified is 31.
Long Identifier,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,GetMatchingInvocationCount,The length of the parameter invocationsToBeMarkedAsVerified is 31.
Long Statement,Moq,Extensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Extensions.cs,GetParameterTypeList,The length of the statement  "			return new StringBuilder().AppendCommaSeparated(method.GetParameters()' StringBuilderExtensions.AppendParameterType).ToString(); " is 128.
Long Statement,Moq,Extensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Extensions.cs,CompareParameterTypesTo,The length of the statement  "			if (invokeMethod != null && invokeMethod.GetParameterTypes().CompareTo(otherTypes' exact: false' considerTypeMatchers: false)) " is 126.
Long Statement,Moq,FluentMockVisitor,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\FluentMockVisitor.cs,VisitMember,The length of the statement  "			return TranslateFluent(node.Expression.Type' ((PropertyInfo)node.Member).PropertyType' targetMethod' Visit(node.Expression)' lambdaParam' lambdaBody); " is 150.
Long Statement,Moq,FluentMockVisitor,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\FluentMockVisitor.cs,VisitMethodCall,The length of the statement  "			return TranslateFluent(node.Object.Type' node.Method.ReturnType' targetMethod' this.Visit(node.Object)' lambdaParam' lambdaBody); " is 129.
Long Statement,Moq,HandleWellKnownMethods,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,IsFinalizer,The length of the statement  "			return method.GetBaseDefinition() == typeof(object).GetMethod("Finalize"' BindingFlags.NonPublic | BindingFlags.Instance); " is 122.
Long Statement,Moq,HandleEventSubscription,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,The length of the statement  "			const BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly; " is 131.
Long Statement,Moq,HandleEventSubscription,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,The length of the statement  "					var @event = implementingMethod.DeclaringType.GetEvents(bindingFlags).SingleOrDefault(e => e.GetAddMethod(true) == implementingMethod); " is 135.
Long Statement,Moq,HandleEventSubscription,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,The length of the statement  "				else if (methodName[0] == 'r' && methodName.Length > 7 && methodName[6] == '_' && invocation.Method.IsEventRemoveAccessor()) " is 124.
Long Statement,Moq,HandleEventSubscription,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,The length of the statement  "					var @event = implementingMethod.DeclaringType.GetEvents(bindingFlags).SingleOrDefault(e => e.GetRemoveMethod(true) == implementingMethod); " is 138.
Long Statement,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,GetMatchingInvocationCount,The length of the statement  "						count += Mock.GetMatchingInvocationCount(mocked.Mock' remainingParts' visitedInnerMocks' invocationsToBeMarkedAsVerified); " is 122.
Long Statement,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,RaiseEvent,The length of the statement  "			const BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly; " is 131.
Long Statement,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,RaiseEvent,The length of the statement  "					@event = implementingMethod.DeclaringType.GetEvents(bindingFlags).SingleOrDefault(e => e.GetAddMethod(true) == implementingMethod); " is 131.
Long Statement,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,RaiseEvent,The length of the statement  "					@event = implementingMethod.DeclaringType.GetEvents(bindingFlags).SingleOrDefault(e => e.GetRemoveMethod(true) == implementingMethod); " is 134.
Long Statement,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,RaiseEvent,The length of the statement  "			else if (mock.Setups.GetInnerMockSetups().TryFind(part' out var innerMockSetup) && innerMockSetup.ReturnsInnerMock(out var innerMock)) " is 134.
Long Statement,Moq,Mock,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\Mock.cs,AddInnerMockSetup,The length of the statement  "			this.Setups.Add(new InnerMockSetup(new InvocationShape(expression' method' arguments' exactGenericTypeArguments: true)' returnValue)); " is 134.
Long Statement,Moq,InvocationShape,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\InvocationShape.cs,IsOverride,The length of the statement  "				if (!method.GetGenericArguments().CompareTo(invocationMethod.GetGenericArguments()' exact: this.exactGenericTypeArguments' considerTypeMatchers: true)) " is 151.
Long Statement,Moq,InvocationShape,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\InvocationShape.cs,Equals,The length of the statement  "			var lastParameterIsParamArray = lastParameter != null && lastParameter.ParameterType.IsArray && lastParameter.IsDefined(typeof(ParamArrayAttribute)); " is 149.
Long Statement,Moq,InvocationShape,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\InvocationShape.cs,Equals,The length of the statement  "					if (this.Arguments[li] is NewArrayExpression e1 && other.Arguments[li] is NewArrayExpression e2 && e1.Expressions.Count == e2.Expressions.Count) " is 144.
Long Statement,Moq,MatchFactory,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Match.cs,Matches,The length of the statement  "			var canCast = (Predicate<object>)Delegate.CreateDelegate(typeof(Predicate<object>)' canCastMethod.MakeGenericMethod(parameterType)); " is 132.
Long Statement,Moq,MatcherFactory,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MatcherFactory.cs,CreateMatcher,The length of the statement  "				return new Pair<IMatcher' Expression>(new ParamArrayMatcher(matchers)' Expression.NewArrayInit(elementType' initializers)); " is 123.
Long Statement,Moq,MatcherFactory,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MatcherFactory.cs,CreateMatcher,The length of the statement  "					if (!parameter.ParameterType.IsAssignableFrom(convertExpression.Operand.Type) && convertExpression.Operand.IsMatch(out _)) " is 122.
Long Statement,Moq,MethodCall,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MethodCall.cs,SetRaiseEventResponse,The length of the statement  "			var expression = ExpressionReconstructor.Instance.ReconstructExpression(eventExpression' this.mock.ConstructorArguments); " is 121.
Long Statement,Moq,MethodCall,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MethodCall.cs,SetRaiseEventResponse,The length of the statement  "			var expression = ExpressionReconstructor.Instance.ReconstructExpression(eventExpression' this.mock.ConstructorArguments); " is 121.
Long Statement,Moq,ReturnLazyValueResponse,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MethodCall.cs,RespondTo,The length of the statement  "					? valueFactory.InvokePreserveStack()                //we need this' for the user to be able to use parameterless methods " is 120.
Long Statement,Moq,Mock<T>,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Mock.Generic.cs,SetupProperty,The length of the statement  "			Mock.SetupSet(this' property.AssignItIsAny()' condition: null).SetCallbackResponse(new Action<TProperty>(p => value = p)); " is 122.
Long Statement,Moq,MockException,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MockException.cs,NoMatchingCalls,The length of the statement  "						if (invocation.Method.ReturnType != typeof(void) && Unwrap.ResultIfCompletedTask(invocation.ReturnValue) is IMocked mocked) " is 123.
Long Statement,Moq,MockException,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MockException.cs,FromInnerMockOf,The length of the statement  "			message.AppendLine(string.Format(CultureInfo.CurrentCulture' Resources.VerificationErrorsOfInnerMock' setup)).TrimEnd().AppendLine() " is 132.
Long Statement,Moq,MockException,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MockException.cs,UnverifiedInvocations,The length of the statement  "			message.AppendLine(string.Format(CultureInfo.CurrentCulture' Resources.UnverifiedInvocations' mock)).TrimEnd().AppendLine() " is 123.
Long Statement,Moq,CastleProxyFactory,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ProxyFactories\CastleProxyFactory.cs,CreateProxy,The length of the statement  "				return generator.CreateInterfaceProxyWithoutTarget(mockType' additionalInterfaces' this.generationOptions' new Interceptor(interceptor)); " is 137.
Long Statement,Moq,CastleProxyFactory,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ProxyFactories\CastleProxyFactory.cs,CreateProxy,The length of the statement  "				var container = generator.CreateClassProxy(typeof(object)' additionalInterfaces' options' new Interceptor(interceptor)); " is 120.
Long Statement,Moq,CastleProxyFactory,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ProxyFactories\CastleProxyFactory.cs,CreateProxy,The length of the statement  "				return generator.CreateClassProxy(mockType' additionalInterfaces' this.generationOptions' arguments' new Interceptor(interceptor)); " is 131.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6))); " is 122.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6' t7))); " is 133.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8))); " is 144.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9))); " is 155.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10))); " is 169.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11))); " is 183.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11' T12 t12) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11' t12))); " is 197.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11' T12 t12' T13 t13) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11' t12' t13))); " is 211.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11' T12 t12' T13 t13' T14 t14) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11' t12' t13' t14))); " is 225.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11' T12 t12' T13 t13' T14 t14' T15 t15) => Task.FromResult(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11' t12' t13' t14' t15))); " is 239.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6))); " is 129.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6' t7))); " is 140.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8))); " is 151.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9))); " is 162.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10))); " is 176.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11))); " is 190.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11' T12 t12) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11' t12))); " is 204.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11' T12 t12' T13 t13) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11' t12' t13))); " is 218.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11' T12 t12' T13 t13' T14 t14) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11' t12' t13' t14))); " is 232.
Long Statement,Moq,GeneratedReturnsExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ReturnsExtensions.Generated.cs,ReturnsAsync,The length of the statement  "			return mock.Returns((T1 t1' T2 t2' T3 t3' T4 t4' T5 t5' T6 t6' T7 t7' T8 t8' T9 t9' T10 t10' T11 t11' T12 t12' T13 t13' T14 t14' T15 t15) => new ValueTask<TResult>(valueFunction(t1' t2' t3' t4' t5' t6' t7' t8' t9' t10' t11' t12' t13' t14' t15))); " is 246.
Long Statement,Moq,StringBuilderExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs,AppendValueOf,The length of the statement  "			else if (obj.GetType().IsArray || (obj.GetType().IsConstructedGenericType && obj.GetType().GetGenericTypeDefinition() == typeof(List<>))) " is 137.
Long Statement,Moq.Expressions.Visitors,UpgradePropertyAccessorMethods,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Expressions\Visitors\UpgradePropertyAccessorMethods.cs,VisitMethodCall,The length of the statement  "						var property = node.Method.DeclaringType.GetProperty(name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 129.
Long Statement,Moq.Expressions.Visitors,UpgradePropertyAccessorMethods,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Expressions\Visitors\UpgradePropertyAccessorMethods.cs,VisitMethodCall,The length of the statement  "						var property = node.Method.DeclaringType.GetProperty(name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 129.
Long Statement,Moq.Expressions.Visitors,UpgradePropertyAccessorMethods,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Expressions\Visitors\UpgradePropertyAccessorMethods.cs,VisitMethodCall,The length of the statement  "						return Expression.Assign(Expression.MakeIndex(instance' indexer' arguments.Take(argumentCount - 1))' this.Visit(arguments.Last())); " is 131.
Long Statement,Moq.Language.Flow,WhenPhrase<T>,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Language\Flow\WhenPhrase.cs,SetupSet,The length of the statement  "			var expression = ExpressionReconstructor.Instance.ReconstructExpression(setterExpression' this.mock.ConstructorArguments); " is 122.
Long Statement,Moq.Language.Flow,WhenPhrase<T>,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Language\Flow\WhenPhrase.cs,SetupSet,The length of the statement  "			var expression = ExpressionReconstructor.Instance.ReconstructExpression(setterExpression' this.mock.ConstructorArguments); " is 122.
Long Statement,Moq.Linq,MockSetupsBuilder,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Linq\MockSetupsBuilder.cs,VisitBinary,The length of the statement  "					throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' Resources.LinqBinaryOperatorNotSupported' node.ToStringFixed())); " is 139.
Long Statement,Moq.Linq,MockSetupsBuilder,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Linq\MockSetupsBuilder.cs,ConvertToSetup,The length of the statement  "			// transforms a delegate invocation expression such as `f(...) == x` (where `invocation` := `f(...)` and `right` := `x`) " is 120.
Long Statement,Moq.Linq,MockSetupsBuilder,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Linq\MockSetupsBuilder.cs,ConvertToSetupProperty,The length of the statement  "				throw new NotSupportedException(string.Format(Resources.UnexpectedTranslationOfMemberAccess' propertySetup.ToStringFixed())); " is 125.
Long Statement,Moq.Matchers,MatcherAttributeMatcher,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Matchers\MatcherAttributeMatcher.cs,ResolveValidatorMethod,The length of the statement  "			var expectedParametersTypes = new[] { call.Method.ReturnType }.Concat(call.Method.GetParameters().Select(p => p.ParameterType)).ToArray(); " is 138.
Long Statement,Moq.Matchers,MatcherAttributeMatcher,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Matchers\MatcherAttributeMatcher.cs,Matches,The length of the statement  "			var instance = this.expression.Object == null ? null : (this.expression.Object.PartialEval() as ConstantExpression).Value; " is 122.
Long Statement,Moq.Protected,ProtectedMock<T>,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Protected\ProtectedMock.cs,GetMethod,The length of the statement  "				.SingleOrDefault(m => m.Name == methodName && m.GetParameterTypes().CompareTo(argTypes' exact' considerTypeMatchers: false)); " is 125.
Complex Conditional,Moq,ExpressionExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ExpressionExtensions.cs,GetReboundProperty,The conditional expression  "(derivedProperty.CanRead(out var getter) && getter.GetBaseDefinition() == property.GetGetMethod(true)) ||  						(derivedProperty.CanWrite(out var setter) && setter.GetBaseDefinition() == property.GetSetMethod(true))"  is complex.
Complex Conditional,Moq,HandleEventSubscription,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,The conditional expression  "methodName[0] == 'r' && methodName.Length > 7 && methodName[6] == '_' && invocation.Method.IsEventRemoveAccessor()"  is complex.
Complex Conditional,Moq.Matchers,ConstantMatcher,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Matchers\ConstantMatcher.cs,Matches,The conditional expression  "this.constantValue is IEnumerable && argument is IEnumerable enumerable &&  				!(this.constantValue is IMocked) && !(argument is IMocked)"  is complex.
Virtual Method Call from Constructor,Moq,Mock<T>,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Mock.Generic.cs,Mock,The constructor "Mock" calls a virtual method "IsTypeVisible".
Empty Catch Block,Moq,ActionObserver,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ActionObserver.cs,ReconstructExpression,The method has an empty catch block.
Empty Catch Block,Moq,MethodCall,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MethodCall.cs,GetUserCodeCallSite,The method has an empty catch block.
Empty Catch Block,Moq,Unwrap,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Unwrap.cs,ResultIfCompletedTask,The method has an empty catch block.
Magic Number,Moq,HandleEventSubscription,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,The following statement contains a magic number: methodName[0] == 'a' && methodName[3] == '_' && invocation.Method.IsEventAddAccessor()
Magic Number,Moq,HandleEventSubscription,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Interception\InterceptionAspects.cs,Handle,The following statement contains a magic number: methodName.Length > 4
Magic Number,Moq,Invocation,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Invocation.cs,ToString,The following statement contains a magic number: builder.Append(method.Name' 4' method.Name.Length - 4);
Magic Number,Moq,Invocation,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Invocation.cs,ToString,The following statement contains a magic number: builder.Append(method.Name' 4' method.Name.Length - 4);
Magic Number,Moq,InvocationCollection,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\InvocationCollection.cs,Add,The following statement contains a magic number: var targetCapacity = this.capacity == 0 ? 4 : (this.capacity * 2);
Magic Number,Moq,InvocationCollection,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\InvocationCollection.cs,Add,The following statement contains a magic number: var targetCapacity = this.capacity == 0 ? 4 : (this.capacity * 2);
Magic Number,Moq,MockException,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MockException.cs,FromInnerMockOf,The following statement contains a magic number: message.AppendIndented(error.Message' count: 3);
Magic Number,Moq,MockException,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MockException.cs,Combined,The following statement contains a magic number: message.AppendIndented(error.Message' count: 3).TrimEnd().AppendLine()  				       .AppendLine();
Magic Number,Moq,MockException,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\MockException.cs,UnverifiedInvocations,The following statement contains a magic number: message.AppendIndented(invocation.ToString()' count: 3).TrimEnd().AppendLine();
Magic Number,Moq,SetupCollection,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\SetupCollection.cs,FindMatchFor,The following statement contains a magic number: i < 32 && (this.overridden & (1U << i)) != 0
Magic Number,Moq,SetupCollection,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\SetupCollection.cs,ToArrayLive,The following statement contains a magic number: i < 32 && (this.overridden & (1U << i)) != 0
Magic Number,Moq,SetupCollection,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\SetupCollection.cs,ToArrayLive,The following statement contains a magic number: i < 32
Magic Number,Moq,StringBuilderExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs,AppendExpression,The following statement contains a magic number: builder.Append('.')  					       .Append(method.Name' 4);
Magic Number,Moq.Expressions.Visitors,UpgradePropertyAccessorMethods,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Expressions\Visitors\UpgradePropertyAccessorMethods.cs,VisitMethodCall,The following statement contains a magic number: var name = node.Method.Name.Substring(4);
Missing Default,Moq,ExpressionComparer,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ExpressionComparer.cs,Equals,The following switch statement is missing a default case: switch (x.NodeType)  				{  					case ExpressionType.Negate:  					case ExpressionType.NegateChecked:  					case ExpressionType.Not:  					case ExpressionType.Convert:  					case ExpressionType.ConvertChecked:  					case ExpressionType.ArrayLength:  					case ExpressionType.Quote:  					case ExpressionType.TypeAs:  					case ExpressionType.UnaryPlus:  						return this.EqualsUnary((UnaryExpression)x' (UnaryExpression)y);  					case ExpressionType.Add:  					case ExpressionType.AddChecked:  					case ExpressionType.Assign:  					case ExpressionType.Subtract:  					case ExpressionType.SubtractChecked:  					case ExpressionType.Multiply:  					case ExpressionType.MultiplyChecked:  					case ExpressionType.Divide:  					case ExpressionType.Modulo:  					case ExpressionType.And:  					case ExpressionType.AndAlso:  					case ExpressionType.Or:  					case ExpressionType.OrElse:  					case ExpressionType.LessThan:  					case ExpressionType.LessThanOrEqual:  					case ExpressionType.GreaterThan:  					case ExpressionType.GreaterThanOrEqual:  					case ExpressionType.Equal:  					case ExpressionType.NotEqual:  					case ExpressionType.Coalesce:  					case ExpressionType.ArrayIndex:  					case ExpressionType.RightShift:  					case ExpressionType.LeftShift:  					case ExpressionType.ExclusiveOr:  					case ExpressionType.Power:  						return this.EqualsBinary((BinaryExpression)x' (BinaryExpression)y);  					case ExpressionType.TypeIs:  						return this.EqualsTypeBinary((TypeBinaryExpression)x' (TypeBinaryExpression)y);  					case ExpressionType.Conditional:  						return this.EqualsConditional((ConditionalExpression)x' (ConditionalExpression)y);  					case ExpressionType.Constant:  						return EqualsConstant((ConstantExpression)x' (ConstantExpression)y);  					case ExpressionType.Parameter:  						return this.EqualsParameter((ParameterExpression)x' (ParameterExpression)y);  					case ExpressionType.MemberAccess:  						return this.EqualsMember((MemberExpression)x' (MemberExpression)y);  					case ExpressionType.Call:  						return this.EqualsMethodCall((MethodCallExpression)x' (MethodCallExpression)y);  					case ExpressionType.Lambda:  						return this.EqualsLambda((LambdaExpression)x' (LambdaExpression)y);  					case ExpressionType.New:  						return this.EqualsNew((NewExpression)x' (NewExpression)y);  					case ExpressionType.NewArrayInit:  					case ExpressionType.NewArrayBounds:  						return this.EqualsNewArray((NewArrayExpression)x' (NewArrayExpression)y);  					case ExpressionType.Index:  						return this.EqualsIndex((IndexExpression)x' (IndexExpression)y);  					case ExpressionType.Invoke:  						return this.EqualsInvocation((InvocationExpression)x' (InvocationExpression)y);  					case ExpressionType.MemberInit:  						return this.EqualsMemberInit((MemberInitExpression)x' (MemberInitExpression)y);  					case ExpressionType.ListInit:  						return this.EqualsListInit((ListInitExpression)x' (ListInitExpression)y);  				}
Missing Default,Moq,ExpressionComparer,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\ExpressionComparer.cs,EqualsMemberBinding,The following switch statement is missing a default case: switch (x.BindingType)  				{  					case MemberBindingType.Assignment:  						return this.EqualsMemberAssignment((MemberAssignment)x' (MemberAssignment)y);  					case MemberBindingType.MemberBinding:  						return this.EqualsMemberMemberBinding((MemberMemberBinding)x' (MemberMemberBinding)y);  					case MemberBindingType.ListBinding:  						return this.EqualsMemberListBinding((MemberListBinding)x' (MemberListBinding)y);  				}
Missing Default,Moq,Guard,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Guard.cs,IsAssignmentToPropertyOrIndexer,The following switch statement is missing a default case: switch (expression.Body.NodeType)  			{  				case ExpressionType.Assign:  					var assignment = (BinaryExpression)expression.Body;  					if (assignment.Left is MemberExpression || assignment.Left is IndexExpression) return;  					break;    				case ExpressionType.Call:  					var call = (MethodCallExpression)expression.Body;  					if (call.Method.IsSetAccessor()) return;  					break;  			}
Missing Default,Moq,Guard,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Guard.cs,IsEventAdd,The following switch statement is missing a default case: switch (expression.Body.NodeType)  			{  				case ExpressionType.Call:  					var call = (MethodCallExpression)expression.Body;  					if (call.Method.IsEventAddAccessor()) return;  					break;  			}
Missing Default,Moq,Guard,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Guard.cs,IsEventRemove,The following switch statement is missing a default case: switch (expression.Body.NodeType)  			{  				case ExpressionType.Call:  					var call = (MethodCallExpression)expression.Body;  					if (call.Method.IsEventRemoveAccessor()) return;  					break;  			}
Missing Default,Moq,SequenceSetup,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\SequenceSetup.cs,Execute,The following switch statement is missing a default case: switch (kind)  				{  					case ResponseKind.Pass:  						invocation.Return();  						break;    					case ResponseKind.CallBase:  						invocation.ReturnBase();  						break;    					case ResponseKind.Returns:  						invocation.Return(arg);  						break;    					case ResponseKind.Throws:  						throw (Exception)arg;    					case ResponseKind.InvokeFunc:  						invocation.Return(((Func<object>)arg)());  						break;  				}
Missing Default,Moq,StringBuilderExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs,AppendExpression,The following switch statement is missing a default case: switch (expression.NodeType)  			{  				case ExpressionType.Convert:  				case ExpressionType.ConvertChecked:  					return builder.Append('(')  					              .AppendNameOf(expression.Type)  					              .Append(')')  					              .AppendExpression(expression.Operand);    				case ExpressionType.ArrayLength:  					return builder.AppendExpression(expression.Operand)  					              .Append(".Length");    				case ExpressionType.Negate:  				case ExpressionType.NegateChecked:  					return builder.Append('-')  					              .AppendExpression(expression.Operand);    				case ExpressionType.Not:  					return builder.Append("!(")  					              .AppendExpression(expression.Operand)  					              .Append(')');    				case ExpressionType.Quote:  					return builder.AppendExpression(expression.Operand);    				case ExpressionType.TypeAs:  					return builder.Append('(')  					              .AppendExpression(expression.Operand)  					              .Append(" as ")  					              .AppendNameOf(expression.Type)  					              .Append(')');  			}
Missing Default,Moq,StringBuilderExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs,AppendExpression,The following switch statement is missing a default case: switch (nodeType)  				{  					case ExpressionType.Add:  					case ExpressionType.AddChecked:  						return "+";    					case ExpressionType.AddAssign:  						return "+=";    					case ExpressionType.Assign:  						return "=";    					case ExpressionType.And:  						return "&";    					case ExpressionType.AndAlso:  						return "&&";    					case ExpressionType.Coalesce:  						return "??";    					case ExpressionType.Divide:  						return "/";    					case ExpressionType.Equal:  						return "==";    					case ExpressionType.ExclusiveOr:  						return "^";    					case ExpressionType.GreaterThan:  						return ">";    					case ExpressionType.GreaterThanOrEqual:  						return ">=";    					case ExpressionType.LeftShift:  						return "<<";    					case ExpressionType.LessThan:  						return "<";    					case ExpressionType.LessThanOrEqual:  						return "<=";    					case ExpressionType.Modulo:  						return "%";    					case ExpressionType.Multiply:  					case ExpressionType.MultiplyChecked:  						return "*";    					case ExpressionType.NotEqual:  						return "!=";    					case ExpressionType.Or:  						return "|";    					case ExpressionType.OrElse:  						return "||";    					case ExpressionType.Power:  						return "^";    					case ExpressionType.RightShift:  						return ">>";    					case ExpressionType.Subtract:  					case ExpressionType.SubtractChecked:  						return "-";    					case ExpressionType.SubtractAssign:  						return "-=";  				}
Missing Default,Moq,StringBuilderExtensions,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs,AppendExpression,The following switch statement is missing a default case: switch (expression.NodeType)  			{  				case ExpressionType.NewArrayInit:  					return builder.AppendCommaSeparated("new[] { "' expression.Expressions' AppendExpression' " }");    				case ExpressionType.NewArrayBounds:  					return builder.Append("new ")  					              .AppendNameOf(expression.Type.GetElementType())  					              .AppendCommaSeparated("["' expression.Expressions' AppendExpression' "]");  			}
Missing Default,Moq,Times,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Times.cs,GetExceptionMessage,The following switch statement is missing a default case: switch (this.kind)  			{  				case Kind.AtLeast:          message = Resources.NoMatchingCallsAtLeast; break;  				case Kind.AtLeastOnce:      message = Resources.NoMatchingCallsAtLeastOnce; break;  				case Kind.AtMost:           message = Resources.NoMatchingCallsAtMost; break;  				case Kind.AtMostOnce:       message = Resources.NoMatchingCallsAtMostOnce; break;  				case Kind.BetweenExclusive: message = Resources.NoMatchingCallsBetweenExclusive; break;  				case Kind.BetweenInclusive: message = Resources.NoMatchingCallsBetweenInclusive; break;  				case Kind.Exactly:          message = Resources.NoMatchingCallsExactly; break;  				case Kind.Once:             message = Resources.NoMatchingCallsOnce; break;  				case Kind.Never:            message = Resources.NoMatchingCallsNever; break;  			}
Missing Default,Moq.Linq,MockSetupsBuilder,C:\research\architectureSmells\repos\Moq_moq4\src\Moq\Linq\MockSetupsBuilder.cs,ConvertToSetup,The following switch statement is missing a default case: switch (left.NodeType)  			{  				case ExpressionType.MemberAccess:  					var member = (MemberExpression)left;  					Guard.NotField(member);    					return ConvertToSetupProperty(member.Expression' member' right);    				case ExpressionType.Call:  					var method = (MethodCallExpression)left;    					if (!method.Method.CanOverride())  						throw new NotSupportedException(string.Format(  							CultureInfo.CurrentCulture'  							Resources.LinqMethodNotVirtual'  							method.ToStringFixed()));    					return ConvertToSetup(method.Object' method' right);    				case ExpressionType.Invoke:  					var invocation = (InvocationExpression)left;  					if (invocation.Expression is ParameterExpression && typeof(Delegate).IsAssignableFrom(invocation.Expression.Type))  					{  						return ConvertToSetup(invocation' right);  					}  					else  					{  						break;  					}    				case ExpressionType.Convert:  					var left1 = (UnaryExpression)left;  					return ConvertToSetup(left1.Operand' Expression.Convert(right' left1.Operand.Type));  			}
