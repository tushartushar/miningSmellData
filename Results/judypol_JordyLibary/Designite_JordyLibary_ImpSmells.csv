Implementation smell,Namespace,Class,File,Method,Description
Long Method,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupS0,The method has 260 lines of code.
Long Method,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupS1,The method has 260 lines of code.
Long Method,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupS2,The method has 260 lines of code.
Long Method,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupS3,The method has 260 lines of code.
Complex Method,JordyLibary.Core,ExcelHelper,C:\repos\judypol_JordyLibary\JordyLibary\Core\ExcelHelper.cs,Excel2DataTable,Cyclomatic complexity of the method is 8
Complex Method,JordyLibary.Core,ExcelHelper,C:\repos\judypol_JordyLibary\JordyLibary\Core\ExcelHelper.cs,Excel2Entity,Cyclomatic complexity of the method is 9
Complex Method,JordyLibary.Core,ExcelHelper,C:\repos\judypol_JordyLibary\JordyLibary\Core\ExcelHelper.cs,Excel2Entity,Cyclomatic complexity of the method is 10
Complex Method,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,CreateMethodHandler,Cyclomatic complexity of the method is 13
Complex Method,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,Cyclomatic complexity of the method is 21
Complex Method,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,UpperDate,Cyclomatic complexity of the method is 11
Complex Method,JordyLibary.Core,XMLHelper,C:\repos\judypol_JordyLibary\JordyLibary\Core\XMLHelper.cs,ReadXML,Cyclomatic complexity of the method is 11
Complex Method,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,Cyclomatic complexity of the method is 8
Complex Method,JordyLibary.ORM,ConnectionContext,C:\repos\judypol_JordyLibary\JordyLibary\ORM\ConnectionContext.cs,List,Cyclomatic complexity of the method is 10
Complex Method,JordyLibary.ORM,ConnectionContext,C:\repos\judypol_JordyLibary\JordyLibary\ORM\ConnectionContext.cs,GetValues,Cyclomatic complexity of the method is 9
Complex Method,JordyLibary.ORM,GetObject,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Result.cs,Execute,Cyclomatic complexity of the method is 9
Complex Method,JordyLibary.ORM,GetObjects,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Result.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,JordyLibary.ORM,SQL,C:\repos\judypol_JordyLibary\JordyLibary\ORM\SmarkData.cs,List,Cyclomatic complexity of the method is 8
Complex Method,JordyLibary.ORM.Mappings,DataObject,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\DataObject.cs,NewData,Cyclomatic complexity of the method is 10
Complex Method,JordyLibary.ORM.Mappings,ObjectMapper,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\ObjectMapper.cs,OnInit,Cyclomatic complexity of the method is 18
Complex Method,JordyLibary.ORM.Mappings,ObjectMapper,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\ObjectMapper.cs,CreateSql,Cyclomatic complexity of the method is 8
Complex Method,JordyLibary.ORM.Mappings,ObjectMapper,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\ObjectMapper.cs,CreateSelectReader,Cyclomatic complexity of the method is 12
Long Parameter List,JordyLibary.Core,ExcelHelper,C:\repos\judypol_JordyLibary\JordyLibary\Core\ExcelHelper.cs,DataTable2Template,The method has 5 parameters.
Long Parameter List,JordyLibary.Core,PerformanceTesting,C:\repos\judypol_JordyLibary\JordyLibary\Core\PerformanceTesting.cs,Add,The method has 5 parameters.
Long Parameter List,JordyLibary.Core,PerformanceTesting,C:\repos\judypol_JordyLibary\JordyLibary\Core\PerformanceTesting.cs,Add,The method has 6 parameters.
Long Parameter List,JordyLibary.Core,PerformanceTesting,C:\repos\judypol_JordyLibary\JordyLibary\Core\PerformanceTesting.cs,Add,The method has 7 parameters.
Long Parameter List,JordyLibary.Core,PerformanceTesting,C:\repos\judypol_JordyLibary\JordyLibary\Core\PerformanceTesting.cs,Add,The method has 8 parameters.
Long Parameter List,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,Action,The method has 5 parameters.
Long Parameter List,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,Action,The method has 6 parameters.
Long Parameter List,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,Action,The method has 7 parameters.
Long Parameter List,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,SendMail,The method has 7 parameters.
Long Parameter List,JordyLibary.ORM,DBContext,C:\repos\judypol_JordyLibary\JordyLibary\ORM\DBContext.cs,ChangeTable,The method has 5 parameters.
Long Parameter List,JordyLibary.ORM,EntityBase,C:\repos\judypol_JordyLibary\JordyLibary\ORM\EntityBase.cs,OnList,The method has 7 parameters.
Long Parameter List,JordyLibary.ORM,EntityBase,C:\repos\judypol_JordyLibary\JordyLibary\ORM\EntityBase.cs,ExOnList,The method has 7 parameters.
Long Parameter List,JordyLibary.ORM,EntityBase,C:\repos\judypol_JordyLibary\JordyLibary\ORM\EntityBase.cs,OnListFirst,The method has 6 parameters.
Long Parameter List,JordyLibary.ORM,EntityBase,C:\repos\judypol_JordyLibary\JordyLibary\ORM\EntityBase.cs,ExOnListFirst,The method has 6 parameters.
Long Parameter List,JordyLibary.ORM,EntityBase,C:\repos\judypol_JordyLibary\JordyLibary\ORM\EntityBase.cs,OnAggregation,The method has 7 parameters.
Long Parameter List,JordyLibary.ORM,EntityBase,C:\repos\judypol_JordyLibary\JordyLibary\ORM\EntityBase.cs,ExOnAggregation,The method has 7 parameters.
Long Parameter List,JordyLibary.ORM.Mappings,SelectDataReader,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\SelectReader.cs,ReaderToProperty,The method has 5 parameters.
Long Statement,JordyLibary.Core,DynamicMethodExecutor,C:\repos\judypol_JordyLibary\JordyLibary\Core\DynamicMethodExecutor.cs,GetExecuteDelegate,The length of the statement  "	Expression instanceCast = methodInfo.IsStatic ? null : Expression.Convert (instanceParameter' methodInfo.ReflectedType); " is 120.
Long Statement,JordyLibary.Core,DynamicMethodExecutor,C:\repos\judypol_JordyLibary\JordyLibary\Core\DynamicMethodExecutor.cs,GetExecuteDelegate,The length of the statement  "		Expression<Action<object' object[]>> lambda = Expression.Lambda<Action<object' object[]>> (methodCall' instanceParameter' parametersParameter); " is 143.
Long Statement,JordyLibary.Core,DynamicMethodExecutor,C:\repos\judypol_JordyLibary\JordyLibary\Core\DynamicMethodExecutor.cs,GetExecuteDelegate,The length of the statement  "		Expression<Func<object' object[]' object>> lambda = Expression.Lambda<Func<object' object[]' object>> (castMethodCall' instanceParameter' parametersParameter); " is 159.
Long Statement,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The length of the statement  "		uint d = (uint)(((key [j % cipherKey.Length] * 256 + key [(j + 1) % cipherKey.Length]) * 256 + key [(j + 2) % cipherKey.Length]) * 256 + key [(j + 3) % cipherKey.Length]); " is 171.
Long Statement,JordyLibary.ORM,EntityBase,C:\repos\judypol_JordyLibary\JordyLibary\ORM\EntityBase.cs,OnLoad,The length of the statement  "	Command cmd = Command.GetThreadCommand ().AddSqlText (table).AddSqlText (" where ").AddSqlText (id).AddSqlText ("=@id"); " is 120.
Long Statement,JordyLibary.ORM,EntityBase,C:\repos\judypol_JordyLibary\JordyLibary\ORM\EntityBase.cs,OnAggregation,The length of the statement  "	cmd.Text.Append (" select ").Append (aggregation).Append (" (").Append (DISTINCT ? "DISTINCT" : "").Append (field).Append (") from ").Append (table); " is 149.
Long Statement,JordyLibary.ORM,FieldInfo,C:\repos\judypol_JordyLibary\JordyLibary\ORM\FieldInfo.cs,In,The length of the statement  "	exp.SqlText.Append (" ").Append (Name).Append (" in (select ").Append (astable).Append (".").Append (field.Name).Append (" from ").Append (field.Table).Append (" ").Append (astable); " is 182.
Long Statement,JordyLibary.ORM,FieldInfo,C:\repos\judypol_JordyLibary\JordyLibary\ORM\FieldInfo.cs,NotIn,The length of the statement  "	exp.SqlText.Append (" ").Append (Name).Append (" not in (select ").Append (astable).Append (".").Append (field.Name).Append (" from ").Append (field.Table).Append (" ").Append (astable); " is 186.
Long Statement,JordyLibary.ORM,GetValue,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Result.cs,IsChangeDataSQL,The length of the statement  "	return value.IndexOf ("delete"' StringComparison.CurrentCultureIgnoreCase) >= 0 || value.IndexOf ("update"' StringComparison.CurrentCultureIgnoreCase) >= 0 || value.IndexOf ("insert"' StringComparison.CurrentCultureIgnoreCase) >= 0; " is 232.
Long Statement,JordyLibary.ORM,GetValue,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Result.cs,IsValueKey,The length of the statement  "	return System.Text.RegularExpressions.Regex.IsMatch (value' "^([a-zA-Z0-9]+)$"' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 136.
Long Statement,JordyLibary.ORM.Mappings,DataObject,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\DataObject.cs,EditData,The length of the statement  "				update.AddField (pm.ColumnName' "p_" + pi.Name' pm.Cast.ToColumn (pm.Handler.Get (this)' pm.Handler.Property.PropertyType' this)); " is 130.
Long Statement,JordyLibary.ORM.Mappings,ProcBuilder,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\ProcBuilder.cs,UpdateParameters,The length of the statement  "				procp.Handler.Set (data' Convert.ChangeType (((IDataParameter)cmd.Parameters [i]).Value' procp.Handler.Property.PropertyType)); " is 127.
Long Statement,JordyLibary.ORM.Mappings,SelectDataReader,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\SelectReader.cs,ReaderToProperty,The length of the statement  "		throw new PeanutException (string.Format (DataMsg.READER_TO_PROPERTY_ERROR' pm.ColumnName' pm.Handler.Property.Name)' e_); " is 122.
Empty Catch Block,JordyLibary.Core,Dispatch,C:\repos\judypol_JordyLibary\JordyLibary\Core\Dispatch.cs,OnRun,The method has an empty catch block.
Empty Catch Block,JordyLibary.ORM.Mappings,CommandReader,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\CommandReader.cs,SetColumnIndex,The method has an empty catch block.
Empty Catch Block,JordyLibary.ORM.Mappings,ProcDataReader,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\ProcDataReader.cs,SetColumnIndex,The method has an empty catch block.
Magic Number,JordyLibary.Core,ObjectCopy,C:\repos\judypol_JordyLibary\JordyLibary\Core\ObjectCopy.cs,GetModuleCast,The following statement contains a magic number: lock (mCasters) {  	if (!mCasters.TryGetValue (sourceType' out result)) {  		result = new Dictionary<Type' ObjectCopy> (8);  		mCasters.Add (sourceType' result);  	}  }  
Magic Number,JordyLibary.Core,ObjectCopy,C:\repos\judypol_JordyLibary\JordyLibary\Core\ObjectCopy.cs,GetModuleCast,The following statement contains a magic number: if (!mCasters.TryGetValue (sourceType' out result)) {  	result = new Dictionary<Type' ObjectCopy> (8);  	mCasters.Add (sourceType' result);  }  
Magic Number,JordyLibary.Core,ObjectCopy,C:\repos\judypol_JordyLibary\JordyLibary\Core\ObjectCopy.cs,GetModuleCast,The following statement contains a magic number: result = new Dictionary<Type' ObjectCopy> (8);  
Magic Number,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following statement contains a magic number: if (value > -129 && value < 128) {  	il.Emit (OpCodes.Ldc_I4_S' (SByte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following statement contains a magic number: if (value > -129 && value < 128) {  	il.Emit (OpCodes.Ldc_I4_S' (SByte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,RSACrypto,The following statement contains a magic number: rsaProvider = new RSACryptoServiceProvider (1024);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.DQ = string.IsNullOrEmpty (values [2]) ? null : Convert.FromBase64String (values [2]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.DQ = string.IsNullOrEmpty (values [2]) ? null : Convert.FromBase64String (values [2]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.Exponent = string.IsNullOrEmpty (values [3]) ? null : Convert.FromBase64String (values [3]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.Exponent = string.IsNullOrEmpty (values [3]) ? null : Convert.FromBase64String (values [3]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.Modulus = string.IsNullOrEmpty (values [4]) ? null : Convert.FromBase64String (values [4]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.Modulus = string.IsNullOrEmpty (values [4]) ? null : Convert.FromBase64String (values [4]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.Modulus = string.IsNullOrEmpty (values [5]) ? null : Convert.FromBase64String (values [5]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.Modulus = string.IsNullOrEmpty (values [5]) ? null : Convert.FromBase64String (values [5]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.P = string.IsNullOrEmpty (values [6]) ? null : Convert.FromBase64String (values [6]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.P = string.IsNullOrEmpty (values [6]) ? null : Convert.FromBase64String (values [6]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.Q = string.IsNullOrEmpty (values [7]) ? null : Convert.FromBase64String (values [7]);  
Magic Number,JordyLibary.Core,RSACrypto,C:\repos\judypol_JordyLibary\JordyLibary\Core\RSACrypto.cs,SetRSAParameters,The following statement contains a magic number: rsa.Q = string.IsNullOrEmpty (values [7]) ? null : Convert.FromBase64String (values [7]);  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,GetRanString,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	result += mRanSeed.Substring (ran.Next (25)' 1);  }  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,GetRanString,The following statement contains a magic number: result += mRanSeed.Substring (ran.Next (25)' 1);  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,UpperDate,The following statement contains a magic number: for (int i = 0; i < infos [2].Length; i++) {  	value = int.Parse (infos [2].Substring (i' 1));  	if (i == 0) {  		if (value > 0) {  			if (value > 1)  				date.Append (number.Substring (value' 1));  			date.Append ("十");  		}  	}  	else {  		if (value > 0) {  			date.Append (number.Substring (value' 1));  		}  	}  }  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,UpperDate,The following statement contains a magic number: for (int i = 0; i < infos [2].Length; i++) {  	value = int.Parse (infos [2].Substring (i' 1));  	if (i == 0) {  		if (value > 0) {  			if (value > 1)  				date.Append (number.Substring (value' 1));  			date.Append ("十");  		}  	}  	else {  		if (value > 0) {  			date.Append (number.Substring (value' 1));  		}  	}  }  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,UpperDate,The following statement contains a magic number: value = int.Parse (infos [2].Substring (i' 1));  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,GetByteCount,The following statement contains a magic number: if (numHexChars % 2 != 0) {  	numHexChars--;  }  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,GetByteCount,The following statement contains a magic number: return numHexChars / 2;  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,GetBytes,The following statement contains a magic number: if (newString.Length % 2 != 0) {  	discarded++;  	newString = newString.Substring (0' newString.Length - 1);  }  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  	hex = new String (new Char[] {  		newString [j]'  		newString [j + 1]  	});  	bytes [i] = HexToByte (hex);  	j = j + 2;  }  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,GetBytes,The following statement contains a magic number: j = j + 2;  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,IsHexDigit,The following statement contains a magic number: if (numChar >= numA && numChar < (numA + 6))  	return true;  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,IsHexDigit,The following statement contains a magic number: if (numChar >= num1 && numChar < (num1 + 10))  	return true;  
Magic Number,JordyLibary.Core,Utils,C:\repos\judypol_JordyLibary\JordyLibary\Core\Utils.cs,HexToByte,The following statement contains a magic number: if (hex.Length > 2 || hex.Length <= 0)  	throw new ArgumentException ("hex must be 1 or 2 characters in length");  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Decrypt_CBC,The following statement contains a magic number: IV = HexToByte (ct.Substring (0' 16));  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Decrypt_CBC,The following statement contains a magic number: return Encoding.ASCII.GetString (Decrypt_CBC (HexToByte (ct.Substring (16)))).Replace ("\0"' "");  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Encrypt_CTR,The following statement contains a magic number: return ByteToHex (InitVector) + ByteToHex (Crypt_CTR (Encoding.ASCII.GetBytes (pt)' 2));  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Decrypt_CTR,The following statement contains a magic number: IV = HexToByte (ct.Substring (0' 16));  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Decrypt_CTR,The following statement contains a magic number: return Encoding.ASCII.GetString (Crypt_CTR (HexToByte (ct.Substring (16))' 2)).Replace ("\0"' "");  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Decrypt_CTR,The following statement contains a magic number: return Encoding.ASCII.GetString (Crypt_CTR (HexToByte (ct.Substring (16))' 2)).Replace ("\0"' "");  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetRandomIV,The following statement contains a magic number: InitVector = new byte[8];  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: if (cipherKey.Length > 56) {  	throw new Exception ("Key too long. 56 bytes required.");  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 18; i++) {  	uint d = (uint)(((key [j % cipherKey.Length] * 256 + key [(j + 1) % cipherKey.Length]) * 256 + key [(j + 2) % cipherKey.Length]) * 256 + key [(j + 3) % cipherKey.Length]);  	bf_P [i] ^= d;  	j = (j + 4) % cipherKey.Length;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 18; i++) {  	uint d = (uint)(((key [j % cipherKey.Length] * 256 + key [(j + 1) % cipherKey.Length]) * 256 + key [(j + 2) % cipherKey.Length]) * 256 + key [(j + 3) % cipherKey.Length]);  	bf_P [i] ^= d;  	j = (j + 4) % cipherKey.Length;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 18; i++) {  	uint d = (uint)(((key [j % cipherKey.Length] * 256 + key [(j + 1) % cipherKey.Length]) * 256 + key [(j + 2) % cipherKey.Length]) * 256 + key [(j + 3) % cipherKey.Length]);  	bf_P [i] ^= d;  	j = (j + 4) % cipherKey.Length;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 18; i++) {  	uint d = (uint)(((key [j % cipherKey.Length] * 256 + key [(j + 1) % cipherKey.Length]) * 256 + key [(j + 2) % cipherKey.Length]) * 256 + key [(j + 3) % cipherKey.Length]);  	bf_P [i] ^= d;  	j = (j + 4) % cipherKey.Length;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 18; i++) {  	uint d = (uint)(((key [j % cipherKey.Length] * 256 + key [(j + 1) % cipherKey.Length]) * 256 + key [(j + 2) % cipherKey.Length]) * 256 + key [(j + 3) % cipherKey.Length]);  	bf_P [i] ^= d;  	j = (j + 4) % cipherKey.Length;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 18; i++) {  	uint d = (uint)(((key [j % cipherKey.Length] * 256 + key [(j + 1) % cipherKey.Length]) * 256 + key [(j + 2) % cipherKey.Length]) * 256 + key [(j + 3) % cipherKey.Length]);  	bf_P [i] ^= d;  	j = (j + 4) % cipherKey.Length;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 18; i++) {  	uint d = (uint)(((key [j % cipherKey.Length] * 256 + key [(j + 1) % cipherKey.Length]) * 256 + key [(j + 2) % cipherKey.Length]) * 256 + key [(j + 3) % cipherKey.Length]);  	bf_P [i] ^= d;  	j = (j + 4) % cipherKey.Length;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: j = (j + 4) % cipherKey.Length;  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 18; i += 2) {  	encipher ();  	bf_P [i] = xl_par;  	bf_P [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 18; i += 2) {  	encipher ();  	bf_P [i] = xl_par;  	bf_P [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: i += 2
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 256; i += 2) {  	encipher ();  	bf_s0 [i] = xl_par;  	bf_s0 [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 256; i += 2) {  	encipher ();  	bf_s0 [i] = xl_par;  	bf_s0 [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: i += 2
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 256; i += 2) {  	encipher ();  	bf_s1 [i] = xl_par;  	bf_s1 [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 256; i += 2) {  	encipher ();  	bf_s1 [i] = xl_par;  	bf_s1 [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: i += 2
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 256; i += 2) {  	encipher ();  	bf_s2 [i] = xl_par;  	bf_s2 [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 256; i += 2) {  	encipher ();  	bf_s2 [i] = xl_par;  	bf_s2 [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: i += 2
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 256; i += 2) {  	encipher ();  	bf_s3 [i] = xl_par;  	bf_s3 [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: for (int i = 0; i < 256; i += 2) {  	encipher ();  	bf_s3 [i] = xl_par;  	bf_s3 [i + 1] = xr_par;  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetupKey,The following statement contains a magic number: i += 2
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_ECB,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	if (decrypt) {  		BlockDecrypt (ref block);  	}  	else {  		BlockEncrypt (ref block);  	}  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_ECB,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	if (decrypt) {  		BlockDecrypt (ref block);  	}  	else {  		BlockEncrypt (ref block);  	}  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_ECB,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	if (decrypt) {  		BlockDecrypt (ref block);  	}  	else {  		BlockEncrypt (ref block);  	}  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_ECB,The following statement contains a magic number: i += 8
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_ECB,The following statement contains a magic number: Buffer.BlockCopy (plainText' i' block' 0' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_ECB,The following statement contains a magic number: Buffer.BlockCopy (block' 0' plainText' i' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CTR,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	for (int x = 0; x < 8; x++) {  		input [x] = (byte)(counter [x] ^ InitVector [x]);  	}  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	BlockEncrypt (ref input);  	XorBlock (ref block' input);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CTR,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	for (int x = 0; x < 8; x++) {  		input [x] = (byte)(counter [x] ^ InitVector [x]);  	}  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	BlockEncrypt (ref input);  	XorBlock (ref block' input);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CTR,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	for (int x = 0; x < 8; x++) {  		input [x] = (byte)(counter [x] ^ InitVector [x]);  	}  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	BlockEncrypt (ref input);  	XorBlock (ref block' input);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CTR,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	for (int x = 0; x < 8; x++) {  		input [x] = (byte)(counter [x] ^ InitVector [x]);  	}  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	BlockEncrypt (ref input);  	XorBlock (ref block' input);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CTR,The following statement contains a magic number: i += 8
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CTR,The following statement contains a magic number: for (int x = 0; x < 8; x++) {  	input [x] = (byte)(counter [x] ^ InitVector [x]);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CTR,The following statement contains a magic number: Buffer.BlockCopy (plainText' i' block' 0' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CTR,The following statement contains a magic number: Buffer.BlockCopy (block' 0' plainText' i' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: Buffer.BlockCopy (InitVector' 0' iv' 0' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: if (!decrypt) {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		XorBlock (ref block' iv);  		BlockEncrypt (ref block);  		Buffer.BlockCopy (block' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  else {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		Buffer.BlockCopy (block' 0' preblock' 0' 8);  		BlockDecrypt (ref block);  		XorBlock (ref block' iv);  		Buffer.BlockCopy (preblock' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: if (!decrypt) {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		XorBlock (ref block' iv);  		BlockEncrypt (ref block);  		Buffer.BlockCopy (block' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  else {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		Buffer.BlockCopy (block' 0' preblock' 0' 8);  		BlockDecrypt (ref block);  		XorBlock (ref block' iv);  		Buffer.BlockCopy (preblock' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: if (!decrypt) {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		XorBlock (ref block' iv);  		BlockEncrypt (ref block);  		Buffer.BlockCopy (block' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  else {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		Buffer.BlockCopy (block' 0' preblock' 0' 8);  		BlockDecrypt (ref block);  		XorBlock (ref block' iv);  		Buffer.BlockCopy (preblock' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: if (!decrypt) {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		XorBlock (ref block' iv);  		BlockEncrypt (ref block);  		Buffer.BlockCopy (block' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  else {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		Buffer.BlockCopy (block' 0' preblock' 0' 8);  		BlockDecrypt (ref block);  		XorBlock (ref block' iv);  		Buffer.BlockCopy (preblock' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: if (!decrypt) {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		XorBlock (ref block' iv);  		BlockEncrypt (ref block);  		Buffer.BlockCopy (block' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  else {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		Buffer.BlockCopy (block' 0' preblock' 0' 8);  		BlockDecrypt (ref block);  		XorBlock (ref block' iv);  		Buffer.BlockCopy (preblock' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: if (!decrypt) {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		XorBlock (ref block' iv);  		BlockEncrypt (ref block);  		Buffer.BlockCopy (block' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  else {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		Buffer.BlockCopy (block' 0' preblock' 0' 8);  		BlockDecrypt (ref block);  		XorBlock (ref block' iv);  		Buffer.BlockCopy (preblock' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: if (!decrypt) {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		XorBlock (ref block' iv);  		BlockEncrypt (ref block);  		Buffer.BlockCopy (block' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  else {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		Buffer.BlockCopy (block' 0' preblock' 0' 8);  		BlockDecrypt (ref block);  		XorBlock (ref block' iv);  		Buffer.BlockCopy (preblock' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: if (!decrypt) {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		XorBlock (ref block' iv);  		BlockEncrypt (ref block);  		Buffer.BlockCopy (block' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  else {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		Buffer.BlockCopy (block' 0' preblock' 0' 8);  		BlockDecrypt (ref block);  		XorBlock (ref block' iv);  		Buffer.BlockCopy (preblock' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: if (!decrypt) {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		XorBlock (ref block' iv);  		BlockEncrypt (ref block);  		Buffer.BlockCopy (block' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  else {  	for (int i = 0; i < plainText.Length; i += 8) {  		Buffer.BlockCopy (plainText' i' block' 0' 8);  		Buffer.BlockCopy (block' 0' preblock' 0' 8);  		BlockDecrypt (ref block);  		XorBlock (ref block' iv);  		Buffer.BlockCopy (preblock' 0' iv' 0' 8);  		Buffer.BlockCopy (block' 0' plainText' i' 8);  	}  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	XorBlock (ref block' iv);  	BlockEncrypt (ref block);  	Buffer.BlockCopy (block' 0' iv' 0' 8);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	XorBlock (ref block' iv);  	BlockEncrypt (ref block);  	Buffer.BlockCopy (block' 0' iv' 0' 8);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	XorBlock (ref block' iv);  	BlockEncrypt (ref block);  	Buffer.BlockCopy (block' 0' iv' 0' 8);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	XorBlock (ref block' iv);  	BlockEncrypt (ref block);  	Buffer.BlockCopy (block' 0' iv' 0' 8);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: i += 8
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: Buffer.BlockCopy (plainText' i' block' 0' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: Buffer.BlockCopy (block' 0' iv' 0' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: Buffer.BlockCopy (block' 0' plainText' i' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	Buffer.BlockCopy (block' 0' preblock' 0' 8);  	BlockDecrypt (ref block);  	XorBlock (ref block' iv);  	Buffer.BlockCopy (preblock' 0' iv' 0' 8);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	Buffer.BlockCopy (block' 0' preblock' 0' 8);  	BlockDecrypt (ref block);  	XorBlock (ref block' iv);  	Buffer.BlockCopy (preblock' 0' iv' 0' 8);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	Buffer.BlockCopy (block' 0' preblock' 0' 8);  	BlockDecrypt (ref block);  	XorBlock (ref block' iv);  	Buffer.BlockCopy (preblock' 0' iv' 0' 8);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	Buffer.BlockCopy (block' 0' preblock' 0' 8);  	BlockDecrypt (ref block);  	XorBlock (ref block' iv);  	Buffer.BlockCopy (preblock' 0' iv' 0' 8);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: for (int i = 0; i < plainText.Length; i += 8) {  	Buffer.BlockCopy (plainText' i' block' 0' 8);  	Buffer.BlockCopy (block' 0' preblock' 0' 8);  	BlockDecrypt (ref block);  	XorBlock (ref block' iv);  	Buffer.BlockCopy (preblock' 0' iv' 0' 8);  	Buffer.BlockCopy (block' 0' plainText' i' 8);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: i += 8
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: Buffer.BlockCopy (plainText' i' block' 0' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: Buffer.BlockCopy (block' 0' preblock' 0' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: Buffer.BlockCopy (preblock' 0' iv' 0' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,Crypt_CBC,The following statement contains a magic number: Buffer.BlockCopy (block' 0' plainText' i' 8);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetBlock,The following statement contains a magic number: Buffer.BlockCopy (block' 0' block1' 0' 4);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetBlock,The following statement contains a magic number: Buffer.BlockCopy (block' 4' block2' 0' 4);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,SetBlock,The following statement contains a magic number: Buffer.BlockCopy (block' 4' block2' 0' 4);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetBlock,The following statement contains a magic number: Buffer.BlockCopy (block1' 0' block' 0' 4);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetBlock,The following statement contains a magic number: Buffer.BlockCopy (block2' 0' block' 4' 4);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetBlock,The following statement contains a magic number: Buffer.BlockCopy (block2' 0' block' 4' 4);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,encipher,The following statement contains a magic number: for (uint i = 0; i < ROUNDS; i += 2) {  	xr_par = round (xr_par' xl_par' i + 1);  	xl_par = round (xl_par' xr_par' i + 2);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,encipher,The following statement contains a magic number: for (uint i = 0; i < ROUNDS; i += 2) {  	xr_par = round (xr_par' xl_par' i + 1);  	xl_par = round (xl_par' xr_par' i + 2);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,encipher,The following statement contains a magic number: i += 2
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,encipher,The following statement contains a magic number: xl_par = round (xl_par' xr_par' i + 2);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,encipher,The following statement contains a magic number: xr_par = xr_par ^ bf_P [17];  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,decipher,The following statement contains a magic number: xl_par ^= bf_P [17];  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,decipher,The following statement contains a magic number: for (uint i = 16; i > 0; i -= 2) {  	xr_par = round (xr_par' xl_par' i);  	xl_par = round (xl_par' xr_par' i - 1);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,decipher,The following statement contains a magic number: for (uint i = 16; i > 0; i -= 2) {  	xr_par = round (xr_par' xl_par' i);  	xl_par = round (xl_par' xr_par' i - 1);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,decipher,The following statement contains a magic number: i -= 2
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte0,The following statement contains a magic number: return (byte)(w / 256 / 256 / 256 % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte0,The following statement contains a magic number: return (byte)(w / 256 / 256 / 256 % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte0,The following statement contains a magic number: return (byte)(w / 256 / 256 / 256 % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte0,The following statement contains a magic number: return (byte)(w / 256 / 256 / 256 % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte1,The following statement contains a magic number: return (byte)(w / 256 / 256 % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte1,The following statement contains a magic number: return (byte)(w / 256 / 256 % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte1,The following statement contains a magic number: return (byte)(w / 256 / 256 % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte2,The following statement contains a magic number: return (byte)(w / 256 % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte2,The following statement contains a magic number: return (byte)(w / 256 % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,wordByte3,The following statement contains a magic number: return (byte)(w % 256);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < hex.Length - 1; i += 2) {  	byte a = GetHex (hex [i]);  	byte b = GetHex (hex [i + 1]);  	r [i / 2] = (byte)(a * 16 + b);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < hex.Length - 1; i += 2) {  	byte a = GetHex (hex [i]);  	byte b = GetHex (hex [i + 1]);  	r [i / 2] = (byte)(a * 16 + b);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < hex.Length - 1; i += 2) {  	byte a = GetHex (hex [i]);  	byte b = GetHex (hex [i + 1]);  	r [i / 2] = (byte)(a * 16 + b);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,HexToByte,The following statement contains a magic number: i += 2
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,HexToByte,The following statement contains a magic number: r [i / 2] = (byte)(a * 16 + b);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,HexToByte,The following statement contains a magic number: r [i / 2] = (byte)(a * 16 + b);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetHex,The following statement contains a magic number: if (x <= '9' && x >= '0') {  	return (byte)(x - '0');  }  else if (x <= 'z' && x >= 'a') {  	return (byte)(x - 'a' + 10);  }  else if (x <= 'Z' && x >= 'A') {  	return (byte)(x - 'A' + 10);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetHex,The following statement contains a magic number: if (x <= '9' && x >= '0') {  	return (byte)(x - '0');  }  else if (x <= 'z' && x >= 'a') {  	return (byte)(x - 'a' + 10);  }  else if (x <= 'Z' && x >= 'A') {  	return (byte)(x - 'A' + 10);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetHex,The following statement contains a magic number: if (x <= 'z' && x >= 'a') {  	return (byte)(x - 'a' + 10);  }  else if (x <= 'Z' && x >= 'A') {  	return (byte)(x - 'A' + 10);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetHex,The following statement contains a magic number: if (x <= 'z' && x >= 'a') {  	return (byte)(x - 'a' + 10);  }  else if (x <= 'Z' && x >= 'A') {  	return (byte)(x - 'A' + 10);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetHex,The following statement contains a magic number: return (byte)(x - 'a' + 10);  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetHex,The following statement contains a magic number: if (x <= 'Z' && x >= 'A') {  	return (byte)(x - 'A' + 10);  }  
Magic Number,BlowFishCS,BlowFish,C:\repos\judypol_JordyLibary\JordyLibary\ORM\BlowFish.cs,GetHex,The following statement contains a magic number: return (byte)(x - 'A' + 10);  
Magic Number,JordyLibary.ORM,ConnectionContext,C:\repos\judypol_JordyLibary\JordyLibary\ORM\ConnectionContext.cs,List,The following statement contains a magic number: if (region == null)  	region = new Region {  		Start = 0'  		Size = 99999999  	};  
Magic Number,JordyLibary.ORM,ConnectionContext,C:\repos\judypol_JordyLibary\JordyLibary\ORM\ConnectionContext.cs,List,The following statement contains a magic number: region = new Region {  	Start = 0'  	Size = 99999999  };  
Magic Number,JordyLibary.ORM,ConnectionContext,C:\repos\judypol_JordyLibary\JordyLibary\ORM\ConnectionContext.cs,GetValues,The following statement contains a magic number: if (region == null) {  	region = new Region (0' 9999999);  }  
Magic Number,JordyLibary.ORM,ConnectionContext,C:\repos\judypol_JordyLibary\JordyLibary\ORM\ConnectionContext.cs,GetValues,The following statement contains a magic number: region = new Region (0' 9999999);  
Magic Number,JordyLibary.ORM,DBContext,C:\repos\judypol_JordyLibary\JordyLibary\ORM\DBContext.cs,DBContext,The following statement contains a magic number: DefaultListMaxSize = 100;  
Magic Number,JordyLibary.ORM,ModuleCast,C:\repos\judypol_JordyLibary\JordyLibary\ORM\ModuleCast.cs,GetModuleCast,The following statement contains a magic number: lock (mCasters) {  	if (!mCasters.TryGetValue (sourceType' out result)) {  		result = new Dictionary<Type' ModuleCast> (8);  		mCasters.Add (sourceType' result);  	}  }  
Magic Number,JordyLibary.ORM,ModuleCast,C:\repos\judypol_JordyLibary\JordyLibary\ORM\ModuleCast.cs,GetModuleCast,The following statement contains a magic number: if (!mCasters.TryGetValue (sourceType' out result)) {  	result = new Dictionary<Type' ModuleCast> (8);  	mCasters.Add (sourceType' result);  }  
Magic Number,JordyLibary.ORM,ModuleCast,C:\repos\judypol_JordyLibary\JordyLibary\ORM\ModuleCast.cs,GetModuleCast,The following statement contains a magic number: result = new Dictionary<Type' ModuleCast> (8);  
Magic Number,JordyLibary.ORM,SQL,C:\repos\judypol_JordyLibary\JordyLibary\ORM\SmarkData.cs,List,The following statement contains a magic number: if (region == null) {  	region = new Region (0' 99999999);  }  
Magic Number,JordyLibary.ORM,SQL,C:\repos\judypol_JordyLibary\JordyLibary\ORM\SmarkData.cs,List,The following statement contains a magic number: region = new Region (0' 99999999);  
Magic Number,JordyLibary.ORM.Mappings,CommandReader,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\CommandReader.cs,GetSqlReaders,The following statement contains a magic number: if (!mCommandReaders.TryGetValue (key' out result)) {  	lock (mCommandReaders) {  		if (!mCommandReaders.TryGetValue (key' out result)) {  			result = new Dictionary<Type' CommandReader> (8);  			mCommandReaders.Add (key' result);  		}  	}  }  
Magic Number,JordyLibary.ORM.Mappings,CommandReader,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\CommandReader.cs,GetSqlReaders,The following statement contains a magic number: lock (mCommandReaders) {  	if (!mCommandReaders.TryGetValue (key' out result)) {  		result = new Dictionary<Type' CommandReader> (8);  		mCommandReaders.Add (key' result);  	}  }  
Magic Number,JordyLibary.ORM.Mappings,CommandReader,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\CommandReader.cs,GetSqlReaders,The following statement contains a magic number: if (!mCommandReaders.TryGetValue (key' out result)) {  	result = new Dictionary<Type' CommandReader> (8);  	mCommandReaders.Add (key' result);  }  
Magic Number,JordyLibary.ORM.Mappings,CommandReader,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Mappings\CommandReader.cs,GetSqlReaders,The following statement contains a magic number: result = new Dictionary<Type' CommandReader> (8);  
Missing Default,JordyLibary.Core,ReflectionHandlerFactory,C:\repos\judypol_JordyLibary\JordyLibary\Core\ReflectionHandlerFactory.cs,EmitFastInt,The following switch statement is missing a default case: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Missing Default,JordyLibary.ORM,GetObject,C:\repos\judypol_JordyLibary\JordyLibary\ORM\Result.cs,Execute,The following switch statement is missing a default case: switch (type) {  case HandlerValueType.ValueType:  	return DBContext.Load (Type' value' cc);  case HandlerValueType.PROC:  	return DBContext.ExecProcToObject (Type' cc' value);  case HandlerValueType.SQL:  	return ((SQL)value).ListFirst (Type' cc);  case HandlerValueType.EXPRESSION:  	return ((Expression)value).ListFirst (Type' cc' orderby);  case HandlerValueType.String:  	string str = (string)value;  	if (GetValue.IsValueKey (str)) {  		return DBContext.Load (Type' value' cc);  	}  	else {  		if (GetValue.IsSelectSQL (str)) {  			return new SQL (str).ListFirst (Type' cc);  		}  		else {  			Expression exp = new Expression (str);  			return exp.ListFirst (Type' cc' orderby);  		}  	}  }  
