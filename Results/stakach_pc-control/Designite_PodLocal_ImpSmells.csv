Implementation smell,Namespace,Class,File,Method,Description
Long Method,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The method has 124 lines of code.
Complex Method,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,Cyclomatic complexity of the method is 10
Long Parameter List,PodLocal,Authentication,C:\repos\stakach_pc-control\PodLocal\Authentication.cs,LogonUser,The method has 6 parameters.
Long Statement,PodLocal,Authentication,C:\repos\stakach_pc-control\PodLocal\Authentication.cs,authenticate,The length of the statement  "	if (LogonUser (username' domain' password' (int)LogonType.LOGON32_LOGON_INTERACTIVE' (int)LogonProvider.LOGON32_PROVIDER_DEFAULT' out hToken)) { " is 144.
Long Statement,PodLocal,CamControl,C:\repos\stakach_pc-control\PodLocal\CamControl.cs,reloadCamera,The length of the statement  "			int hr = graphBuilder.AddSourceFilterForMoniker (capDevices [camIndex].Mon' null' capDevices [camIndex].Name' out camFilter); " is 125.
Long Statement,PodLocal,ClientRequest,C:\repos\stakach_pc-control\PodLocal\ClientRequest.cs,process,The length of the statement  "	//  Updated tray should have a hash of module names and save status against them. Then we can show all status at once for everything. " is 133.
Long Statement,PodLocal,SecureTcpServer,C:\repos\stakach_pc-control\PodLocal\SecureTcpServer.cs,OnAcceptConnection,The length of the statement  "		sslStream.BeginAuthenticateAsServer (this.serverCert' this.clientCertificateRequired' this.sslProtocols' this.checkCertifcateRevocation' //checkCertifcateRevocation " is 164.
Long Statement,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(PodLocal)); " is 129.
Long Statement,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The length of the statement  "	this.label1.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The length of the statement  "	this.label2.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Empty Catch Block,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,sendObject,The method has an empty catch block.
Empty Catch Block,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,sendObject,The method has an empty catch block.
Empty Catch Block,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The method has an empty catch block.
Empty Catch Block,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The method has an empty catch block.
Empty Catch Block,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The method has an empty catch block.
Empty Catch Block,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The method has an empty catch block.
Magic Number,PodLocal,CamControl,C:\repos\stakach_pc-control\PodLocal\CamControl.cs,center,The following statement contains a magic number: theCamera.Set (CameraControlProperty.Pan' (pan.min + pan.max) / 2' CameraControlFlags.Manual);  
Magic Number,PodLocal,CamControl,C:\repos\stakach_pc-control\PodLocal\CamControl.cs,center,The following statement contains a magic number: theCamera.Set (CameraControlProperty.Tilt' (tilt.min + tilt.max) / 2' CameraControlFlags.Manual);  
Magic Number,PodLocal,ClientRequest,C:\repos\stakach_pc-control\PodLocal\ClientRequest.cs,authenticate,The following statement contains a magic number: if (control == "auth" && args.Length >= 2) {  	hasAuthed = Authentication.authenticate (command' args [0]' args [1]);  	if (hasAuthed)  		return new BoolResponse (true);  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,Server,The following statement contains a magic number: if (server == null)// Singleton   {  	updateStatus += function;  	int port = 443;  	int attempt = 0;  	bool success = false;  	string certPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);  	certPath = Path.Combine (certPath' "serverCert.cer");  	string localPath = System.Reflection.Assembly.GetEntryAssembly ().Location;  	localPath = Path.GetDirectoryName (localPath);  	while (attempt < 3 && !success) {  		try {  			//certPath = Path.Combine(certPath' "serverCert.cer");  			X509Certificate serverCert = X509Certificate.CreateFromCertFile (certPath);  			server = new SecureTcpServer (port' serverCert' new SecureConnectionResultsCallback (OnServerConnectionAvailable));  			lock (_locker) {  				doStatusUpdate ();  			}  			server.StartListening ();  			success = true;  		}  		catch (System.Net.Sockets.SocketException e) {  			if (e.SocketErrorCode == SocketError.AddressAlreadyInUse) {  				MessageBox.Show ("Application already running. Socket in use.");  				System.Environment.Exit (-1);  				return;  			}  		}  		catch {  			try {  				System.Diagnostics.Process.Start (Path.Combine (localPath' "makecert.exe")' "-r -pe -n \"CN=MachineName_SS\" -ss my -a sha1 -sky exchange -eku 1.3.6.1.5.5.7.3.1 -sp \"Microsoft RSA SChannel Cryptographic Provider\" -sy 12 \"" + certPath + "\"");  				Thread.Sleep (5000);  			}  			catch {  				DialogResult res = MessageBox.Show ("Encryption Failed. Unable to generate TLS key file..."' "Security Notice");  				System.Environment.Exit (-1);  				return;  			}  		}  		attempt++;  	}  	if (!success) {  		System.Environment.Exit (-1);  		return;  	}  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,Server,The following statement contains a magic number: if (server == null)// Singleton   {  	updateStatus += function;  	int port = 443;  	int attempt = 0;  	bool success = false;  	string certPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);  	certPath = Path.Combine (certPath' "serverCert.cer");  	string localPath = System.Reflection.Assembly.GetEntryAssembly ().Location;  	localPath = Path.GetDirectoryName (localPath);  	while (attempt < 3 && !success) {  		try {  			//certPath = Path.Combine(certPath' "serverCert.cer");  			X509Certificate serverCert = X509Certificate.CreateFromCertFile (certPath);  			server = new SecureTcpServer (port' serverCert' new SecureConnectionResultsCallback (OnServerConnectionAvailable));  			lock (_locker) {  				doStatusUpdate ();  			}  			server.StartListening ();  			success = true;  		}  		catch (System.Net.Sockets.SocketException e) {  			if (e.SocketErrorCode == SocketError.AddressAlreadyInUse) {  				MessageBox.Show ("Application already running. Socket in use.");  				System.Environment.Exit (-1);  				return;  			}  		}  		catch {  			try {  				System.Diagnostics.Process.Start (Path.Combine (localPath' "makecert.exe")' "-r -pe -n \"CN=MachineName_SS\" -ss my -a sha1 -sky exchange -eku 1.3.6.1.5.5.7.3.1 -sp \"Microsoft RSA SChannel Cryptographic Provider\" -sy 12 \"" + certPath + "\"");  				Thread.Sleep (5000);  			}  			catch {  				DialogResult res = MessageBox.Show ("Encryption Failed. Unable to generate TLS key file..."' "Security Notice");  				System.Environment.Exit (-1);  				return;  			}  		}  		attempt++;  	}  	if (!success) {  		System.Environment.Exit (-1);  		return;  	}  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,Server,The following statement contains a magic number: if (server == null)// Singleton   {  	updateStatus += function;  	int port = 443;  	int attempt = 0;  	bool success = false;  	string certPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);  	certPath = Path.Combine (certPath' "serverCert.cer");  	string localPath = System.Reflection.Assembly.GetEntryAssembly ().Location;  	localPath = Path.GetDirectoryName (localPath);  	while (attempt < 3 && !success) {  		try {  			//certPath = Path.Combine(certPath' "serverCert.cer");  			X509Certificate serverCert = X509Certificate.CreateFromCertFile (certPath);  			server = new SecureTcpServer (port' serverCert' new SecureConnectionResultsCallback (OnServerConnectionAvailable));  			lock (_locker) {  				doStatusUpdate ();  			}  			server.StartListening ();  			success = true;  		}  		catch (System.Net.Sockets.SocketException e) {  			if (e.SocketErrorCode == SocketError.AddressAlreadyInUse) {  				MessageBox.Show ("Application already running. Socket in use.");  				System.Environment.Exit (-1);  				return;  			}  		}  		catch {  			try {  				System.Diagnostics.Process.Start (Path.Combine (localPath' "makecert.exe")' "-r -pe -n \"CN=MachineName_SS\" -ss my -a sha1 -sky exchange -eku 1.3.6.1.5.5.7.3.1 -sp \"Microsoft RSA SChannel Cryptographic Provider\" -sy 12 \"" + certPath + "\"");  				Thread.Sleep (5000);  			}  			catch {  				DialogResult res = MessageBox.Show ("Encryption Failed. Unable to generate TLS key file..."' "Security Notice");  				System.Environment.Exit (-1);  				return;  			}  		}  		attempt++;  	}  	if (!success) {  		System.Environment.Exit (-1);  		return;  	}  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,Server,The following statement contains a magic number: while (attempt < 3 && !success) {  	try {  		//certPath = Path.Combine(certPath' "serverCert.cer");  		X509Certificate serverCert = X509Certificate.CreateFromCertFile (certPath);  		server = new SecureTcpServer (port' serverCert' new SecureConnectionResultsCallback (OnServerConnectionAvailable));  		lock (_locker) {  			doStatusUpdate ();  		}  		server.StartListening ();  		success = true;  	}  	catch (System.Net.Sockets.SocketException e) {  		if (e.SocketErrorCode == SocketError.AddressAlreadyInUse) {  			MessageBox.Show ("Application already running. Socket in use.");  			System.Environment.Exit (-1);  			return;  		}  	}  	catch {  		try {  			System.Diagnostics.Process.Start (Path.Combine (localPath' "makecert.exe")' "-r -pe -n \"CN=MachineName_SS\" -ss my -a sha1 -sky exchange -eku 1.3.6.1.5.5.7.3.1 -sp \"Microsoft RSA SChannel Cryptographic Provider\" -sy 12 \"" + certPath + "\"");  			Thread.Sleep (5000);  		}  		catch {  			DialogResult res = MessageBox.Show ("Encryption Failed. Unable to generate TLS key file..."' "Security Notice");  			System.Environment.Exit (-1);  			return;  		}  	}  	attempt++;  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,Server,The following statement contains a magic number: while (attempt < 3 && !success) {  	try {  		//certPath = Path.Combine(certPath' "serverCert.cer");  		X509Certificate serverCert = X509Certificate.CreateFromCertFile (certPath);  		server = new SecureTcpServer (port' serverCert' new SecureConnectionResultsCallback (OnServerConnectionAvailable));  		lock (_locker) {  			doStatusUpdate ();  		}  		server.StartListening ();  		success = true;  	}  	catch (System.Net.Sockets.SocketException e) {  		if (e.SocketErrorCode == SocketError.AddressAlreadyInUse) {  			MessageBox.Show ("Application already running. Socket in use.");  			System.Environment.Exit (-1);  			return;  		}  	}  	catch {  		try {  			System.Diagnostics.Process.Start (Path.Combine (localPath' "makecert.exe")' "-r -pe -n \"CN=MachineName_SS\" -ss my -a sha1 -sky exchange -eku 1.3.6.1.5.5.7.3.1 -sp \"Microsoft RSA SChannel Cryptographic Provider\" -sy 12 \"" + certPath + "\"");  			Thread.Sleep (5000);  		}  		catch {  			DialogResult res = MessageBox.Show ("Encryption Failed. Unable to generate TLS key file..."' "Security Notice");  			System.Environment.Exit (-1);  			return;  		}  	}  	attempt++;  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,Server,The following statement contains a magic number: try {  	//certPath = Path.Combine(certPath' "serverCert.cer");  	X509Certificate serverCert = X509Certificate.CreateFromCertFile (certPath);  	server = new SecureTcpServer (port' serverCert' new SecureConnectionResultsCallback (OnServerConnectionAvailable));  	lock (_locker) {  		doStatusUpdate ();  	}  	server.StartListening ();  	success = true;  }  catch (System.Net.Sockets.SocketException e) {  	if (e.SocketErrorCode == SocketError.AddressAlreadyInUse) {  		MessageBox.Show ("Application already running. Socket in use.");  		System.Environment.Exit (-1);  		return;  	}  }  catch {  	try {  		System.Diagnostics.Process.Start (Path.Combine (localPath' "makecert.exe")' "-r -pe -n \"CN=MachineName_SS\" -ss my -a sha1 -sky exchange -eku 1.3.6.1.5.5.7.3.1 -sp \"Microsoft RSA SChannel Cryptographic Provider\" -sy 12 \"" + certPath + "\"");  		Thread.Sleep (5000);  	}  	catch {  		DialogResult res = MessageBox.Show ("Encryption Failed. Unable to generate TLS key file..."' "Security Notice");  		System.Environment.Exit (-1);  		return;  	}  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,Server,The following statement contains a magic number: try {  	System.Diagnostics.Process.Start (Path.Combine (localPath' "makecert.exe")' "-r -pe -n \"CN=MachineName_SS\" -ss my -a sha1 -sky exchange -eku 1.3.6.1.5.5.7.3.1 -sp \"Microsoft RSA SChannel Cryptographic Provider\" -sy 12 \"" + certPath + "\"");  	Thread.Sleep (5000);  }  catch {  	DialogResult res = MessageBox.Show ("Encryption Failed. Unable to generate TLS key file..."' "Security Notice");  	System.Environment.Exit (-1);  	return;  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,Server,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The following statement contains a magic number: try {  	await writer.WriteAsync (start + JsonConvert.SerializeObject (new Command ("authenticate")) + end);  	bool authenticated = false;  	char[] response = new char[4096];  	int responseSize;  	while (true) {  		try {  			//  			// Read in the data  			//  			responseSize = await reader.ReadAsync (response' 0' 4096);  			if (responseSize == 0)  				break;  			// Disconnect has occured  			//  			// Extract complete responses from the stream and process them  			//  			recieved = buff.extract (new string (response' 0' responseSize));  			foreach (string item in recieved) {  				string final;  				object ret;  				try {  					//  					// Remove the start character  					//  					final = (item.Split (new char[] {  						start [0]  					})) [1];  					//  					// Process client response  					//  					ClientRequest request = JsonConvert.DeserializeObject<ClientRequest> (final);  					if (authenticated) {  						//   						// Process response  						//  						ret = request.process (myID);  					}  					else {  						//  						// Attempt to Authenticate  						//  						ret = request.authenticate (ref authenticated);  						if (authenticated)// Request camera status  						 {  							MethodInvoker action = delegate {  								PodLocal.self.camera.sendStatus (myID);  							};  							PodLocal.self.cameraStatus.BeginInvoke (action);  						}  					}  					await writer.WriteAsync (start + JsonConvert.SerializeObject (ret) + end);  				}  				catch {  					//  					// TODO:: Log these errors somewhere  					//  					//Console.WriteLine("Server error while processing response.");  					break;  				}  			}  		}  		catch {  			//  			// TODO:: Log these errors somewhere  			//  			//Console.WriteLine("Server error!");  			break;  		}  	}  }  catch {  	// grab any errors occuring at init  }  finally {  	lock (_locker) {  		currentConnections.Remove (myID);  		connections--;  		doStatusUpdate ();  	}  	try {  		writer.Close ();  	}  	catch {  	}  	try {  		reader.Close ();  	}  	catch {  	}  	try {  		stream.Close ();  	}  	catch {  	}  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The following statement contains a magic number: try {  	await writer.WriteAsync (start + JsonConvert.SerializeObject (new Command ("authenticate")) + end);  	bool authenticated = false;  	char[] response = new char[4096];  	int responseSize;  	while (true) {  		try {  			//  			// Read in the data  			//  			responseSize = await reader.ReadAsync (response' 0' 4096);  			if (responseSize == 0)  				break;  			// Disconnect has occured  			//  			// Extract complete responses from the stream and process them  			//  			recieved = buff.extract (new string (response' 0' responseSize));  			foreach (string item in recieved) {  				string final;  				object ret;  				try {  					//  					// Remove the start character  					//  					final = (item.Split (new char[] {  						start [0]  					})) [1];  					//  					// Process client response  					//  					ClientRequest request = JsonConvert.DeserializeObject<ClientRequest> (final);  					if (authenticated) {  						//   						// Process response  						//  						ret = request.process (myID);  					}  					else {  						//  						// Attempt to Authenticate  						//  						ret = request.authenticate (ref authenticated);  						if (authenticated)// Request camera status  						 {  							MethodInvoker action = delegate {  								PodLocal.self.camera.sendStatus (myID);  							};  							PodLocal.self.cameraStatus.BeginInvoke (action);  						}  					}  					await writer.WriteAsync (start + JsonConvert.SerializeObject (ret) + end);  				}  				catch {  					//  					// TODO:: Log these errors somewhere  					//  					//Console.WriteLine("Server error while processing response.");  					break;  				}  			}  		}  		catch {  			//  			// TODO:: Log these errors somewhere  			//  			//Console.WriteLine("Server error!");  			break;  		}  	}  }  catch {  	// grab any errors occuring at init  }  finally {  	lock (_locker) {  		currentConnections.Remove (myID);  		connections--;  		doStatusUpdate ();  	}  	try {  		writer.Close ();  	}  	catch {  	}  	try {  		reader.Close ();  	}  	catch {  	}  	try {  		stream.Close ();  	}  	catch {  	}  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The following statement contains a magic number: while (true) {  	try {  		//  		// Read in the data  		//  		responseSize = await reader.ReadAsync (response' 0' 4096);  		if (responseSize == 0)  			break;  		// Disconnect has occured  		//  		// Extract complete responses from the stream and process them  		//  		recieved = buff.extract (new string (response' 0' responseSize));  		foreach (string item in recieved) {  			string final;  			object ret;  			try {  				//  				// Remove the start character  				//  				final = (item.Split (new char[] {  					start [0]  				})) [1];  				//  				// Process client response  				//  				ClientRequest request = JsonConvert.DeserializeObject<ClientRequest> (final);  				if (authenticated) {  					//   					// Process response  					//  					ret = request.process (myID);  				}  				else {  					//  					// Attempt to Authenticate  					//  					ret = request.authenticate (ref authenticated);  					if (authenticated)// Request camera status  					 {  						MethodInvoker action = delegate {  							PodLocal.self.camera.sendStatus (myID);  						};  						PodLocal.self.cameraStatus.BeginInvoke (action);  					}  				}  				await writer.WriteAsync (start + JsonConvert.SerializeObject (ret) + end);  			}  			catch {  				//  				// TODO:: Log these errors somewhere  				//  				//Console.WriteLine("Server error while processing response.");  				break;  			}  		}  	}  	catch {  		//  		// TODO:: Log these errors somewhere  		//  		//Console.WriteLine("Server error!");  		break;  	}  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The following statement contains a magic number: try {  	//  	// Read in the data  	//  	responseSize = await reader.ReadAsync (response' 0' 4096);  	if (responseSize == 0)  		break;  	// Disconnect has occured  	//  	// Extract complete responses from the stream and process them  	//  	recieved = buff.extract (new string (response' 0' responseSize));  	foreach (string item in recieved) {  		string final;  		object ret;  		try {  			//  			// Remove the start character  			//  			final = (item.Split (new char[] {  				start [0]  			})) [1];  			//  			// Process client response  			//  			ClientRequest request = JsonConvert.DeserializeObject<ClientRequest> (final);  			if (authenticated) {  				//   				// Process response  				//  				ret = request.process (myID);  			}  			else {  				//  				// Attempt to Authenticate  				//  				ret = request.authenticate (ref authenticated);  				if (authenticated)// Request camera status  				 {  					MethodInvoker action = delegate {  						PodLocal.self.camera.sendStatus (myID);  					};  					PodLocal.self.cameraStatus.BeginInvoke (action);  				}  			}  			await writer.WriteAsync (start + JsonConvert.SerializeObject (ret) + end);  		}  		catch {  			//  			// TODO:: Log these errors somewhere  			//  			//Console.WriteLine("Server error while processing response.");  			break;  		}  	}  }  catch {  	//  	// TODO:: Log these errors somewhere  	//  	//Console.WriteLine("Server error!");  	break;  }  
Magic Number,PodLocal,Server,C:\repos\stakach_pc-control\PodLocal\Server.cs,OnServerConnectionAvailable,The following statement contains a magic number: responseSize = await reader.ReadAsync (response' 0' 4096);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep (2000);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,PodLocal,The following statement contains a magic number: trayIcon.Icon = new Icon (SystemIcons.Information' 40' 40);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,PodLocal,The following statement contains a magic number: trayIcon.Icon = new Icon (SystemIcons.Information' 40' 40);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,mouseclick,The following statement contains a magic number: trayIcon.ShowBalloonTip (10);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (12' 23);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (12' 23);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (132' 20);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (132' 20);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.cameraSelection.Location = new System.Drawing.Point (23' 46);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.cameraSelection.Location = new System.Drawing.Point (23' 46);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.cameraSelection.Size = new System.Drawing.Size (376' 21);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.cameraSelection.Size = new System.Drawing.Size (376' 21);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (12' 117);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (12' 117);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (167' 20);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (167' 20);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.connectionList.Location = new System.Drawing.Point (23' 239);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.connectionList.Location = new System.Drawing.Point (23' 239);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.connectionList.Size = new System.Drawing.Size (376' 69);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.connectionList.Size = new System.Drawing.Size (376' 69);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.connectionList.TabIndex = 3;  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.cameraStatus.Location = new System.Drawing.Point (13' 79);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.cameraStatus.Location = new System.Drawing.Point (13' 79);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.cameraStatus.Size = new System.Drawing.Size (40' 13);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.cameraStatus.Size = new System.Drawing.Size (40' 13);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.cameraStatus.TabIndex = 4;  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.serverStatus.Location = new System.Drawing.Point (13' 146);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.serverStatus.Location = new System.Drawing.Point (13' 146);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.serverStatus.Size = new System.Drawing.Size (40' 13);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.serverStatus.Size = new System.Drawing.Size (40' 13);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.serverStatus.TabIndex = 5;  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (380' 9);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point (380' 9);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (28' 13);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size (28' 13);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 6;  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (427' 192);  
Magic Number,PodLocal,PodLocal,C:\repos\stakach_pc-control\PodLocal\PodLocal.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (427' 192);  
Missing Default,PodLocal,CamControl,C:\repos\stakach_pc-control\PodLocal\CamControl.cs,processCommand,The following switch statement is missing a default case: switch (command) {  case "status":  	sendStatus (id);  	break;  case "up":  	up ();  	Server.sendObject (tilt);  	// Send to all  	break;  case "down":  	down ();  	Server.sendObject (tilt);  	// Send to all  	break;  case "left":  	left ();  	Server.sendObject (pan);  	// Send to all  	break;  case "right":  	right ();  	Server.sendObject (pan);  	// Send to all  	break;  case "center":  	center ();  	Server.sendObject (tilt);  	// Send to all  	Server.sendObject (pan);  	// Send to all  	break;  case "zoomin":  	zoomin ();  	Server.sendObject (zoom);  	// Send to all  	break;  case "zoomout":  	zoomout ();  	Server.sendObject (zoom);  	// Send to all  	break;  case "zoom":  	dozoom (Int32.Parse (args [0]));  	Server.sendObject (zoom);  	// Send to all  	break;  }  
Missing Default,PodLocal,ClientRequest,C:\repos\stakach_pc-control\PodLocal\ClientRequest.cs,process,The following switch statement is missing a default case: switch (control) {  case "cam":  	//  	// All camera control must be done on a single thread  	//  	MethodInvoker action = delegate {  		PodLocal.self.camera.processCommand (command' args' ID);  	};  	PodLocal.self.cameraStatus.BeginInvoke (action);  	return new BoolResponse (true);  case "app":  	if (args.Length >= 1) {  		AppLauncher.launch (command' String.Join (" "' args));  	}  	else {  		AppLauncher.launch (command);  	}  	return new BoolResponse (true);  }  
