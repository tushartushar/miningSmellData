Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Parrot.Tests.Parser,AttributeTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\AttributeTests.cs,ElementWithMultipleAttributesProducesBlockElementWithMultipleAttributes,The following statement contains a magic number: Assert.AreEqual(2' document.Children[0].Attributes.Count);
Magic Number,Parrot.Tests.Parser,AttributeTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\AttributeTests.cs,StringLiteralParserTests,The following statement contains a magic number: Assert.AreEqual(4' parts.Count);
Magic Number,Parrot.Tests.Parser,AttributeTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\AttributeTests.cs,StringLiteralParserTests,The following statement contains a magic number: Assert.AreEqual(StringLiteralPartType.Literal' parts[2].Type);
Magic Number,Parrot.Tests.Parser,AttributeTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\AttributeTests.cs,StringLiteralParserTests,The following statement contains a magic number: Assert.AreEqual(" awesome "' parts[2].Data);
Magic Number,Parrot.Tests.Parser,AttributeTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\AttributeTests.cs,StringLiteralParserTests,The following statement contains a magic number: Assert.AreEqual("right"' parts[3].Data);
Magic Number,Parrot.Tests.Parser,AttributeTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\AttributeTests.cs,StringLiteralParserTests,The following statement contains a magic number: Assert.AreEqual(2' parts.Count);
Magic Number,Parrot.Tests.Parser,AttributeTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\AttributeTests.cs,StringLiteralParserTests,The following statement contains a magic number: Assert.AreEqual(2' parts.Count);
Magic Number,Parrot.Tests.Parser,ColonTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\ColonTests.cs,EndOfLine,The following statement contains a magic number: Assert.AreEqual(2' document.Children.Count);
Magic Number,Parrot.Tests.Parser,ParameterTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\ParameterTests.cs,ParameterLoadsTwoParameters,The following statement contains a magic number: Assert.AreEqual(2' document.Children[0].Parameters.Count);
Magic Number,Parrot.Tests.Parser,StatementTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StatementTests.cs,StatementWithOneSibling,The following statement contains a magic number: Assert.AreEqual(2' document.Children.Count);
Magic Number,Parrot.Tests.Parser,StatementTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StatementTests.cs,StatementWithChildFollowedByStatement,The following statement contains a magic number: Assert.AreEqual(2' document.Children.Count);
Magic Number,Parrot.Tests.Parser,StatementTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StatementTests.cs,StatementWithChildFollowedByStatementWithChild,The following statement contains a magic number: Assert.AreEqual(2' document.Children.Count);
Magic Number,Parrot.Tests.Parser,StatementTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StatementTests.cs,StatementWithLiteralChildFollowedByStatementWithChild,The following statement contains a magic number: Assert.AreEqual(2' document.Children.Count);
Magic Number,Parrot.Tests.Parser,StatementTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StatementTests.cs,StatementWithLiteralChildFollowedByStatementWithLiteralChild,The following statement contains a magic number: Assert.AreEqual(2' document.Children.Count);
Magic Number,Parrot.Tests.Parser,StatementTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StatementTests.cs,StatementWithTwoSiblings,The following statement contains a magic number: Assert.AreEqual(3' document.Children.Count);
Magic Number,Parrot.Tests.Parser,StatementTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StatementTests.cs,StatementWithTwoSiblings,The following statement contains a magic number: Assert.AreEqual("div3"' document.Children[2].Name);
Magic Number,Parrot.Tests.Parser,StatementTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StatementTests.cs,StatementWithChildrenIdentifiedAsSiblings,The following statement contains a magic number: Assert.AreEqual(2' parent.Children.Count);
Magic Number,Parrot.Tests.Parser,StatementTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StatementTests.cs,StatementWithChildrenIdentifiedAsSiblings2,The following statement contains a magic number: Assert.AreEqual(2' parent.Children[0].Children.Count);
Magic Number,Parrot.Tests.Parser,SiblingTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\SiblingTests.cs,RandomTestUntilIComeUpWithAName,The following statement contains a magic number: Assert.AreEqual(2' document.Children.Count);
Magic Number,Parrot.Tests.Parser,StringLiteralTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StringLiteralTests.cs,StringLiteralPipeChildFollowedByStringLiteralPipeChild,The following statement contains a magic number: Assert.AreEqual(2' document.Children[0].Children.Count);
Magic Number,Parrot.Tests.Parser,StringLiteralTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StringLiteralTests.cs,IdentifierPartsTests,The following statement contains a magic number: Assert.AreEqual(4' results.Count);
Magic Number,Parrot.Tests.Parser,StringLiteralTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StringLiteralTests.cs,IdentifierPartsTests,The following statement contains a magic number: Assert.AreEqual("id"' results[2].Name);
Magic Number,Parrot.Tests.Parser,StringLiteralTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StringLiteralTests.cs,IdentifierPartsTests,The following statement contains a magic number: Assert.AreEqual(IdentifierType.Id' results[2].Type);
Magic Number,Parrot.Tests.Parser,StringLiteralTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StringLiteralTests.cs,IdentifierPartsTests,The following statement contains a magic number: Assert.AreEqual("class"' results[3].Name);
Magic Number,Parrot.Tests.Parser,StringLiteralTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StringLiteralTests.cs,IdentifierPartsTests,The following statement contains a magic number: Assert.AreEqual(IdentifierType.Class' results[3].Type);
Missing Default,Parrot.Tests.Parser,StringLiteralTests,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot.Tests\Parser\StringLiteralTests.cs,GetIdentifierParts,The following switch statement is missing a default case: switch (source[i])                 {                     case ':':                         yield return new Identifier                             {                                 Name = source.Substring(index' i - index)'                                 Type = partType                             };                         partType = IdentifierType.Type;                         index = i + 1;                         break;                     case '#':                         yield return new Identifier                             {                                 Name = source.Substring(index' i - index)'                                 Type = partType                             };                         partType = IdentifierType.Id;                         index = i + 1;                         break;                     case '.':                         yield return new Identifier                             {                                 Name = source.Substring(index' i - index)'                                 Type = partType                             };                         partType = IdentifierType.Class;                         index = i + 1;                         break;                 }
