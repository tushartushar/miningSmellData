Implementation smell,Namespace,Class,File,Method,Description
Long Method,Parrot.Parser,Parser,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Parser\Parser.cs,ParseStatement,The method has 101 lines of code.
Complex Method,Parrot.Infrastructure,PrettyStringWriter,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Infrastructure\PrettyStringWriter.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Parrot.Nodes,Statement,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Nodes\Statement.cs,Statement,Cyclomatic complexity of the method is 9
Complex Method,Parrot.Nodes,StringLiteral,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Nodes\StringLiteral.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,Parrot.Parser,Parser,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Parser\Parser.cs,ParseStatement,Cyclomatic complexity of the method is 16
Long Statement,Parrot.Infrastructure,PrettyStringWriter,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Infrastructure\PrettyStringWriter.cs,Write,The length of the statement  "            if (_indentation > 0 && (_lastWritten != PrettyPrintWriteType.Literal || (_lastWritten == PrettyPrintWriteType.Literal && type == PrettyPrintWriteType.ClosingElement))) " is 168.
Long Statement,Parrot.Nodes,StringLiteral,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Nodes\StringLiteral.cs,Parse,The length of the statement  "                parts.Add(new StringLiteralPart(StringLiteralPartType.Literal' new string(c' 0' tempCounter)' source.Length - tempCounter)); " is 124.
Complex Conditional,Parrot.Infrastructure,PrettyStringWriter,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Infrastructure\PrettyStringWriter.cs,Write,The conditional expression  "_indentation > 0 && (_lastWritten != PrettyPrintWriteType.Literal || (_lastWritten == PrettyPrintWriteType.Literal && type == PrettyPrintWriteType.ClosingElement))"  is complex.
Magic Number,Parrot.Infrastructure,ValueTypeProvider,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Infrastructure\ValueTypeProvider.cs,InitializeKeywordHanlders,The following statement contains a magic number: var handlers = new Dictionary<string' Func<string' ValueTypeResult>>(4);
Magic Number,Parrot.Infrastructure,ValueTypeProvider,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Infrastructure\ValueTypeProvider.cs,GetValue,The following statement contains a magic number: result.Value = value.Substring(1' value.Length - 2);
Magic Number,Parrot.Nodes,AbstractNodeList,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Nodes\AbstractNodeList.cs,AbstractNodeList,The following statement contains a magic number: _list = new List<AbstractNode>(64);
Magic Number,Parrot.Nodes,StringLiteral,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Nodes\StringLiteral.cs,Parse,The following statement contains a magic number: List<StringLiteralPart> parts = new List<StringLiteralPart>(128);
Magic Number,Parrot.Parser,Parser,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Parser\Parser.cs,ParseStatementTail,The following statement contains a magic number: var additional = new object[3];
Magic Number,Parrot.Parser,Parser,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Parser\Parser.cs,ParseStatementTail,The following statement contains a magic number: switch (token.Type)                  {                      case TokenType.OpenParenthesis:                          additional[1] = ParseParameters(stream);                          break;                      case TokenType.OpenBracket:                          additional[0] = ParseAttributes(stream);                          break;                      case TokenType.GreaterThan:                          additional[2] = ParseChild(stream);                          break;                      case TokenType.OpenBrace:                          //parse children                          additional[2] = ParseChildren(stream);                          goto productionFound;                      default:                          //no invalid token here                          goto productionFound;                  }
Magic Number,Parrot.Parser,Parser,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Parser\Parser.cs,ParseStatementTail,The following statement contains a magic number: switch (token.Type)                  {                      case TokenType.OpenParenthesis:                          additional[1] = ParseParameters(stream);                          break;                      case TokenType.OpenBracket:                          additional[0] = ParseAttributes(stream);                          break;                      case TokenType.GreaterThan:                          additional[2] = ParseChild(stream);                          break;                      case TokenType.OpenBrace:                          //parse children                          additional[2] = ParseChildren(stream);                          goto productionFound;                      default:                          //no invalid token here                          goto productionFound;                  }
Magic Number,Parrot.Parser,Parser,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Parser\Parser.cs,ParseStatementTail,The following statement contains a magic number: return new StatementTail                  {                      Attributes = additional[0] as AttributeList'                      Parameters = additional[1] as ParameterList'                      Children = additional[2] as StatementList                  };
Missing Default,Parrot.Infrastructure,PrettyStringWriter,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Infrastructure\PrettyStringWriter.cs,Write,The following switch statement is missing a default case: switch (type)              {                  case PrettyPrintWriteType.SelfClosingElement:                      incrementIndentation = 0;                      addNewLineAfterWrite = true;                      break;                  case PrettyPrintWriteType.ClosingElement:                      if (_lastWritten == PrettyPrintWriteType.Literal)                      {                          base.Write("\r\n");                      }                      _indentation -= 1;                      addNewLineAfterWrite = true;                      break;                  case PrettyPrintWriteType.OpeningElement:                      incrementIndentation = 1;                      addNewLineAfterWrite = true;                      break;                  case PrettyPrintWriteType.Literal:                      if (_lastWritten == PrettyPrintWriteType.OpeningElement)                      {                          //incrementIndentation = 1;                      }                      break;              }
Missing Default,Parrot.Nodes,Statement,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Nodes\Statement.cs,Statement,The following switch statement is missing a default case: switch (part.Type)                      {                          case IdentifierType.Id:                              if (part.Name.Length == 0)                              {                                  Errors.Add(new MissingIdDeclaration {Index = part.Index - 1' Length = 1});                                  //throw new ParserException("Id must have a length");                              }                              else if (Attributes.Any(a => a.Key == "id"))                              {                                  Errors.Add(new MultipleIdDeclarations(part.Name) {Index = part.Index - 1' Length = part.Name.Length + 1});                                  //throw new ParserException("Id added more than once");                              }                              else                              {                                  AddAttribute(new Attribute("id"' new StringLiteral("\"" + part.Name + "\"")));                              }                              break;                          case IdentifierType.Class:                              if (part.Name.Length == 0)                              {                                  Errors.Add(new MissingClassDeclaration {Index = part.Index - 1' Length = 1});                                  //throw new ParserException("Id must have a length");                              }                              else                              {                                  AddAttribute(new Attribute("class"' new StringLiteral("\"" + part.Name + "\"")));                              }                              break;                            case IdentifierType.Type:                              AddAttribute(new Attribute("type"' new StringLiteral("\"" + part.Name + "\"")));                              break;                            case IdentifierType.Literal:                              Name = part.Name;                              break;                      }
Missing Default,Parrot.Nodes,Statement,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Nodes\Statement.cs,IdentifierTypeFromCharacter,The following switch statement is missing a default case: switch (character)              {                  case ':':                      currentType = IdentifierType.Type;                      break;                  case '#':                      currentType = IdentifierType.Id;                      break;                  case '.':                      currentType = IdentifierType.Class;                      break;              }
Missing Default,Parrot.Parser,Parser,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Parser\Parser.cs,GetStatementFromToken,The following switch statement is missing a default case: switch (identifier.Type)                  {                      case TokenType.StringLiteral:                      case TokenType.QuotedStringLiteral:                          return new StringLiteral(value' tail) { Index = identifier.Index };                        case TokenType.StringLiteralPipe:                          return new StringLiteralPipe(value.Substring(1)' tail) { Index = identifier.Index };                  }
Missing Default,Parrot.Parser,Parser,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Parser\Parser.cs,GetStatementFromToken,The following switch statement is missing a default case: switch (previousToken.Type)                  {                      case TokenType.At:                          return new EncodedOutput(value) { Index = previousToken.Index };                      case TokenType.Equal:                          return new RawOutput(value) { Index = previousToken.Index };                  }
Missing Default,Parrot.Parser,Parser,C:\research\architectureSmells\repos\ParrotFx_Parrot\src\Parrot\Parser\Parser.cs,ParseAttribute,The following switch statement is missing a default case: switch (value.Name)                      {                          case "true":                          case "false":                          case "null":                              value = new StringLiteral("\"" + value.Name + "\"");                              break;                      }
