Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AcademyPopcorn,CollisionDispatcher,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\CollisionDispatcher.cs,HandleMovingWithStaticCollisions,Cyclomatic complexity of the method is 10
Complex Method,AcademyPopcorn,Engine,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Engine.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,AcademyPopcorn,KeyboardInterface,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\KeyboardInterface.cs,ProcessInput,Cyclomatic complexity of the method is 9
Complex Method,AcademyPopcorn,AcademyPopcornMain,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\AcademyPopcornMain.cs,Initialize,Cyclomatic complexity of the method is 8
Long Parameter List,AcademyPopcorn,AcademyPopcornMain,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\AcademyPopcornMain.cs,Main,The method has 7 parameters.
Long Identifier,AcademyPopcorn,CollisionData,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\CollisionData.cs,CollisionData,The length of the parameter hitObjectsCollisionGroupStrings is 31.
Long Statement,AcademyPopcorn,Bullet,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Bullet.cs,CanCollideWith,The length of the statement  "	return otherCollisionGroupString == "block" || otherCollisionGroupString == "indestrBlock" || otherCollisionGroupString == "unpassBlock"; " is 137.
Long Statement,AcademyPopcorn,CollisionDispatcher,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\CollisionDispatcher.cs,HandleMovingWithStaticCollisions,The length of the statement  "			staticObjects [verticalIndex].RespondToCollision (new CollisionData (new MatrixCoords (movingObject.Speed.Row' 0)' movingObject.GetCollisionGroupString ())); " is 157.
Long Statement,AcademyPopcorn,CollisionDispatcher,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\CollisionDispatcher.cs,HandleMovingWithStaticCollisions,The length of the statement  "			staticObjects [horizontalIndex].RespondToCollision (new CollisionData (new MatrixCoords (0' movingObject.Speed.Col)' movingObject.GetCollisionGroupString ())); " is 159.
Long Statement,AcademyPopcorn,CollisionDispatcher,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\CollisionDispatcher.cs,HandleMovingWithStaticCollisions,The length of the statement  "				staticObjects [diagonalIndex].RespondToCollision (new CollisionData (new MatrixCoords (movingObject.Speed.Row' 0)' movingObject.GetCollisionGroupString ())); " is 157.
Long Statement,AcademyPopcorn,UnpassableBlock,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\UnpassableBlock.cs,RespondToCollision,The length of the statement  "	if (collisionData.hitObjectsCollisionGroupStrings [0] == "debris")//Only explosion and its result could destroy unpassable blocks " is 129.
Long Statement,AcademyPopcorn,UnstoppableBall,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\UnstoppableBall.cs,CanCollideWith,The length of the statement  "	return otherCollisionGroupString == "racket" || otherCollisionGroupString == "unpassBlock" || otherCollisionGroupString == "indestrBlock"; " is 138.
Long Statement,AcademyPopcorn,UnstoppableBall,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\UnstoppableBall.cs,RespondToCollision,The length of the statement  "	if (collisionData.hitObjectsCollisionGroupStrings [0] == "indestrBlock" || collisionData.hitObjectsCollisionGroupStrings [0] == "racket" || collisionData.hitObjectsCollisionGroupStrings [0] == "unpassBlock") { " is 209.
Complex Conditional,AcademyPopcorn,ConsoleRenderer,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\ConsoleRenderer.cs,EnqueueForRendering,The conditional expression  "row >= 0 && row < renderContextMatrixRows && col >= 0 && col < renderContextMatrixCols"  is complex.
Complex Conditional,AcademyPopcorn,Engine,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Engine.cs,Run,The conditional expression  "item is UnpassableBlock || item is IndestructibleBlock || item is Racket || item is TrailObject"  is complex.
Magic Number,AcademyPopcorn,Debris,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Debris.cs,Debris,The following statement contains a magic number: this.LifeTime = 3;  
Magic Number,AcademyPopcorn,Engine,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Engine.cs,Run,The following statement contains a magic number: while (true) {  	this.renderer.RenderAll ();  	System.Threading.Thread.Sleep (this.SleepTime);  	this.userInterface.ProcessInput ();  	this.renderer.ClearQueue ();  	foreach (var obj in this.allObjects) {  		obj.Update ();  		this.renderer.EnqueueForRendering (obj);  	}  	CollisionDispatcher.HandleCollisions (this.movingObjects' this.staticObjects);  	List<GameObject> producedObjects = new List<GameObject> ();  	foreach (var obj in this.allObjects) {  		producedObjects.AddRange (obj.ProduceObjects ());  	}  	this.allObjects.RemoveAll (obj => obj.IsDestroyed);  	this.movingObjects.RemoveAll (obj => obj.IsDestroyed);  	this.staticObjects.RemoveAll (obj => obj.IsDestroyed);  	foreach (var obj in producedObjects) {  		this.AddObject (obj);  	}  	bool AllBlocksDestroied = true;  	foreach (var item in staticObjects) {  		if (item is UnpassableBlock || item is IndestructibleBlock || item is Racket || item is TrailObject) {  		}  		else {  			AllBlocksDestroied = false;  			break;  		}  	}  	if (AllBlocksDestroied) {  		Console.SetCursorPosition (3' 31);  		Console.WriteLine ("Level completed!!");  		return;  	}  }  
Magic Number,AcademyPopcorn,Engine,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Engine.cs,Run,The following statement contains a magic number: while (true) {  	this.renderer.RenderAll ();  	System.Threading.Thread.Sleep (this.SleepTime);  	this.userInterface.ProcessInput ();  	this.renderer.ClearQueue ();  	foreach (var obj in this.allObjects) {  		obj.Update ();  		this.renderer.EnqueueForRendering (obj);  	}  	CollisionDispatcher.HandleCollisions (this.movingObjects' this.staticObjects);  	List<GameObject> producedObjects = new List<GameObject> ();  	foreach (var obj in this.allObjects) {  		producedObjects.AddRange (obj.ProduceObjects ());  	}  	this.allObjects.RemoveAll (obj => obj.IsDestroyed);  	this.movingObjects.RemoveAll (obj => obj.IsDestroyed);  	this.staticObjects.RemoveAll (obj => obj.IsDestroyed);  	foreach (var obj in producedObjects) {  		this.AddObject (obj);  	}  	bool AllBlocksDestroied = true;  	foreach (var item in staticObjects) {  		if (item is UnpassableBlock || item is IndestructibleBlock || item is Racket || item is TrailObject) {  		}  		else {  			AllBlocksDestroied = false;  			break;  		}  	}  	if (AllBlocksDestroied) {  		Console.SetCursorPosition (3' 31);  		Console.WriteLine ("Level completed!!");  		return;  	}  }  
Magic Number,AcademyPopcorn,Engine,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Engine.cs,Run,The following statement contains a magic number: if (AllBlocksDestroied) {  	Console.SetCursorPosition (3' 31);  	Console.WriteLine ("Level completed!!");  	return;  }  
Magic Number,AcademyPopcorn,Engine,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Engine.cs,Run,The following statement contains a magic number: if (AllBlocksDestroied) {  	Console.SetCursorPosition (3' 31);  	Console.WriteLine ("Level completed!!");  	return;  }  
Magic Number,AcademyPopcorn,Engine,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Engine.cs,Run,The following statement contains a magic number: Console.SetCursorPosition (3' 31);  
Magic Number,AcademyPopcorn,Engine,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Engine.cs,Run,The following statement contains a magic number: Console.SetCursorPosition (3' 31);  
Magic Number,AcademyPopcorn,MatrixCoords,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\MatrixCoords.cs,GetHashCode,The following statement contains a magic number: return this.Row.GetHashCode () * 7 + this.Col;  
Magic Number,AcademyPopcorn,AcademyPopcornMain,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\AcademyPopcornMain.cs,Initialize,The following statement contains a magic number: for (int j = startRow; j <= 6; j = j + 3) {  	for (int i = startCol; i < endCol; i++) {  		Block currBlock = new Block (new MatrixCoords (j' i));  		engine.AddObject (currBlock);  	}  }  
Magic Number,AcademyPopcorn,AcademyPopcornMain,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\AcademyPopcornMain.cs,Initialize,The following statement contains a magic number: for (int j = startRow; j <= 6; j = j + 3) {  	for (int i = startCol; i < endCol; i++) {  		Block currBlock = new Block (new MatrixCoords (j' i));  		engine.AddObject (currBlock);  	}  }  
Magic Number,AcademyPopcorn,AcademyPopcornMain,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\AcademyPopcornMain.cs,Initialize,The following statement contains a magic number: j = j + 3
Magic Number,AcademyPopcorn,AcademyPopcornMain,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\AcademyPopcornMain.cs,Initialize,The following statement contains a magic number: for (int i = 6; i < 14; i++) {  	UnpassableBlock unpasBlock01 = new UnpassableBlock (new MatrixCoords (4' i));  	engine.AddObject (unpasBlock01);  }  
Magic Number,AcademyPopcorn,AcademyPopcornMain,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\AcademyPopcornMain.cs,Initialize,The following statement contains a magic number: for (int i = 6; i < 14; i++) {  	UnpassableBlock unpasBlock01 = new UnpassableBlock (new MatrixCoords (4' i));  	engine.AddObject (unpasBlock01);  }  
Magic Number,AcademyPopcorn,AcademyPopcornMain,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\AcademyPopcornMain.cs,Initialize,The following statement contains a magic number: for (int i = 6; i < 14; i++) {  	UnpassableBlock unpasBlock01 = new UnpassableBlock (new MatrixCoords (4' i));  	engine.AddObject (unpasBlock01);  }  
Magic Number,AcademyPopcorn,Racket,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\Racket.cs,MoveRight,The following statement contains a magic number: if (this.topLeft.Col < 33) {  	this.topLeft.Col++;  }  
Magic Number,AcademyPopcorn,ShootingRacket,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\ShootingRacket.cs,ProduceObjects,The following statement contains a magic number: if (shoot)//Gemeral check - activated by Spacebar   {  	if (shootingTime > 0) {  		Bullet bull01 = new Bullet (new MatrixCoords (this.topLeft.Row - 1' this.topLeft.Col + 3));  		list.Add (bull01);  		shoot = false;  		//To stop shooting when not pressed Spacebar  	}  }  
Magic Number,AcademyPopcorn,ShootingRacket,C:\repos\pdrosos_TelerikAcademy\OOP\07. Workshop\Evaluated Homeworks\02\HW_Popcorn\AcademyPopcorn\AcademyPopcorn\ShootingRacket.cs,ProduceObjects,The following statement contains a magic number: if (shootingTime > 0) {  	Bullet bull01 = new Bullet (new MatrixCoords (this.topLeft.Row - 1' this.topLeft.Col + 3));  	list.Add (bull01);  	shoot = false;  	//To stop shooting when not pressed Spacebar  }  
