Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,Cyclomatic complexity of the method is 8
Long Parameter List,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The method has 5 parameters.
Long Parameter List,Banks.Library.Accounts,CompanyMortgage,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\CompanyMortgage.cs,CompanyMortgage,The method has 5 parameters.
Long Parameter List,Banks.Library.Accounts,IndividualMortgage,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\IndividualMortgage.cs,IndividualMortgage,The method has 5 parameters.
Long Parameter List,Banks.Library.Accounts,Loan,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\Loan.cs,Loan,The method has 5 parameters.
Long Parameter List,Banks.Library.Accounts,Mortgage,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\Mortgage.cs,Mortgage,The method has 5 parameters.
Long Statement,Banks.Library.Accounts,CompanyMortgage,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\CompanyMortgage.cs,CalculateInterest,The length of the statement  "	decimal interest = (base.CalculateInterest (this.discountMonths) / 2) + base.CalculateInterest (months - this.discountMonths); " is 126.
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: if (accountType == AccountType.Mortgage) {  	if (customer is Individual) {  		return new IndividualMortgage (iban' customer' balance' interestRate' 6);  	}  	if (customer is Company) {  		return new CompanyMortgage (iban' customer' balance' interestRate' 12);  	}  }  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: if (accountType == AccountType.Mortgage) {  	if (customer is Individual) {  		return new IndividualMortgage (iban' customer' balance' interestRate' 6);  	}  	if (customer is Company) {  		return new CompanyMortgage (iban' customer' balance' interestRate' 12);  	}  }  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: if (customer is Individual) {  	return new IndividualMortgage (iban' customer' balance' interestRate' 6);  }  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: return new IndividualMortgage (iban' customer' balance' interestRate' 6);  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: if (customer is Company) {  	return new CompanyMortgage (iban' customer' balance' interestRate' 12);  }  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: return new CompanyMortgage (iban' customer' balance' interestRate' 12);  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: if (accountType == AccountType.Loan) {  	if (customer is Individual) {  		return new Loan (iban' customer' balance' interestRate' 3);  	}  	if (customer is Company) {  		return new Loan (iban' customer' balance' interestRate' 2);  	}  }  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: if (accountType == AccountType.Loan) {  	if (customer is Individual) {  		return new Loan (iban' customer' balance' interestRate' 3);  	}  	if (customer is Company) {  		return new Loan (iban' customer' balance' interestRate' 2);  	}  }  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: if (customer is Individual) {  	return new Loan (iban' customer' balance' interestRate' 3);  }  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: return new Loan (iban' customer' balance' interestRate' 3);  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: if (customer is Company) {  	return new Loan (iban' customer' balance' interestRate' 2);  }  
Magic Number,Banks.Library.Accounts,AccountFactory,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\AccountFactory.cs,CreateAccount,The following statement contains a magic number: return new Loan (iban' customer' balance' interestRate' 2);  
Magic Number,Banks.Library.Accounts,CompanyMortgage,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\CompanyMortgage.cs,CalculateInterest,The following statement contains a magic number: if (months <= this.discountMonths) {  	return base.CalculateInterest (months) / 2;  }  
Magic Number,Banks.Library.Accounts,CompanyMortgage,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\CompanyMortgage.cs,CalculateInterest,The following statement contains a magic number: return base.CalculateInterest (months) / 2;  
Magic Number,Banks.Library.Accounts,Deposit,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Homework\OopPrinciples\Banks\Library\Accounts\Deposit.cs,CalculateInterest,The following statement contains a magic number: if (this.Balance < 1000) {  	return 0;  }  
