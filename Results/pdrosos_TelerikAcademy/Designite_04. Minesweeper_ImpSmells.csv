Implementation smell,Namespace,Class,File,Method,Description
Long Method,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The method has 105 lines of code.
Complex Method,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,Cyclomatic complexity of the method is 31
Complex Method,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,CountMines,Cyclomatic complexity of the method is 17
Long Parameter List,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The method has 5 parameters.
Long Statement,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The length of the statement  "			Console.WriteLine ("Lets play “Mines”. Try not to step on the mine fields." + " The command 'top' shows the leaderboard' 'restart' starts new game' 'exit' quits the game!"); " is 173.
Long Statement,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The length of the statement  "			if (int.TryParse (action [0].ToString ()' out row) && int.TryParse (action [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) { " is 171.
Long Statement,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The length of the statement  "			Console.Write (Environment.NewLine + "Hrrrrrr! You played valiantly and your score is {0}. " + "Please enter a nickname: "' score); " is 131.
Complex Conditional,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The conditional expression  "int.TryParse (action [0].ToString ()' out row) && int.TryParse (action [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)"  is complex.
Magic Number,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The following statement contains a magic number: do {  	if (gameStart) {  		Console.WriteLine ("Lets play “Mines”. Try not to step on the mine fields." + " The command 'top' shows the leaderboard' 'restart' starts new game' 'exit' quits the game!");  		DrawPlayfield (playField);  		gameStart = false;  	}  	Console.Write ("Enter row and column: ");  	action = Console.ReadLine ().Trim ();  	if (action.Length >= 3) {  		if (int.TryParse (action [0].ToString ()' out row) && int.TryParse (action [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  			action = "turn";  		}  	}  	switch (action) {  	case "top":  		ShowLeaderboard (leaderboard);  		break;  	case "restart":  		playField = CreateGameField ();  		mines = PlaceMines ();  		DrawPlayfield (playField);  		gameOver = false;  		gameStart = true;  		break;  	case "exit":  		Console.WriteLine ("Bye' bye' bye!");  		break;  	case "turn":  		if (mines [row' col] != MineField) {  			if (mines [row' col] == EmptyField) {  				NextTurn (playField' mines' row' col);  				score++;  			}  			if (ScoreLimit == score) {  				gameWon = true;  			}  			else {  				DrawPlayfield (playField);  			}  		}  		else {  			gameOver = true;  		}  		break;  	default:  		Console.WriteLine (Environment.NewLine + "Error! Invalid Command." + Environment.NewLine);  		break;  	}  	if (gameOver) {  		DrawPlayfield (mines);  		Console.Write (Environment.NewLine + "Hrrrrrr! You played valiantly and your score is {0}. " + "Please enter a nickname: "' score);  		string name = Console.ReadLine ();  		PlayerScore player = new PlayerScore (name' score);  		if (leaderboard.Count < 5) {  			leaderboard.Add (player);  		}  		else {  			for (int i = 0; i < leaderboard.Count; i++) {  				if (leaderboard [i].Points < player.Points) {  					leaderboard.Insert (i' player);  					leaderboard.RemoveAt (leaderboard.Count - 1);  					break;  				}  			}  		}  		leaderboard.Sort ((PlayerScore r1' PlayerScore r2) => r2.Name.CompareTo (r1.Name));  		leaderboard.Sort ((PlayerScore r1' PlayerScore r2) => r2.Points.CompareTo (r1.Points));  		ShowLeaderboard (leaderboard);  		playField = CreateGameField ();  		mines = PlaceMines ();  		score = 0;  		gameOver = false;  		gameStart = true;  	}  	if (gameWon) {  		Console.WriteLine (Environment.NewLine + "BRAVOOO! You managed to clear all the {0} mines."' ScoreLimit);  		DrawPlayfield (mines);  		Console.WriteLine ("Enter your name champ: ");  		string name = Console.ReadLine ();  		PlayerScore player = new PlayerScore (name' score);  		leaderboard.Add (player);  		ShowLeaderboard (leaderboard);  		playField = CreateGameField ();  		mines = PlaceMines ();  		score = 0;  		gameWon = false;  		gameStart = true;  	}  }  while (action != "exit");  
Magic Number,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The following statement contains a magic number: do {  	if (gameStart) {  		Console.WriteLine ("Lets play “Mines”. Try not to step on the mine fields." + " The command 'top' shows the leaderboard' 'restart' starts new game' 'exit' quits the game!");  		DrawPlayfield (playField);  		gameStart = false;  	}  	Console.Write ("Enter row and column: ");  	action = Console.ReadLine ().Trim ();  	if (action.Length >= 3) {  		if (int.TryParse (action [0].ToString ()' out row) && int.TryParse (action [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  			action = "turn";  		}  	}  	switch (action) {  	case "top":  		ShowLeaderboard (leaderboard);  		break;  	case "restart":  		playField = CreateGameField ();  		mines = PlaceMines ();  		DrawPlayfield (playField);  		gameOver = false;  		gameStart = true;  		break;  	case "exit":  		Console.WriteLine ("Bye' bye' bye!");  		break;  	case "turn":  		if (mines [row' col] != MineField) {  			if (mines [row' col] == EmptyField) {  				NextTurn (playField' mines' row' col);  				score++;  			}  			if (ScoreLimit == score) {  				gameWon = true;  			}  			else {  				DrawPlayfield (playField);  			}  		}  		else {  			gameOver = true;  		}  		break;  	default:  		Console.WriteLine (Environment.NewLine + "Error! Invalid Command." + Environment.NewLine);  		break;  	}  	if (gameOver) {  		DrawPlayfield (mines);  		Console.Write (Environment.NewLine + "Hrrrrrr! You played valiantly and your score is {0}. " + "Please enter a nickname: "' score);  		string name = Console.ReadLine ();  		PlayerScore player = new PlayerScore (name' score);  		if (leaderboard.Count < 5) {  			leaderboard.Add (player);  		}  		else {  			for (int i = 0; i < leaderboard.Count; i++) {  				if (leaderboard [i].Points < player.Points) {  					leaderboard.Insert (i' player);  					leaderboard.RemoveAt (leaderboard.Count - 1);  					break;  				}  			}  		}  		leaderboard.Sort ((PlayerScore r1' PlayerScore r2) => r2.Name.CompareTo (r1.Name));  		leaderboard.Sort ((PlayerScore r1' PlayerScore r2) => r2.Points.CompareTo (r1.Points));  		ShowLeaderboard (leaderboard);  		playField = CreateGameField ();  		mines = PlaceMines ();  		score = 0;  		gameOver = false;  		gameStart = true;  	}  	if (gameWon) {  		Console.WriteLine (Environment.NewLine + "BRAVOOO! You managed to clear all the {0} mines."' ScoreLimit);  		DrawPlayfield (mines);  		Console.WriteLine ("Enter your name champ: ");  		string name = Console.ReadLine ();  		PlayerScore player = new PlayerScore (name' score);  		leaderboard.Add (player);  		ShowLeaderboard (leaderboard);  		playField = CreateGameField ();  		mines = PlaceMines ();  		score = 0;  		gameWon = false;  		gameStart = true;  	}  }  while (action != "exit");  
Magic Number,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The following statement contains a magic number: do {  	if (gameStart) {  		Console.WriteLine ("Lets play “Mines”. Try not to step on the mine fields." + " The command 'top' shows the leaderboard' 'restart' starts new game' 'exit' quits the game!");  		DrawPlayfield (playField);  		gameStart = false;  	}  	Console.Write ("Enter row and column: ");  	action = Console.ReadLine ().Trim ();  	if (action.Length >= 3) {  		if (int.TryParse (action [0].ToString ()' out row) && int.TryParse (action [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  			action = "turn";  		}  	}  	switch (action) {  	case "top":  		ShowLeaderboard (leaderboard);  		break;  	case "restart":  		playField = CreateGameField ();  		mines = PlaceMines ();  		DrawPlayfield (playField);  		gameOver = false;  		gameStart = true;  		break;  	case "exit":  		Console.WriteLine ("Bye' bye' bye!");  		break;  	case "turn":  		if (mines [row' col] != MineField) {  			if (mines [row' col] == EmptyField) {  				NextTurn (playField' mines' row' col);  				score++;  			}  			if (ScoreLimit == score) {  				gameWon = true;  			}  			else {  				DrawPlayfield (playField);  			}  		}  		else {  			gameOver = true;  		}  		break;  	default:  		Console.WriteLine (Environment.NewLine + "Error! Invalid Command." + Environment.NewLine);  		break;  	}  	if (gameOver) {  		DrawPlayfield (mines);  		Console.Write (Environment.NewLine + "Hrrrrrr! You played valiantly and your score is {0}. " + "Please enter a nickname: "' score);  		string name = Console.ReadLine ();  		PlayerScore player = new PlayerScore (name' score);  		if (leaderboard.Count < 5) {  			leaderboard.Add (player);  		}  		else {  			for (int i = 0; i < leaderboard.Count; i++) {  				if (leaderboard [i].Points < player.Points) {  					leaderboard.Insert (i' player);  					leaderboard.RemoveAt (leaderboard.Count - 1);  					break;  				}  			}  		}  		leaderboard.Sort ((PlayerScore r1' PlayerScore r2) => r2.Name.CompareTo (r1.Name));  		leaderboard.Sort ((PlayerScore r1' PlayerScore r2) => r2.Points.CompareTo (r1.Points));  		ShowLeaderboard (leaderboard);  		playField = CreateGameField ();  		mines = PlaceMines ();  		score = 0;  		gameOver = false;  		gameStart = true;  	}  	if (gameWon) {  		Console.WriteLine (Environment.NewLine + "BRAVOOO! You managed to clear all the {0} mines."' ScoreLimit);  		DrawPlayfield (mines);  		Console.WriteLine ("Enter your name champ: ");  		string name = Console.ReadLine ();  		PlayerScore player = new PlayerScore (name' score);  		leaderboard.Add (player);  		ShowLeaderboard (leaderboard);  		playField = CreateGameField ();  		mines = PlaceMines ();  		score = 0;  		gameWon = false;  		gameStart = true;  	}  }  while (action != "exit");  
Magic Number,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The following statement contains a magic number: if (action.Length >= 3) {  	if (int.TryParse (action [0].ToString ()' out row) && int.TryParse (action [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  		action = "turn";  	}  }  
Magic Number,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The following statement contains a magic number: if (action.Length >= 3) {  	if (int.TryParse (action [0].ToString ()' out row) && int.TryParse (action [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  		action = "turn";  	}  }  
Magic Number,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The following statement contains a magic number: if (int.TryParse (action [0].ToString ()' out row) && int.TryParse (action [2].ToString ()' out col) && row <= playField.GetLength (0) && col <= playField.GetLength (1)) {  	action = "turn";  }  
Magic Number,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The following statement contains a magic number: if (gameOver) {  	DrawPlayfield (mines);  	Console.Write (Environment.NewLine + "Hrrrrrr! You played valiantly and your score is {0}. " + "Please enter a nickname: "' score);  	string name = Console.ReadLine ();  	PlayerScore player = new PlayerScore (name' score);  	if (leaderboard.Count < 5) {  		leaderboard.Add (player);  	}  	else {  		for (int i = 0; i < leaderboard.Count; i++) {  			if (leaderboard [i].Points < player.Points) {  				leaderboard.Insert (i' player);  				leaderboard.RemoveAt (leaderboard.Count - 1);  				break;  			}  		}  	}  	leaderboard.Sort ((PlayerScore r1' PlayerScore r2) => r2.Name.CompareTo (r1.Name));  	leaderboard.Sort ((PlayerScore r1' PlayerScore r2) => r2.Points.CompareTo (r1.Points));  	ShowLeaderboard (leaderboard);  	playField = CreateGameField ();  	mines = PlaceMines ();  	score = 0;  	gameOver = false;  	gameStart = true;  }  
Magic Number,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,Main,The following statement contains a magic number: if (leaderboard.Count < 5) {  	leaderboard.Add (player);  }  else {  	for (int i = 0; i < leaderboard.Count; i++) {  		if (leaderboard [i].Points < player.Points) {  			leaderboard.Insert (i' player);  			leaderboard.RemoveAt (leaderboard.Count - 1);  			break;  		}  	}  }  
Magic Number,Minesweeper,MinesGame,C:\repos\pdrosos_TelerikAcademy\High-Quality Code\3. Naming Identifiers\Homework\Minesweeper\MinesGame.cs,PlaceMines,The following statement contains a magic number: while (mines.Count < TotalMines) {  	int position = randomGenerator.Next (50);  	if (!mines.Contains (position)) {  		mines.Add (position);  	}  }  
