Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Bank,DepositAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\DepositAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Balance <= 1000) {  	return 0;  }  else {  	return this.Balance * (this.Interest / 100) * monthsCount;  }  
Magic Number,Bank,DepositAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\DepositAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Balance <= 1000) {  	return 0;  }  else {  	return this.Balance * (this.Interest / 100) * monthsCount;  }  
Magic Number,Bank,DepositAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\DepositAccount.cs,CalculateInterest,The following statement contains a magic number: return this.Balance * (this.Interest / 100) * monthsCount;  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 2 && this.Customer == Customer.Company) {  	return 0;  }  else if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 2 && this.Customer == Customer.Company) {  	return 0;  }  else if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 2 && this.Customer == Customer.Company) {  	return 0;  }  else if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 2 && this.Customer == Customer.Company) {  	return 0;  }  else if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 2 && this.Customer == Customer.Company) {  	return 0;  }  else if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 2 && this.Customer == Customer.Company) {  	return 0;  }  else if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (monthsCount <= 3 && this.Customer == Customer.Individual) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return this.Balance * (this.Interest / 100) * (monthsCount - 2);  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 3);  }  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: return this.Balance * (this.Interest / 100) * (monthsCount - 2);  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: return this.Balance * (this.Interest / 100) * (monthsCount - 2);  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: return this.Balance * (this.Interest / 100) * (monthsCount - 3);  
Magic Number,Bank,LoanAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\LoanAccount.cs,CalculateInterest,The following statement contains a magic number: return this.Balance * (this.Interest / 100) * (monthsCount - 3);  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company && monthsCount <= 12) {  	return this.Balance * (this.Interest / 100 / 2) * monthsCount;  }  else if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: return this.Balance * (this.Interest / 100 / 2) * monthsCount;  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: return this.Balance * (this.Interest / 100 / 2) * monthsCount;  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Individual && monthsCount <= 6) {  	return 0;  }  else if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: if (this.Customer == Customer.Company) {  	return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  }  else {  	return this.Balance * (this.Interest / 100) * (monthsCount - 6);  }  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: return (this.Balance * (this.Interest / 100 / 2) * 12) + (monthsCount * (this.Interest / 100) * (monthsCount - 12));  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: return this.Balance * (this.Interest / 100) * (monthsCount - 6);  
Magic Number,Bank,MortgageAccount,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\MortgageAccount.cs,CalculateInterest,The following statement contains a magic number: return this.Balance * (this.Interest / 100) * (monthsCount - 6);  
Magic Number,Bank,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\TEST.cs,Main,The following statement contains a magic number: myDeposit.Deposit (2500);  
Magic Number,Bank,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\TEST.cs,Main,The following statement contains a magic number: Console.WriteLine ("Interest: {0}"' myDeposit.CalculateInterest (12));  
Magic Number,Bank,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\TEST.cs,Main,The following statement contains a magic number: myDeposit.Withdraw (-2000);  
Magic Number,Bank,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\02-Bank\TEST.cs,Main,The following statement contains a magic number: Console.WriteLine ("new Interest: {0}"' myDeposit.CalculateInterest (12));  
