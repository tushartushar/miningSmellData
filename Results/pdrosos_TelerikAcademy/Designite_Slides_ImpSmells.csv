Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,Cyclomatic complexity of the method is 10
Long Statement,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The length of the statement  "			else if (currentPosition.width + direction.width < 0 || currentPosition.width + direction.width == cube.GetLength (0)) { " is 120.
Long Statement,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The length of the statement  "			else if (currentPosition.depth + direction.depth < 0 || currentPosition.depth + direction.depth == cube.GetLength (2)) { " is 120.
Magic Number,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The following statement contains a magic number: while (true) {  	cubeElement = cube [currentPosition.width' currentPosition.height' currentPosition.depth];  	string command = cubeElement.Substring (0' 1);  	if (command == "S") {  		string[] commandElements = cubeElement.Split (new char[] {  			' '  		});  		Dimension direction = slidesDirections [commandElements [1]];  		if (currentPosition.height + direction.height == cube.GetLength (1)) {  			canExit = "Yes";  			return currentPosition;  		}  		else if (currentPosition.width + direction.width < 0 || currentPosition.width + direction.width == cube.GetLength (0)) {  			canExit = "No";  			return currentPosition;  		}  		else if (currentPosition.depth + direction.depth < 0 || currentPosition.depth + direction.depth == cube.GetLength (2)) {  			canExit = "No";  			return currentPosition;  		}  		else {  			currentPosition.width += direction.width;  			currentPosition.height += direction.height;  			currentPosition.depth += direction.depth;  		}  	}  	else if (command == "T") {  		string[] commandElements = cubeElement.Split (new char[] {  			' '  		});  		currentPosition.width = int.Parse (commandElements [1]);  		currentPosition.depth = int.Parse (commandElements [2]);  	}  	else if (command == "E") {  		if (currentPosition.height + 1 == cube.GetLength (1)) {  			canExit = "Yes";  			return currentPosition;  		}  		else {  			currentPosition.height += 1;  		}  	}  	else if (command == "B") {  		canExit = "No";  		return currentPosition;  	}  }  
Magic Number,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The following statement contains a magic number: while (true) {  	cubeElement = cube [currentPosition.width' currentPosition.height' currentPosition.depth];  	string command = cubeElement.Substring (0' 1);  	if (command == "S") {  		string[] commandElements = cubeElement.Split (new char[] {  			' '  		});  		Dimension direction = slidesDirections [commandElements [1]];  		if (currentPosition.height + direction.height == cube.GetLength (1)) {  			canExit = "Yes";  			return currentPosition;  		}  		else if (currentPosition.width + direction.width < 0 || currentPosition.width + direction.width == cube.GetLength (0)) {  			canExit = "No";  			return currentPosition;  		}  		else if (currentPosition.depth + direction.depth < 0 || currentPosition.depth + direction.depth == cube.GetLength (2)) {  			canExit = "No";  			return currentPosition;  		}  		else {  			currentPosition.width += direction.width;  			currentPosition.height += direction.height;  			currentPosition.depth += direction.depth;  		}  	}  	else if (command == "T") {  		string[] commandElements = cubeElement.Split (new char[] {  			' '  		});  		currentPosition.width = int.Parse (commandElements [1]);  		currentPosition.depth = int.Parse (commandElements [2]);  	}  	else if (command == "E") {  		if (currentPosition.height + 1 == cube.GetLength (1)) {  			canExit = "Yes";  			return currentPosition;  		}  		else {  			currentPosition.height += 1;  		}  	}  	else if (command == "B") {  		canExit = "No";  		return currentPosition;  	}  }  
Magic Number,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The following statement contains a magic number: if (command == "S") {  	string[] commandElements = cubeElement.Split (new char[] {  		' '  	});  	Dimension direction = slidesDirections [commandElements [1]];  	if (currentPosition.height + direction.height == cube.GetLength (1)) {  		canExit = "Yes";  		return currentPosition;  	}  	else if (currentPosition.width + direction.width < 0 || currentPosition.width + direction.width == cube.GetLength (0)) {  		canExit = "No";  		return currentPosition;  	}  	else if (currentPosition.depth + direction.depth < 0 || currentPosition.depth + direction.depth == cube.GetLength (2)) {  		canExit = "No";  		return currentPosition;  	}  	else {  		currentPosition.width += direction.width;  		currentPosition.height += direction.height;  		currentPosition.depth += direction.depth;  	}  }  else if (command == "T") {  	string[] commandElements = cubeElement.Split (new char[] {  		' '  	});  	currentPosition.width = int.Parse (commandElements [1]);  	currentPosition.depth = int.Parse (commandElements [2]);  }  else if (command == "E") {  	if (currentPosition.height + 1 == cube.GetLength (1)) {  		canExit = "Yes";  		return currentPosition;  	}  	else {  		currentPosition.height += 1;  	}  }  else if (command == "B") {  	canExit = "No";  	return currentPosition;  }  
Magic Number,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The following statement contains a magic number: if (command == "S") {  	string[] commandElements = cubeElement.Split (new char[] {  		' '  	});  	Dimension direction = slidesDirections [commandElements [1]];  	if (currentPosition.height + direction.height == cube.GetLength (1)) {  		canExit = "Yes";  		return currentPosition;  	}  	else if (currentPosition.width + direction.width < 0 || currentPosition.width + direction.width == cube.GetLength (0)) {  		canExit = "No";  		return currentPosition;  	}  	else if (currentPosition.depth + direction.depth < 0 || currentPosition.depth + direction.depth == cube.GetLength (2)) {  		canExit = "No";  		return currentPosition;  	}  	else {  		currentPosition.width += direction.width;  		currentPosition.height += direction.height;  		currentPosition.depth += direction.depth;  	}  }  else if (command == "T") {  	string[] commandElements = cubeElement.Split (new char[] {  		' '  	});  	currentPosition.width = int.Parse (commandElements [1]);  	currentPosition.depth = int.Parse (commandElements [2]);  }  else if (command == "E") {  	if (currentPosition.height + 1 == cube.GetLength (1)) {  		canExit = "Yes";  		return currentPosition;  	}  	else {  		currentPosition.height += 1;  	}  }  else if (command == "B") {  	canExit = "No";  	return currentPosition;  }  
Magic Number,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The following statement contains a magic number: if (currentPosition.height + direction.height == cube.GetLength (1)) {  	canExit = "Yes";  	return currentPosition;  }  else if (currentPosition.width + direction.width < 0 || currentPosition.width + direction.width == cube.GetLength (0)) {  	canExit = "No";  	return currentPosition;  }  else if (currentPosition.depth + direction.depth < 0 || currentPosition.depth + direction.depth == cube.GetLength (2)) {  	canExit = "No";  	return currentPosition;  }  else {  	currentPosition.width += direction.width;  	currentPosition.height += direction.height;  	currentPosition.depth += direction.depth;  }  
Magic Number,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The following statement contains a magic number: if (currentPosition.width + direction.width < 0 || currentPosition.width + direction.width == cube.GetLength (0)) {  	canExit = "No";  	return currentPosition;  }  else if (currentPosition.depth + direction.depth < 0 || currentPosition.depth + direction.depth == cube.GetLength (2)) {  	canExit = "No";  	return currentPosition;  }  else {  	currentPosition.width += direction.width;  	currentPosition.height += direction.height;  	currentPosition.depth += direction.depth;  }  
Magic Number,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The following statement contains a magic number: if (currentPosition.depth + direction.depth < 0 || currentPosition.depth + direction.depth == cube.GetLength (2)) {  	canExit = "No";  	return currentPosition;  }  else {  	currentPosition.width += direction.width;  	currentPosition.height += direction.height;  	currentPosition.depth += direction.depth;  }  
Magic Number,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The following statement contains a magic number: if (command == "T") {  	string[] commandElements = cubeElement.Split (new char[] {  		' '  	});  	currentPosition.width = int.Parse (commandElements [1]);  	currentPosition.depth = int.Parse (commandElements [2]);  }  else if (command == "E") {  	if (currentPosition.height + 1 == cube.GetLength (1)) {  		canExit = "Yes";  		return currentPosition;  	}  	else {  		currentPosition.height += 1;  	}  }  else if (command == "B") {  	canExit = "No";  	return currentPosition;  }  
Magic Number,Slides,Slides,C:\repos\pdrosos_TelerikAcademy\C# Fundamentals - Part II\10. Practical Exam Preparation\Homework\ExamPreparation\Slides\Slides.cs,BallPath,The following statement contains a magic number: currentPosition.depth = int.Parse (commandElements [2]);  
