Implementation smell,Namespace,Class,File,Method,Description
Magic Number,RangeExeption,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\03-RangeExeption\TEST.cs,Main,The following statement contains a magic number: try {  	int start = 1;  	int end = 100;  	int x = 200;  	if (!(start < x && x < end)) {  		throw new InvalidRangeException<int> (start' end);  	}  }  catch (InvalidRangeException<int> e) {  	Console.WriteLine (e.Message);  	Console.WriteLine ("Start: {0}; End {1};"' e.Start' e.End);  }  
Magic Number,RangeExeption,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\03-RangeExeption\TEST.cs,Main,The following statement contains a magic number: try {  	int start = 1;  	int end = 100;  	int x = 200;  	if (!(start < x && x < end)) {  		throw new InvalidRangeException<int> (start' end);  	}  }  catch (InvalidRangeException<int> e) {  	Console.WriteLine (e.Message);  	Console.WriteLine ("Start: {0}; End {1};"' e.Start' e.End);  }  
Magic Number,RangeExeption,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\03-RangeExeption\TEST.cs,Main,The following statement contains a magic number: try {  	DateTime start = new DateTime (1988' 2' 3);  	DateTime end = new DateTime (2013' 12' 31);  	DateTime x = DateTime.MinValue;  	if (!(start < x && x < end)) {  		throw new InvalidRangeException<DateTime> (start' end);  	}  }  catch (InvalidRangeException<DateTime> e) {  	Console.WriteLine (e.Message);  	Console.WriteLine ("Start: {0}; End {1};"' e.Start' e.End);  }  
Magic Number,RangeExeption,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\03-RangeExeption\TEST.cs,Main,The following statement contains a magic number: try {  	DateTime start = new DateTime (1988' 2' 3);  	DateTime end = new DateTime (2013' 12' 31);  	DateTime x = DateTime.MinValue;  	if (!(start < x && x < end)) {  		throw new InvalidRangeException<DateTime> (start' end);  	}  }  catch (InvalidRangeException<DateTime> e) {  	Console.WriteLine (e.Message);  	Console.WriteLine ("Start: {0}; End {1};"' e.Start' e.End);  }  
Magic Number,RangeExeption,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\03-RangeExeption\TEST.cs,Main,The following statement contains a magic number: try {  	DateTime start = new DateTime (1988' 2' 3);  	DateTime end = new DateTime (2013' 12' 31);  	DateTime x = DateTime.MinValue;  	if (!(start < x && x < end)) {  		throw new InvalidRangeException<DateTime> (start' end);  	}  }  catch (InvalidRangeException<DateTime> e) {  	Console.WriteLine (e.Message);  	Console.WriteLine ("Start: {0}; End {1};"' e.Start' e.End);  }  
Magic Number,RangeExeption,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\03-RangeExeption\TEST.cs,Main,The following statement contains a magic number: try {  	DateTime start = new DateTime (1988' 2' 3);  	DateTime end = new DateTime (2013' 12' 31);  	DateTime x = DateTime.MinValue;  	if (!(start < x && x < end)) {  		throw new InvalidRangeException<DateTime> (start' end);  	}  }  catch (InvalidRangeException<DateTime> e) {  	Console.WriteLine (e.Message);  	Console.WriteLine ("Start: {0}; End {1};"' e.Start' e.End);  }  
Magic Number,RangeExeption,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\03-RangeExeption\TEST.cs,Main,The following statement contains a magic number: try {  	DateTime start = new DateTime (1988' 2' 3);  	DateTime end = new DateTime (2013' 12' 31);  	DateTime x = DateTime.MinValue;  	if (!(start < x && x < end)) {  		throw new InvalidRangeException<DateTime> (start' end);  	}  }  catch (InvalidRangeException<DateTime> e) {  	Console.WriteLine (e.Message);  	Console.WriteLine ("Start: {0}; End {1};"' e.Start' e.End);  }  
Magic Number,RangeExeption,TEST,C:\repos\pdrosos_TelerikAcademy\OOP\05. OOP Principles - Part II\Evaluated Homeworks\02\HW_Principi-na-OOP---chast-II\03-RangeExeption\TEST.cs,Main,The following statement contains a magic number: try {  	DateTime start = new DateTime (1988' 2' 3);  	DateTime end = new DateTime (2013' 12' 31);  	DateTime x = DateTime.MinValue;  	if (!(start < x && x < end)) {  		throw new InvalidRangeException<DateTime> (start' end);  	}  }  catch (InvalidRangeException<DateTime> e) {  	Console.WriteLine (e.Message);  	Console.WriteLine ("Start: {0}; End {1};"' e.Start' e.End);  }  
