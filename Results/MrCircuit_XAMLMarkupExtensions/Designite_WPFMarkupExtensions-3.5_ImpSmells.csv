Implementation smell,Namespace,Class,File,Method,Description
Complex Method,XAMLMarkupExtensions.Base,StaticExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\StaticExtension.cs,OnServiceProviderChanged,Cyclomatic complexity of the method is 10
Complex Method,XAMLMarkupExtensions.Base,ObjectDependencyManager,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\ObjectDependencyManager.cs,CleanUp,Cyclomatic complexity of the method is 8
Complex Method,XAMLMarkupExtensions.Base,NestedMarkupExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\NestedMarkupExtension.cs,ProvideValue,Cyclomatic complexity of the method is 8
Long Parameter List,XAMLMarkupExtensions.Base,SimpleProvideValueServiceProvider,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\SimpleProvideValueServiceProvider.cs,SimpleProvideValueServiceProvider,The method has 5 parameters.
Long Statement,XAMLMarkupExtensions.Base,TargetInfo,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\INestedMarkupExtension.cs,GetHashCode,The length of the statement  "	return Tuple.Create<object' object' int> (this.TargetObject' this.TargetProperty' this.TargetPropertyIndex).GetHashCode (); " is 123.
Long Statement,XAMLMarkupExtensions.Base,StaticExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\StaticExtension.cs,OnServiceProviderChanged,The length of the statement  "	var pi = memberType.GetProperty (memberCopy' BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 120.
Long Statement,XAMLMarkupExtensions.Base,StaticExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\StaticExtension.cs,OnServiceProviderChanged,The length of the statement  "			throw new InvalidOperationException ("No static property or field " + memberCopy + " available in " + memberType.FullName); " is 123.
Long Statement,XAMLMarkupExtensions.Base,NestedMarkupExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\NestedMarkupExtension.cs,ProvideValue,The length of the statement  "	// If the service.TargetObject is System.Windows.SharedDp (= not a DependencyObject and not a PropertyInfo)' we return "this". " is 126.
Long Statement,XAMLMarkupExtensions.Base,NestedMarkupExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\NestedMarkupExtension.cs,SetPropertyValue,The length of the statement  "		if (typeof(IList).IsAssignableFrom (info.TargetPropertyType) && (value != null) && !info.TargetPropertyType.IsAssignableFrom (value.GetType ())) { " is 146.
Long Statement,XAMLMarkupExtensions.Base,NestedMarkupExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Base\NestedMarkupExtension.cs,GetValue,The length of the statement  "		object result = ((MarkupExtension)value).ProvideValue (new SimpleProvideValueServiceProvider (this' property' property.PropertyType' index' endPoint)); " is 151.
Long Statement,XAMLMarkupExtensions.Binding,DynBindingExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Binding\DynBindingExtension.cs,FormatOutput,The length of the statement  "		ret = binding.ProvideValue (new SimpleProvideValueServiceProvider (endPoint.TargetObject' endPoint.TargetProperty' endPoint.TargetPropertyType' endPoint.TargetPropertyIndex)); " is 175.
Long Statement,XAMLMarkupExtensions.Binding,DynBindingExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Binding\DynBindingExtension.cs,FormatOutput,The length of the statement  "		proxy.Source = binding.ProvideValue (new SimpleProvideValueServiceProvider (proxy' BindingProxy.SourceProperty' null' -1)); " is 123.
Magic Number,XAMLMarkupExtensions.Design,AlternatingGridColorExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Design\AlternatingGridColorExtension.cs,FormatOutput,The following statement contains a magic number: if (endPoint != null && endPoint.IsDependencyObject) {  	var depObject = (DependencyObject)endPoint.TargetObject;  	var row = (int)depObject.GetValue (Grid.RowProperty);  	// Check the odd row case and alter the brush.  	if (row % 2 != 0)  		brush.Color = ColorOdd;  }  
Magic Number,XAMLMarkupExtensions.Design,AlternatingGridColorExtension,C:\repos\MrCircuit_XAMLMarkupExtensions\XAMLMarkupExtensions\Design\AlternatingGridColorExtension.cs,FormatOutput,The following statement contains a magic number: if (row % 2 != 0)  	brush.Color = ColorOdd;  
