Implementation smell,Namespace,Class,File,Method,Description
Long Method,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The method has 101 lines of code.
Long Method,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The method has 133 lines of code.
Complex Method,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,Cyclomatic complexity of the method is 18
Complex Method,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,Cyclomatic complexity of the method is 37
Long Parameter List,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The method has 5 parameters. Parameters: value' buf' lengthCache' parameter' async
Long Parameter List,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The method has 5 parameters. Parameters: value' buf' lengthCache' parameter' async
Long Parameter List,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The method has 5 parameters. Parameters: value' buf' lengthCache' parameter' async
Long Parameter List,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The method has 5 parameters. Parameters: value' buf' lengthCache' parameter' async
Long Parameter List,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The method has 5 parameters. Parameters: value' buf' lengthCache' parameter' async
Long Parameter List,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The method has 5 parameters. Parameters: value' buf' lengthCache' parameter' async
Long Parameter List,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The method has 5 parameters. Parameters: value' buf' lengthCache' parameter' async
Long Parameter List,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The method has 5 parameters. Parameters: value' buf' lengthCache' parameter' async
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Read,The following statement contains a magic number: await buf.Ensure(5' async);
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Read,The following statement contains a magic number: await buf.Ensure(4' async);
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Read,The following statement contains a magic number: var geom = await DoRead(buf' (WkbIdentifier)(id & 7)' le' async);
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,DoRead,The following statement contains a magic number: switch (id)              {              case WkbIdentifier.Point:                  await buf.Ensure(16' async);                  return new PostgisPoint(buf.ReadDouble(le)' buf.ReadDouble(le));                case WkbIdentifier.LineString:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(16' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisLineString(points);              }                case WkbIdentifier.Polygon:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(4' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisPolygon(rings);              }                case WkbIdentifier.MultiPoint:              {                  await buf.Ensure(4' async);                  var points = new Coordinate2D[buf.ReadInt32(le)];                  for (var ipts = 0; ipts < points.Length; ipts++)                  {                      await buf.Ensure(21' async);                      await buf.Skip(5' async);                      points[ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                  }                  return new PostgisMultiPoint(points);              }                case WkbIdentifier.MultiLineString:              {                  await buf.Ensure(4' async);                  var rings = new Coordinate2D[buf.ReadInt32(le)][];                    for (var irng = 0; irng < rings.Length; irng++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      rings[irng] = new Coordinate2D[buf.ReadInt32(le)];                      for (var ipts = 0; ipts < rings[irng].Length; ipts++)                      {                          await buf.Ensure(16' async);                          rings[irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                      }                  }                  return new PostgisMultiLineString(rings);              }                case WkbIdentifier.MultiPolygon:              {                  await buf.Ensure(4' async);                  var pols = new Coordinate2D[buf.ReadInt32(le)][][];                    for (var ipol = 0; ipol < pols.Length; ipol++)                  {                      await buf.Ensure(9' async);                      await buf.Skip(5' async);                      pols[ipol] = new Coordinate2D[buf.ReadInt32(le)][];                      for (var irng = 0; irng < pols[ipol].Length; irng++)                      {                          await buf.Ensure(4' async);                          pols[ipol][irng] = new Coordinate2D[buf.ReadInt32(le)];                          for (var ipts = 0; ipts < pols[ipol][irng].Length; ipts++)                          {                              await buf.Ensure(16' async);                              pols[ipol][irng][ipts] = new Coordinate2D(buf.ReadDouble(le)' buf.ReadDouble(le));                          }                      }                  }                  return new PostgisMultiPolygon(pols);              }                case WkbIdentifier.GeometryCollection:              {                  await buf.Ensure(4' async);                  var g = new PostgisGeometry[buf.ReadInt32(le)];                    for (var i = 0; i < g.Length; i++)                  {                      await buf.Ensure(5' async);                      var elemLe = buf.ReadByte() != 0;                      var elemId = (WkbIdentifier)(buf.ReadUInt32(le) & 7);                        g[i] = await DoRead(buf' elemId' elemLe' async);                  }                  return new PostgisGeometryCollection(g);              }                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: buf.WriteSpaceLeft < 5
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,LegacyPostgisHandler,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\LegacyPostgisHandler.cs,Write,The following statement contains a magic number: switch (value.Identifier)              {              case WkbIdentifier.Point:                  if (buf.WriteSpaceLeft < 16)                      await buf.Flush(async);                  var p = (PostgisPoint)value;                  buf.WriteDouble(p.X);                  buf.WriteDouble(p.Y);                  return;                case WkbIdentifier.LineString:                  var l = (PostgisLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(l.PointCount);                  for (var ipts = 0; ipts < l.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 16)                          await buf.Flush(async);                      buf.WriteDouble(l[ipts].X);                      buf.WriteDouble(l[ipts].Y);                  }                  return;                case WkbIdentifier.Polygon:                  var pol = (PostgisPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(pol.RingCount);                  for (var irng = 0; irng < pol.RingCount; irng++)                  {                      if (buf.WriteSpaceLeft < 4)                          await buf.Flush(async);                      buf.WriteInt32(pol[irng].Length);                      for (var ipts = 0; ipts < pol[irng].Length; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(pol[irng][ipts].X);                          buf.WriteDouble(pol[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPoint:                  var mp = (PostgisMultiPoint)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mp.PointCount);                  for (var ipts = 0; ipts < mp.PointCount; ipts++)                  {                      if (buf.WriteSpaceLeft < 21)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Point);                      buf.WriteDouble(mp[ipts].X);                      buf.WriteDouble(mp[ipts].Y);                  }                  return;                case WkbIdentifier.MultiLineString:                  var ml = (PostgisMultiLineString)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(ml.LineCount);                  for (var irng = 0; irng < ml.LineCount; irng++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.LineString);                      buf.WriteInt32(ml[irng].PointCount);                      for (var ipts = 0; ipts < ml[irng].PointCount; ipts++)                      {                          if (buf.WriteSpaceLeft < 16)                              await buf.Flush(async);                          buf.WriteDouble(ml[irng][ipts].X);                          buf.WriteDouble(ml[irng][ipts].Y);                      }                  }                  return;                case WkbIdentifier.MultiPolygon:                  var mpl = (PostgisMultiPolygon)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(mpl.PolygonCount);                  for (var ipol = 0; ipol < mpl.PolygonCount; ipol++)                  {                      if (buf.WriteSpaceLeft < 9)                          await buf.Flush(async);                      buf.WriteByte(0);                      buf.WriteInt32((int)WkbIdentifier.Polygon);                      buf.WriteInt32(mpl[ipol].RingCount);                      for (var irng = 0; irng < mpl[ipol].RingCount; irng++)                      {                          if (buf.WriteSpaceLeft < 4)                              await buf.Flush(async);                          buf.WriteInt32(mpl[ipol][irng].Length);                          for (var ipts = 0; ipts < mpl[ipol][irng].Length; ipts++)                          {                              if (buf.WriteSpaceLeft < 16)                                  await buf.Flush(async);                              buf.WriteDouble(mpl[ipol][irng][ipts].X);                              buf.WriteDouble(mpl[ipol][irng][ipts].Y);                          }                      }                  }                  return;                case WkbIdentifier.GeometryCollection:                  var coll = (PostgisGeometryCollection)value;                  if (buf.WriteSpaceLeft < 4)                      await buf.Flush(async);                  buf.WriteInt32(coll.GeometryCount);                    foreach (var x in coll)                      await Write(x' buf' lengthCache' null' async);                  return;                default:                  throw new InvalidOperationException("Unknown Postgis identifier.");              }
Magic Number,Npgsql.LegacyPostgis,PostgisGeometry,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetLen,The following statement contains a magic number: return 5 + (SRID == 0 || !includeSRID ? 0 : 4) + GetLenHelper();
Magic Number,Npgsql.LegacyPostgis,PostgisGeometry,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetLen,The following statement contains a magic number: return 5 + (SRID == 0 || !includeSRID ? 0 : 4) + GetLenHelper();
Magic Number,Npgsql.LegacyPostgis,PostgisLineString,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetHashCode,The following statement contains a magic number: var ret = 266370105;
Magic Number,Npgsql.LegacyPostgis,PostgisPolygon,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetHashCode,The following statement contains a magic number: var ret = 266370105;
Magic Number,Npgsql.LegacyPostgis,PostgisMultiPoint,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetHashCode,The following statement contains a magic number: var ret = 266370105;
Magic Number,Npgsql.LegacyPostgis,PostgisMultiLineString,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetLenHelper,The following statement contains a magic number: var n = 4;
Magic Number,Npgsql.LegacyPostgis,PostgisMultiLineString,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetHashCode,The following statement contains a magic number: var ret = 266370105;
Magic Number,Npgsql.LegacyPostgis,PostgisMultiPolygon,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetHashCode,The following statement contains a magic number: var ret = 266370105;
Magic Number,Npgsql.LegacyPostgis,PostgisMultiPolygon,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetLenHelper,The following statement contains a magic number: var n = 4;
Magic Number,Npgsql.LegacyPostgis,PostgisGeometryCollection,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetHashCode,The following statement contains a magic number: var ret = 266370105;
Magic Number,Npgsql.LegacyPostgis,PostgisGeometryCollection,C:\research\architectureSmells\repos\npgsql_Npgsql\src\Npgsql.LegacyPostgis\PostgisTypes.cs,GetLenHelper,The following statement contains a magic number: var n = 4;
