Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ConfigReader.Tests,when_config_reader_reads_maps_to_two_interfaces_that_has_property_with_the_same_name,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_config_reader_reads_maps_to_two_interfaces_that_has_property_with_the_same_name.cs,it_should_map_the_correct_value_to_per_interface,The length of the statement  "            var browser = configReader.SetupConfigOf<IConfigurationAdapter1>().SetupConfigOf<IConfigurationAdapter2>().ConfigBrowser; " is 121.
Long Statement,ConfigReader.Tests,when_the_config_reader_get_default_vaules,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_the_config_reader_get_default_vaules.cs,it_will_use_the_default_values_when_no_value_was_specified_in_the_configuration,The length of the statement  "			var configReader = new ConfigurationReader(this.configSource).SetupConfigOf<IConfigurationAdapter1>(new ConfigurationAdapter1DefaultValues()); " is 142.
Magic Number,ConfigReader.Tests,ConfigTransformerFixture,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\ConfigTransformerFixture.cs,Parse_GetsAFlatDictionaryOfConfiguration_ShouldReturnAnHierarchicalStructure,The following statement contains a magic number: Assert.AreEqual(2' transformedDictionary["StubInterface"].Properties.Count);
Magic Number,ConfigReader.Tests,when_a_custom_conversion_strategy_is_set_for_a_type,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_a_custom_conversion_strategy_is_set_for_a_type.cs,it_should_use_it_to_convert_type_that_have_no_type_converter,The following statement contains a magic number: Assert.AreEqual(3' array.Count());
Magic Number,ConfigReader.Tests,when_a_custom_conversion_strategy_is_set_for_a_type,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_a_custom_conversion_strategy_is_set_for_a_type.cs,it_should_use_it_to_convert_type_that_have_no_type_converter,The following statement contains a magic number: Assert.AreEqual("value3"' array.ElementAt(2));
Magic Number,ConfigReader.Tests,when_config_reader_reads_a_values_that_cant_be_casted_to_the_interface_datatype,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_config_reader_reads_a_values_that_cant_be_casted_to_the_interface_datatype.cs,Context,The following statement contains a magic number: var configDictionaryToReturn =                  new Dictionary<string' string>                      {                          {"ConfigurationAdapter1.IntegerProperty"' 2.ToString()}'                          {"ConfigurationAdapter1.StringProperty"' "1prop1"}'                          {"ConfigurationAdapter1.ColorProperty"' "WrongValue"}                      };
Magic Number,ConfigReader.Tests,when_config_reader_reads_configuration_with_different_data_types,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_config_reader_reads_configuration_with_different_data_types.cs,Context,The following statement contains a magic number: var configDictionaryToReturn =                  new Dictionary<string' string>                      {                          {"ConfigurationAdapter2.BoolProperty"' true.ToString()}'                          {"ConfigurationAdapter2.StringProperty"' "2prop1"}'                          {"ConfigurationAdapter1.IntegerProperty"' 2.ToString()}'                          {"ConfigurationAdapter1.StringProperty"' "1prop1"}'                          {"ConfigurationAdapter1.ColorProperty"' "#FFFFFF"}'                          {"ConfigurationAdapter1.AddressProperty"' "http://localhost"}                      };
Magic Number,ConfigReader.Tests,when_config_reader_reads_configuration_with_different_data_types,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_config_reader_reads_configuration_with_different_data_types.cs,it_should_convert_the_string_values_to_the_data_types,The following statement contains a magic number: Assert.AreEqual(2' configurationAdapter1.IntegerProperty);
Magic Number,ConfigReader.Tests,when_config_reader_reads_maps_to_two_interfaces_that_has_property_with_the_same_name,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_config_reader_reads_maps_to_two_interfaces_that_has_property_with_the_same_name.cs,Context,The following statement contains a magic number: var configDictionaryToReturn =                  new Dictionary<string' string>                      {                          {"ConfigurationAdapter2.BoolProperty"' true.ToString()}'                          {"ConfigurationAdapter2.StringProperty"' "2prop1"}'                          {"ConfigurationAdapter1.IntegerProperty"' 2.ToString()}'                          {"ConfigurationAdapter1.StringProperty"' "1prop1"}'                          {"ConfigurationAdapter1.ColorProperty"' "#FFFFFF"}'                          {"ConfigurationAdapter1.AddressProperty"' "http://localhost"}                      };
Magic Number,ConfigReader.Tests,when_one_adapter_is_from_config_and_one_from_default_config,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_one_adapter_is_from_config_and_one_from_default_config.cs,it_should_read_the_default_values_of_the_second_adapter,The following statement contains a magic number: var configDictionaryToReturn =                  new Dictionary<string' string>                      {                          {"ConfigurationAdapter1.IntegerProperty"' 2.ToString()}'                          {"ConfigurationAdapter1.StringProperty"' "1prop1"}'                          {"ConfigurationAdapter1.ColorProperty"' "#FFFFFF"}'                          {"ConfigurationAdapter1.AddressProperty"' "http://localhost"}                      };
Magic Number,ConfigReader.Tests,when_the_config_reader_get_default_vaules,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_the_config_reader_get_default_vaules.cs,it_will_use_the_default_values_when_no_value_was_specified_in_the_configuration,The following statement contains a magic number: Assert.AreEqual(12' browser.IntegerProperty);
Magic Number,ConfigReader.Tests,when_the_config_reader_get_default_vaules,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_the_config_reader_get_default_vaules.cs,it_will_use_default_values_from_an_anonymous_object_when_no_value_was_specified_in_the_configuration,The following statement contains a magic number: var configReader = new ConfigurationReader(this.configSource).  				SetupConfigOf<IConfigurationAdapter1>(  				new  					{  						StringProperty = "Default"'  						IntegerProperty = 12'  						ColorProperty = Color.DimGray'  						AddressProperty = (Uri) null  					});
Magic Number,ConfigReader.Tests,when_the_config_reader_get_default_vaules,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_the_config_reader_get_default_vaules.cs,it_will_use_default_values_from_an_anonymous_object_when_no_value_was_specified_in_the_configuration,The following statement contains a magic number: Assert.AreEqual(12' browser.IntegerProperty);
Magic Number,ConfigReader.Tests,when_the_config_reader_get_default_vaules,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_the_config_reader_get_default_vaules.cs,it_will_throw_an_exception_when_an_anonymous_object_is_missing_a_property_defined_in_the_configuration_adapter_interface,The following statement contains a magic number: var configReader = new ConfigurationReader(this.configSource).  				SetupConfigOf<IConfigurationAdapter1>(  				new  					{  						StringProperty = "Default"'  						IntegerProperty = 12'  						ColorProperty = Color.DimGray'  					});
Magic Number,ConfigReader.Tests,when_the_config_reader_get_default_vaules,D:\research\architectureSmells\repos1\TroyGoode_ConfigReader\src\ConfigReader.Tests\when_the_config_reader_get_default_vaules.cs,it_will_throw_an_exception_when_an_anonymous_object_has_a_property_with_the_wrong_type,The following statement contains a magic number: var configReader = new ConfigurationReader(this.configSource).  				SetupConfigOf<IConfigurationAdapter1>(  				new  					{  						StringProperty = "Default"'  						IntegerProperty = 12'  						ColorProperty = Color.DimGray'  						AddressProperty = Assembly.GetExecutingAssembly()  // Arbitrary choise. Just for the test's sake...  					});
