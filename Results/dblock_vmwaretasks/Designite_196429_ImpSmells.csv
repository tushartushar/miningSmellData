Implementation smell,Namespace,Class,File,Method,Description
Complex Method,VMWareCrash,Program,C:\repos\dblock_vmwaretasks\Source\VixCOM\196429\Program.cs,ThreadProc,Cyclomatic complexity of the method is 9
Long Parameter List,VMWareCrash,ConnectionInfo,C:\repos\dblock_vmwaretasks\Source\VixCOM\196429\ConnectionInfo.cs,ConnectionInfo,The method has 5 parameters. Parameters: hostType' uri' username' password' vmx
Long Statement,VMWareCrash,Program,C:\repos\dblock_vmwaretasks\Source\VixCOM\196429\Program.cs,Main,The length of the statement  "                    new ConnectionInfo("https://crockett.nycapt35k.com/sdk"' "consoleuser"' "admin123"' "[console-doogie] nkrasnov2k8/nkrasnov2k8.vmx")' " is 132.
Long Statement,VMWareCrash,Program,C:\repos\dblock_vmwaretasks\Source\VixCOM\196429\Program.cs,Main,The length of the statement  "                    // new ConnectionInfo("https://linc.nycapt35k.com/sdk"' "vmuser"' "admin123"' "[dbprotect-1] ddoub-mauve/ddoub-mauve.vmx")' " is 123.
Long Statement,VMWareCrash,Program,C:\repos\dblock_vmwaretasks\Source\VixCOM\196429\Program.cs,Main,The length of the statement  "                    // new ConnectionInfo("https://linc.nycapt35k.com/sdk"' "vmuser"' "admin123"' "[dbprotect-1] ddoub-purple/ddoub-purple.vmx")' " is 125.
Long Statement,VMWareCrash,Program,C:\repos\dblock_vmwaretasks\Source\VixCOM\196429\Program.cs,Main,The length of the statement  "                    // new ConnectionInfo("https://tubbs.nycapt35k.com/sdk"' "vmuser"' "admin123"' "[adpro-1] snowtest-w2k8/snowtest-w2k8.vmx")' " is 124.
Magic Number,VMWareCrash,Program,C:\repos\dblock_vmwaretasks\Source\VixCOM\196429\Program.cs,ThreadProc,The following statement contains a magic number: while (true)              {                  try                  {                      // connect to a VI host                      ConsoleOutput.WriteLine("Connecting to {0}"' string.IsNullOrEmpty(connectionInfo.Uri)                          ? "VMWare Workstation"                          : connectionInfo.Uri);                      IJob connectJob = vix.Connect(Constants.VIX_API_VERSION' connectionInfo.HostType'                          connectionInfo.Uri' 0' connectionInfo.Username' connectionInfo.Password' 0' null' null);                      object[] connectProperties = { Constants.VIX_PROPERTY_JOB_RESULT_HANDLE };                      object hosts = null;                      ulong rc = connectJob.Wait(connectProperties' ref hosts);                      if (vix.ErrorIndicatesFailure(rc))                      {                          ((IVixHandle2) connectJob).Close();                          throw new Exception(vix.GetErrorText(rc' "en-US"));                      }                        IHost host = (IHost)((object[])hosts)[0];                        {                          // open a vm                          ConsoleOutput.WriteLine("Opening {0}"' connectionInfo.Vmx);                          IJob openJob = host.OpenVM(connectionInfo.Vmx' null);                          object[] openProperties = { Constants.VIX_PROPERTY_JOB_RESULT_HANDLE };                          object openResults = null;                          rc = openJob.Wait(openProperties' ref openResults);                          if (vix.ErrorIndicatesFailure(rc))                          {                              ((IVixHandle2) openJob).Close();                              throw new Exception(vix.GetErrorText(rc' "en-US"));                          }                          ConsoleOutput.WriteLine("Opened {0}"' connectionInfo.Vmx);                          IVM2 vm = (IVM2)((object[])openResults)[0];                          ((IVixHandle2)openJob).Close();                          // get root snapshot                          ConsoleOutput.WriteLine("Fetching root snapshot");                          ISnapshot snapshot = null;                          rc = vm.GetRootSnapshot(0' out snapshot);                          if (vix.ErrorIndicatesFailure(rc)) throw new Exception(vix.GetErrorText(rc' "en-US"));                          ConsoleOutput.WriteLine("Reverting to snapshot");                          // revert to the snapshot                          IJob revertJob = vm.RevertToSnapshot(snapshot' Constants.VIX_VMPOWEROP_NORMAL' null' null);                          rc = revertJob.WaitWithoutResults();                          ((IVixHandle2)snapshot).Close();                          ((IVixHandle2)revertJob).Close();                          if (vix.ErrorIndicatesFailure(rc)) throw new Exception(vix.GetErrorText(rc' "en-US"));                          // power on                          ConsoleOutput.WriteLine("Powering on");                          IJob powerOnJob = vm.PowerOn(VixCOM.Constants.VIX_VMPOWEROP_NORMAL' null' null);                          rc = powerOnJob.WaitWithoutResults();                          ((IVixHandle2)powerOnJob).Close();                          if (vix.ErrorIndicatesFailure(rc)) throw new Exception(vix.GetErrorText(rc' "en-US"));                          // wait for tools in guest                          ConsoleOutput.WriteLine("Waiting for tools");                          IJob waitForToolsJob = vm.WaitForToolsInGuest(240' null);                          rc = waitForToolsJob.WaitWithoutResults();                          ((IVixHandle2)waitForToolsJob).Close();                          if (vix.ErrorIndicatesFailure(rc)) throw new Exception(vix.GetErrorText(rc' "en-US"));                          // power off                          ConsoleOutput.WriteLine("Powering off");                          IJob powerOffJob = vm.PowerOff(VixCOM.Constants.VIX_VMPOWEROP_NORMAL' null);                          rc = powerOffJob.WaitWithoutResults();                          ((IVixHandle2)powerOffJob).Close();                          if (vix.ErrorIndicatesFailure(rc)) throw new Exception(vix.GetErrorText(rc' "en-US"));                          ((IVixHandle2)vm).Close();                      }                        // disconnect                      ConsoleOutput.WriteLine("Disconnecting");                      host.Disconnect();                  }                  catch (Exception ex)                  {                      ConsoleOutput.WriteLine("ERROR: {0}"' ex.Message);                      ConsoleOutput.WriteLine("{0}"' ex.StackTrace);                  }              }
