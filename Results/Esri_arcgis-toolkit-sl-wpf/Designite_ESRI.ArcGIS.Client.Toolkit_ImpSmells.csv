Implementation smell,Namespace,Class,File,Method,Description
Long Method,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,setTemplates,The method has 116 lines of code.
Long Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,UpdateDataForm,The method has 109 lines of code.
Long Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The method has 223 lines of code.
Long Method,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The method has 324 lines of code.
Long Method,ESRI.ArcGIS.Client.Toolkit,OAuthAuthorize,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OAuthAuthorize\OAuthAuthorize.cs,Initialize,The method has 121 lines of code.
Long Method,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The method has 133 lines of code.
Long Method,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,CreateProperty,The method has 140 lines of code.
Long Method,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,The method has 118 lines of code.
Complex Method,ESRI.ArcGIS.Client.Toolkit,Attribution,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Attribution\Attribution.cs,Layers_CollectionChanged,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit,EditorWidget,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\EditorWidget.cs,UpdateVisibleButtons,Cyclomatic complexity of the method is 15
Complex Method,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,Layers_CollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,setTemplates,Cyclomatic complexity of the method is 29
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataField,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataField.cs,FeatureDataField,Cyclomatic complexity of the method is 9
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GenerateUI,Cyclomatic complexity of the method is 17
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,UpdateDataForm,Cyclomatic complexity of the method is 22
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetCodedValueDomainFieldControl,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,Cyclomatic complexity of the method is 65
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,UpdateStates,Cyclomatic complexity of the method is 12
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,HasChange,Cyclomatic complexity of the method is 9
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,Cyclomatic complexity of the method is 16
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,HasChange,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,RepopulateDomains,Cyclomatic complexity of the method is 26
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,Cyclomatic complexity of the method is 9
Complex Method,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,Cyclomatic complexity of the method is 42
Complex Method,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,Cyclomatic complexity of the method is 9
Complex Method,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,Cyclomatic complexity of the method is 13
Complex Method,ESRI.ArcGIS.Client.Toolkit,MapLayerItem,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\MapLayerItem.cs,Layer_PropertyChanged,Cyclomatic complexity of the method is 10
Complex Method,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,ApplyTranslationTransform,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit,MapTip,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\MapTip\MapTip.cs,graphicsLayer_MouseEnter,Cyclomatic complexity of the method is 9
Complex Method,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,OnApplyTemplate,Cyclomatic complexity of the method is 10
Complex Method,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateOVMap,Cyclomatic complexity of the method is 14
Complex Method,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,ZoomToNewExtent,Cyclomatic complexity of the method is 10
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,OnAutoGeneratingColumn,Cyclomatic complexity of the method is 12
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,OnBeginningEdit,Cyclomatic complexity of the method is 9
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,AddStatusBarEventsHandlers,Cyclomatic complexity of the method is 14
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,RemoveStatusBarEventHandlers,Cyclomatic complexity of the method is 14
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,Graphic_AttributeValueChanged,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GraphicsLayer_PropertyChanged,Cyclomatic complexity of the method is 11
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,UpdateItemsSource,Cyclomatic complexity of the method is 20
Complex Method,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DatePicker_SelectedDateChanged,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,Cyclomatic complexity of the method is 20
Complex Method,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,InitializeMapUnit,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,OnApplyTemplate,Cyclomatic complexity of the method is 10
Complex Method,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,MaximumThumb_DragDelta,Cyclomatic complexity of the method is 13
Complex Method,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,Snap,Cyclomatic complexity of the method is 17
Complex Method,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,Next,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,Rewind,Cyclomatic complexity of the method is 10
Complex Method,ESRI.ArcGIS.Client.Toolkit.Primitives,LegendTree,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\LegendTree.cs,Map_PropertyChanged,Cyclomatic complexity of the method is 9
Complex Method,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,GetLayerItemsSource,Cyclomatic complexity of the method is 11
Complex Method,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,UpdateLayerVisibilities,Cyclomatic complexity of the method is 11
Complex Method,ESRI.ArcGIS.Client.Toolkit.Primitives,TemplatePanel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\TemplatePanel.cs,layoutTemplates,Cyclomatic complexity of the method is 13
Complex Method,ESRI.ArcGIS.Client.Toolkit.Primitives,TickBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\TickBar.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,DynamicCodedValueSource,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomain.cs,GetCodedValueSources,Cyclomatic complexity of the method is 15
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,FieldDomainUtils,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomainUtils.cs,BuildDynamicCodedValueSource,Cyclomatic complexity of the method is 10
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,FieldDomainUtils,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomainUtils.cs,SetFieldInfo,Cyclomatic complexity of the method is 37
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,RangeDomainValidator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\RangeDomainValidator.cs,ValidateRange,Cyclomatic complexity of the method is 35
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,RangeDomainValidator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\RangeDomainValidator.cs,ValidateRange,Cyclomatic complexity of the method is 25
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,CreateProperty,Cyclomatic complexity of the method is 10
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,AttributeListToObject,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,SetProperty,Cyclomatic complexity of the method is 8
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,Cyclomatic complexity of the method is 24
Complex Method,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,RefreshGraphic,Cyclomatic complexity of the method is 11
Long Parameter List,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,GetSymbolTemplate,The method has 6 parameters.
Long Parameter List,ESRI.ArcGIS.Client.Toolkit,FeatureDataField,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataField.cs,FeatureDataField,The method has 5 parameters.
Long Parameter List,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,PopulateFieldControl,The method has 6 parameters.
Long Parameter List,ESRI.ArcGIS.Client.Toolkit.Utilities,DynamicCodedValueSource,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomain.cs,GetCodedValueSources,The method has 5 parameters.
Long Parameter List,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,GenerateEnumerable,The method has 5 parameters.
Long Parameter List,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,CreateProperty,The method has 8 parameters.
Long Parameter List,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,AttributeListToObject,The method has 5 parameters.
Long Parameter List,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,The method has 7 parameters.
Long Parameter List,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,RefreshRow,The method has 5 parameters.
Long Identifier,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,AttributeListToObject,The length of the parameter myDynamicRangeValidationMethod is 30.
Long Identifier,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,The length of the parameter DynamicTypeRangeDomainValidationFieldBuilder is 44.
Long Statement,ESRI.ArcGIS.Client.Toolkit,AttachmentEditor,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\AttachmentEditor\AttachmentEditor.cs,LoadAttachments,The length of the statement  "				this.FeatureLayer.QueryAttachmentInfos (oidField' (Action<IEnumerable<AttachmentInfo>>)PopulateAttachmentList' (Action<Exception>)delegate (Exception ex) { " is 155.
Long Statement,ESRI.ArcGIS.Client.Toolkit,AttachmentEditor,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\AttachmentEditor\AttachmentEditor.cs,GetGraphicSourceOIdValue,The length of the statement  "		if (oidField != null && !string.IsNullOrEmpty (oidField.Trim ()) && this.GraphicSource != null && this.GraphicSource.Attributes.ContainsKey (oidField)) " is 151.
Long Statement,ESRI.ArcGIS.Client.Toolkit,AttachmentEditor,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\AttachmentEditor\AttachmentEditor.cs,UpdateStates,The length of the statement  "			this._addNewButton.IsEnabled = this.AllowDrop = this.FeatureLayer.LayerInfo.HasAttachments && this.FeatureLayer.IsAddAttachmentAllowed (this.GraphicSource); " is 156.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Attribution,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Attribution\Attribution.cs,AttachLayersHandler,The length of the statement  "		// This update is only useful to avoid blank lines (for any reason' a TextBlock with a null string has a null height the first time and a non null height after setting again the text value to null) " is 197.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Attribution,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Attribution\Attribution.cs,UpdateAttributionItems,The length of the statement  "		IEnumerable<IAttribution> items = Layers == null ? null : Layers.OfType<IAttribution> ().Where (attrib => attrib.AttributionTemplate != null).Select (attribution => (IAttribution)new DesignAttribution ((Layer)attribution)); " is 223.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Attribution,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Attribution\Attribution.cs,UpdateAttributionItems,The length of the statement  "			Items = visibleLayers.OfType<IAttribution> ().Where (attrib => attrib.AttributionTemplate != null).ToObservableCollection (); " is 125.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Bookmark,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Bookmark\Bookmark.cs,SaveBookmarks,The length of the statement  "			System.Collections.ObjectModel.ObservableCollection<MapBookmark> bookmarkClone = new System.Collections.ObjectModel.ObservableCollection<MapBookmark> (); " is 153.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Bookmark,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Bookmark\Bookmark.cs,LoadBookmarks,The length of the statement  "			System.Collections.ObjectModel.ObservableCollection<MapBookmark> storedMarks = System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings [Key] as System.Collections.ObjectModel.ObservableCollection<MapBookmark>; " is 223.
Long Statement,ESRI.ArcGIS.Client.Toolkit,EditorWidget,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\EditorWidget.cs,UpdateVisibleButtons,The length of the statement  "			if ((!hasPolygonOrPolyline || !addPolygonOrPolyline) && (flayer.LayerInfo.IsAddAllowed || flayer.LayerInfo.IsUpdateAllowed) && flayer.Visible && flayer.LayerInfo != null && (flayer.LayerInfo.GeometryType == GeometryType.Polygon || flayer.LayerInfo.GeometryType == GeometryType.Polyline)) { " is 289.
Long Statement,ESRI.ArcGIS.Client.Toolkit,EditorWidget,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\EditorWidget.cs,UpdateVisibleButtons,The length of the statement  "			if (!atLeastOneLayerCanUpdate && (flayer.LayerInfo.IsUpdateAllowed || (!flayer.AutoSave && flayer.LayerInfo.IsAddAllowed)) && flayer.Visible) " is 141.
Long Statement,ESRI.ArcGIS.Client.Toolkit,EditorWidget,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\EditorWidget.cs,UpdateVisibleButtons,The length of the statement  "			if (!atLeastOneLayerCanDelete && (flayer.LayerInfo.IsDeleteAllowed || (!flayer.AutoSave && flayer.LayerInfo.IsAddAllowed)) && flayer.Visible) " is 141.
Long Statement,ESRI.ArcGIS.Client.Toolkit,EditorWidget,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\EditorWidget.cs,UpdateVisibleButtons,The length of the statement  "	bool allButtonsDisabled = !hasPolygonOrPolyline && !atLeastOneLayerNotAutoSave && !addPolygonOrPolyline && !atLeastOneLayerCanAdd && !atLeastOneLayerCanUpdate && atLeastOneLayerCanDelete && !atLeastOneLayer && !atLeastOneFeatureLayer; " is 234.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,IsTemplatable,The length of the statement  "	return (featureLayer != null && featureLayer.Visible && featureLayer.LayerInfo != null && featureLayer.LayerInfo.IsAddAllowed); " is 127.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,setTemplates,The length of the statement  "								SymbolTemplate symbolTemplate = GetSymbolTemplate (editor' symbol' type.Value.Id' featureTemplate.Value' name' featureTemplate.Value.Description); " is 146.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,setTemplates,The length of the statement  "							var defaultLabel = layer.Renderer is UniqueValueRenderer ? (layer.Renderer as UniqueValueRenderer).DefaultLabel : (layer.Renderer is UniqueValueMultipleFieldsRenderer) ? (layer.Renderer as UniqueValueMultipleFieldsRenderer).DefaultLabel : null; " is 244.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,setTemplates,The length of the statement  "						SymbolTemplate symbolTemplate = GetSymbolTemplate (editor' symbol' null' featureTemplate.Value' featureTemplate.Value.Name' featureTemplate.Value.Description); " is 159.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,setTemplates,The length of the statement  "							var featureTemplate = new FeatureTemplate (info.Label' info.Description' null' prototypeAttributes' FeatureEditTool.None); " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,setTemplates,The length of the statement  "							group.Templates.Add (GetSymbolTemplate (editor' info.Symbol' info.Value' featureTemplate' info.Label' info.Description)); " is 121.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,setTemplates,The length of the statement  "							var featureTemplate = new FeatureTemplate (info.Label' info.Description' null' prototypeAttributes' FeatureEditTool.None); " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TemplatePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\TemplatePicker.cs,setTemplates,The length of the statement  "							group.Templates.Add (GetSymbolTemplate (editor' uvmfr.DefaultSymbol' null' null' uvmfr.DefaultLabel ?? layer.ID' null)); " is 120.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GenerateUI,The length of the statement  "	if (this.FeatureLayer == null || this.GraphicSource == null || (this.FeatureLayer != null && this.GraphicSource != null && !CheckGraphicParent ())) { " is 149.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GenerateUI,The length of the statement  "		if (this.FeatureLayer.Renderer is UniqueValueRenderer || this.FeatureLayer.Renderer is UniqueValueMultipleFieldsRenderer) { " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,UpdateDataForm,The length of the statement  "								object value = (this.GraphicSource.Attributes.ContainsKey (fieldName)) ? this.GraphicSource.Attributes [fieldName] : null; " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,UpdateDataForm,The length of the statement  "				object typeIdFieldValue = (this._typeIdField != null && this.GraphicSource.Attributes.ContainsKey (this._typeIdField)) ? this.GraphicSource.Attributes [this._typeIdField] : null; " is 178.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,UpdateDataForm,The length of the statement  "								object value = (this.GraphicSource.Attributes.ContainsKey (fieldName)) ? this.GraphicSource.Attributes [fieldName] : null; " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,Graphic_AttributeValueChanged,The length of the statement  "	if ((IsEditFieldsInfo (e.Key) || !this._isUpdatedByCommitButton) && e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Replace) { " is 151.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,Graphic_AttributeValueChanged,The length of the statement  "				Control control = (_attributeFrameworkElements != null && _attributeFrameworkElements.ContainsKey (key)) ? _attributeFrameworkElements [key] : null; " is 148.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,FeatureDataField_PropertyChanged,The length of the statement  "	bool hasChange = (valueInGraphics == null && value != null) || (valueInGraphics != null && value == null) || (valueInGraphics != null && value != null && !valueInGraphics.Equals (value)); " is 187.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,FrameworkElement_PropertyChanged,The length of the statement  "	if (sender is ComboBox && associatedField != null && !string.IsNullOrEmpty (associatedField) && associatedField == this._typeIdField) " is 133.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetDomain,The length of the statement  "	if (this._typeIdField != null && typeIdFieldValue != null && this._featureTypes != null && this.GraphicSource.Attributes.ContainsKey (this._typeIdField)) { " is 155.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "				fieldValue = DateTimeFormatConverter.DateTimeToString ((DateTime)fieldValue' DateTimeKind' DateTimeFormat' new CultureInfo (Language.IetfLanguageTag)); " is 151.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "		} else if ((fieldDomain != null && fieldDomain is CodedValueDomain) || FieldDomainUtils.IsDynamicDomain (field' FeatureLayer.LayerInfo)) { " is 138.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "				codedValueSources = Toolkit.Utilities.DynamicCodedValueSource.GetCodedValueSources (layerInfo.TypeIdField' field' GraphicSource' dynamicCodedValueSource' nullableSources); " is 171.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "						if ((codeVal.Key != null && codeVal.Key.Equals (fieldValue)) || (fieldValue != null && fieldValue.Equals (codeVal.Key))) { " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "			datafield = new FeatureDataField<int?> (this' layerInfo' field' type' fieldValue != null ? Convert.ToInt32 (fieldValue) : (int?)null); " is 134.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "			datafield = new FeatureDataField<short?> (this' layerInfo' field' type' fieldValue != null ? Convert.ToInt16 (fieldValue) : (short?)null); " is 138.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "			datafield = new FeatureDataField<double?> (this' layerInfo' field' type' fieldValue != null ? Convert.ToDouble (fieldValue) : (double?)null); " is 141.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "			datafield = new FeatureDataField<float?> (this' layerInfo' field' type' fieldValue != null ? Convert.ToSingle (fieldValue) : (float?)null); " is 139.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "			datafield = new FeatureDataField<DateTime?> (this' layerInfo' field' type' fieldValue != null ? Convert.ToDateTime (fieldValue) : (DateTime?)null); " is 147.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "			datafield = new FeatureDataField<long?> (this' layerInfo' field' type' fieldValue != null ? Convert.ToInt64 (fieldValue) : (long?)null); " is 136.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "			datafield = new FeatureDataField<byte?> (this' layerInfo' field' type' fieldValue != null ? Convert.ToByte (fieldValue) : (byte?)null); " is 135.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "			datafield = new FeatureDataField<bool?> (this' layerInfo' field' type' fieldValue != null ? Convert.ToBoolean (fieldValue) : (bool?)null); " is 138.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The length of the statement  "			datafield = new FeatureDataField<string> (this' layerInfo' field' type' fieldValue != null ? Convert.ToString (fieldValue) : (string)null); " is 139.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GenerateField,The length of the statement  "	object typeIdFieldValue = (this._typeIdField != null && this.GraphicSource.Attributes.ContainsKey (this._typeIdField)) ? this.GraphicSource.Attributes [this._typeIdField] : null; " is 178.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GenerateFields,The length of the statement  "	if (this.FeatureLayer == null || this.GraphicSource == null || this._contentPresenter == null || this.FeatureLayer.LayerInfo == null || this.FeatureLayer.LayerInfo.Fields == null || !this.FeatureLayer.LayerInfo.Fields.GetEnumerator ().MoveNext ()) " is 247.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GenerateFields,The length of the statement  "	BindingMode bindingMode = this.IsReadOnly || !this.CanUserEdit || this.FeatureLayer.IsReadOnly ? BindingMode.OneWay : BindingMode.TwoWay; " is 137.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,IsViewableAttribute,The length of the statement  "	if (field.Type != Field.FieldType.Blob && field.Type != Field.FieldType.Geometry && field.Type != Field.FieldType.Raster && field.Type != Field.FieldType.Unknown) " is 162.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,HasChange,The length of the statement  "	if (this._attributeValidationStatus == null || (this._attributeValidationStatus != null && this._attributeValidationStatus.Count == 0)) " is 135.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,HasInvalidField,The length of the statement  "	if (this._attributeValidationStatus == null || (this._attributeValidationStatus != null && this._attributeValidationStatus.Count == 0)) " is 135.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,The length of the statement  "	if (this.FeatureLayer == null || this.GraphicSource == null || (this.FeatureLayer != null && this.GraphicSource != null && !CheckGraphicParent ())) " is 147.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,The length of the statement  "					if (Utilities.AreEqual (codeVal.Key' this.GraphicSource.Attributes [fieldName]' codeVal.Key.GetType ()' new CultureInfo (Language.IetfLanguageTag))) { " is 150.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,The length of the statement  "			if (hasChange || (this._attributeValidationStatus != null && this._attributeValidationStatus.ContainsKey (fieldName))) { " is 120.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,The length of the statement  "					if (!hasChange && this._attributeValidationStatus != null && this._attributeValidationStatus.ContainsKey (fieldName) && this._attributeValidationStatus [fieldName]) " is 164.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,The length of the statement  "				if (!hasChange && this._attributeValidationStatus != null && this._attributeValidationStatus.ContainsKey (fieldName) && this._attributeValidationStatus [fieldName]) " is 164.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,HasChange,The length of the statement  "			if ((string.IsNullOrEmpty ((control as TextBox).Text.Trim ()) && valueInGraphic == null) || Utilities.AreEqual ((control as TextBox).Text' valueInGraphic' type' culture' out hasError)) " is 184.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,RepopulateDomains,The length of the statement  "					typeIdFieldValue = System.Convert.ChangeType (value' System.Nullable.GetUnderlyingType (typeIdFieldType)' new CultureInfo (Language.IetfLanguageTag)); " is 150.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,RepopulateDomains,The length of the statement  "					Control newFieldControl = PopulateFieldControl (FeatureLayer != null ? FeatureLayer.LayerInfo : null' field' grid' bindingMode' gridRow.Value' fieldDomain); " is 156.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,RepopulateDomains,The length of the statement  "						(newFieldControl as TextBox).SetValue (TextBox.TextProperty' previousFieldControlValue == null ? "" : previousFieldControlValue.ToString ()); " is 141.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,RepopulateDomains,The length of the statement  "						(newFieldControl as DateTimePicker).SetValue (DateTimePicker.SelectedDateProperty' previousFieldControlValue as DateTime?); " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,RepopulateDomains,The length of the statement  "								var codedValueSource = codedValueSources.FirstOrDefault (cvs => Utilities.AreEqual (cvs.Code' previousFieldControlValue' Utilities.GetFieldType (field)' new CultureInfo (Language.IetfLanguageTag))); " is 198.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,IsEditFieldsInfo,The length of the statement  "	return (this.FeatureLayer != null && this.FeatureLayer.LayerInfo != null && this.FeatureLayer.LayerInfo.EditFieldsInfo != null && (this.FeatureLayer.LayerInfo.EditFieldsInfo.EditDateField == field || this.FeatureLayer.LayerInfo.EditFieldsInfo.EditorField == field)); " is 266.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataFieldValueConverter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataFormConverters.cs,ConvertBack,The length of the statement  "		if (targetType == typeof(int?) || targetType == typeof(short?) || targetType == typeof(double?) || targetType == typeof(float?) || targetType == typeof(long?) || targetType == typeof(byte?) || targetType == typeof(bool?) || targetType == typeof(DateTime?)) " is 256.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The length of the statement  "		Margin = new Thickness (-topLeft.X + margin.Left' -topLeft.Y + margin.Top' -bottomRight.X + margin.Right' -bottomRight.Y + margin.Bottom); " is 138.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,OnLayoutUpdated,The length of the statement  "	borderPath.Margin = new Thickness (0' 0' -CornerRadius * 2 - StrokeThickness - ArrowHeight' -CornerRadius * 2 - ArrowHeight - StrokeThickness); " is 143.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The length of the statement  "	if (((Map.ActualWidth - translatedTop.X) < Map.ActualWidth) && ((Map.ActualWidth - translatedTop.X) > size.Width) && ((Map.ActualHeight - translatedTop.Y) < Map.ActualHeight) && ((Map.ActualHeight - translatedTop.Y) > size.Height)) { " is 233.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The length of the statement  "	if (((Map.ActualWidth - translatedBottom.X) < Map.ActualWidth) && ((Map.ActualWidth - translatedBottom.X) > size.Width) && ((Map.ActualHeight - translatedBottom.Y) < Map.ActualHeight) && ((Map.ActualHeight - translatedBottom.Y) > size.Height)) { " is 245.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The length of the statement  "	if (((Map.ActualWidth - translatedLeft.X) < Map.ActualWidth) && ((Map.ActualWidth - translatedLeft.X) > size.Width) && ((Map.ActualHeight - translatedLeft.Y) < Map.ActualHeight) && ((Map.ActualHeight - translatedLeft.Y) > size.Height)) { " is 237.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The length of the statement  "	if (((Map.ActualWidth - translatedRight.X) < Map.ActualWidth) && ((Map.ActualWidth - translatedRight.X) > size.Width) && ((Map.ActualHeight - translatedRight.Y) < Map.ActualHeight) && ((Map.ActualHeight - translatedRight.Y) > size.Height)) { " is 241.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The length of the statement  "	if (((Map.ActualWidth - translatedTopLeft.X) <= Map.ActualWidth) && ((Map.ActualWidth - translatedTopLeft.X) > size.Width) && ((Map.ActualHeight - translatedTopLeft.Y) <= Map.ActualHeight) && ((Map.ActualHeight - translatedTopLeft.Y) > size.Height)) { " is 251.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The length of the statement  "	if (((Map.ActualWidth - translatedTopRight.X) <= Map.ActualWidth) && ((Map.ActualWidth - translatedTopRight.X) > size.Width) && ((Map.ActualHeight - translatedTopRight.Y) <= Map.ActualHeight) && ((Map.ActualHeight - translatedTopRight.Y) > size.Height)) { " is 255.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The length of the statement  "	if (((Map.ActualWidth - translatedBottomLeft.X) <= Map.ActualWidth) && ((Map.ActualWidth - translatedBottomLeft.X) > size.Width) && ((Map.ActualHeight - translatedBottomLeft.Y) <= Map.ActualHeight) && ((Map.ActualHeight - translatedBottomLeft.Y) > size.Height)) { " is 263.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The length of the statement  "	if (((Map.ActualWidth - translatedBottomRight.X) <= Map.ActualWidth) && ((Map.ActualWidth - translatedBottomRight.X) > size.Width) && ((Map.ActualHeight - translatedBottomRight.Y) <= Map.ActualHeight) && ((Map.ActualHeight - translatedBottomRight.Y) > size.Height)) { " is 267.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The length of the statement  "	if (currentPlacementMode == PlacementMode.Top || currentPlacementMode == PlacementMode.TopLeft || currentPlacementMode == PlacementMode.TopRight) { " is 147.
Long Statement,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The length of the statement  "	if (currentPlacementMode == PlacementMode.Bottom || currentPlacementMode == PlacementMode.BottomLeft || currentPlacementMode == PlacementMode.BottomRight) { " is 156.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Legend,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\Legend.cs,OnMapPropertyChanged,The length of the statement  "	if (System.ComponentModel.DesignerProperties.GetIsInDesignMode (this) && (newMap == null || newMap.Layers == null || newMap.Layers.Count == 0)) { " is 145.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Legend,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\Legend.cs,OnApplyTemplate,The length of the statement  "		if (System.ComponentModel.DesignerProperties.GetIsInDesignMode (this) && (Map == null || Map.Layers == null || Map.Layers.Count == 0)) { " is 136.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Legend,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\Legend.cs,OnApplyTemplate,The length of the statement  "					ImageSource = new BitmapImage (new Uri ("/ESRI.ArcGIS.Client.Toolkit;component/Images/legendItem.png"' UriKind.Relative))' " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MapLayerItem,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\MapLayerItem.cs,Refresh,The length of the statement  "	if (!(Layer is GroupLayerBase))// GroupLayer : don't wait for layer intialized' so the user will see the layer hierarchy even if the group layer is not initialized yet (else would need to wait for all sublayers initialized) " is 223.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MapLayerItem,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\MapLayerItem.cs,Refresh,The length of the statement  "	var legendSupport = LayerItemsOptions.ReturnLegendItems == false && simplifiedLegendSupport.IsSupported ? simplifiedLegendSupport : Layer as ILegendSupport; " is 156.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MapLayerItem,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\MapLayerItem.cs,Refresh,The length of the statement  "					maxServiceResolution = result.MinimumScale == 0.0 ? double.PositiveInfinity : ConvertToResolution (result.MinimumScale' map); " is 125.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MapLayerItem,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\MapLayerItem.cs,Refresh,The length of the statement  "						LayerItems = result.LayerLegendInfos.Select (info => new LayerItemViewModel (Layer' info' Description' map)).ToObservableCollection (); " is 135.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MapLayerItem,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\MapLayerItem.cs,Refresh,The length of the statement  "				// Kml layer particular case : if a KML layer has only a child which is not another KML layer ==> set the child item as transparent so it doesn't appear in the legend " is 166.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MapLayerItem,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\MapLayerItem.cs,AddGroupChildLayers,The length of the statement  "				MapLayerItem mapLayerItem = LayerItems == null ? null : LayerItems.FirstOrDefault (item => item.Layer == layerToFind) as MapLayerItem; " is 134.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MapLayerItem,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\MapLayerItem.cs,AddGroupChildLayers,The length of the statement  "				if (mapLayerItem == null || mapLayerItems.Contains (mapLayerItem))// else reuse existing map layer item to avoid querying again the legend and lose the item states (note : contains test if for the degenerated case where a layer is twice or more in a group layer) " is 262.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MapLayerItem,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\MapLayerItem.cs,ProcessKmlLayer,The length of the statement  "	// The child must not be a KMLLayer i.e. not a group layer (sub folder and sub document must not be removed from the legend) " is 124.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Magnifier,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\Magnifier.xaml.cs,Map_RotationChanged,The length of the statement  "	bigMap.Rotation = (this.FlowDirection == System.Windows.FlowDirection.LeftToRight) ? (double)e.NewValue : -(double)e.NewValue; " is 126.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,SetMagnifyResolution,The length of the statement  "			bigMap.Extent = new Envelope (center.X - bigMap.ActualWidth * mapRes' center.Y - bigMap.ActualWidth * mapRes' center.X + bigMap.ActualWidth * mapRes' center.Y + bigMap.ActualWidth * mapRes); " is 190.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,UpdateMagnifyMapCenter,The length of the statement  "			Point p = TransformToVisual (this.Map).Transform (new Point ((this.RenderSize.Width * .5)' (this.RenderSize.Height * .5))); " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,map_RotationChanged,The length of the statement  "	bigMap.Rotation = (this.FlowDirection == System.Windows.FlowDirection.LeftToRight) ? (double)e.NewValue : -(double)e.NewValue; " is 126.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,SetupZoom,The length of the statement  "		if (!double.IsNaN (Map.MinimumResolution) && !double.IsNaN (Map.MaximumResolution) && Map.MaximumResolution != double.MaxValue && Map.MinimumResolution != double.Epsilon && !double.IsNaN (Map.Resolution)) { " is 206.
Long Statement,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,Map_RotationChanged,The length of the statement  "	double value = (this.FlowDirection == System.Windows.FlowDirection.LeftToRight) ? (double)e.NewValue : -(double)e.NewValue; " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OAuthAuthorize,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OAuthAuthorize\OAuthAuthorize.cs,Initialize,The length of the statement  "        // Page initiated as redirect uri of another SL instance --> pass in the fragments to the other instance and close this one" is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OAuthAuthorize,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OAuthAuthorize\OAuthAuthorize.cs,OpenAuthorizeWindow,The length of the statement  "		HtmlPage.Window.Invoke ("openWindow"' _authorizeUrl' "oauth"' "height = 320' width = 480' location = no' resizable = yes' scrollbars' status = no' left = 200' top = 200"' HtmlPage.Plugin); " is 188.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OAuthAuthorize,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OAuthAuthorize\OAuthAuthorize.cs,DecodeParameters,The length of the statement  "	string answer = !string.IsNullOrEmpty (uri.Fragment) ? uri.Fragment.Substring (1) : (!string.IsNullOrEmpty (uri.Query) ? uri.Query.Substring (1) : string.Empty); " is 161.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OAuthAuthorize,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OAuthAuthorize\OAuthAuthorize.cs,DecodeParameters,The length of the statement  "	}' StringSplitOptions.RemoveEmptyEntries).Select (p => p.Split ('=')).ToDictionary (pair => pair [0]' pair => pair.Length > 1 ? HttpUtility.UrlDecode (pair [1]) : null); " is 169.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OAuthAuthorize,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OAuthAuthorize\OAuthAuthorize.cs,FromJsonValue,The length of the statement  "	Dictionary<string' string> dict = dictionary.ToDictionary (kvp => kvp.Key' kvp => kvp.Value.JsonType == JsonType.String ? (string)kvp.Value : kvp.Value.ToString ()); " is 165.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,map_RotationChanged,The length of the statement  "	double angle = (this.FlowDirection == System.Windows.FlowDirection.LeftToRight) ? -(double)e.NewValue : (double)e.NewValue; " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,ZoomToNewExtent,The length of the statement  "	bool isMapWithinOV = mapExtent.XMin >= ovExtent.XMin && mapExtent.XMax <= ovExtent.XMax && mapExtent.YMin >= ovExtent.YMin && mapExtent.YMax <= ovExtent.YMax; " is 158.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,ZoomToNewExtent,The length of the statement  "	if (!isMapWithinOV || widthRatio <= minRatio || heightRatio <= minRatio || widthRatio >= maxRatio || heightRatio >= maxRatio) { " is 127.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The length of the statement  "	if (!double.IsNaN (topLeft.X) && !double.IsNaN (topLeft.Y) && !double.IsNaN (bottomRight.X) && !double.IsNaN (bottomRight.Y)) { " is 127.
Long Statement,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The length of the statement  "		AOI.Margin = new Thickness ((this.FlowDirection == System.Windows.FlowDirection.LeftToRight) ? topLeft.X : topLeft.X - AOI.Width' topLeft.Y' 0' 0); " is 147.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,RefreshRow,The length of the statement  "			throw new ArgumentException (string.Format (Properties.Resources.FeatureDataGrid_RowUpdateFailed' idx.ToString ())' ex); " is 120.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GuidColumn,The length of the statement  "							<Binding Path=""{0}"" Mode=""TwoWay"" Converter=""{{StaticResource converter}}"" ValidatesOnExceptions=""true"" NotifyOnValidationError=""true""/>	" is 146.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DynamicCodedValueColumn,The length of the statement  "	DynamicCodedValueSource dynamicCodedValueSource = FieldDomainUtils.BuildDynamicCodedValueSource (field' featureLayer.LayerInfo); " is 128.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,ClearSelection,The length of the statement  "				foreach (Graphic g in _collection.OfType<Graphic>().ToArray()) //Copy to array because changing selected items could change _collection (ie SelectionMode)" is 154.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,ZoomToSelection,The length of the statement  "				newMapExtent = new Envelope (newMapExtent.XMin - newMapExtent.Width * EXPAND_EXTENT_RATIO' newMapExtent.YMin - newMapExtent.Height * EXPAND_EXTENT_RATIO' newMapExtent.XMax + newMapExtent.Width * EXPAND_EXTENT_RATIO' newMapExtent.YMax + newMapExtent.Height * EXPAND_EXTENT_RATIO); " is 279.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,SwitchSelection,The length of the statement  "				foreach (Graphic g in _collection.OfType<Graphic>().ToArray()) //Copy to array because changing selected items could change _collection (ie SelectionMode)" is 154.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DeleteSelectedRows,The length of the statement  "		if (graphic != null && GraphicsLayer != null && GraphicsLayer.Graphics != null && GraphicsLayer.Graphics.Contains (graphic)) { " is 126.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DeleteSelectedRows,The length of the statement  "		SetItemsSource ((GraphicsLayer != null && GraphicsLayer.Graphics != null) ? (IList<Graphic>)GraphicsLayer.Graphics : new List<Graphic> ()); " is 139.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,SetDeleteSelectedRowsMenuButtonEnableState,The length of the statement  "			CanDelete = featureLayer.LayerInfo != null && featureLayer.LayerInfo.IsDeleteAllowed && featureLayer.SelectedGraphics != null && featureLayer.SelectedGraphics.All (g => featureLayer.IsDeleteAllowed (g)); " is 203.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The length of the statement  "		} else if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) { " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,OnFilterSourcePropertyChanged,The length of the statement  "		grid.SetItemsSource ((grid.GraphicsLayer != null && grid.GraphicsLayer.Graphics != null) ? (IList<Graphic>)grid.GraphicsLayer.Graphics : new List<Graphic> ()); " is 159.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,XmlEncode,The length of the statement  "	return xml.Replace ("&"' "&amp;").Replace ("<"' "&lt;").Replace (">"' "&gt;").Replace ("\""' "&quot;").Replace ("'"' "&apos;"); " is 127.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,OnCellEditEnded,The length of the statement  "			if (field.Domain is CodedValueDomain || featureLayer.LayerInfo.TypeIdField == field.Name || FieldDomainUtils.IsDynamicDomain (field' featureLayer.LayerInfo)) { " is 159.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,SetItemsSource,The length of the statement  "	var enumerableGraphics = graphics.ToDataSource (featureLayerInfo' fieldInfo' fieldProps' uniqueID' FilterSource' out objectType) as IEnumerable<object>; " is 152.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,Graphic_AttributeValueChanged,The length of the statement  "					updatedGraphic.Attributes [e.Key] = new DateTime ((e.NewValue as DateTime?).Value.Ticks' (e.NewValue as DateTime?).Value.Kind); " is 127.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,Graphic_AttributeValueChanged,The length of the statement  "	} else if (e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Add || e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Remove) { " is 173.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,Graphic_AttributeValueChanged,The length of the statement  "		SetItemsSource ((GraphicsLayer != null && GraphicsLayer.Graphics != null) ? (IList<Graphic>)GraphicsLayer.Graphics : new List<Graphic> ()); " is 139.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GraphicsLayer_PropertyChanged,The length of the statement  "		SetItemsSource ((GraphicsLayer != null && GraphicsLayer.Graphics != null) ? (IList<Graphic>)GraphicsLayer.Graphics : new List<Graphic> ()); " is 139.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,PopulateItemsSource,The length of the statement  "	SetItemsSource ((GraphicsLayer != null && GraphicsLayer.Graphics != null) ? (IList<Graphic>)GraphicsLayer.Graphics : new List<Graphic> ()); " is 139.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,Graphics_CollectionChanged,The length of the statement  "		SetItemsSource ((GraphicsLayer != null && GraphicsLayer.Graphics != null) ? (IList<Graphic>)GraphicsLayer.Graphics : new List<Graphic> ()); " is 139.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,AllAttributesMatch,The length of the statement  "			if (graphicAttributes [prop.Name] != null && !graphicAttributes [prop.Name].GetType ().IsOfType (prop.PropertyType))// data types NOT the same? " is 143.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,AllAttributesMatch,The length of the statement  "		foreach (System.Reflection.PropertyInfo prop in itemsSourceProperties)// Check whether attributes are not contained in the property " is 131.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,UpdateItemsSource,The length of the statement  "			SetItemsSource ((GraphicsLayer != null && GraphicsLayer.Graphics != null) ? (IList<Graphic>)GraphicsLayer.Graphics : new List<Graphic> ()); " is 139.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DatePicker_SelectedDateChanged,The length of the statement  "	if (datePicker != null && datePicker.DataContext != null && columnForCellBeingEdited != null && columnForCellBeingEdited != "") { " is 129.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DatePicker_SelectedDateChanged,The length of the statement  "			if (!e.AddedItems [0].Equals (datePicker.DataContext.GetType ().GetProperty (columnForCellBeingEdited).GetValue (datePicker.DataContext' null))) { " is 146.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DatePicker_SelectedDateChanged,The length of the statement  "				DataSourceCreator.SetProperty (e.AddedItems [0]' datePicker.DataContext' datePicker.DataContext.GetType ().GetProperty (columnForCellBeingEdited)); " is 147.
Long Statement,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DatePicker_SelectedDateChanged,The length of the statement  "						correspondingGraphic.RefreshRow (ItemsSource' GetGraphicIndexInGraphicsCollection (correspondingGraphic)' objectType' featureLayerInfo); " is 136.
Long Statement,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The length of the statement  "		var codedValueSources = Utilities.DynamicCodedValueSource.GetCodedValueSources (LookupField' FieldInfo' dataItem' DynamicCodedValueSource' nullableSources); " is 156.
Long Statement,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateElement,The length of the statement  "		var codedValueSources = Utilities.DynamicCodedValueSource.GetCodedValueSources (LookupField' FieldInfo' dataItem' DynamicCodedValueSource' nullableSources); " is 156.
Long Statement,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,RefreshScaleline,The length of the statement  "	if (Map == null || double.IsNaN (Map.Resolution) || MapUnit == ScaleLineUnit.DecimalDegrees && Math.Abs (Map.Extent.GetCenter ().Y) >= 90) { " is 140.
Long Statement,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,RefreshScaleline,The length of the statement  "	double roundedKiloMeters = GetBestEstimateOfValue (Map.Resolution' ScaleLineUnit.Kilometers' out outUnit' out outResolution); " is 125.
Long Statement,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,InitializeMapUnit,The length of the statement  "		Layer layer = Map.Layers == null ? null : Map.Layers.FirstOrDefault (l => l.SpatialReference != null && l.SpatialReference.Equals (Map.SpatialReference)); " is 154.
Long Statement,ESRI.ArcGIS.Client.Toolkit,SignInDialog,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\SignInDialog\SignInDialog.cs,GenerateToken,The length of the statement  "	IdentityManager.Current.GenerateCredentialAsync (Url' UserName' Password' (crd' exc) => TokenGenerated (crd' exc' requestID)' GenerateTokenOptions); " is 148.
Long Statement,ESRI.ArcGIS.Client.Toolkit,SignInDialog,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\SignInDialog\SignInDialog.cs,XamlEncode,The length of the statement  "	return string.IsNullOrEmpty (inputStr) ? inputStr : inputStr.Replace ("&"' "&amp;").Replace ("<"' "&lt;").Replace (">"' "&gt;").Replace ("\""' "&quot;").Replace ("'"' "&apos;"); " is 177.
Long Statement,ESRI.ArcGIS.Client.Toolkit,SignInDialog,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\SignInDialog\SignInDialog.cs,GetSuffix,The length of the statement  "	url = Regex.Replace (url' "(/(MapServer|GeocodeServer|GPServer|GeometryServer|ImageServer|NAServer|FeatureServer|GeoDataServer|GlobeServer|MobileServer)).*"' "$1"' RegexOptions.IgnoreCase); " is 189.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,OnMouseEnter,The length of the statement  "	if (this.MinimumThumb != null && !this.MinimumThumb.IsDragging || this.MaximumThumb != null && !this.MaximumThumb.IsDragging || this.MinimumThumb == null && this.MaximumThumb == null) { " is 185.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,OnMouseLeave,The length of the statement  "	if (this.MinimumThumb != null && !this.MinimumThumb.IsDragging || this.MaximumThumb != null && !this.MaximumThumb.IsDragging || this.MinimumThumb == null && this.MaximumThumb == null) { " is 185.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,UpdateTrackLayout,The length of the statement  "	if (extent == null || extent.Start < MinimumValue || extent.End > MaximumValue || MinimumThumb == null || MaximumThumb == null || MaximumValue <= MinimumValue || SliderTrack == null) " is 182.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,HorizontalTrackThumb_DragDelta,The length of the statement  "		tempChange = new TimeExtent (HorizontalChangeExtent.Start.AddTicks (TimeChange)' HorizontalChangeExtent.End.AddTicks (TimeChange)); " is 131.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,GetTrackWidth,The length of the statement  "		trackWidth = SliderTrack.ActualWidth - (MinimumThumb == null ? 0 : MinimumThumb.ActualWidth) - (MaximumThumb == null ? 0 : MaximumThumb.ActualWidth); " is 149.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,Snap,The length of the statement  "				if (TimeMode == TimeMode.CumulativeFromStart || TimeMode == TimeMode.TimeInstant || (TimeMode == TimeMode.TimeExtent && d < end)) { " is 131.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,Snap,The length of the statement  "					if (TimeMode == TimeMode.CumulativeFromStart || TimeMode == TimeMode.TimeInstant || (TimeMode == TimeMode.TimeExtent && d > result.Start)) { " is 140.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,Snap,The length of the statement  "					if (TimeMode == TimeMode.CumulativeFromStart || TimeMode == TimeMode.TimeInstant || (TimeMode == TimeMode.TimeExtent && d > result.Start)) { " is 140.
Long Statement,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,SetButtonVisibility,The length of the statement  "	Visibility viz = (Intervals != null && Intervals.GetEnumerator ().MoveNext ()) ? Visibility.Visible : Visibility.Collapsed; " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LegendTree,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\LegendTree.cs,Refresh,The length of the statement  "	LayerItems.Descendants (item => item.LayerItems).OfType<MapLayerItem> ().ForEach (mapLayerItem => mapLayerItem.Refresh ()); " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LegendTree,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\LegendTree.cs,PropagateLayerItemsOptions,The length of the statement  "		LayerItems.Descendants (layerItem => layerItem.LayerItems).ForEach (layerItem => layerItem.LayerItemsOptions = layerItemsOptions); " is 130.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LegendTree,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\LegendTree.cs,UpdateMapLayerItems,The length of the statement  "			if (mapLayerItem == null)// else reuse existing map layer item to avoid query again the legend and to keep the current state (selected' expansed' ..) " is 149.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,LayerItem_PropertyChanged,The length of the statement  "		if (!LayerItemsOptions.ReturnGroupLayerItems || !LayerItemsOptions.ReturnMapLayerItems || (sender is LayerItemViewModel && ((LayerItemViewModel)sender).IsTransparent)) " is 167.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,GetLayerItemsSource,The length of the statement  "				bool hasLayerChildren = layerItem.LayerItems != null && layerItem.LayerItems.Any (item => !item.IsTransparent && !item.IsHidden); " is 129.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,GetLayerItemsSource,The length of the statement  "				if (((layerItem.IsMapLayer && LayerItemsOptions.ReturnMapLayerItems) || !hasLayerChildren || // Leaves are always returned " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,UpdateLayerVisibilities,The length of the statement  "	// A layer is visible if it's checked on' if all its ascendants are visible' if it's in scale range and if it's in time extent " is 126.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,UpdateLayerVisibilities,The length of the statement  "	// Check if there is no initialization failure and if a tiled layer is using the same spatial reference as the map (bug1419) " is 124.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,ConvertToResolution,The length of the statement  "	bool isWebMercator = (map.SpatialReference != null && (map.SpatialReference.WKID == 102100 || map.SpatialReference.WKID == 102113 || map.SpatialReference.WKID == 3857)); " is 169.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,GetMapUnit,The length of the statement  "			if (map.SpatialReference != null && layer.SpatialReference != null && map.SpatialReference.WKID == layer.SpatialReference.WKID) { " is 129.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,DateTimePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\DateTimePicker\DateTimePicker.cs,OnApplyTemplate,The length of the statement  "			this._outsidePopupCanvas.MouseLeftButtonDown += new MouseButtonEventHandler (this.OutsidePopupCanvas_MouseLeftButtonDown); " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,DateTimePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\DateTimePicker\DateTimePicker.cs,SetText,The length of the statement  "	if (DateTime.TryParse (text' new System.Globalization.CultureInfo (Language.IetfLanguageTag)' System.Globalization.DateTimeStyles.None' out dt)) { " is 146.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,DateTimePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\DateTimePicker\DateTimePicker.cs,SetPopUpPosition,The length of the statement  "	if (((this._calendar != null) && (Application.Current != null)) && ((Application.Current.Host != null) && (Application.Current.Host.Content != null))) { " is 152.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,DateTimePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\DateTimePicker\DateTimePicker.cs,UpdateText,The length of the statement  "			string date = DateTimeFormatConverter.DateTimeToString (SelectedDate' DateTimeKind' DateTimeFormat' new System.Globalization.CultureInfo (Language.IetfLanguageTag)); " is 165.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolDisplay,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolDisplay.cs,MeasureOverride,The length of the statement  "		this.ChildElement.Measure ((Symbol is MarkerSymbol) ? new Size (double.PositiveInfinity' double.PositiveInfinity) : availableSize); " is 131.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,ArrangeOverride,The length of the statement  "			// Arrange the symbol following it's desired size' the final size which is taking care of the transform is not the good one " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DynamicCodedValueSource,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomain.cs,GetCodedValueSources,The length of the statement  "			CodedValueSource source = codedValueSoruces.FirstOrDefault (x => x.Code != null && x.Code.ToString () == value.ToString ()); " is 124.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,CodedValueSourceConverter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomain.cs,Convert,The length of the statement  "		CodedValueSource codedValueSource = codedValueSources.FirstOrDefault (x => x.Code != null && x.Code.ToString () == code.ToString ()); " is 133.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DynamicCodedValueSourceConverter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomain.cs,Convert,The length of the statement  "	if (parameter == null || parameter.ToString () == "" || string.IsNullOrEmpty (LookupField) || string.IsNullOrEmpty (Field)) " is 123.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DynamicCodedValueSourceLookupConverter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomain.cs,Convert,The length of the statement  "	return DynamicCodedValueSource.GetCodedValueSources (LookupField' Field' value' dynamicCodedValueSource' NullableSources); " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,FieldDomainUtils,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomainUtils.cs,SetFieldInfo,The length of the statement  "				throw new NotSupportedException (string.Format (Properties.Resources.FieldDomain_FieldTypeNotSupported' fieldType.GetType ())); " is 127.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,GetTypeBuilder,The length of the statement  "	TypeBuilder tb = moduleBuilder.DefineType ("ESRI.ArcGIS.Client.Toolkit.DataSource.TempType" + typeSignature' TypeAttributes.Public | TypeAttributes.Class | TypeAttributes.AutoClass | TypeAttributes.AnsiClass | TypeAttributes.BeforeFieldInit | TypeAttributes.AutoLayout' typeof(object)); " is 286.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,CreateProperty,The length of the statement  "			CustomAttributeBuilder requiredCABuilder = new CustomAttributeBuilder (typeof(System.ComponentModel.DataAnnotations.RequiredAttribute).GetConstructor (new Type[] { " is 163.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,CreateProperty,The length of the statement  "		CustomAttributeBuilder allowEditCABuilder = new CustomAttributeBuilder (typeof(EditableAttribute).GetConstructor (new Type[] { " is 126.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,CreateProperty,The length of the statement  "			CustomAttributeBuilder cabuilder = new CustomAttributeBuilder (typeof(StringLengthAttribute).GetConstructor (new Type[] { " is 121.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,CreateProperty,The length of the statement  "		CustomAttributeBuilder cabuilder = new CustomAttributeBuilder (typeof(DisplayFormatAttribute).GetConstructor (new Type[] { " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,CreateProperty,The length of the statement  "	MethodBuilder getPropMthdBldr = tb.DefineMethod ("get_" + propertyName' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' propertyType' Type.EmptyTypes); " is 188.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,CreateProperty,The length of the statement  "	MethodBuilder setPropMthdBldr = tb.DefineMethod ("set_" + propertyName' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new Type[] { " is 175.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,SetProperty,The length of the statement  "			if (property.PropertyType.IsValueType && property.PropertyType.IsGenericType && property.PropertyType.FullName.StartsWith ("System.Nullable`1[["))// Nullable value type " is 168.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,SetProperty,The length of the statement  "			if (property.PropertyType.IsValueType && property.PropertyType.IsGenericType && property.PropertyType.FullName.StartsWith ("System.Nullable`1[[")) { " is 148.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,IsNumericType,The length of the statement  "	return (t == typeof(Int16) || t == typeof(UInt16) || t == typeof(Nullable<Int16>) || t == typeof(Nullable<UInt16>) || t == typeof(Int32) || t == typeof(UInt32) || t == typeof(Nullable<Int32>) || t == typeof(Nullable<UInt32>) || t == typeof(Int64) || t == typeof(UInt64) || t == typeof(Nullable<Int64>) || t == typeof(Nullable<UInt64>) || t == typeof(Single) || t == typeof(Double) || t == typeof(Nullable<Single>) || t == typeof(Nullable<Double>) || t == typeof(Decimal) || t == typeof(Nullable<Decimal>)); " is 506.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,IsUnsigned,The length of the statement  "	return (t == typeof(UInt16) || t == typeof(UInt16?) || t == typeof(UInt32) || t == typeof(UInt32?) || t == typeof(UInt64) || t == typeof(UInt64?)); " is 147.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,The length of the statement  "								if (pair.Value != null && // null values in nextDict match the nullable data type associated with the attribute in firstDict " is 124.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,The length of the statement  "									throw new InvalidCastException (string.Format (Properties.Resources.FeatureDataGrid_MixedAttributeTypesNotAllowed' firstDict [pair.Key].GetType ()' pair.Key)); " is 159.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,The length of the statement  "		FieldBuilder DynamicTypeRangeDomainValidationFieldBuilder = tb.DefineField ("DynamicTypeRangeDomainValidationMethod"' typeof(Action<object' string' object>)' FieldAttributes.Private); " is 183.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,The length of the statement  "		ConstructorBuilder constructorBuilder = tb.DefineConstructor (MethodAttributes.Public' CallingConventions.Standard' new Type[] { " is 128.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,The length of the statement  "		MethodBuilder methodBuilder = tb.DefineMethod ("GetGraphicSibling"' MethodAttributes.Public' typeof(Graphic)' Type.EmptyTypes); " is 127.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,ToDataSource,The length of the statement  "							CreateProperty (tb' DynamicTypeRangeDomainValidationFieldBuilder' key' properties [key]' layerInfo' fld' order++' uniqueID == key); " is 131.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,RefreshGraphic,The length of the statement  "									graphic.Attributes [_fieldMapping.KeyOfValue (key)] = currentItem.GetType ().GetProperty (key).GetValue (currentItem' null); " is 124.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,RefreshGraphic,The length of the statement  "							graphic.Attributes [_fieldMapping.KeyOfValue (key)] = currentItem.GetType ().GetProperty (key).GetValue (currentItem' null); " is 124.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,RefreshRow,The length of the statement  "		itemsSource.AsList () [itemIndex] = AttributeListToObject (objectType' layerInfo' graphic' graphic.Attributes.Keys' null); " is 122.
Long Statement,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,IsViewableAttribute,The length of the statement  "	if (field.Type != Field.FieldType.Blob && field.Type != Field.FieldType.Geometry && field.Type != Field.FieldType.Raster && field.Type != Field.FieldType.Unknown) " is 162.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,AttachmentEditor,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\AttachmentEditor\AttachmentEditor.cs,GetGraphicSourceOIdValue,The conditional expression  "oidField != null && !string.IsNullOrEmpty (oidField.Trim ()) && this.GraphicSource != null && this.GraphicSource.Attributes.ContainsKey (oidField)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,EditorWidget,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\EditorWidget.cs,UpdateVisibleButtons,The conditional expression  "(!hasPolygonOrPolyline || !addPolygonOrPolyline) && (flayer.LayerInfo.IsAddAllowed || flayer.LayerInfo.IsUpdateAllowed) && flayer.Visible && flayer.LayerInfo != null && (flayer.LayerInfo.GeometryType == GeometryType.Polygon || flayer.LayerInfo.GeometryType == GeometryType.Polyline)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,EditorWidget,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\EditorWidget.cs,UpdateVisibleButtons,The conditional expression  "!hasPolygonOrPolyline && (flayer.LayerInfo.IsUpdateAllowed || (!flayer.AutoSave && flayer.LayerInfo.IsAddAllowed))"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,EditorWidget,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\EditorWidget.cs,UpdateVisibleButtons,The conditional expression  "!atLeastOneLayerCanUpdate && (flayer.LayerInfo.IsUpdateAllowed || (!flayer.AutoSave && flayer.LayerInfo.IsAddAllowed)) && flayer.Visible"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,EditorWidget,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Editor\EditorWidget.cs,UpdateVisibleButtons,The conditional expression  "!atLeastOneLayerCanDelete && (flayer.LayerInfo.IsDeleteAllowed || (!flayer.AutoSave && flayer.LayerInfo.IsAddAllowed)) && flayer.Visible"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GenerateUI,The conditional expression  "this.FeatureLayer == null || this.GraphicSource == null || (this.FeatureLayer != null && this.GraphicSource != null && !CheckGraphicParent ())"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,FrameworkElement_PropertyChanged,The conditional expression  "sender is ComboBox && associatedField != null && !string.IsNullOrEmpty (associatedField) && associatedField == this._typeIdField"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetDomain,The conditional expression  "this._typeIdField != null && typeIdFieldValue != null && this._featureTypes != null && this.GraphicSource.Attributes.ContainsKey (this._typeIdField)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GetControlFromType,The conditional expression  "(codeVal.Key != null && codeVal.Key.Equals (fieldValue)) || (fieldValue != null && fieldValue.Equals (codeVal.Key))"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GenerateFields,The conditional expression  "this.FeatureLayer == null || this.GraphicSource == null || this._contentPresenter == null || this.FeatureLayer.LayerInfo == null || this.FeatureLayer.LayerInfo.Fields == null || !this.FeatureLayer.LayerInfo.Fields.GetEnumerator ().MoveNext ()"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,GenerateFields,The conditional expression  "(outFields.Contains ("*") || outFields.Contains (field.Name)) && //Outfield requested  this.GraphicSource.Attributes.ContainsKey (field.Name) && //Attribute exist in graphic  IsViewableAttribute (field)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,IsViewableAttribute,The conditional expression  "field.Type != Field.FieldType.Blob && field.Type != Field.FieldType.Geometry && field.Type != Field.FieldType.Raster && field.Type != Field.FieldType.Unknown"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,The conditional expression  "this.FeatureLayer == null || this.GraphicSource == null || (this.FeatureLayer != null && this.GraphicSource != null && !CheckGraphicParent ())"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,The conditional expression  "!hasChange && this._attributeValidationStatus != null && this._attributeValidationStatus.ContainsKey (fieldName) && this._attributeValidationStatus [fieldName]"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,ApplyChanges,The conditional expression  "!hasChange && this._attributeValidationStatus != null && this._attributeValidationStatus.ContainsKey (fieldName) && this._attributeValidationStatus [fieldName]"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataFieldValueConverter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataFormConverters.cs,ConvertBack,The conditional expression  "targetType == typeof(int?) || targetType == typeof(short?) || targetType == typeof(double?) || targetType == typeof(float?) || targetType == typeof(long?) || targetType == typeof(byte?) || targetType == typeof(bool?) || targetType == typeof(DateTime?)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The conditional expression  "((Map.ActualWidth - translatedTop.X) < Map.ActualWidth) && ((Map.ActualWidth - translatedTop.X) > size.Width) && ((Map.ActualHeight - translatedTop.Y) < Map.ActualHeight) && ((Map.ActualHeight - translatedTop.Y) > size.Height)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The conditional expression  "((Map.ActualWidth - translatedBottom.X) < Map.ActualWidth) && ((Map.ActualWidth - translatedBottom.X) > size.Width) && ((Map.ActualHeight - translatedBottom.Y) < Map.ActualHeight) && ((Map.ActualHeight - translatedBottom.Y) > size.Height)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The conditional expression  "((Map.ActualWidth - translatedLeft.X) < Map.ActualWidth) && ((Map.ActualWidth - translatedLeft.X) > size.Width) && ((Map.ActualHeight - translatedLeft.Y) < Map.ActualHeight) && ((Map.ActualHeight - translatedLeft.Y) > size.Height)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The conditional expression  "((Map.ActualWidth - translatedRight.X) < Map.ActualWidth) && ((Map.ActualWidth - translatedRight.X) > size.Width) && ((Map.ActualHeight - translatedRight.Y) < Map.ActualHeight) && ((Map.ActualHeight - translatedRight.Y) > size.Height)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The conditional expression  "((Map.ActualWidth - translatedTopLeft.X) <= Map.ActualWidth) && ((Map.ActualWidth - translatedTopLeft.X) > size.Width) && ((Map.ActualHeight - translatedTopLeft.Y) <= Map.ActualHeight) && ((Map.ActualHeight - translatedTopLeft.Y) > size.Height)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The conditional expression  "((Map.ActualWidth - translatedTopRight.X) <= Map.ActualWidth) && ((Map.ActualWidth - translatedTopRight.X) > size.Width) && ((Map.ActualHeight - translatedTopRight.Y) <= Map.ActualHeight) && ((Map.ActualHeight - translatedTopRight.Y) > size.Height)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The conditional expression  "((Map.ActualWidth - translatedBottomLeft.X) <= Map.ActualWidth) && ((Map.ActualWidth - translatedBottomLeft.X) > size.Width) && ((Map.ActualHeight - translatedBottomLeft.Y) <= Map.ActualHeight) && ((Map.ActualHeight - translatedBottomLeft.Y) > size.Height)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,FindPlacement,The conditional expression  "((Map.ActualWidth - translatedBottomRight.X) <= Map.ActualWidth) && ((Map.ActualWidth - translatedBottomRight.X) > size.Width) && ((Map.ActualHeight - translatedBottomRight.Y) <= Map.ActualHeight) && ((Map.ActualHeight - translatedBottomRight.Y) > size.Height)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ChangeVisualState,The conditional expression  "IsOpen && (Anchor != null && Map != null || isDesignMode)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,CheckPosition,The conditional expression  "Map != null && Anchor != null && this.Parent != null && Map.Extent != null"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,Legend,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\Legend.cs,OnMapPropertyChanged,The conditional expression  "System.ComponentModel.DesignerProperties.GetIsInDesignMode (this) && (newMap == null || newMap.Layers == null || newMap.Layers.Count == 0)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,Legend,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\Legend.cs,OnApplyTemplate,The conditional expression  "System.ComponentModel.DesignerProperties.GetIsInDesignMode (this) && (Map == null || Map.Layers == null || Map.Layers.Count == 0)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,SetupZoom,The conditional expression  "!double.IsNaN (Map.MinimumResolution) && !double.IsNaN (Map.MaximumResolution) && Map.MaximumResolution != double.MaxValue && Map.MinimumResolution != double.Epsilon && !double.IsNaN (Map.Resolution)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateOVMap,The conditional expression  "Map == null || OVMapImage == null || OVMapImage.Extent == null || Map.Extent == null"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,ZoomToNewExtent,The conditional expression  "OVMapImage == null || OVMapImage.Extent == null || Map == null || Map.Extent == null"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,ZoomToNewExtent,The conditional expression  "!isMapWithinOV || widthRatio <= minRatio || heightRatio <= minRatio || widthRatio >= maxRatio || heightRatio >= maxRatio"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The conditional expression  "Map == null || OVMapImage == null || OVMapImage.Extent == null || AOI == null"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The conditional expression  "!double.IsNaN (topLeft.X) && !double.IsNaN (topLeft.Y) && !double.IsNaN (bottomRight.X) && !double.IsNaN (bottomRight.Y)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DeleteSelectedRows,The conditional expression  "graphic != null && GraphicsLayer != null && GraphicsLayer.Graphics != null && GraphicsLayer.Graphics.Contains (graphic)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The conditional expression  "(e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DatePicker_SelectedDateChanged,The conditional expression  "datePicker != null && datePicker.DataContext != null && columnForCellBeingEdited != null && columnForCellBeingEdited != """  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,RefreshScaleline,The conditional expression  "Map == null || double.IsNaN (Map.Resolution) || MapUnit == ScaleLineUnit.DecimalDegrees && Math.Abs (Map.Extent.GetCenter ().Y) >= 90"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,OnMouseEnter,The conditional expression  "this.MinimumThumb != null && !this.MinimumThumb.IsDragging || this.MaximumThumb != null && !this.MaximumThumb.IsDragging || this.MinimumThumb == null && this.MaximumThumb == null"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,OnMouseLeave,The conditional expression  "this.MinimumThumb != null && !this.MinimumThumb.IsDragging || this.MaximumThumb != null && !this.MaximumThumb.IsDragging || this.MinimumThumb == null && this.MaximumThumb == null"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,UpdateTrackLayout,The conditional expression  "extent == null || extent.Start < MinimumValue || extent.End > MaximumValue || MinimumThumb == null || MaximumThumb == null || MaximumValue <= MinimumValue || SliderTrack == null"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,Snap,The conditional expression  "TimeMode == TimeMode.CumulativeFromStart || TimeMode == TimeMode.TimeInstant || (TimeMode == TimeMode.TimeExtent && d < end)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,Snap,The conditional expression  "TimeMode == TimeMode.CumulativeFromStart || TimeMode == TimeMode.TimeInstant || (TimeMode == TimeMode.TimeExtent && d > result.Start)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,Snap,The conditional expression  "TimeMode == TimeMode.CumulativeFromStart || TimeMode == TimeMode.TimeInstant || (TimeMode == TimeMode.TimeExtent && d > result.Start)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,LayerItem_PropertyChanged,The conditional expression  "!LayerItemsOptions.ReturnGroupLayerItems || !LayerItemsOptions.ReturnMapLayerItems || (sender is LayerItemViewModel && ((LayerItemViewModel)sender).IsTransparent)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,GetLayerItemsSource,The conditional expression  "((layerItem.IsMapLayer && LayerItemsOptions.ReturnMapLayerItems) || !hasLayerChildren || // Leaves are always returned  LayerItemsOptions.ReturnGroupLayerItems) && !layerItem.IsTransparent"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,UpdateLayerVisibilities,The conditional expression  "LegendTree != null && LegendTree.Map != null && LegendTree.Map.TimeExtent != null && VisibleTimeExtent != null"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Primitives,DateTimePicker,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\DateTimePicker\DateTimePicker.cs,SetPopUpPosition,The conditional expression  "((this._calendar != null) && (Application.Current != null)) && ((Application.Current.Host != null) && (Application.Current.Host.Content != null))"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,DynamicCodedValueSourceConverter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomain.cs,Convert,The conditional expression  "parameter == null || parameter.ToString () == "" || string.IsNullOrEmpty (LookupField) || string.IsNullOrEmpty (Field)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,FieldDomainUtils,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\FieldDomainUtils.cs,IsDynamicDomain,The conditional expression  "field != null && layerInfo != null && layerInfo.FeatureTypes != null && layerInfo.FeatureTypes.Count > 0"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,RangeDomainValidator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\RangeDomainValidator.cs,ValidateRange,The conditional expression  "layerInfo == null || field == null || typeIdValue == null || value == null"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,RangeDomainValidator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\RangeDomainValidator.cs,ValidateRange,The conditional expression  "field == null || value == null || field.Domain == null || field.Domain is CodedValueDomain"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The conditional expression  "t == typeof(Int16) || t == typeof(UInt16) || t == typeof(Nullable<Int16>) || t == typeof(Nullable<UInt16>)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The conditional expression  "t == typeof(Int32) || t == typeof(UInt32) || t == typeof(Nullable<Int32>) || t == typeof(Nullable<UInt32>)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The conditional expression  "t == typeof(Int64) || t == typeof(UInt64) || t == typeof(Nullable<Int64>) || t == typeof(Nullable<UInt64>)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,UpgradeRankType,The conditional expression  "t == typeof(Int16) || t == typeof(UInt16) || t == typeof(Nullable<Int16>) || t == typeof(Nullable<UInt16>)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,UpgradeRankType,The conditional expression  "t == typeof(Int32) || t == typeof(UInt32) || t == typeof(Nullable<Int32>) || t == typeof(Nullable<UInt32>)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,UpgradeRankType,The conditional expression  "t == typeof(Int64) || t == typeof(UInt64) || t == typeof(Nullable<Int64>) || t == typeof(Nullable<UInt64>)"  is complex.
Complex Conditional,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,IsViewableAttribute,The conditional expression  "field.Type != Field.FieldType.Blob && field.Type != Field.FieldType.Geometry && field.Type != Field.FieldType.Raster && field.Type != Field.FieldType.Unknown"  is complex.
Empty Catch Block,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,RepopulateDomains,The method has an empty catch block.
Empty Catch Block,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,UpdateMagnifyMapCenter,The method has an empty catch block.
Empty Catch Block,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,OnRowEditEnded,The method has an empty catch block.
Empty Catch Block,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DatePicker_SelectedDateChanged,The method has an empty catch block.
Empty Catch Block,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,InitializeMapUnit,The method has an empty catch block.
Empty Catch Block,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,CreateTimeStopsByCount,The method has an empty catch block.
Empty Catch Block,ESRI.ArcGIS.Client.Toolkit,TimeSlider,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\TimeSlider\TimeSlider.cs,CreateTimeStopsByTimeInterval,The method has an empty catch block.
Empty Catch Block,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,SetProperty,The method has an empty catch block.
Magic Number,ESRI.ArcGIS.Client.Toolkit,AttachmentEditor,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\AttachmentEditor\AttachmentEditor.cs,LoadAttachments,The following statement contains a magic number: if (System.ComponentModel.DesignerProperties.GetIsInDesignMode (this) && this._attachmentList != null) {  	DesignTimeDataSource[] source = new DesignTimeDataSource[] {  		new DesignTimeDataSource () {  			Name = "TextFileAttachment.txt"'  			ID = "0"'  			ContentType = "text/txt"'  			Size = 255'  			Uri = new Uri ("http://www.esri.com")  		}'  		new DesignTimeDataSource () {  			Name = "ImageAttachment.jpg"'  			ID = "1"'  			ContentType = "image/jpeg"'  			Size = 65535'  			Uri = new Uri ("http://www.esri.com")  		}  	};  	this._attachmentList.ItemsSource = source;  	return;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,AttachmentEditor,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\AttachmentEditor\AttachmentEditor.cs,LoadAttachments,The following statement contains a magic number: if (System.ComponentModel.DesignerProperties.GetIsInDesignMode (this) && this._attachmentList != null) {  	DesignTimeDataSource[] source = new DesignTimeDataSource[] {  		new DesignTimeDataSource () {  			Name = "TextFileAttachment.txt"'  			ID = "0"'  			ContentType = "text/txt"'  			Size = 255'  			Uri = new Uri ("http://www.esri.com")  		}'  		new DesignTimeDataSource () {  			Name = "ImageAttachment.jpg"'  			ID = "1"'  			ContentType = "image/jpeg"'  			Size = 65535'  			Uri = new Uri ("http://www.esri.com")  		}  	};  	this._attachmentList.ItemsSource = source;  	return;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,PopulateFieldControl,The following statement contains a magic number: if (this.LabelPosition == FeatureDataFormLabelPosition.Left)  	fieldControl.SetValue (Grid.ColumnProperty' 2);  else  	fieldControl.SetValue (Grid.ColumnProperty' 1);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataForm,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataForm\FeatureDataForm.cs,PopulateFieldControl,The following statement contains a magic number: fieldControl.SetValue (Grid.ColumnProperty' 2);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: if (!isDesignMode) {  	Point p2 = TransformToRootVisual (Map.MapToScreen (Anchor' true));  	Point p = Map.TransformToVisual (this.Parent as UIElement).Transform (p2);  	double sum_Height_CR_AH = size.Height + CornerRadius + ArrowHeight;  	switch (currentPlacementMode) {  	case PlacementMode.Top:  		translate.X = p.X - size.Width * .5;  		translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  		RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.Left:  		translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  		break;  	case PlacementMode.Right:  		translate.X = p.X + ArrowHeight + CornerRadius;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  		break;  	case PlacementMode.Bottom:  		translate.X = p.X - (size.Width * .5);  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  		break;  	case PlacementMode.BottomRight:  		translate.X = p.X;  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  		break;  	case PlacementMode.TopRight:  		translate.X = p.X;  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.TopLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.BottomLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y + (ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  		break;  	}  	var topLeft = TransformToRootVisual (new Point (0' 0));  	var bottomRight = TransformToRootVisual (new Point (Map.ActualWidth' Map.ActualHeight));  	Margin = new Thickness (-topLeft.X + margin.Left' -topLeft.Y + margin.Top' -bottomRight.X + margin.Right' -bottomRight.Y + margin.Bottom);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: if (!isDesignMode) {  	Point p2 = TransformToRootVisual (Map.MapToScreen (Anchor' true));  	Point p = Map.TransformToVisual (this.Parent as UIElement).Transform (p2);  	double sum_Height_CR_AH = size.Height + CornerRadius + ArrowHeight;  	switch (currentPlacementMode) {  	case PlacementMode.Top:  		translate.X = p.X - size.Width * .5;  		translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  		RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.Left:  		translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  		break;  	case PlacementMode.Right:  		translate.X = p.X + ArrowHeight + CornerRadius;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  		break;  	case PlacementMode.Bottom:  		translate.X = p.X - (size.Width * .5);  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  		break;  	case PlacementMode.BottomRight:  		translate.X = p.X;  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  		break;  	case PlacementMode.TopRight:  		translate.X = p.X;  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.TopLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.BottomLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y + (ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  		break;  	}  	var topLeft = TransformToRootVisual (new Point (0' 0));  	var bottomRight = TransformToRootVisual (new Point (Map.ActualWidth' Map.ActualHeight));  	Margin = new Thickness (-topLeft.X + margin.Left' -topLeft.Y + margin.Top' -bottomRight.X + margin.Right' -bottomRight.Y + margin.Bottom);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: if (!isDesignMode) {  	Point p2 = TransformToRootVisual (Map.MapToScreen (Anchor' true));  	Point p = Map.TransformToVisual (this.Parent as UIElement).Transform (p2);  	double sum_Height_CR_AH = size.Height + CornerRadius + ArrowHeight;  	switch (currentPlacementMode) {  	case PlacementMode.Top:  		translate.X = p.X - size.Width * .5;  		translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  		RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.Left:  		translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  		break;  	case PlacementMode.Right:  		translate.X = p.X + ArrowHeight + CornerRadius;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  		break;  	case PlacementMode.Bottom:  		translate.X = p.X - (size.Width * .5);  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  		break;  	case PlacementMode.BottomRight:  		translate.X = p.X;  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  		break;  	case PlacementMode.TopRight:  		translate.X = p.X;  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.TopLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.BottomLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y + (ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  		break;  	}  	var topLeft = TransformToRootVisual (new Point (0' 0));  	var bottomRight = TransformToRootVisual (new Point (Map.ActualWidth' Map.ActualHeight));  	Margin = new Thickness (-topLeft.X + margin.Left' -topLeft.Y + margin.Top' -bottomRight.X + margin.Right' -bottomRight.Y + margin.Bottom);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: if (!isDesignMode) {  	Point p2 = TransformToRootVisual (Map.MapToScreen (Anchor' true));  	Point p = Map.TransformToVisual (this.Parent as UIElement).Transform (p2);  	double sum_Height_CR_AH = size.Height + CornerRadius + ArrowHeight;  	switch (currentPlacementMode) {  	case PlacementMode.Top:  		translate.X = p.X - size.Width * .5;  		translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  		RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.Left:  		translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  		break;  	case PlacementMode.Right:  		translate.X = p.X + ArrowHeight + CornerRadius;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  		break;  	case PlacementMode.Bottom:  		translate.X = p.X - (size.Width * .5);  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  		break;  	case PlacementMode.BottomRight:  		translate.X = p.X;  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  		break;  	case PlacementMode.TopRight:  		translate.X = p.X;  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.TopLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.BottomLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y + (ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  		break;  	}  	var topLeft = TransformToRootVisual (new Point (0' 0));  	var bottomRight = TransformToRootVisual (new Point (Map.ActualWidth' Map.ActualHeight));  	Margin = new Thickness (-topLeft.X + margin.Left' -topLeft.Y + margin.Top' -bottomRight.X + margin.Right' -bottomRight.Y + margin.Bottom);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: if (!isDesignMode) {  	Point p2 = TransformToRootVisual (Map.MapToScreen (Anchor' true));  	Point p = Map.TransformToVisual (this.Parent as UIElement).Transform (p2);  	double sum_Height_CR_AH = size.Height + CornerRadius + ArrowHeight;  	switch (currentPlacementMode) {  	case PlacementMode.Top:  		translate.X = p.X - size.Width * .5;  		translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  		RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.Left:  		translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  		break;  	case PlacementMode.Right:  		translate.X = p.X + ArrowHeight + CornerRadius;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  		break;  	case PlacementMode.Bottom:  		translate.X = p.X - (size.Width * .5);  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  		break;  	case PlacementMode.BottomRight:  		translate.X = p.X;  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  		break;  	case PlacementMode.TopRight:  		translate.X = p.X;  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.TopLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.BottomLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y + (ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  		break;  	}  	var topLeft = TransformToRootVisual (new Point (0' 0));  	var bottomRight = TransformToRootVisual (new Point (Map.ActualWidth' Map.ActualHeight));  	Margin = new Thickness (-topLeft.X + margin.Left' -topLeft.Y + margin.Top' -bottomRight.X + margin.Right' -bottomRight.Y + margin.Bottom);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: if (!isDesignMode) {  	Point p2 = TransformToRootVisual (Map.MapToScreen (Anchor' true));  	Point p = Map.TransformToVisual (this.Parent as UIElement).Transform (p2);  	double sum_Height_CR_AH = size.Height + CornerRadius + ArrowHeight;  	switch (currentPlacementMode) {  	case PlacementMode.Top:  		translate.X = p.X - size.Width * .5;  		translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  		RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.Left:  		translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  		break;  	case PlacementMode.Right:  		translate.X = p.X + ArrowHeight + CornerRadius;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  		break;  	case PlacementMode.Bottom:  		translate.X = p.X - (size.Width * .5);  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  		break;  	case PlacementMode.BottomRight:  		translate.X = p.X;  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  		break;  	case PlacementMode.TopRight:  		translate.X = p.X;  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.TopLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.BottomLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y + (ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  		break;  	}  	var topLeft = TransformToRootVisual (new Point (0' 0));  	var bottomRight = TransformToRootVisual (new Point (Map.ActualWidth' Map.ActualHeight));  	Margin = new Thickness (-topLeft.X + margin.Left' -topLeft.Y + margin.Top' -bottomRight.X + margin.Right' -bottomRight.Y + margin.Bottom);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: if (!isDesignMode) {  	Point p2 = TransformToRootVisual (Map.MapToScreen (Anchor' true));  	Point p = Map.TransformToVisual (this.Parent as UIElement).Transform (p2);  	double sum_Height_CR_AH = size.Height + CornerRadius + ArrowHeight;  	switch (currentPlacementMode) {  	case PlacementMode.Top:  		translate.X = p.X - size.Width * .5;  		translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  		RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.Left:  		translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  		break;  	case PlacementMode.Right:  		translate.X = p.X + ArrowHeight + CornerRadius;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  		break;  	case PlacementMode.Bottom:  		translate.X = p.X - (size.Width * .5);  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  		break;  	case PlacementMode.BottomRight:  		translate.X = p.X;  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  		break;  	case PlacementMode.TopRight:  		translate.X = p.X;  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.TopLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.BottomLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y + (ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  		break;  	}  	var topLeft = TransformToRootVisual (new Point (0' 0));  	var bottomRight = TransformToRootVisual (new Point (Map.ActualWidth' Map.ActualHeight));  	Margin = new Thickness (-topLeft.X + margin.Left' -topLeft.Y + margin.Top' -bottomRight.X + margin.Right' -bottomRight.Y + margin.Bottom);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: if (!isDesignMode) {  	Point p2 = TransformToRootVisual (Map.MapToScreen (Anchor' true));  	Point p = Map.TransformToVisual (this.Parent as UIElement).Transform (p2);  	double sum_Height_CR_AH = size.Height + CornerRadius + ArrowHeight;  	switch (currentPlacementMode) {  	case PlacementMode.Top:  		translate.X = p.X - size.Width * .5;  		translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  		RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.Left:  		translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  		break;  	case PlacementMode.Right:  		translate.X = p.X + ArrowHeight + CornerRadius;  		translate.Y = p.Y - size.Height * .5;  		RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  		break;  	case PlacementMode.Bottom:  		translate.X = p.X - (size.Width * .5);  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  		break;  	case PlacementMode.BottomRight:  		translate.X = p.X;  		translate.Y = p.Y + ArrowHeight + CornerRadius;  		RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  		break;  	case PlacementMode.TopRight:  		translate.X = p.X;  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.TopLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  		break;  	case PlacementMode.BottomLeft:  		translate.X = p.X - (size.Width);  		translate.Y = p.Y + (ArrowHeight + CornerRadius);  		RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  		break;  	}  	var topLeft = TransformToRootVisual (new Point (0' 0));  	var bottomRight = TransformToRootVisual (new Point (Map.ActualWidth' Map.ActualHeight));  	Margin = new Thickness (-topLeft.X + margin.Left' -topLeft.Y + margin.Top' -bottomRight.X + margin.Right' -bottomRight.Y + margin.Bottom);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: switch (currentPlacementMode) {  case PlacementMode.Top:  	translate.X = p.X - size.Width * .5;  	translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  	RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.Left:  	translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  	break;  case PlacementMode.Right:  	translate.X = p.X + ArrowHeight + CornerRadius;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  	break;  case PlacementMode.Bottom:  	translate.X = p.X - (size.Width * .5);  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  	break;  case PlacementMode.BottomRight:  	translate.X = p.X;  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  	break;  case PlacementMode.TopRight:  	translate.X = p.X;  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.TopLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.BottomLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y + (ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  	break;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: switch (currentPlacementMode) {  case PlacementMode.Top:  	translate.X = p.X - size.Width * .5;  	translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  	RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.Left:  	translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  	break;  case PlacementMode.Right:  	translate.X = p.X + ArrowHeight + CornerRadius;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  	break;  case PlacementMode.Bottom:  	translate.X = p.X - (size.Width * .5);  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  	break;  case PlacementMode.BottomRight:  	translate.X = p.X;  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  	break;  case PlacementMode.TopRight:  	translate.X = p.X;  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.TopLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.BottomLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y + (ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  	break;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: switch (currentPlacementMode) {  case PlacementMode.Top:  	translate.X = p.X - size.Width * .5;  	translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  	RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.Left:  	translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  	break;  case PlacementMode.Right:  	translate.X = p.X + ArrowHeight + CornerRadius;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  	break;  case PlacementMode.Bottom:  	translate.X = p.X - (size.Width * .5);  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  	break;  case PlacementMode.BottomRight:  	translate.X = p.X;  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  	break;  case PlacementMode.TopRight:  	translate.X = p.X;  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.TopLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.BottomLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y + (ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  	break;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: switch (currentPlacementMode) {  case PlacementMode.Top:  	translate.X = p.X - size.Width * .5;  	translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  	RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.Left:  	translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  	break;  case PlacementMode.Right:  	translate.X = p.X + ArrowHeight + CornerRadius;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  	break;  case PlacementMode.Bottom:  	translate.X = p.X - (size.Width * .5);  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  	break;  case PlacementMode.BottomRight:  	translate.X = p.X;  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  	break;  case PlacementMode.TopRight:  	translate.X = p.X;  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.TopLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.BottomLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y + (ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  	break;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: switch (currentPlacementMode) {  case PlacementMode.Top:  	translate.X = p.X - size.Width * .5;  	translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  	RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.Left:  	translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  	break;  case PlacementMode.Right:  	translate.X = p.X + ArrowHeight + CornerRadius;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  	break;  case PlacementMode.Bottom:  	translate.X = p.X - (size.Width * .5);  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  	break;  case PlacementMode.BottomRight:  	translate.X = p.X;  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  	break;  case PlacementMode.TopRight:  	translate.X = p.X;  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.TopLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.BottomLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y + (ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  	break;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: switch (currentPlacementMode) {  case PlacementMode.Top:  	translate.X = p.X - size.Width * .5;  	translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  	RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.Left:  	translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  	break;  case PlacementMode.Right:  	translate.X = p.X + ArrowHeight + CornerRadius;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  	break;  case PlacementMode.Bottom:  	translate.X = p.X - (size.Width * .5);  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  	break;  case PlacementMode.BottomRight:  	translate.X = p.X;  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  	break;  case PlacementMode.TopRight:  	translate.X = p.X;  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.TopLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.BottomLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y + (ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  	break;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: switch (currentPlacementMode) {  case PlacementMode.Top:  	translate.X = p.X - size.Width * .5;  	translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  	RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.Left:  	translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  	break;  case PlacementMode.Right:  	translate.X = p.X + ArrowHeight + CornerRadius;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  	break;  case PlacementMode.Bottom:  	translate.X = p.X - (size.Width * .5);  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  	break;  case PlacementMode.BottomRight:  	translate.X = p.X;  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  	break;  case PlacementMode.TopRight:  	translate.X = p.X;  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.TopLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.BottomLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y + (ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  	break;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: switch (currentPlacementMode) {  case PlacementMode.Top:  	translate.X = p.X - size.Width * .5;  	translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  	RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.Left:  	translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  	break;  case PlacementMode.Right:  	translate.X = p.X + ArrowHeight + CornerRadius;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  	break;  case PlacementMode.Bottom:  	translate.X = p.X - (size.Width * .5);  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  	break;  case PlacementMode.BottomRight:  	translate.X = p.X;  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  	break;  case PlacementMode.TopRight:  	translate.X = p.X;  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.TopLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.BottomLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y + (ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  	break;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: translate.X = p.X - size.Width * .5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: translate.Y = p.Y - size.Height * .5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: translate.Y = p.Y - size.Height * .5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: translate.X = p.X - (size.Width * .5);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following statement contains a magic number: RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,OnLayoutUpdated,The following statement contains a magic number: borderPath.Margin = new Thickness (0' 0' -CornerRadius * 2 - StrokeThickness - ArrowHeight' -CornerRadius * 2 - ArrowHeight - StrokeThickness);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,OnLayoutUpdated,The following statement contains a magic number: borderPath.Margin = new Thickness (0' 0' -CornerRadius * 2 - StrokeThickness - ArrowHeight' -CornerRadius * 2 - ArrowHeight - StrokeThickness);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: if (currentPlacementMode == PlacementMode.Top || currentPlacementMode == PlacementMode.TopLeft || currentPlacementMode == PlacementMode.TopRight) {  	p.StartPoint = new Point (0' -cornerRadius);  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width' -cornerRadius)  	});  	//Top line  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (sumWidthCR' 0)  	});  	//UR  	p.Segments.Add (new LineSegment () {  		Point = new Point (sumWidthCR' size.Height)  	});  	//Right side  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (size.Width' sumHeightCR)  	});  	//BR  	//Miter  	if (currentPlacementMode == PlacementMode.Top) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth + halfArrow' sumHeightCR)  		});  		//Bottom line' Right of miter  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth' size.Height + sumArrowCR)  		});  		//Right side of Miter down  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth - halfArrow' sumHeightCR)  		});  		//Left side of Miter up  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' sumHeightCR)  		});  		//line after miter  	}  	if (currentPlacementMode == PlacementMode.TopLeft) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width - halfArrow' sumHeightCR)  		});  		//line before Mitter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' size.Height + sumArrowCR)  		});  		//Mitter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width - arrowSize * 2' sumHeightCR)  		});  		//Mitter line 2  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' sumHeightCR)  		});  		//line after mitter  	}  	if (currentPlacementMode == PlacementMode.TopRight) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (arrowSize * 2' sumHeightCR)  		});  		//bottom line  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' size.Height + sumArrowCR)  		});  		//Miter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfArrow' sumHeightCR)  		});  		//Mitter line 2  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' sumHeightCR)  		});  		// line after Mitter line 2  	}  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (-cornerRadius' size.Height)  	});  	//LL  	p.Segments.Add (new LineSegment () {  		Point = new Point (-cornerRadius' 0)  	});  	//Left side  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (0' -cornerRadius)  	});  	//UR  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: if (currentPlacementMode == PlacementMode.Top || currentPlacementMode == PlacementMode.TopLeft || currentPlacementMode == PlacementMode.TopRight) {  	p.StartPoint = new Point (0' -cornerRadius);  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width' -cornerRadius)  	});  	//Top line  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (sumWidthCR' 0)  	});  	//UR  	p.Segments.Add (new LineSegment () {  		Point = new Point (sumWidthCR' size.Height)  	});  	//Right side  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (size.Width' sumHeightCR)  	});  	//BR  	//Miter  	if (currentPlacementMode == PlacementMode.Top) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth + halfArrow' sumHeightCR)  		});  		//Bottom line' Right of miter  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth' size.Height + sumArrowCR)  		});  		//Right side of Miter down  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth - halfArrow' sumHeightCR)  		});  		//Left side of Miter up  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' sumHeightCR)  		});  		//line after miter  	}  	if (currentPlacementMode == PlacementMode.TopLeft) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width - halfArrow' sumHeightCR)  		});  		//line before Mitter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' size.Height + sumArrowCR)  		});  		//Mitter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width - arrowSize * 2' sumHeightCR)  		});  		//Mitter line 2  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' sumHeightCR)  		});  		//line after mitter  	}  	if (currentPlacementMode == PlacementMode.TopRight) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (arrowSize * 2' sumHeightCR)  		});  		//bottom line  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' size.Height + sumArrowCR)  		});  		//Miter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfArrow' sumHeightCR)  		});  		//Mitter line 2  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' sumHeightCR)  		});  		// line after Mitter line 2  	}  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (-cornerRadius' size.Height)  	});  	//LL  	p.Segments.Add (new LineSegment () {  		Point = new Point (-cornerRadius' 0)  	});  	//Left side  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (0' -cornerRadius)  	});  	//UR  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: if (currentPlacementMode == PlacementMode.TopLeft) {  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width - halfArrow' sumHeightCR)  	});  	//line before Mitter line 1  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width' size.Height + sumArrowCR)  	});  	//Mitter line 1  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width - arrowSize * 2' sumHeightCR)  	});  	//Mitter line 2  	p.Segments.Add (new LineSegment () {  		Point = new Point (0' sumHeightCR)  	});  	//line after mitter  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: p.Segments.Add (new LineSegment () {  	Point = new Point (size.Width - arrowSize * 2' sumHeightCR)  });  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: if (currentPlacementMode == PlacementMode.TopRight) {  	p.Segments.Add (new LineSegment () {  		Point = new Point (arrowSize * 2' sumHeightCR)  	});  	//bottom line  	p.Segments.Add (new LineSegment () {  		Point = new Point (0' size.Height + sumArrowCR)  	});  	//Miter line 1  	p.Segments.Add (new LineSegment () {  		Point = new Point (halfArrow' sumHeightCR)  	});  	//Mitter line 2  	p.Segments.Add (new LineSegment () {  		Point = new Point (0' sumHeightCR)  	});  	// line after Mitter line 2  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: p.Segments.Add (new LineSegment () {  	Point = new Point (arrowSize * 2' sumHeightCR)  });  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: if (currentPlacementMode == PlacementMode.Bottom || currentPlacementMode == PlacementMode.BottomLeft || currentPlacementMode == PlacementMode.BottomRight) {  	p.StartPoint = new Point (0' -cornerRadius);  	if (currentPlacementMode == PlacementMode.Bottom) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth - halfArrow' -cornerRadius)  		});  		//top line' before miter  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth' -cornerRadius - arrowSize)  		});  		//mitter up   		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth + halfArrow' -cornerRadius)  		});  		//Miter down  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' -cornerRadius)  		});  		//line after miter  	}  	if (currentPlacementMode == PlacementMode.BottomRight) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfArrow' -cornerRadius)  		});  		//Line before Mitter  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' -sumArrowCR)  		});  		//Miter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (arrowSize * 2' -cornerRadius)  		});  		//Mitter line 2  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' -cornerRadius)  		});  		//line after miter  	}  	if (currentPlacementMode == PlacementMode.BottomLeft) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width - (arrowSize * 2)' -CornerRadius)  		});  		//Line before Mitter		  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' -sumArrowCR)  		});  		//Mitter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width - halfArrow' -cornerRadius)  		});  		//Mitter line 2  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' -cornerRadius)  		});  		//line after mitter  	}  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (sumWidthCR' 0)  	});  	//TR Arc  	p.Segments.Add (new LineSegment () {  		Point = new Point (sumWidthCR' size.Height)  	});  	//right line  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (size.Width' sumHeightCR)  	});  	//BR Arc  	p.Segments.Add (new LineSegment () {  		Point = new Point (0' sumHeightCR)  	});  	//bottom line		  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (-cornerRadius' size.Height)  	});  	//BL Arc  	p.Segments.Add (new LineSegment () {  		Point = new Point (-cornerRadius' 0)  	});  	//Left line  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (0' -cornerRadius)  	});  	//TL Arc  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: if (currentPlacementMode == PlacementMode.Bottom || currentPlacementMode == PlacementMode.BottomLeft || currentPlacementMode == PlacementMode.BottomRight) {  	p.StartPoint = new Point (0' -cornerRadius);  	if (currentPlacementMode == PlacementMode.Bottom) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth - halfArrow' -cornerRadius)  		});  		//top line' before miter  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth' -cornerRadius - arrowSize)  		});  		//mitter up   		p.Segments.Add (new LineSegment () {  			Point = new Point (halfWidth + halfArrow' -cornerRadius)  		});  		//Miter down  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' -cornerRadius)  		});  		//line after miter  	}  	if (currentPlacementMode == PlacementMode.BottomRight) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (halfArrow' -cornerRadius)  		});  		//Line before Mitter  		p.Segments.Add (new LineSegment () {  			Point = new Point (0' -sumArrowCR)  		});  		//Miter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (arrowSize * 2' -cornerRadius)  		});  		//Mitter line 2  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' -cornerRadius)  		});  		//line after miter  	}  	if (currentPlacementMode == PlacementMode.BottomLeft) {  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width - (arrowSize * 2)' -CornerRadius)  		});  		//Line before Mitter		  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' -sumArrowCR)  		});  		//Mitter line 1  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width - halfArrow' -cornerRadius)  		});  		//Mitter line 2  		p.Segments.Add (new LineSegment () {  			Point = new Point (size.Width' -cornerRadius)  		});  		//line after mitter  	}  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (sumWidthCR' 0)  	});  	//TR Arc  	p.Segments.Add (new LineSegment () {  		Point = new Point (sumWidthCR' size.Height)  	});  	//right line  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (size.Width' sumHeightCR)  	});  	//BR Arc  	p.Segments.Add (new LineSegment () {  		Point = new Point (0' sumHeightCR)  	});  	//bottom line		  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (-cornerRadius' size.Height)  	});  	//BL Arc  	p.Segments.Add (new LineSegment () {  		Point = new Point (-cornerRadius' 0)  	});  	//Left line  	p.Segments.Add (new ArcSegment () {  		Size = new Size (cornerRadius' cornerRadius)'  		SweepDirection = System.Windows.Media.SweepDirection.Clockwise'  		Point = new Point (0' -cornerRadius)  	});  	//TL Arc  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: if (currentPlacementMode == PlacementMode.BottomRight) {  	p.Segments.Add (new LineSegment () {  		Point = new Point (halfArrow' -cornerRadius)  	});  	//Line before Mitter  	p.Segments.Add (new LineSegment () {  		Point = new Point (0' -sumArrowCR)  	});  	//Miter line 1  	p.Segments.Add (new LineSegment () {  		Point = new Point (arrowSize * 2' -cornerRadius)  	});  	//Mitter line 2  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width' -cornerRadius)  	});  	//line after miter  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: p.Segments.Add (new LineSegment () {  	Point = new Point (arrowSize * 2' -cornerRadius)  });  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: if (currentPlacementMode == PlacementMode.BottomLeft) {  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width - (arrowSize * 2)' -CornerRadius)  	});  	//Line before Mitter		  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width' -sumArrowCR)  	});  	//Mitter line 1  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width - halfArrow' -cornerRadius)  	});  	//Mitter line 2  	p.Segments.Add (new LineSegment () {  		Point = new Point (size.Width' -cornerRadius)  	});  	//line after mitter  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The following statement contains a magic number: p.Segments.Add (new LineSegment () {  	Point = new Point (size.Width - (arrowSize * 2)' -CornerRadius)  });  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Magnifier,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\Magnifier.xaml.cs,Magnifier,The following statement contains a magic number: ZoomFactor = 2;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Magnifier,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\Magnifier.xaml.cs,dragGlass,The following statement contains a magic number: ApplyTranslationTransform (offset.X - 85' offset.Y - 85);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Magnifier,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\Magnifier.xaml.cs,dragGlass,The following statement contains a magic number: ApplyTranslationTransform (offset.X - 85' offset.Y - 85);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Magnifier,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\Magnifier.xaml.cs,dragGlass,The following statement contains a magic number: bigMap.SetValue (Canvas.LeftProperty' (-x * ZoomFactor) + 94);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Magnifier,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\Magnifier.xaml.cs,dragGlass,The following statement contains a magic number: bigMap.SetValue (Canvas.TopProperty' (-y * ZoomFactor) + 95);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,MagnifyingGlass,The following statement contains a magic number: ZoomFactor = 5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,UpdateMagnifyMapCenter,The following statement contains a magic number: if (bigMap != null && Map != null) {  	try {  		Point p = TransformToVisual (this.Map).Transform (new Point ((this.RenderSize.Width * .5)' (this.RenderSize.Height * .5)));  		MapPoint center = this.Map.ScreenToMap (p);  		if (center != null)  			bigMap.PanTo (center);  	} catch (ArgumentException)//Resizing elements at design time can cause errors  	 {  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,UpdateMagnifyMapCenter,The following statement contains a magic number: if (bigMap != null && Map != null) {  	try {  		Point p = TransformToVisual (this.Map).Transform (new Point ((this.RenderSize.Width * .5)' (this.RenderSize.Height * .5)));  		MapPoint center = this.Map.ScreenToMap (p);  		if (center != null)  			bigMap.PanTo (center);  	} catch (ArgumentException)//Resizing elements at design time can cause errors  	 {  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,UpdateMagnifyMapCenter,The following statement contains a magic number: try {  	Point p = TransformToVisual (this.Map).Transform (new Point ((this.RenderSize.Width * .5)' (this.RenderSize.Height * .5)));  	MapPoint center = this.Map.ScreenToMap (p);  	if (center != null)  		bigMap.PanTo (center);  } catch (ArgumentException)//Resizing elements at design time can cause errors   {  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MagnifyingGlass,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Magnifier\MagnifyingGlass.cs,UpdateMagnifyMapCenter,The following statement contains a magic number: try {  	Point p = TransformToVisual (this.Map).Transform (new Point ((this.RenderSize.Width * .5)' (this.RenderSize.Height * .5)));  	MapPoint center = this.Map.ScreenToMap (p);  	if (center != null)  		bigMap.PanTo (center);  } catch (ArgumentException)//Resizing elements at design time can cause errors   {  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MapTip,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\MapTip\MapTip.cs,MapTip,The following statement contains a magic number: HorizontalOffset = 20;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MapTip,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\MapTip\MapTip.cs,MapTip,The following statement contains a magic number: VerticalOffset = 30;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,OnApplyTemplate,The following statement contains a magic number: if (ZoomSlider != null) {  	if (Map != null) {  		SetupZoom ();  	}  	ZoomSlider.Minimum = 0;  	ZoomSlider.Maximum = 1;  	ZoomSlider.SmallChange = .01;  	ZoomSlider.LargeChange = .1;  	ZoomSlider.LostMouseCapture += ZoomSlider_LostMouseCapture;  	ZoomSlider.LostFocus += ZoomSlider_LostMouseCapture;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,OnApplyTemplate,The following statement contains a magic number: if (ZoomSlider != null) {  	if (Map != null) {  		SetupZoom ();  	}  	ZoomSlider.Minimum = 0;  	ZoomSlider.Maximum = 1;  	ZoomSlider.SmallChange = .01;  	ZoomSlider.LargeChange = .1;  	ZoomSlider.LostMouseCapture += ZoomSlider_LostMouseCapture;  	ZoomSlider.LostFocus += ZoomSlider_LostMouseCapture;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,OnApplyTemplate,The following statement contains a magic number: ZoomSlider.SmallChange = .01;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,OnApplyTemplate,The following statement contains a magic number: ZoomSlider.LargeChange = .1;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,ResetRotation_Click,The following statement contains a magic number: s.Duration = TimeSpan.FromMilliseconds (500);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,GetAngle,The following statement contains a magic number: return Math.Atan2 ((b.X - a.X)' (a.Y - b.Y)) / Math.PI * 180;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,Navigation,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Navigation\Navigation.cs,ValueToResolution,The following statement contains a magic number: return Math.Pow (10' resLog);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OAuthAuthorize,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OAuthAuthorize\OAuthAuthorize.cs,SaveOAuthTokenAsCookie,The following statement contains a magic number: if (parameters.ContainsKey ("expires_in")) {  	long expiresIn;  	Int64.TryParse (parameters ["expires_in"]' out expiresIn);  	expiration = DateTime.UtcNow + TimeSpan.FromSeconds (expiresIn);  } else {  	expiration = DateTime.UtcNow + TimeSpan.FromHours (2);  	// 2 hours by default  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OAuthAuthorize,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OAuthAuthorize\OAuthAuthorize.cs,SaveOAuthTokenAsCookie,The following statement contains a magic number: expiration = DateTime.UtcNow + TimeSpan.FromHours (2);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,map_RotationChanged,The following statement contains a magic number: if (rotateTransform == null) {  	rotateTransform = new RotateTransform ();  	AOI.RenderTransform = rotateTransform;  	AOI.RenderTransformOrigin = new Point (0.5' 0.5);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,map_RotationChanged,The following statement contains a magic number: if (rotateTransform == null) {  	rotateTransform = new RotateTransform ();  	AOI.RenderTransform = rotateTransform;  	AOI.RenderTransformOrigin = new Point (0.5' 0.5);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,map_RotationChanged,The following statement contains a magic number: AOI.RenderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,map_RotationChanged,The following statement contains a magic number: AOI.RenderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateOVMap,The following statement contains a magic number: if (mapExtent.Equals (lastMapExtent)) {  	UpdateAOI ();  } else if (sameWidthHeight || IsStatic) {  	double halfWidth = ovWidth / 2;  	double halfHeight = ovHeight / 2;  	MapPoint newCenter = mapExtent.GetCenter ();  	if (MaximumExtent != null && !IsStatic) {  		if (newCenter.X - halfWidth < MaximumExtent.XMin)  			newCenter.X = MaximumExtent.XMin + halfWidth;  		if (newCenter.X + halfWidth > MaximumExtent.XMax)  			newCenter.X = MaximumExtent.XMax - halfWidth;  		if (newCenter.Y - halfHeight < MaximumExtent.YMin)  			newCenter.Y = MaximumExtent.YMin + halfHeight;  		if (newCenter.Y + halfHeight > MaximumExtent.YMax)  			newCenter.Y = MaximumExtent.YMax - halfHeight;  	}  	if (ovWidth >= maxWidth && !Map.WrapAroundIsActive)  		UpdateAOI ();  	else {  		if (AOI != null)  			AOI.Visibility = Visibility.Collapsed;  		if (NeedUpdate (newCenter' ovExtent.GetCenter ()' OVMapImage.Resolution) && !IsStatic)  			OVMapImage.PanTo (newCenter);  		else  			UpdateAOI ();  	}  } else if (mapWidth >= maxWidth && !Map.WrapAroundIsActive)  	ZoomFullExtent ();  else {  	ZoomToNewExtent ();  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateOVMap,The following statement contains a magic number: if (mapExtent.Equals (lastMapExtent)) {  	UpdateAOI ();  } else if (sameWidthHeight || IsStatic) {  	double halfWidth = ovWidth / 2;  	double halfHeight = ovHeight / 2;  	MapPoint newCenter = mapExtent.GetCenter ();  	if (MaximumExtent != null && !IsStatic) {  		if (newCenter.X - halfWidth < MaximumExtent.XMin)  			newCenter.X = MaximumExtent.XMin + halfWidth;  		if (newCenter.X + halfWidth > MaximumExtent.XMax)  			newCenter.X = MaximumExtent.XMax - halfWidth;  		if (newCenter.Y - halfHeight < MaximumExtent.YMin)  			newCenter.Y = MaximumExtent.YMin + halfHeight;  		if (newCenter.Y + halfHeight > MaximumExtent.YMax)  			newCenter.Y = MaximumExtent.YMax - halfHeight;  	}  	if (ovWidth >= maxWidth && !Map.WrapAroundIsActive)  		UpdateAOI ();  	else {  		if (AOI != null)  			AOI.Visibility = Visibility.Collapsed;  		if (NeedUpdate (newCenter' ovExtent.GetCenter ()' OVMapImage.Resolution) && !IsStatic)  			OVMapImage.PanTo (newCenter);  		else  			UpdateAOI ();  	}  } else if (mapWidth >= maxWidth && !Map.WrapAroundIsActive)  	ZoomFullExtent ();  else {  	ZoomToNewExtent ();  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateOVMap,The following statement contains a magic number: if (sameWidthHeight || IsStatic) {  	double halfWidth = ovWidth / 2;  	double halfHeight = ovHeight / 2;  	MapPoint newCenter = mapExtent.GetCenter ();  	if (MaximumExtent != null && !IsStatic) {  		if (newCenter.X - halfWidth < MaximumExtent.XMin)  			newCenter.X = MaximumExtent.XMin + halfWidth;  		if (newCenter.X + halfWidth > MaximumExtent.XMax)  			newCenter.X = MaximumExtent.XMax - halfWidth;  		if (newCenter.Y - halfHeight < MaximumExtent.YMin)  			newCenter.Y = MaximumExtent.YMin + halfHeight;  		if (newCenter.Y + halfHeight > MaximumExtent.YMax)  			newCenter.Y = MaximumExtent.YMax - halfHeight;  	}  	if (ovWidth >= maxWidth && !Map.WrapAroundIsActive)  		UpdateAOI ();  	else {  		if (AOI != null)  			AOI.Visibility = Visibility.Collapsed;  		if (NeedUpdate (newCenter' ovExtent.GetCenter ()' OVMapImage.Resolution) && !IsStatic)  			OVMapImage.PanTo (newCenter);  		else  			UpdateAOI ();  	}  } else if (mapWidth >= maxWidth && !Map.WrapAroundIsActive)  	ZoomFullExtent ();  else {  	ZoomToNewExtent ();  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateOVMap,The following statement contains a magic number: if (sameWidthHeight || IsStatic) {  	double halfWidth = ovWidth / 2;  	double halfHeight = ovHeight / 2;  	MapPoint newCenter = mapExtent.GetCenter ();  	if (MaximumExtent != null && !IsStatic) {  		if (newCenter.X - halfWidth < MaximumExtent.XMin)  			newCenter.X = MaximumExtent.XMin + halfWidth;  		if (newCenter.X + halfWidth > MaximumExtent.XMax)  			newCenter.X = MaximumExtent.XMax - halfWidth;  		if (newCenter.Y - halfHeight < MaximumExtent.YMin)  			newCenter.Y = MaximumExtent.YMin + halfHeight;  		if (newCenter.Y + halfHeight > MaximumExtent.YMax)  			newCenter.Y = MaximumExtent.YMax - halfHeight;  	}  	if (ovWidth >= maxWidth && !Map.WrapAroundIsActive)  		UpdateAOI ();  	else {  		if (AOI != null)  			AOI.Visibility = Visibility.Collapsed;  		if (NeedUpdate (newCenter' ovExtent.GetCenter ()' OVMapImage.Resolution) && !IsStatic)  			OVMapImage.PanTo (newCenter);  		else  			UpdateAOI ();  	}  } else if (mapWidth >= maxWidth && !Map.WrapAroundIsActive)  	ZoomFullExtent ();  else {  	ZoomToNewExtent ();  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,ZoomToNewExtent,The following statement contains a magic number: if (!isMapWithinOV || widthRatio <= minRatio || heightRatio <= minRatio || widthRatio >= maxRatio || heightRatio >= maxRatio) {  	//set new size around new mapextent  	if (AOI != null)  		AOI.Visibility = Visibility.Collapsed;  	if (maxWidth / 3 > mapWidth || Map.WrapAroundIsActive) {  		if (!IsStatic) {  			extent = new Envelope () {  				XMin = mapExtent.XMin - mapWidth'  				XMax = mapExtent.XMax + mapWidth'  				YMin = mapExtent.YMin - mapHeight'  				YMax = mapExtent.YMax + mapHeight  			};  			if (MaximumExtent != null) {  				if (extent.XMin < MaximumExtent.XMin)  					extent.XMin = MaximumExtent.XMin;  				if (extent.XMax > MaximumExtent.XMax)  					extent.XMax = MaximumExtent.XMax;  				if (extent.YMin < MaximumExtent.YMin)  					extent.YMin = MaximumExtent.YMin;  				if (extent.YMax > MaximumExtent.YMax)  					extent.YMax = MaximumExtent.YMax;  			}  			OVMapImage.ZoomTo (extent);  		} else  			UpdateAOI ();  	} else  		ZoomFullExtent ();  } else  	UpdateAOI ();  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,ZoomToNewExtent,The following statement contains a magic number: if (maxWidth / 3 > mapWidth || Map.WrapAroundIsActive) {  	if (!IsStatic) {  		extent = new Envelope () {  			XMin = mapExtent.XMin - mapWidth'  			XMax = mapExtent.XMax + mapWidth'  			YMin = mapExtent.YMin - mapHeight'  			YMax = mapExtent.YMax + mapHeight  		};  		if (MaximumExtent != null) {  			if (extent.XMin < MaximumExtent.XMin)  				extent.XMin = MaximumExtent.XMin;  			if (extent.XMax > MaximumExtent.XMax)  				extent.XMax = MaximumExtent.XMax;  			if (extent.YMin < MaximumExtent.YMin)  				extent.YMin = MaximumExtent.YMin;  			if (extent.YMax > MaximumExtent.YMax)  				extent.YMax = MaximumExtent.YMax;  		}  		OVMapImage.ZoomTo (extent);  	} else  		UpdateAOI ();  } else  	ZoomFullExtent ();  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: if (!double.IsNaN (topLeft.X) && !double.IsNaN (topLeft.Y) && !double.IsNaN (bottomRight.X) && !double.IsNaN (bottomRight.Y)) {  	// Get absolute value of (bottomRight.X - topLeft.X) to avoid negative width when the   	// control FlowDirection is set to RTL:  	AOI.Width = Math.Max (3' Math.Abs (bottomRight.X - topLeft.X));  	AOI.Height = Math.Max (3' bottomRight.Y - topLeft.Y);  	// Setting the correct value for AOI width when the control FlowDirection is set to RTL:  	AOI.Margin = new Thickness ((this.FlowDirection == System.Windows.FlowDirection.LeftToRight) ? topLeft.X : topLeft.X - AOI.Width' topLeft.Y' 0' 0);  	// Set rotation of AOI according to map roatation  	if (rotateTransform == null) {  		rotateTransform = new RotateTransform ();  		AOI.RenderTransform = rotateTransform;  		AOI.RenderTransformOrigin = new Point (0.5' 0.5);  	}  	rotateTransform.Angle = (Map.Rotation * -1);  	AOI.Visibility = Visibility.Visible;  } else  	AOI.Visibility = Visibility.Collapsed;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: if (!double.IsNaN (topLeft.X) && !double.IsNaN (topLeft.Y) && !double.IsNaN (bottomRight.X) && !double.IsNaN (bottomRight.Y)) {  	// Get absolute value of (bottomRight.X - topLeft.X) to avoid negative width when the   	// control FlowDirection is set to RTL:  	AOI.Width = Math.Max (3' Math.Abs (bottomRight.X - topLeft.X));  	AOI.Height = Math.Max (3' bottomRight.Y - topLeft.Y);  	// Setting the correct value for AOI width when the control FlowDirection is set to RTL:  	AOI.Margin = new Thickness ((this.FlowDirection == System.Windows.FlowDirection.LeftToRight) ? topLeft.X : topLeft.X - AOI.Width' topLeft.Y' 0' 0);  	// Set rotation of AOI according to map roatation  	if (rotateTransform == null) {  		rotateTransform = new RotateTransform ();  		AOI.RenderTransform = rotateTransform;  		AOI.RenderTransformOrigin = new Point (0.5' 0.5);  	}  	rotateTransform.Angle = (Map.Rotation * -1);  	AOI.Visibility = Visibility.Visible;  } else  	AOI.Visibility = Visibility.Collapsed;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: if (!double.IsNaN (topLeft.X) && !double.IsNaN (topLeft.Y) && !double.IsNaN (bottomRight.X) && !double.IsNaN (bottomRight.Y)) {  	// Get absolute value of (bottomRight.X - topLeft.X) to avoid negative width when the   	// control FlowDirection is set to RTL:  	AOI.Width = Math.Max (3' Math.Abs (bottomRight.X - topLeft.X));  	AOI.Height = Math.Max (3' bottomRight.Y - topLeft.Y);  	// Setting the correct value for AOI width when the control FlowDirection is set to RTL:  	AOI.Margin = new Thickness ((this.FlowDirection == System.Windows.FlowDirection.LeftToRight) ? topLeft.X : topLeft.X - AOI.Width' topLeft.Y' 0' 0);  	// Set rotation of AOI according to map roatation  	if (rotateTransform == null) {  		rotateTransform = new RotateTransform ();  		AOI.RenderTransform = rotateTransform;  		AOI.RenderTransformOrigin = new Point (0.5' 0.5);  	}  	rotateTransform.Angle = (Map.Rotation * -1);  	AOI.Visibility = Visibility.Visible;  } else  	AOI.Visibility = Visibility.Collapsed;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: if (!double.IsNaN (topLeft.X) && !double.IsNaN (topLeft.Y) && !double.IsNaN (bottomRight.X) && !double.IsNaN (bottomRight.Y)) {  	// Get absolute value of (bottomRight.X - topLeft.X) to avoid negative width when the   	// control FlowDirection is set to RTL:  	AOI.Width = Math.Max (3' Math.Abs (bottomRight.X - topLeft.X));  	AOI.Height = Math.Max (3' bottomRight.Y - topLeft.Y);  	// Setting the correct value for AOI width when the control FlowDirection is set to RTL:  	AOI.Margin = new Thickness ((this.FlowDirection == System.Windows.FlowDirection.LeftToRight) ? topLeft.X : topLeft.X - AOI.Width' topLeft.Y' 0' 0);  	// Set rotation of AOI according to map roatation  	if (rotateTransform == null) {  		rotateTransform = new RotateTransform ();  		AOI.RenderTransform = rotateTransform;  		AOI.RenderTransformOrigin = new Point (0.5' 0.5);  	}  	rotateTransform.Angle = (Map.Rotation * -1);  	AOI.Visibility = Visibility.Visible;  } else  	AOI.Visibility = Visibility.Collapsed;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: AOI.Width = Math.Max (3' Math.Abs (bottomRight.X - topLeft.X));  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: AOI.Height = Math.Max (3' bottomRight.Y - topLeft.Y);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: if (rotateTransform == null) {  	rotateTransform = new RotateTransform ();  	AOI.RenderTransform = rotateTransform;  	AOI.RenderTransformOrigin = new Point (0.5' 0.5);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: if (rotateTransform == null) {  	rotateTransform = new RotateTransform ();  	AOI.RenderTransform = rotateTransform;  	AOI.RenderTransformOrigin = new Point (0.5' 0.5);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: AOI.RenderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,OverviewMap,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\OverviewMap\OverviewMap.cs,UpdateAOI,The following statement contains a magic number: AOI.RenderTransformOrigin = new Point (0.5' 0.5);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if (textBox != null) {  	if (e.Key == Key.Enter) {  		int convertedNo = int.Parse (textBox.Text);  		currentRecordNumber = convertedNo - 1;  		ValidateCurrentRecordNumber ();  		SetCurrentRecordNumberTextBox ();  		SelectCurrentRecord ();  	} else if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  		if (textBox.SelectedText.Length > 0)  			textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  		textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  		textBox.SelectionStart = textBox.Text.Length;  	}  	e.Handled = true;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if (textBox != null) {  	if (e.Key == Key.Enter) {  		int convertedNo = int.Parse (textBox.Text);  		currentRecordNumber = convertedNo - 1;  		ValidateCurrentRecordNumber ();  		SetCurrentRecordNumberTextBox ();  		SelectCurrentRecord ();  	} else if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  		if (textBox.SelectedText.Length > 0)  			textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  		textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  		textBox.SelectionStart = textBox.Text.Length;  	}  	e.Handled = true;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if (textBox != null) {  	if (e.Key == Key.Enter) {  		int convertedNo = int.Parse (textBox.Text);  		currentRecordNumber = convertedNo - 1;  		ValidateCurrentRecordNumber ();  		SetCurrentRecordNumberTextBox ();  		SelectCurrentRecord ();  	} else if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  		if (textBox.SelectedText.Length > 0)  			textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  		textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  		textBox.SelectionStart = textBox.Text.Length;  	}  	e.Handled = true;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if (textBox != null) {  	if (e.Key == Key.Enter) {  		int convertedNo = int.Parse (textBox.Text);  		currentRecordNumber = convertedNo - 1;  		ValidateCurrentRecordNumber ();  		SetCurrentRecordNumberTextBox ();  		SelectCurrentRecord ();  	} else if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  		if (textBox.SelectedText.Length > 0)  			textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  		textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  		textBox.SelectionStart = textBox.Text.Length;  	}  	e.Handled = true;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if (e.Key == Key.Enter) {  	int convertedNo = int.Parse (textBox.Text);  	currentRecordNumber = convertedNo - 1;  	ValidateCurrentRecordNumber ();  	SetCurrentRecordNumberTextBox ();  	SelectCurrentRecord ();  } else if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  	if (textBox.SelectedText.Length > 0)  		textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  	textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  	textBox.SelectionStart = textBox.Text.Length;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if (e.Key == Key.Enter) {  	int convertedNo = int.Parse (textBox.Text);  	currentRecordNumber = convertedNo - 1;  	ValidateCurrentRecordNumber ();  	SetCurrentRecordNumberTextBox ();  	SelectCurrentRecord ();  } else if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  	if (textBox.SelectedText.Length > 0)  		textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  	textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  	textBox.SelectionStart = textBox.Text.Length;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if (e.Key == Key.Enter) {  	int convertedNo = int.Parse (textBox.Text);  	currentRecordNumber = convertedNo - 1;  	ValidateCurrentRecordNumber ();  	SetCurrentRecordNumberTextBox ();  	SelectCurrentRecord ();  } else if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  	if (textBox.SelectedText.Length > 0)  		textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  	textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  	textBox.SelectionStart = textBox.Text.Length;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if (e.Key == Key.Enter) {  	int convertedNo = int.Parse (textBox.Text);  	currentRecordNumber = convertedNo - 1;  	ValidateCurrentRecordNumber ();  	SetCurrentRecordNumberTextBox ();  	SelectCurrentRecord ();  } else if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  	if (textBox.SelectedText.Length > 0)  		textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  	textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  	textBox.SelectionStart = textBox.Text.Length;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  	if (textBox.SelectedText.Length > 0)  		textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  	textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  	textBox.SelectionStart = textBox.Text.Length;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  	if (textBox.SelectedText.Length > 0)  		textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  	textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  	textBox.SelectionStart = textBox.Text.Length;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  	if (textBox.SelectedText.Length > 0)  		textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  	textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  	textBox.SelectionStart = textBox.Text.Length;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,CurrentRecordNumberTextBox_KeyDown,The following statement contains a magic number: if ((e.PlatformKeyCode >= 48 && e.PlatformKeyCode <= 57) || (e.PlatformKeyCode >= 96 && e.PlatformKeyCode <= 105)) {  	if (textBox.SelectedText.Length > 0)  		textBox.Text = textBox.Text.Remove (textBox.SelectionStart' textBox.SelectedText.Length);  	textBox.Text += e.Key.ToString ().Substring (e.Key.ToString ().Length - 1);  	textBox.SelectionStart = textBox.Text.Length;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,FeatureDataGrid,The following statement contains a magic number: throttler.Interval = new TimeSpan (0' 0' 0' 0' 500);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,FeatureDataGrid,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,DispatcherTimer_Tick,The following statement contains a magic number: if (startTime != null && (DateTime.Now.Ticks - startTime.Ticks) >= 500) {  	throttler.Stop ();  	// Synchronizing selections in current DataGrid's page and the associated GraphicsLayer:  	RestorePreviousSelection (GraphicsLayer.SelectedGraphics);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (Field)) {  	var codedValueSources = Utilities.DynamicCodedValueSource.GetCodedValueSources (LookupField' FieldInfo' dataItem' DynamicCodedValueSource' nullableSources);  	if (codedValueSources != null) {  		ComboBox box = new ComboBox {  			Margin = new Thickness (4.0)'  			VerticalAlignment = VerticalAlignment.Center'  			VerticalContentAlignment = VerticalAlignment.Center'  			DisplayMemberPath = "DisplayName"  		};  		if (!string.IsNullOrEmpty (LookupField) && DynamicCodedValueSource != null) {  			// Item Source Binding  			lookupConverter.LookupField = this.LookupField;  			lookupConverter.Field = this.FieldInfo;  			lookupConverter.NullableSources = this.nullableSources;  			Binding binding = new Binding ();  			binding.Mode = BindingMode.OneWay;  			binding.Converter = lookupConverter;  			binding.ConverterParameter = DynamicCodedValueSource;  			box.SetBinding (ComboBox.ItemsSourceProperty' binding);  			// Selected Item Binding  			selectedConverter.Field = Field;  			selectedConverter.LookupField = LookupField;  			selectedConverter.NullableSources = this.nullableSources;  			Binding selectedBinding = new Binding ();  			selectedBinding.Mode = BindingMode.OneWay;  			selectedBinding.Converter = selectedConverter;  			selectedBinding.ConverterParameter = this.DynamicCodedValueSource;  			box.SetBinding (ComboBox.SelectedItemProperty' selectedBinding);  			box.SelectionChanged += box_SelectionChanged;  		}  		return box;  	} else if (FieldInfo.Type == Client.Field.FieldType.Date) {  		DateTimePicker dtp = new DateTimePicker {  			Margin = new Thickness (4.0)'  			VerticalAlignment = VerticalAlignment.Center'  			VerticalContentAlignment = VerticalAlignment.Center'  			DateTimeFormat = this.DateTimeFormat'  			DateTimeKind = this.DateTimeKind'  			Language = cell.Language  		};  		Binding selectedBinding =   		#if SILVERLIGHT  		new Binding (Field);  		#else  						    new Binding("Attributes["+Field+"]"); 					if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo)) 					{ 						selectedBinding.ValidationRules.Add(new DynamicRangeDomainValidationRule() 						{ 							ValidationStep = ValidationStep.ConvertedProposedValue' 							Field = FieldInfo' 							LayerInfo = LayerInfo' 							Graphic = dataItem as Graphic 						}); 					} #endif  		selectedBinding.Mode = BindingMode.TwoWay;  		selectedBinding.ValidatesOnExceptions = true;  		selectedBinding.NotifyOnValidationError = true;  		dtp.SetBinding (DateTimePicker.SelectedDateProperty' selectedBinding);  		return dtp;  	} else {  		TextBox box = new TextBox {  			Margin = new Thickness (4.0)'  			VerticalAlignment = VerticalAlignment.Center'  			VerticalContentAlignment = VerticalAlignment.Center'  		};  		box.MaxLength = Field.Length;  		Binding binding =   		#if SILVERLIGHT  		new Binding (Field);  		binding.Mode = BindingMode.TwoWay;  		binding.ValidatesOnExceptions = true;  		binding.NotifyOnValidationError = true;  		binding.Converter = emptyStringToNullConverter;  		#else  		                    new Binding("Attributes["+Field+"]");		                     binding.Mode = BindingMode.TwoWay;                     stringToPrimitiveTypeConverter.FieldType = FieldInfo.Type;                     binding.Converter = stringToPrimitiveTypeConverter;                                          // Validates that the value entered into the text box can be                      // converted to the corrected field type without error.                     // if value cannot be converted to the correct type validation                     // error will be triggered based on binding trigger below.                     binding.ValidationRules.Add(new FeatureValidationRule()                     {                         ValidationStep = ValidationStep.ConvertedProposedValue'                         FieldType = FieldInfo.Type'                         Nullable = FieldInfo.Nullable                     });                       if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo))                     {                         binding.ValidationRules.Add(new DynamicRangeDomainValidationRule()                         {                             ValidationStep = ValidationStep.ConvertedProposedValue'                             Field = FieldInfo'                             LayerInfo = LayerInfo'                             Graphic = dataItem as Graphic                         });                     }                      // Build a data trigger to show the validation error i.e. red outline around textbox                     // with message content in tooltip.                     var setterBinding = new Binding("(Validation.Errors)[0].ErrorContent");                     setterBinding.RelativeSource = RelativeSource.Self;                      var setter = new Setter();                     setter.Property = TextBox.ToolTipProperty;                     setter.Value = setterBinding;                                                              var trigger = new Trigger();                     trigger.Property = Validation.HasErrorProperty;                     trigger.Value = true;                     trigger.Setters.Add(setter);                                                            var style = new Style(typeof(TextBox));                                         style.Triggers.Add(trigger);                                                             box.Style = style; #endif  		box.SetBinding (TextBox.TextProperty' binding);  		return box;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (Field)) {  	var codedValueSources = Utilities.DynamicCodedValueSource.GetCodedValueSources (LookupField' FieldInfo' dataItem' DynamicCodedValueSource' nullableSources);  	if (codedValueSources != null) {  		ComboBox box = new ComboBox {  			Margin = new Thickness (4.0)'  			VerticalAlignment = VerticalAlignment.Center'  			VerticalContentAlignment = VerticalAlignment.Center'  			DisplayMemberPath = "DisplayName"  		};  		if (!string.IsNullOrEmpty (LookupField) && DynamicCodedValueSource != null) {  			// Item Source Binding  			lookupConverter.LookupField = this.LookupField;  			lookupConverter.Field = this.FieldInfo;  			lookupConverter.NullableSources = this.nullableSources;  			Binding binding = new Binding ();  			binding.Mode = BindingMode.OneWay;  			binding.Converter = lookupConverter;  			binding.ConverterParameter = DynamicCodedValueSource;  			box.SetBinding (ComboBox.ItemsSourceProperty' binding);  			// Selected Item Binding  			selectedConverter.Field = Field;  			selectedConverter.LookupField = LookupField;  			selectedConverter.NullableSources = this.nullableSources;  			Binding selectedBinding = new Binding ();  			selectedBinding.Mode = BindingMode.OneWay;  			selectedBinding.Converter = selectedConverter;  			selectedBinding.ConverterParameter = this.DynamicCodedValueSource;  			box.SetBinding (ComboBox.SelectedItemProperty' selectedBinding);  			box.SelectionChanged += box_SelectionChanged;  		}  		return box;  	} else if (FieldInfo.Type == Client.Field.FieldType.Date) {  		DateTimePicker dtp = new DateTimePicker {  			Margin = new Thickness (4.0)'  			VerticalAlignment = VerticalAlignment.Center'  			VerticalContentAlignment = VerticalAlignment.Center'  			DateTimeFormat = this.DateTimeFormat'  			DateTimeKind = this.DateTimeKind'  			Language = cell.Language  		};  		Binding selectedBinding =   		#if SILVERLIGHT  		new Binding (Field);  		#else  						    new Binding("Attributes["+Field+"]"); 					if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo)) 					{ 						selectedBinding.ValidationRules.Add(new DynamicRangeDomainValidationRule() 						{ 							ValidationStep = ValidationStep.ConvertedProposedValue' 							Field = FieldInfo' 							LayerInfo = LayerInfo' 							Graphic = dataItem as Graphic 						}); 					} #endif  		selectedBinding.Mode = BindingMode.TwoWay;  		selectedBinding.ValidatesOnExceptions = true;  		selectedBinding.NotifyOnValidationError = true;  		dtp.SetBinding (DateTimePicker.SelectedDateProperty' selectedBinding);  		return dtp;  	} else {  		TextBox box = new TextBox {  			Margin = new Thickness (4.0)'  			VerticalAlignment = VerticalAlignment.Center'  			VerticalContentAlignment = VerticalAlignment.Center'  		};  		box.MaxLength = Field.Length;  		Binding binding =   		#if SILVERLIGHT  		new Binding (Field);  		binding.Mode = BindingMode.TwoWay;  		binding.ValidatesOnExceptions = true;  		binding.NotifyOnValidationError = true;  		binding.Converter = emptyStringToNullConverter;  		#else  		                    new Binding("Attributes["+Field+"]");		                     binding.Mode = BindingMode.TwoWay;                     stringToPrimitiveTypeConverter.FieldType = FieldInfo.Type;                     binding.Converter = stringToPrimitiveTypeConverter;                                          // Validates that the value entered into the text box can be                      // converted to the corrected field type without error.                     // if value cannot be converted to the correct type validation                     // error will be triggered based on binding trigger below.                     binding.ValidationRules.Add(new FeatureValidationRule()                     {                         ValidationStep = ValidationStep.ConvertedProposedValue'                         FieldType = FieldInfo.Type'                         Nullable = FieldInfo.Nullable                     });                       if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo))                     {                         binding.ValidationRules.Add(new DynamicRangeDomainValidationRule()                         {                             ValidationStep = ValidationStep.ConvertedProposedValue'                             Field = FieldInfo'                             LayerInfo = LayerInfo'                             Graphic = dataItem as Graphic                         });                     }                      // Build a data trigger to show the validation error i.e. red outline around textbox                     // with message content in tooltip.                     var setterBinding = new Binding("(Validation.Errors)[0].ErrorContent");                     setterBinding.RelativeSource = RelativeSource.Self;                      var setter = new Setter();                     setter.Property = TextBox.ToolTipProperty;                     setter.Value = setterBinding;                                                              var trigger = new Trigger();                     trigger.Property = Validation.HasErrorProperty;                     trigger.Value = true;                     trigger.Setters.Add(setter);                                                            var style = new Style(typeof(TextBox));                                         style.Triggers.Add(trigger);                                                             box.Style = style; #endif  		box.SetBinding (TextBox.TextProperty' binding);  		return box;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (Field)) {  	var codedValueSources = Utilities.DynamicCodedValueSource.GetCodedValueSources (LookupField' FieldInfo' dataItem' DynamicCodedValueSource' nullableSources);  	if (codedValueSources != null) {  		ComboBox box = new ComboBox {  			Margin = new Thickness (4.0)'  			VerticalAlignment = VerticalAlignment.Center'  			VerticalContentAlignment = VerticalAlignment.Center'  			DisplayMemberPath = "DisplayName"  		};  		if (!string.IsNullOrEmpty (LookupField) && DynamicCodedValueSource != null) {  			// Item Source Binding  			lookupConverter.LookupField = this.LookupField;  			lookupConverter.Field = this.FieldInfo;  			lookupConverter.NullableSources = this.nullableSources;  			Binding binding = new Binding ();  			binding.Mode = BindingMode.OneWay;  			binding.Converter = lookupConverter;  			binding.ConverterParameter = DynamicCodedValueSource;  			box.SetBinding (ComboBox.ItemsSourceProperty' binding);  			// Selected Item Binding  			selectedConverter.Field = Field;  			selectedConverter.LookupField = LookupField;  			selectedConverter.NullableSources = this.nullableSources;  			Binding selectedBinding = new Binding ();  			selectedBinding.Mode = BindingMode.OneWay;  			selectedBinding.Converter = selectedConverter;  			selectedBinding.ConverterParameter = this.DynamicCodedValueSource;  			box.SetBinding (ComboBox.SelectedItemProperty' selectedBinding);  			box.SelectionChanged += box_SelectionChanged;  		}  		return box;  	} else if (FieldInfo.Type == Client.Field.FieldType.Date) {  		DateTimePicker dtp = new DateTimePicker {  			Margin = new Thickness (4.0)'  			VerticalAlignment = VerticalAlignment.Center'  			VerticalContentAlignment = VerticalAlignment.Center'  			DateTimeFormat = this.DateTimeFormat'  			DateTimeKind = this.DateTimeKind'  			Language = cell.Language  		};  		Binding selectedBinding =   		#if SILVERLIGHT  		new Binding (Field);  		#else  						    new Binding("Attributes["+Field+"]"); 					if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo)) 					{ 						selectedBinding.ValidationRules.Add(new DynamicRangeDomainValidationRule() 						{ 							ValidationStep = ValidationStep.ConvertedProposedValue' 							Field = FieldInfo' 							LayerInfo = LayerInfo' 							Graphic = dataItem as Graphic 						}); 					} #endif  		selectedBinding.Mode = BindingMode.TwoWay;  		selectedBinding.ValidatesOnExceptions = true;  		selectedBinding.NotifyOnValidationError = true;  		dtp.SetBinding (DateTimePicker.SelectedDateProperty' selectedBinding);  		return dtp;  	} else {  		TextBox box = new TextBox {  			Margin = new Thickness (4.0)'  			VerticalAlignment = VerticalAlignment.Center'  			VerticalContentAlignment = VerticalAlignment.Center'  		};  		box.MaxLength = Field.Length;  		Binding binding =   		#if SILVERLIGHT  		new Binding (Field);  		binding.Mode = BindingMode.TwoWay;  		binding.ValidatesOnExceptions = true;  		binding.NotifyOnValidationError = true;  		binding.Converter = emptyStringToNullConverter;  		#else  		                    new Binding("Attributes["+Field+"]");		                     binding.Mode = BindingMode.TwoWay;                     stringToPrimitiveTypeConverter.FieldType = FieldInfo.Type;                     binding.Converter = stringToPrimitiveTypeConverter;                                          // Validates that the value entered into the text box can be                      // converted to the corrected field type without error.                     // if value cannot be converted to the correct type validation                     // error will be triggered based on binding trigger below.                     binding.ValidationRules.Add(new FeatureValidationRule()                     {                         ValidationStep = ValidationStep.ConvertedProposedValue'                         FieldType = FieldInfo.Type'                         Nullable = FieldInfo.Nullable                     });                       if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo))                     {                         binding.ValidationRules.Add(new DynamicRangeDomainValidationRule()                         {                             ValidationStep = ValidationStep.ConvertedProposedValue'                             Field = FieldInfo'                             LayerInfo = LayerInfo'                             Graphic = dataItem as Graphic                         });                     }                      // Build a data trigger to show the validation error i.e. red outline around textbox                     // with message content in tooltip.                     var setterBinding = new Binding("(Validation.Errors)[0].ErrorContent");                     setterBinding.RelativeSource = RelativeSource.Self;                      var setter = new Setter();                     setter.Property = TextBox.ToolTipProperty;                     setter.Value = setterBinding;                                                              var trigger = new Trigger();                     trigger.Property = Validation.HasErrorProperty;                     trigger.Value = true;                     trigger.Setters.Add(setter);                                                            var style = new Style(typeof(TextBox));                                         style.Triggers.Add(trigger);                                                             box.Style = style; #endif  		box.SetBinding (TextBox.TextProperty' binding);  		return box;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The following statement contains a magic number: if (codedValueSources != null) {  	ComboBox box = new ComboBox {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  		DisplayMemberPath = "DisplayName"  	};  	if (!string.IsNullOrEmpty (LookupField) && DynamicCodedValueSource != null) {  		// Item Source Binding  		lookupConverter.LookupField = this.LookupField;  		lookupConverter.Field = this.FieldInfo;  		lookupConverter.NullableSources = this.nullableSources;  		Binding binding = new Binding ();  		binding.Mode = BindingMode.OneWay;  		binding.Converter = lookupConverter;  		binding.ConverterParameter = DynamicCodedValueSource;  		box.SetBinding (ComboBox.ItemsSourceProperty' binding);  		// Selected Item Binding  		selectedConverter.Field = Field;  		selectedConverter.LookupField = LookupField;  		selectedConverter.NullableSources = this.nullableSources;  		Binding selectedBinding = new Binding ();  		selectedBinding.Mode = BindingMode.OneWay;  		selectedBinding.Converter = selectedConverter;  		selectedBinding.ConverterParameter = this.DynamicCodedValueSource;  		box.SetBinding (ComboBox.SelectedItemProperty' selectedBinding);  		box.SelectionChanged += box_SelectionChanged;  	}  	return box;  } else if (FieldInfo.Type == Client.Field.FieldType.Date) {  	DateTimePicker dtp = new DateTimePicker {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  		DateTimeFormat = this.DateTimeFormat'  		DateTimeKind = this.DateTimeKind'  		Language = cell.Language  	};  	Binding selectedBinding =   	#if SILVERLIGHT  	new Binding (Field);  	#else  					    new Binding("Attributes["+Field+"]"); 					if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo)) 					{ 						selectedBinding.ValidationRules.Add(new DynamicRangeDomainValidationRule() 						{ 							ValidationStep = ValidationStep.ConvertedProposedValue' 							Field = FieldInfo' 							LayerInfo = LayerInfo' 							Graphic = dataItem as Graphic 						}); 					} #endif  	selectedBinding.Mode = BindingMode.TwoWay;  	selectedBinding.ValidatesOnExceptions = true;  	selectedBinding.NotifyOnValidationError = true;  	dtp.SetBinding (DateTimePicker.SelectedDateProperty' selectedBinding);  	return dtp;  } else {  	TextBox box = new TextBox {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  	};  	box.MaxLength = Field.Length;  	Binding binding =   	#if SILVERLIGHT  	new Binding (Field);  	binding.Mode = BindingMode.TwoWay;  	binding.ValidatesOnExceptions = true;  	binding.NotifyOnValidationError = true;  	binding.Converter = emptyStringToNullConverter;  	#else  	                    new Binding("Attributes["+Field+"]");		                     binding.Mode = BindingMode.TwoWay;                     stringToPrimitiveTypeConverter.FieldType = FieldInfo.Type;                     binding.Converter = stringToPrimitiveTypeConverter;                                          // Validates that the value entered into the text box can be                      // converted to the corrected field type without error.                     // if value cannot be converted to the correct type validation                     // error will be triggered based on binding trigger below.                     binding.ValidationRules.Add(new FeatureValidationRule()                     {                         ValidationStep = ValidationStep.ConvertedProposedValue'                         FieldType = FieldInfo.Type'                         Nullable = FieldInfo.Nullable                     });                       if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo))                     {                         binding.ValidationRules.Add(new DynamicRangeDomainValidationRule()                         {                             ValidationStep = ValidationStep.ConvertedProposedValue'                             Field = FieldInfo'                             LayerInfo = LayerInfo'                             Graphic = dataItem as Graphic                         });                     }                      // Build a data trigger to show the validation error i.e. red outline around textbox                     // with message content in tooltip.                     var setterBinding = new Binding("(Validation.Errors)[0].ErrorContent");                     setterBinding.RelativeSource = RelativeSource.Self;                      var setter = new Setter();                     setter.Property = TextBox.ToolTipProperty;                     setter.Value = setterBinding;                                                              var trigger = new Trigger();                     trigger.Property = Validation.HasErrorProperty;                     trigger.Value = true;                     trigger.Setters.Add(setter);                                                            var style = new Style(typeof(TextBox));                                         style.Triggers.Add(trigger);                                                             box.Style = style; #endif  	box.SetBinding (TextBox.TextProperty' binding);  	return box;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The following statement contains a magic number: if (codedValueSources != null) {  	ComboBox box = new ComboBox {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  		DisplayMemberPath = "DisplayName"  	};  	if (!string.IsNullOrEmpty (LookupField) && DynamicCodedValueSource != null) {  		// Item Source Binding  		lookupConverter.LookupField = this.LookupField;  		lookupConverter.Field = this.FieldInfo;  		lookupConverter.NullableSources = this.nullableSources;  		Binding binding = new Binding ();  		binding.Mode = BindingMode.OneWay;  		binding.Converter = lookupConverter;  		binding.ConverterParameter = DynamicCodedValueSource;  		box.SetBinding (ComboBox.ItemsSourceProperty' binding);  		// Selected Item Binding  		selectedConverter.Field = Field;  		selectedConverter.LookupField = LookupField;  		selectedConverter.NullableSources = this.nullableSources;  		Binding selectedBinding = new Binding ();  		selectedBinding.Mode = BindingMode.OneWay;  		selectedBinding.Converter = selectedConverter;  		selectedBinding.ConverterParameter = this.DynamicCodedValueSource;  		box.SetBinding (ComboBox.SelectedItemProperty' selectedBinding);  		box.SelectionChanged += box_SelectionChanged;  	}  	return box;  } else if (FieldInfo.Type == Client.Field.FieldType.Date) {  	DateTimePicker dtp = new DateTimePicker {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  		DateTimeFormat = this.DateTimeFormat'  		DateTimeKind = this.DateTimeKind'  		Language = cell.Language  	};  	Binding selectedBinding =   	#if SILVERLIGHT  	new Binding (Field);  	#else  					    new Binding("Attributes["+Field+"]"); 					if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo)) 					{ 						selectedBinding.ValidationRules.Add(new DynamicRangeDomainValidationRule() 						{ 							ValidationStep = ValidationStep.ConvertedProposedValue' 							Field = FieldInfo' 							LayerInfo = LayerInfo' 							Graphic = dataItem as Graphic 						}); 					} #endif  	selectedBinding.Mode = BindingMode.TwoWay;  	selectedBinding.ValidatesOnExceptions = true;  	selectedBinding.NotifyOnValidationError = true;  	dtp.SetBinding (DateTimePicker.SelectedDateProperty' selectedBinding);  	return dtp;  } else {  	TextBox box = new TextBox {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  	};  	box.MaxLength = Field.Length;  	Binding binding =   	#if SILVERLIGHT  	new Binding (Field);  	binding.Mode = BindingMode.TwoWay;  	binding.ValidatesOnExceptions = true;  	binding.NotifyOnValidationError = true;  	binding.Converter = emptyStringToNullConverter;  	#else  	                    new Binding("Attributes["+Field+"]");		                     binding.Mode = BindingMode.TwoWay;                     stringToPrimitiveTypeConverter.FieldType = FieldInfo.Type;                     binding.Converter = stringToPrimitiveTypeConverter;                                          // Validates that the value entered into the text box can be                      // converted to the corrected field type without error.                     // if value cannot be converted to the correct type validation                     // error will be triggered based on binding trigger below.                     binding.ValidationRules.Add(new FeatureValidationRule()                     {                         ValidationStep = ValidationStep.ConvertedProposedValue'                         FieldType = FieldInfo.Type'                         Nullable = FieldInfo.Nullable                     });                       if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo))                     {                         binding.ValidationRules.Add(new DynamicRangeDomainValidationRule()                         {                             ValidationStep = ValidationStep.ConvertedProposedValue'                             Field = FieldInfo'                             LayerInfo = LayerInfo'                             Graphic = dataItem as Graphic                         });                     }                      // Build a data trigger to show the validation error i.e. red outline around textbox                     // with message content in tooltip.                     var setterBinding = new Binding("(Validation.Errors)[0].ErrorContent");                     setterBinding.RelativeSource = RelativeSource.Self;                      var setter = new Setter();                     setter.Property = TextBox.ToolTipProperty;                     setter.Value = setterBinding;                                                              var trigger = new Trigger();                     trigger.Property = Validation.HasErrorProperty;                     trigger.Value = true;                     trigger.Setters.Add(setter);                                                            var style = new Style(typeof(TextBox));                                         style.Triggers.Add(trigger);                                                             box.Style = style; #endif  	box.SetBinding (TextBox.TextProperty' binding);  	return box;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The following statement contains a magic number: if (codedValueSources != null) {  	ComboBox box = new ComboBox {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  		DisplayMemberPath = "DisplayName"  	};  	if (!string.IsNullOrEmpty (LookupField) && DynamicCodedValueSource != null) {  		// Item Source Binding  		lookupConverter.LookupField = this.LookupField;  		lookupConverter.Field = this.FieldInfo;  		lookupConverter.NullableSources = this.nullableSources;  		Binding binding = new Binding ();  		binding.Mode = BindingMode.OneWay;  		binding.Converter = lookupConverter;  		binding.ConverterParameter = DynamicCodedValueSource;  		box.SetBinding (ComboBox.ItemsSourceProperty' binding);  		// Selected Item Binding  		selectedConverter.Field = Field;  		selectedConverter.LookupField = LookupField;  		selectedConverter.NullableSources = this.nullableSources;  		Binding selectedBinding = new Binding ();  		selectedBinding.Mode = BindingMode.OneWay;  		selectedBinding.Converter = selectedConverter;  		selectedBinding.ConverterParameter = this.DynamicCodedValueSource;  		box.SetBinding (ComboBox.SelectedItemProperty' selectedBinding);  		box.SelectionChanged += box_SelectionChanged;  	}  	return box;  } else if (FieldInfo.Type == Client.Field.FieldType.Date) {  	DateTimePicker dtp = new DateTimePicker {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  		DateTimeFormat = this.DateTimeFormat'  		DateTimeKind = this.DateTimeKind'  		Language = cell.Language  	};  	Binding selectedBinding =   	#if SILVERLIGHT  	new Binding (Field);  	#else  					    new Binding("Attributes["+Field+"]"); 					if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo)) 					{ 						selectedBinding.ValidationRules.Add(new DynamicRangeDomainValidationRule() 						{ 							ValidationStep = ValidationStep.ConvertedProposedValue' 							Field = FieldInfo' 							LayerInfo = LayerInfo' 							Graphic = dataItem as Graphic 						}); 					} #endif  	selectedBinding.Mode = BindingMode.TwoWay;  	selectedBinding.ValidatesOnExceptions = true;  	selectedBinding.NotifyOnValidationError = true;  	dtp.SetBinding (DateTimePicker.SelectedDateProperty' selectedBinding);  	return dtp;  } else {  	TextBox box = new TextBox {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  	};  	box.MaxLength = Field.Length;  	Binding binding =   	#if SILVERLIGHT  	new Binding (Field);  	binding.Mode = BindingMode.TwoWay;  	binding.ValidatesOnExceptions = true;  	binding.NotifyOnValidationError = true;  	binding.Converter = emptyStringToNullConverter;  	#else  	                    new Binding("Attributes["+Field+"]");		                     binding.Mode = BindingMode.TwoWay;                     stringToPrimitiveTypeConverter.FieldType = FieldInfo.Type;                     binding.Converter = stringToPrimitiveTypeConverter;                                          // Validates that the value entered into the text box can be                      // converted to the corrected field type without error.                     // if value cannot be converted to the correct type validation                     // error will be triggered based on binding trigger below.                     binding.ValidationRules.Add(new FeatureValidationRule()                     {                         ValidationStep = ValidationStep.ConvertedProposedValue'                         FieldType = FieldInfo.Type'                         Nullable = FieldInfo.Nullable                     });                       if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo))                     {                         binding.ValidationRules.Add(new DynamicRangeDomainValidationRule()                         {                             ValidationStep = ValidationStep.ConvertedProposedValue'                             Field = FieldInfo'                             LayerInfo = LayerInfo'                             Graphic = dataItem as Graphic                         });                     }                      // Build a data trigger to show the validation error i.e. red outline around textbox                     // with message content in tooltip.                     var setterBinding = new Binding("(Validation.Errors)[0].ErrorContent");                     setterBinding.RelativeSource = RelativeSource.Self;                      var setter = new Setter();                     setter.Property = TextBox.ToolTipProperty;                     setter.Value = setterBinding;                                                              var trigger = new Trigger();                     trigger.Property = Validation.HasErrorProperty;                     trigger.Value = true;                     trigger.Setters.Add(setter);                                                            var style = new Style(typeof(TextBox));                                         style.Triggers.Add(trigger);                                                             box.Style = style; #endif  	box.SetBinding (TextBox.TextProperty' binding);  	return box;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The following statement contains a magic number: if (FieldInfo.Type == Client.Field.FieldType.Date) {  	DateTimePicker dtp = new DateTimePicker {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  		DateTimeFormat = this.DateTimeFormat'  		DateTimeKind = this.DateTimeKind'  		Language = cell.Language  	};  	Binding selectedBinding =   	#if SILVERLIGHT  	new Binding (Field);  	#else  					    new Binding("Attributes["+Field+"]"); 					if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo)) 					{ 						selectedBinding.ValidationRules.Add(new DynamicRangeDomainValidationRule() 						{ 							ValidationStep = ValidationStep.ConvertedProposedValue' 							Field = FieldInfo' 							LayerInfo = LayerInfo' 							Graphic = dataItem as Graphic 						}); 					} #endif  	selectedBinding.Mode = BindingMode.TwoWay;  	selectedBinding.ValidatesOnExceptions = true;  	selectedBinding.NotifyOnValidationError = true;  	dtp.SetBinding (DateTimePicker.SelectedDateProperty' selectedBinding);  	return dtp;  } else {  	TextBox box = new TextBox {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  	};  	box.MaxLength = Field.Length;  	Binding binding =   	#if SILVERLIGHT  	new Binding (Field);  	binding.Mode = BindingMode.TwoWay;  	binding.ValidatesOnExceptions = true;  	binding.NotifyOnValidationError = true;  	binding.Converter = emptyStringToNullConverter;  	#else  	                    new Binding("Attributes["+Field+"]");		                     binding.Mode = BindingMode.TwoWay;                     stringToPrimitiveTypeConverter.FieldType = FieldInfo.Type;                     binding.Converter = stringToPrimitiveTypeConverter;                                          // Validates that the value entered into the text box can be                      // converted to the corrected field type without error.                     // if value cannot be converted to the correct type validation                     // error will be triggered based on binding trigger below.                     binding.ValidationRules.Add(new FeatureValidationRule()                     {                         ValidationStep = ValidationStep.ConvertedProposedValue'                         FieldType = FieldInfo.Type'                         Nullable = FieldInfo.Nullable                     });                       if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo))                     {                         binding.ValidationRules.Add(new DynamicRangeDomainValidationRule()                         {                             ValidationStep = ValidationStep.ConvertedProposedValue'                             Field = FieldInfo'                             LayerInfo = LayerInfo'                             Graphic = dataItem as Graphic                         });                     }                      // Build a data trigger to show the validation error i.e. red outline around textbox                     // with message content in tooltip.                     var setterBinding = new Binding("(Validation.Errors)[0].ErrorContent");                     setterBinding.RelativeSource = RelativeSource.Self;                      var setter = new Setter();                     setter.Property = TextBox.ToolTipProperty;                     setter.Value = setterBinding;                                                              var trigger = new Trigger();                     trigger.Property = Validation.HasErrorProperty;                     trigger.Value = true;                     trigger.Setters.Add(setter);                                                            var style = new Style(typeof(TextBox));                                         style.Triggers.Add(trigger);                                                             box.Style = style; #endif  	box.SetBinding (TextBox.TextProperty' binding);  	return box;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,DynamicCodedValueDomainColumn,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\FeatureDataGrid\FeatureDataGrid.cs,GenerateEditingElement,The following statement contains a magic number: if (FieldInfo.Type == Client.Field.FieldType.Date) {  	DateTimePicker dtp = new DateTimePicker {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  		DateTimeFormat = this.DateTimeFormat'  		DateTimeKind = this.DateTimeKind'  		Language = cell.Language  	};  	Binding selectedBinding =   	#if SILVERLIGHT  	new Binding (Field);  	#else  					    new Binding("Attributes["+Field+"]"); 					if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo)) 					{ 						selectedBinding.ValidationRules.Add(new DynamicRangeDomainValidationRule() 						{ 							ValidationStep = ValidationStep.ConvertedProposedValue' 							Field = FieldInfo' 							LayerInfo = LayerInfo' 							Graphic = dataItem as Graphic 						}); 					} #endif  	selectedBinding.Mode = BindingMode.TwoWay;  	selectedBinding.ValidatesOnExceptions = true;  	selectedBinding.NotifyOnValidationError = true;  	dtp.SetBinding (DateTimePicker.SelectedDateProperty' selectedBinding);  	return dtp;  } else {  	TextBox box = new TextBox {  		Margin = new Thickness (4.0)'  		VerticalAlignment = VerticalAlignment.Center'  		VerticalContentAlignment = VerticalAlignment.Center'  	};  	box.MaxLength = Field.Length;  	Binding binding =   	#if SILVERLIGHT  	new Binding (Field);  	binding.Mode = BindingMode.TwoWay;  	binding.ValidatesOnExceptions = true;  	binding.NotifyOnValidationError = true;  	binding.Converter = emptyStringToNullConverter;  	#else  	                    new Binding("Attributes["+Field+"]");		                     binding.Mode = BindingMode.TwoWay;                     stringToPrimitiveTypeConverter.FieldType = FieldInfo.Type;                     binding.Converter = stringToPrimitiveTypeConverter;                                          // Validates that the value entered into the text box can be                      // converted to the corrected field type without error.                     // if value cannot be converted to the correct type validation                     // error will be triggered based on binding trigger below.                     binding.ValidationRules.Add(new FeatureValidationRule()                     {                         ValidationStep = ValidationStep.ConvertedProposedValue'                         FieldType = FieldInfo.Type'                         Nullable = FieldInfo.Nullable                     });                       if (FieldDomainUtils.IsDynamicDomain(FieldInfo' LayerInfo))                     {                         binding.ValidationRules.Add(new DynamicRangeDomainValidationRule()                         {                             ValidationStep = ValidationStep.ConvertedProposedValue'                             Field = FieldInfo'                             LayerInfo = LayerInfo'                             Graphic = dataItem as Graphic                         });                     }                      // Build a data trigger to show the validation error i.e. red outline around textbox                     // with message content in tooltip.                     var setterBinding = new Binding("(Validation.Errors)[0].ErrorContent");                     setterBinding.RelativeSource = RelativeSource.Self;                      var setter = new Setter();                     setter.Property = TextBox.ToolTipProperty;                     setter.Value = setterBinding;                                                              var trigger = new Trigger();                     trigger.Property = Validation.HasErrorProperty;                     trigger.Value = true;                     trigger.Setters.Add(setter);                                                            var style = new Style(typeof(TextBox));                                         style.Triggers.Add(trigger);                                                             box.Style = style; #endif  	box.SetBinding (TextBox.TextProperty' binding);  	return box;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MapProgressBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ProgressBar\ProgressBar.cs,OnApplyTemplate,The following statement contains a magic number: if (isDesignMode) {  	isVisible = true;  	if (bar != null)  		bar.Value = 50;  	if (text != null)  		text.Text = string.Format (Properties.Resources.ProgressBar_ProgressPercentage' 50);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MapProgressBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ProgressBar\ProgressBar.cs,OnApplyTemplate,The following statement contains a magic number: if (isDesignMode) {  	isVisible = true;  	if (bar != null)  		bar.Value = 50;  	if (text != null)  		text.Text = string.Format (Properties.Resources.ProgressBar_ProgressPercentage' 50);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MapProgressBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ProgressBar\ProgressBar.cs,OnApplyTemplate,The following statement contains a magic number: if (bar != null)  	bar.Value = 50;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MapProgressBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ProgressBar\ProgressBar.cs,OnApplyTemplate,The following statement contains a magic number: bar.Value = 50;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MapProgressBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ProgressBar\ProgressBar.cs,OnApplyTemplate,The following statement contains a magic number: if (text != null)  	text.Text = string.Format (Properties.Resources.ProgressBar_ProgressPercentage' 50);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MapProgressBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ProgressBar\ProgressBar.cs,OnApplyTemplate,The following statement contains a magic number: text.Text = string.Format (Properties.Resources.ProgressBar_ProgressPercentage' 50);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,MapProgressBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ProgressBar\ProgressBar.cs,map_Progress,The following statement contains a magic number: isVisible = (e.Progress < 99);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,SetDesignValues,The following statement contains a magic number: if (DesignerProperties.GetIsInDesignMode (this)) {  	// set values for design  	USSize = TargetWidth * 0.8;  	USUnit = ScaleLineUnit.Miles;  	USValue = 5;  	MetricSize = TargetWidth;  	MetricUnit = ScaleLineUnit.Kilometers;  	MetricValue = 10;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,SetDesignValues,The following statement contains a magic number: if (DesignerProperties.GetIsInDesignMode (this)) {  	// set values for design  	USSize = TargetWidth * 0.8;  	USUnit = ScaleLineUnit.Miles;  	USValue = 5;  	MetricSize = TargetWidth;  	MetricUnit = ScaleLineUnit.Kilometers;  	MetricValue = 10;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,SetDesignValues,The following statement contains a magic number: if (DesignerProperties.GetIsInDesignMode (this)) {  	// set values for design  	USSize = TargetWidth * 0.8;  	USUnit = ScaleLineUnit.Miles;  	USValue = 5;  	MetricSize = TargetWidth;  	MetricUnit = ScaleLineUnit.Kilometers;  	MetricValue = 10;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,SetDesignValues,The following statement contains a magic number: USSize = TargetWidth * 0.8;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,SetDesignValues,The following statement contains a magic number: USValue = 5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,SetDesignValues,The following statement contains a magic number: MetricValue = 10;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,RefreshScaleline,The following statement contains a magic number: if (Map == null || double.IsNaN (Map.Resolution) || MapUnit == ScaleLineUnit.DecimalDegrees && Math.Abs (Map.Extent.GetCenter ().Y) >= 90) {  	if (!DesignerProperties.GetIsInDesignMode (this) && _layoutRoot != null)  		_layoutRoot.Visibility = Visibility.Collapsed;  	return;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded < 0.5) {  	resolution = originalRes;  	if (MapUnit == ScaleLineUnit.DecimalDegrees) {  		resolution = GetResolutionForGeographic (Map.Extent.GetCenter ()' resolution);  		resolution = resolution * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (_webMercSref.Equals (Map.SpatialReference)) {  		//WebMercator  		double mercatorStretch = 1 / Math.Cosh (Map.Extent.GetCenter ().Y / earthRadius);  		// = Cos(lat)  		resolution = mercatorStretch * originalRes * (int)ScaleLineUnit.Meters / (int)unit;  	} else if (MapUnit != ScaleLineUnit.Undefined) {  		resolution = resolution * (int)MapUnit / (int)unit;  	}  	double val = TargetWidth * resolution;  	val = RoundToSignificant (val' resolution);  	double noFrac = Math.Round (val);  	// to get rid of the fraction  	if (val < 0.5) {  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	} else if (noFrac > 1) {  		rounded = noFrac;  		var len = noFrac.ToString ("F0").Length;  		// Format F0 prevents from using exponential notation for big numbers  		if (len <= 2) {  			// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  			if (noFrac > 5) {  				rounded -= noFrac % 5;  			}  			while (rounded > 1 && (rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. decrement by 1 or by 5  				double decr = noFrac > 5 ? 5 : 1;  				rounded = rounded - decr;  			}  		} else if (len > 2) {  			rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. use the lower bound instead  				rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  			}  		}  	} else {  		// anything between 0.5 and 1  		rounded = Math.Floor (val);  		if (rounded == 0) {  			//val >= 0.5 but < 1 so round up  			rounded = (val == 0.5) ? 0.5 : 1;  			if ((rounded / resolution) > TargetWidth) {  				// exceeded maxWidth .. re-try by switching to lower unit   				rounded = 0;  				ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  				// Automatically switch unit to a lower one  				if (unit == ScaleLineUnit.Kilometers)  					newUnit = ScaleLineUnit.Meters;  				else if (unit == ScaleLineUnit.Miles)  					newUnit = ScaleLineUnit.Feet;  				if (newUnit == ScaleLineUnit.Undefined) {  					break;  				}  				//no lower unit  				unit = newUnit;  			}  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (val < 0.5) {  	ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  	// Automatically switch unit to a lower one  	if (unit == ScaleLineUnit.Kilometers)  		newUnit = ScaleLineUnit.Meters;  	else if (unit == ScaleLineUnit.Miles)  		newUnit = ScaleLineUnit.Feet;  	if (newUnit == ScaleLineUnit.Undefined) {  		break;  	}  	//no lower unit  	unit = newUnit;  } else if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 1) {  	rounded = noFrac;  	var len = noFrac.ToString ("F0").Length;  	// Format F0 prevents from using exponential notation for big numbers  	if (len <= 2) {  		// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  		if (noFrac > 5) {  			rounded -= noFrac % 5;  		}  		while (rounded > 1 && (rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. decrement by 1 or by 5  			double decr = noFrac > 5 ? 5 : 1;  			rounded = rounded - decr;  		}  	} else if (len > 2) {  		rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. use the lower bound instead  			rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  		}  	}  } else {  	// anything between 0.5 and 1  	rounded = Math.Floor (val);  	if (rounded == 0) {  		//val >= 0.5 but < 1 so round up  		rounded = (val == 0.5) ? 0.5 : 1;  		if ((rounded / resolution) > TargetWidth) {  			// exceeded maxWidth .. re-try by switching to lower unit   			rounded = 0;  			ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  			// Automatically switch unit to a lower one  			if (unit == ScaleLineUnit.Kilometers)  				newUnit = ScaleLineUnit.Meters;  			else if (unit == ScaleLineUnit.Miles)  				newUnit = ScaleLineUnit.Feet;  			if (newUnit == ScaleLineUnit.Undefined) {  				break;  			}  			//no lower unit  			unit = newUnit;  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len <= 2) {  	// single/double digits ... make it a multiple of 5 ..or 1'2'3'4  	if (noFrac > 5) {  		rounded -= noFrac % 5;  	}  	while (rounded > 1 && (rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. decrement by 1 or by 5  		double decr = noFrac > 5 ? 5 : 1;  		rounded = rounded - decr;  	}  } else if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 5) {  	rounded -= noFrac % 5;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (noFrac > 5) {  	rounded -= noFrac % 5;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: rounded -= noFrac % 5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded > 1 && (rounded / resolution) > TargetWidth) {  	// exceeded maxWidth .. decrement by 1 or by 5  	double decr = noFrac > 5 ? 5 : 1;  	rounded = rounded - decr;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: while (rounded > 1 && (rounded / resolution) > TargetWidth) {  	// exceeded maxWidth .. decrement by 1 or by 5  	double decr = noFrac > 5 ? 5 : 1;  	rounded = rounded - decr;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (len > 2) {  	rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. use the lower bound instead  		rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: rounded = Math.Round (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if ((rounded / resolution) > TargetWidth) {  	// exceeded maxWidth .. use the lower bound instead  	rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if ((rounded / resolution) > TargetWidth) {  	// exceeded maxWidth .. use the lower bound instead  	rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: rounded = Math.Floor (noFrac / Math.Pow (10' len - 1)) * Math.Pow (10' len - 1);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (rounded == 0) {  	//val >= 0.5 but < 1 so round up  	rounded = (val == 0.5) ? 0.5 : 1;  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. re-try by switching to lower unit   		rounded = 0;  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: if (rounded == 0) {  	//val >= 0.5 but < 1 so round up  	rounded = (val == 0.5) ? 0.5 : 1;  	if ((rounded / resolution) > TargetWidth) {  		// exceeded maxWidth .. re-try by switching to lower unit   		rounded = 0;  		ScaleLineUnit newUnit = ScaleLineUnit.Undefined;  		// Automatically switch unit to a lower one  		if (unit == ScaleLineUnit.Kilometers)  			newUnit = ScaleLineUnit.Meters;  		else if (unit == ScaleLineUnit.Miles)  			newUnit = ScaleLineUnit.Feet;  		if (newUnit == ScaleLineUnit.Undefined) {  			break;  		}  		//no lower unit  		unit = newUnit;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: rounded = (val == 0.5) ? 0.5 : 1;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetBestEstimateOfValue,The following statement contains a magic number: rounded = (val == 0.5) ? 0.5 : 1;  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,RoundToSignificant,The following statement contains a magic number: if (round > 0) {  	round = Math.Pow (10' round);  	return Math.Round (value * round) / round;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,RoundToSignificant,The following statement contains a magic number: round = Math.Pow (10' round);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,GetResolutionForGeographic,The following statement contains a magic number: if (Math.Abs (y) > 90) {  	return 0;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,InitializeMapUnit,The following statement contains a magic number: if (Map.SpatialReference.WKID == 4326)  	MapUnit = ScaleLineUnit.DecimalDegrees;  else if (_webMercSref.Equals (Map.SpatialReference))  	MapUnit = ScaleLineUnit.Meters;  else {  	Layer layer = Map.Layers == null ? null : Map.Layers.FirstOrDefault (l => l.SpatialReference != null && l.SpatialReference.Equals (Map.SpatialReference));  	string layerUnits;  	if (layer is ArcGISDynamicMapServiceLayer) {  		layerUnits = ((ArcGISDynamicMapServiceLayer)layer).Units;  	} else if (layer is ArcGISTiledMapServiceLayer) {  		layerUnits = ((ArcGISTiledMapServiceLayer)layer).Units;  	} else  		layerUnits = null;  	if (!string.IsNullOrEmpty (layerUnits)) {  		// Remove leading 'esri' to layerUnits  		if (layerUnits.StartsWith ("esri"))  			layerUnits = layerUnits.Substring (4);  		try {  			ScaleLineUnit unit = (ScaleLineUnit)Enum.Parse (typeof(ScaleLineUnit)' layerUnits' true);  			MapUnit = unit;  		} catch (ArgumentException)// layersUnits is not one of the named constants defined for the enumeration  		 {  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,InitializeMapUnit,The following statement contains a magic number: if (Map.SpatialReference.WKID == 4326)  	MapUnit = ScaleLineUnit.DecimalDegrees;  else if (_webMercSref.Equals (Map.SpatialReference))  	MapUnit = ScaleLineUnit.Meters;  else {  	Layer layer = Map.Layers == null ? null : Map.Layers.FirstOrDefault (l => l.SpatialReference != null && l.SpatialReference.Equals (Map.SpatialReference));  	string layerUnits;  	if (layer is ArcGISDynamicMapServiceLayer) {  		layerUnits = ((ArcGISDynamicMapServiceLayer)layer).Units;  	} else if (layer is ArcGISTiledMapServiceLayer) {  		layerUnits = ((ArcGISTiledMapServiceLayer)layer).Units;  	} else  		layerUnits = null;  	if (!string.IsNullOrEmpty (layerUnits)) {  		// Remove leading 'esri' to layerUnits  		if (layerUnits.StartsWith ("esri"))  			layerUnits = layerUnits.Substring (4);  		try {  			ScaleLineUnit unit = (ScaleLineUnit)Enum.Parse (typeof(ScaleLineUnit)' layerUnits' true);  			MapUnit = unit;  		} catch (ArgumentException)// layersUnits is not one of the named constants defined for the enumeration  		 {  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,InitializeMapUnit,The following statement contains a magic number: if (_webMercSref.Equals (Map.SpatialReference))  	MapUnit = ScaleLineUnit.Meters;  else {  	Layer layer = Map.Layers == null ? null : Map.Layers.FirstOrDefault (l => l.SpatialReference != null && l.SpatialReference.Equals (Map.SpatialReference));  	string layerUnits;  	if (layer is ArcGISDynamicMapServiceLayer) {  		layerUnits = ((ArcGISDynamicMapServiceLayer)layer).Units;  	} else if (layer is ArcGISTiledMapServiceLayer) {  		layerUnits = ((ArcGISTiledMapServiceLayer)layer).Units;  	} else  		layerUnits = null;  	if (!string.IsNullOrEmpty (layerUnits)) {  		// Remove leading 'esri' to layerUnits  		if (layerUnits.StartsWith ("esri"))  			layerUnits = layerUnits.Substring (4);  		try {  			ScaleLineUnit unit = (ScaleLineUnit)Enum.Parse (typeof(ScaleLineUnit)' layerUnits' true);  			MapUnit = unit;  		} catch (ArgumentException)// layersUnits is not one of the named constants defined for the enumeration  		 {  		}  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,InitializeMapUnit,The following statement contains a magic number: if (!string.IsNullOrEmpty (layerUnits)) {  	// Remove leading 'esri' to layerUnits  	if (layerUnits.StartsWith ("esri"))  		layerUnits = layerUnits.Substring (4);  	try {  		ScaleLineUnit unit = (ScaleLineUnit)Enum.Parse (typeof(ScaleLineUnit)' layerUnits' true);  		MapUnit = unit;  	} catch (ArgumentException)// layersUnits is not one of the named constants defined for the enumeration  	 {  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,InitializeMapUnit,The following statement contains a magic number: if (layerUnits.StartsWith ("esri"))  	layerUnits = layerUnits.Substring (4);  
Magic Number,ESRI.ArcGIS.Client.Toolkit,ScaleLine,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ScaleLine\ScaleLine.cs,InitializeMapUnit,The following statement contains a magic number: layerUnits = layerUnits.Substring (4);  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,RatioScaleResolution,The following statement contains a magic number: if (isWebMercator) {  	// Transform yCenter from web mercator to decimal degree  	yCenter = Math.Min (Math.Max (yCenter' -20037508.3427892)' 20037508.3427892);  	MapPoint point = new MapPoint (0' yCenter);  	MapPoint geographicPoint = (new WebMercator ()).ToGeographic (point) as MapPoint;  	yCenter = (geographicPoint == null ? 0.0 : geographicPoint.Y);  	ratio = Math.Cos (yCenter * toRadians) * dpi * inchesPerMeter;  } else if (mapUnit == MapUnit.esriDecimalDegrees || mapUnit == MapUnit.esriUnknownUnits) {  	if (Math.Abs (yCenter) > 90)  		ratio = 0.0;  	else  		ratio = Math.Cos (yCenter * toRadians) * degreeDist * dpi * inchesPerMeter;  } else {  	ratio = dpi * (double)mapUnit / (double)MapUnit.esriInches;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,RatioScaleResolution,The following statement contains a magic number: if (isWebMercator) {  	// Transform yCenter from web mercator to decimal degree  	yCenter = Math.Min (Math.Max (yCenter' -20037508.3427892)' 20037508.3427892);  	MapPoint point = new MapPoint (0' yCenter);  	MapPoint geographicPoint = (new WebMercator ()).ToGeographic (point) as MapPoint;  	yCenter = (geographicPoint == null ? 0.0 : geographicPoint.Y);  	ratio = Math.Cos (yCenter * toRadians) * dpi * inchesPerMeter;  } else if (mapUnit == MapUnit.esriDecimalDegrees || mapUnit == MapUnit.esriUnknownUnits) {  	if (Math.Abs (yCenter) > 90)  		ratio = 0.0;  	else  		ratio = Math.Cos (yCenter * toRadians) * degreeDist * dpi * inchesPerMeter;  } else {  	ratio = dpi * (double)mapUnit / (double)MapUnit.esriInches;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,RatioScaleResolution,The following statement contains a magic number: if (isWebMercator) {  	// Transform yCenter from web mercator to decimal degree  	yCenter = Math.Min (Math.Max (yCenter' -20037508.3427892)' 20037508.3427892);  	MapPoint point = new MapPoint (0' yCenter);  	MapPoint geographicPoint = (new WebMercator ()).ToGeographic (point) as MapPoint;  	yCenter = (geographicPoint == null ? 0.0 : geographicPoint.Y);  	ratio = Math.Cos (yCenter * toRadians) * dpi * inchesPerMeter;  } else if (mapUnit == MapUnit.esriDecimalDegrees || mapUnit == MapUnit.esriUnknownUnits) {  	if (Math.Abs (yCenter) > 90)  		ratio = 0.0;  	else  		ratio = Math.Cos (yCenter * toRadians) * degreeDist * dpi * inchesPerMeter;  } else {  	ratio = dpi * (double)mapUnit / (double)MapUnit.esriInches;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,RatioScaleResolution,The following statement contains a magic number: yCenter = Math.Min (Math.Max (yCenter' -20037508.3427892)' 20037508.3427892);  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,RatioScaleResolution,The following statement contains a magic number: yCenter = Math.Min (Math.Max (yCenter' -20037508.3427892)' 20037508.3427892);  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,RatioScaleResolution,The following statement contains a magic number: if (mapUnit == MapUnit.esriDecimalDegrees || mapUnit == MapUnit.esriUnknownUnits) {  	if (Math.Abs (yCenter) > 90)  		ratio = 0.0;  	else  		ratio = Math.Cos (yCenter * toRadians) * degreeDist * dpi * inchesPerMeter;  } else {  	ratio = dpi * (double)mapUnit / (double)MapUnit.esriInches;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,LayerItemViewModel,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Legend\ViewModels\LayerItemViewModel.cs,RatioScaleResolution,The following statement contains a magic number: if (Math.Abs (yCenter) > 90)  	ratio = 0.0;  else  	ratio = Math.Cos (yCenter * toRadians) * degreeDist * dpi * inchesPerMeter;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (Symbol is ESRI.ArcGIS.Client.Symbols.LineSymbol && elm is Path) {  	Path p = elm as Path;  	PathGeometry geom = new PathGeometry ();  	PathFigure figure = new PathFigure () {  		StartPoint = new Point (0' height / 2)  	};  	figure.Segments.Add (new LineSegment () {  		Point = new Point (width' height / 2)  	});  	geom.Figures.Add (figure);  	p.Data = geom;  } else if (Symbol is ESRI.ArcGIS.Client.Symbols.FillSymbol) {  	if (elm is Path)  		(elm as Path).Data = new RectangleGeometry () {  			Rect = new Rect (0' 0' width' height)  		};  	else {  		#if !WINDOWS_PHONE  		if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  			var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  			width = pfs.Width * 5;  			height = pfs.Height * 5;  		}  		#endif  		elm.Width = width;  		elm.Height = height;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (Symbol is ESRI.ArcGIS.Client.Symbols.LineSymbol && elm is Path) {  	Path p = elm as Path;  	PathGeometry geom = new PathGeometry ();  	PathFigure figure = new PathFigure () {  		StartPoint = new Point (0' height / 2)  	};  	figure.Segments.Add (new LineSegment () {  		Point = new Point (width' height / 2)  	});  	geom.Figures.Add (figure);  	p.Data = geom;  } else if (Symbol is ESRI.ArcGIS.Client.Symbols.FillSymbol) {  	if (elm is Path)  		(elm as Path).Data = new RectangleGeometry () {  			Rect = new Rect (0' 0' width' height)  		};  	else {  		#if !WINDOWS_PHONE  		if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  			var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  			width = pfs.Width * 5;  			height = pfs.Height * 5;  		}  		#endif  		elm.Width = width;  		elm.Height = height;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (Symbol is ESRI.ArcGIS.Client.Symbols.LineSymbol && elm is Path) {  	Path p = elm as Path;  	PathGeometry geom = new PathGeometry ();  	PathFigure figure = new PathFigure () {  		StartPoint = new Point (0' height / 2)  	};  	figure.Segments.Add (new LineSegment () {  		Point = new Point (width' height / 2)  	});  	geom.Figures.Add (figure);  	p.Data = geom;  } else if (Symbol is ESRI.ArcGIS.Client.Symbols.FillSymbol) {  	if (elm is Path)  		(elm as Path).Data = new RectangleGeometry () {  			Rect = new Rect (0' 0' width' height)  		};  	else {  		#if !WINDOWS_PHONE  		if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  			var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  			width = pfs.Width * 5;  			height = pfs.Height * 5;  		}  		#endif  		elm.Width = width;  		elm.Height = height;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (Symbol is ESRI.ArcGIS.Client.Symbols.LineSymbol && elm is Path) {  	Path p = elm as Path;  	PathGeometry geom = new PathGeometry ();  	PathFigure figure = new PathFigure () {  		StartPoint = new Point (0' height / 2)  	};  	figure.Segments.Add (new LineSegment () {  		Point = new Point (width' height / 2)  	});  	geom.Figures.Add (figure);  	p.Data = geom;  } else if (Symbol is ESRI.ArcGIS.Client.Symbols.FillSymbol) {  	if (elm is Path)  		(elm as Path).Data = new RectangleGeometry () {  			Rect = new Rect (0' 0' width' height)  		};  	else {  		#if !WINDOWS_PHONE  		if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  			var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  			width = pfs.Width * 5;  			height = pfs.Height * 5;  		}  		#endif  		elm.Width = width;  		elm.Height = height;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: figure.Segments.Add (new LineSegment () {  	Point = new Point (width' height / 2)  });  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (Symbol is ESRI.ArcGIS.Client.Symbols.FillSymbol) {  	if (elm is Path)  		(elm as Path).Data = new RectangleGeometry () {  			Rect = new Rect (0' 0' width' height)  		};  	else {  		#if !WINDOWS_PHONE  		if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  			var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  			width = pfs.Width * 5;  			height = pfs.Height * 5;  		}  		#endif  		elm.Width = width;  		elm.Height = height;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (Symbol is ESRI.ArcGIS.Client.Symbols.FillSymbol) {  	if (elm is Path)  		(elm as Path).Data = new RectangleGeometry () {  			Rect = new Rect (0' 0' width' height)  		};  	else {  		#if !WINDOWS_PHONE  		if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  			var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  			width = pfs.Width * 5;  			height = pfs.Height * 5;  		}  		#endif  		elm.Width = width;  		elm.Height = height;  	}  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (elm is Path)  	(elm as Path).Data = new RectangleGeometry () {  		Rect = new Rect (0' 0' width' height)  	};  else {  	#if !WINDOWS_PHONE  	if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  		var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  		width = pfs.Width * 5;  		height = pfs.Height * 5;  	}  	#endif  	elm.Width = width;  	elm.Height = height;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (elm is Path)  	(elm as Path).Data = new RectangleGeometry () {  		Rect = new Rect (0' 0' width' height)  	};  else {  	#if !WINDOWS_PHONE  	if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  		var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  		width = pfs.Width * 5;  		height = pfs.Height * 5;  	}  	#endif  	elm.Width = width;  	elm.Height = height;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  	var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  	width = pfs.Width * 5;  	height = pfs.Height * 5;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: if (Symbol is FeatureService.Symbols.PictureFillSymbol) {  	var pfs = Symbol as FeatureService.Symbols.PictureFillSymbol;  	width = pfs.Width * 5;  	height = pfs.Height * 5;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: width = pfs.Width * 5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,SymbolPresenter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\SymbolPresenter.cs,SetPath,The following statement contains a magic number: height = pfs.Height * 5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,TickBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\TickBar.cs,ArrangeOverride,The following statement contains a magic number: if (TickMarkPositions == null || TickMarkPositions.Length < 2)  	return finalSize;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,TickBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\TickBar.cs,ArrangeOverride,The following statement contains a magic number: foreach (UIElement child in Children) {  	FrameworkElement c = (child as FrameworkElement);  	if (c == null)  		continue;  	double position = (double)c.GetValue (PositionProperty);  	if (Orientation == Orientation.Horizontal) {  		position = finalSize.Width * position;  		childBounds.X = position - c.DesiredSize.Width * .5;  		childBounds.Width = c.DesiredSize.Width;  	} else {  		position = finalSize.Height * position;  		childBounds.Y = position - c.DesiredSize.Height * .5;  		childBounds.Height = c.DesiredSize.Height;  	}  	child.Arrange (childBounds);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,TickBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\TickBar.cs,ArrangeOverride,The following statement contains a magic number: foreach (UIElement child in Children) {  	FrameworkElement c = (child as FrameworkElement);  	if (c == null)  		continue;  	double position = (double)c.GetValue (PositionProperty);  	if (Orientation == Orientation.Horizontal) {  		position = finalSize.Width * position;  		childBounds.X = position - c.DesiredSize.Width * .5;  		childBounds.Width = c.DesiredSize.Width;  	} else {  		position = finalSize.Height * position;  		childBounds.Y = position - c.DesiredSize.Height * .5;  		childBounds.Height = c.DesiredSize.Height;  	}  	child.Arrange (childBounds);  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,TickBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\TickBar.cs,ArrangeOverride,The following statement contains a magic number: if (Orientation == Orientation.Horizontal) {  	position = finalSize.Width * position;  	childBounds.X = position - c.DesiredSize.Width * .5;  	childBounds.Width = c.DesiredSize.Width;  } else {  	position = finalSize.Height * position;  	childBounds.Y = position - c.DesiredSize.Height * .5;  	childBounds.Height = c.DesiredSize.Height;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,TickBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\TickBar.cs,ArrangeOverride,The following statement contains a magic number: if (Orientation == Orientation.Horizontal) {  	position = finalSize.Width * position;  	childBounds.X = position - c.DesiredSize.Width * .5;  	childBounds.Width = c.DesiredSize.Width;  } else {  	position = finalSize.Height * position;  	childBounds.Y = position - c.DesiredSize.Height * .5;  	childBounds.Height = c.DesiredSize.Height;  }  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,TickBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\TickBar.cs,ArrangeOverride,The following statement contains a magic number: childBounds.X = position - c.DesiredSize.Width * .5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Primitives,TickBar,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Primitives\TickBar.cs,ArrangeOverride,The following statement contains a magic number: childBounds.Y = position - c.DesiredSize.Height * .5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The following statement contains a magic number: if (t == typeof(Int64) || t == typeof(UInt64) || t == typeof(Nullable<Int64>) || t == typeof(Nullable<UInt64>))  	return 2;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The following statement contains a magic number: return 2;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The following statement contains a magic number: if (t == typeof(Decimal) || t == typeof(Nullable<Decimal>))  	return 3;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The following statement contains a magic number: return 3;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The following statement contains a magic number: if (t == typeof(Single) || t == typeof(Nullable<Single>))  	return 4;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The following statement contains a magic number: return 4;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The following statement contains a magic number: if (t == typeof(Double) || t == typeof(Nullable<Double>))  	return 5;  
Magic Number,ESRI.ArcGIS.Client.Toolkit.Utilities,DataSourceCreator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\Utilities\DataSourceCreator.cs,NumericRank,The following statement contains a magic number: return 5;  
Duplicate Code,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The method contains a code clone-set at the following line numbers (starting from the method definition): ((25' 44)' (174' 193))
Duplicate Code,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,BuildBorderPath,The method contains a code clone-set at the following line numbers (starting from the method definition): ((146' 172)' (294' 320))
Missing Default,ESRI.ArcGIS.Client.Toolkit,InfoWindow,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\InfoWindow\InfoWindow.cs,ArrangeOverride,The following switch statement is missing a default case: switch (currentPlacementMode) {  case PlacementMode.Top:  	translate.X = p.X - size.Width * .5;  	translate.Y = p.Y - size.Height - ArrowHeight - CornerRadius;  	RenderTransformOrigin = new Point (0.5' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.Left:  	translate.X = p.X - size.Width - CornerRadius - ArrowHeight;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point ((size.Width + CornerRadius + ArrowHeight) / size.Width' 0.5);  	break;  case PlacementMode.Right:  	translate.X = p.X + ArrowHeight + CornerRadius;  	translate.Y = p.Y - size.Height * .5;  	RenderTransformOrigin = new Point (-(CornerRadius / size.Width)' 0.5);  	break;  case PlacementMode.Bottom:  	translate.X = p.X - (size.Width * .5);  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0.5' -(CornerRadius / size.Height));  	break;  case PlacementMode.BottomRight:  	translate.X = p.X;  	translate.Y = p.Y + ArrowHeight + CornerRadius;  	RenderTransformOrigin = new Point (0' -(CornerRadius / size.Height));  	break;  case PlacementMode.TopRight:  	translate.X = p.X;  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (0' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.TopLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y - (size.Height + ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' sum_Height_CR_AH / size.Height);  	break;  case PlacementMode.BottomLeft:  	translate.X = p.X - (size.Width);  	translate.Y = p.Y + (ArrowHeight + CornerRadius);  	RenderTransformOrigin = new Point (1' -(CornerRadius / size.Height));  	break;  }  
Missing Default,ESRI.ArcGIS.Client.Toolkit.Utilities,RangeDomainValidator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\RangeDomainValidator.cs,ValidateRange,The following switch statement is missing a default case: switch (field.Type) {  case Field.FieldType.Date:  	if (value is DateTime) {  		var dynamicRangeDomains = FieldDomainUtils.BuildDynamicRangeDomain<DateTime> (field' layerInfo);  		if (dynamicRangeDomains != null && typeIdValue != null) {  			var domains = dynamicRangeDomains.Where (kvp => kvp.Key.Equals (typeIdValue));  			if (domains != null && domains.Any ()) {  				var domain = domains.First ().Value;  				if (((DateTime)value) < domain.MinimumValue || ((DateTime)value) > domain.MaximumValue)  					throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  			}  		}  	}  	break;  case Field.FieldType.Double:  	if (value is Double) {  		var dynamicRangeDomains = FieldDomainUtils.BuildDynamicRangeDomain<Double> (field' layerInfo);  		if (dynamicRangeDomains != null && typeIdValue != null) {  			var domains = dynamicRangeDomains.Where (kvp => kvp.Key.Equals (typeIdValue));  			if (domains != null && domains.Any ()) {  				var domain = domains.First ().Value;  				if (((Double)value) < domain.MinimumValue || ((Double)value) > domain.MaximumValue)  					throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  			}  		}  	}  	break;  case Field.FieldType.Integer:  	if (value is Int32) {  		var dynamicRangeDomains = FieldDomainUtils.BuildDynamicRangeDomain<Int32> (field' layerInfo);  		if (dynamicRangeDomains != null && typeIdValue != null) {  			var domains = dynamicRangeDomains.Where (kvp => kvp.Key.Equals (typeIdValue));  			if (domains != null && domains.Any ()) {  				var domain = domains.First ().Value;  				if (((Int32)value) < domain.MinimumValue || ((Int32)value) > domain.MaximumValue)  					throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  			}  		}  	}  	break;  case Field.FieldType.Single:  	if (value is Single) {  		var dynamicRangeDomains = FieldDomainUtils.BuildDynamicRangeDomain<Single> (field' layerInfo);  		if (dynamicRangeDomains != null && typeIdValue != null) {  			var domains = dynamicRangeDomains.Where (kvp => kvp.Key.Equals (typeIdValue));  			if (domains != null && domains.Any ()) {  				var domain = domains.First ().Value;  				if (((Single)value) < domain.MinimumValue || ((Single)value) > domain.MaximumValue)  					throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  			}  		}  	}  	break;  case Field.FieldType.SmallInteger:  	if (value is Int16) {  		var dynamicRangeDomains = FieldDomainUtils.BuildDynamicRangeDomain<Int16> (field' layerInfo);  		if (dynamicRangeDomains != null && typeIdValue != null) {  			var domains = dynamicRangeDomains.Where (kvp => kvp.Key.Equals (typeIdValue));  			if (domains != null && domains.Any ()) {  				var domain = domains.First ().Value;  				if (((Int16)value) < domain.MinimumValue || ((Int16)value) > domain.MaximumValue)  					throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  			}  		}  	}  	break;  }  
Missing Default,ESRI.ArcGIS.Client.Toolkit.Utilities,RangeDomainValidator,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\Utilities\RangeDomainValidator.cs,ValidateRange,The following switch statement is missing a default case: switch (field.Type) {  case Field.FieldType.Date:  	if (value is DateTime && field.Domain is RangeDomain<DateTime>) {  		var domain = (RangeDomain<DateTime>)field.Domain;  		if (((DateTime)value) < domain.MinimumValue || ((DateTime)value) > domain.MaximumValue)  			throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  	}  	break;  case Field.FieldType.Double:  	if (value is Double && field.Domain is RangeDomain<Double>) {  		var domain = (RangeDomain<Double>)field.Domain;  		if (((Double)value) < domain.MinimumValue || ((Double)value) > domain.MaximumValue)  			throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  	}  	break;  case Field.FieldType.Integer:  	if (value is Int32 && field.Domain is RangeDomain<Int32>) {  		var domain = (RangeDomain<Int32>)field.Domain;  		if (((Int32)value) < domain.MinimumValue || ((Int32)value) > domain.MaximumValue)  			throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  	}  	break;  case Field.FieldType.Single:  	if (value is Single && field.Domain is RangeDomain<Single>) {  		var domain = (RangeDomain<Single>)field.Domain;  		if (((Single)value) < domain.MinimumValue || ((Single)value) > domain.MaximumValue)  			throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  	}  	break;  case Field.FieldType.SmallInteger:  	if (value is Int16 && field.Domain is RangeDomain<Int16>) {  		var domain = (RangeDomain<Int16>)field.Domain;  		if (((Int16)value) < domain.MinimumValue || ((Int16)value) > domain.MaximumValue)  			throw new ArgumentException (string.Format (errorMessage' domain.MinimumValue' domain.MaximumValue));  	}  	break;  }  
Missing Default,ESRI.ArcGIS.Client.Toolkit.ValueConverters,DateTimeFormatConverter,F:\newReposMay17\Esri_arcgis-toolkit-sl-wpf\src\Silverlight\API\ESRI.ArcGIS.Client.Toolkit\..\..\..\CommonAPI\API\ESRI.ArcGIS.Client.Toolkit\ValueConverters\DateTimeFormatConverter.cs,DateTimeToString,The following switch statement is missing a default case: switch (kind) {  case System.DateTimeKind.Local:  	dt = dt.ToLocalTime ();  	break;  case System.DateTimeKind.Utc:  	dt = dt.ToUniversalTime ();  	break;  }  
