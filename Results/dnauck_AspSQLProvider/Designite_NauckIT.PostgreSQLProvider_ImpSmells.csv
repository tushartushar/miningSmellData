Implementation smell,Namespace,Class,File,Method,Description
Long Method,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The method has 101 lines of code.
Long Method,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ResetPassword,The method has 109 lines of code.
Long Method,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The method has 131 lines of code.
Long Method,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The method has 114 lines of code.
Long Method,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The method has 111 lines of code.
Long Method,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,InvokeExpireCallbackAndDeleteSession,The method has 109 lines of code.
Complex Method,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,Cyclomatic complexity of the method is 8
Long Parameter List,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Parameter List,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,FindInactiveProfilesByUserName,The method has 6 parameters. Parameters: authenticationOption' usernameToMatch' userInactiveSinceDate' pageIndex' pageSize' totalRecords
Long Parameter List,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,FindProfilesByUserName,The method has 5 parameters. Parameters: authenticationOption' usernameToMatch' pageIndex' pageSize' totalRecords
Long Parameter List,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,GetAllInactiveProfiles,The method has 5 parameters. Parameters: authenticationOption' userInactiveSinceDate' pageIndex' pageSize' totalRecords
Long Parameter List,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetItem,The method has 6 parameters. Parameters: context' id' locked' lockAge' lockId' actions
Long Parameter List,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetItemExclusive,The method has 6 parameters. Parameters: context' id' locked' lockAge' lockId' actions
Long Parameter List,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The method has 5 parameters. Parameters: context' id' item' lockId' newItem
Long Parameter List,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The method has 7 parameters. Parameters: lockRecord' context' id' locked' lockAge' lockId' actionFlags
Long Identifier,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,,The length of the parameter m_minRequiredNonAlphanumericCharacters is 38.
Long Identifier,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,,The length of the parameter m_passwordStrengthRegularExpression is 35.
Long Identifier,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,Initialize,The length of the parameter enableExpiredSessionAutoDeletion is 32.
Long Identifier,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,Initialize,The length of the parameter expiredSessionAutoDeletionInterval is 34.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,The length of the statement  "            m_maxInvalidPasswordAttempts = Convert.ToInt32(GetConfigValue(config["maxInvalidPasswordAttempts"]' "5")' CultureInfo.InvariantCulture);" is 136.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,The length of the statement  "            m_passwordAttemptWindow = Convert.ToInt32(GetConfigValue(config["passwordAttemptWindow"]' "10")' CultureInfo.InvariantCulture);" is 127.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,The length of the statement  "            m_minRequiredNonAlphanumericCharacters = Convert.ToInt32(GetConfigValue(config["minRequiredNonAlphanumericCharacters"]' "1")' CultureInfo.InvariantCulture);" is 156.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,The length of the statement  "            m_minRequiredPasswordLength = Convert.ToInt32(GetConfigValue(config["minRequiredPasswordLength"]' "7")' CultureInfo.InvariantCulture);" is 134.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,The length of the statement  "            m_enablePasswordReset = Convert.ToBoolean(GetConfigValue(config["enablePasswordReset"]' "true")' CultureInfo.InvariantCulture);" is 127.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,The length of the statement  "            m_enablePasswordRetrieval = Convert.ToBoolean(GetConfigValue(config["enablePasswordRetrieval"]' "true")' CultureInfo.InvariantCulture);" is 135.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,The length of the statement  "            m_requiresQuestionAndAnswer = Convert.ToBoolean(GetConfigValue(config["requiresQuestionAndAnswer"]' "false")' CultureInfo.InvariantCulture);" is 140.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,The length of the statement  "            m_requiresUniqueEmail = Convert.ToBoolean(GetConfigValue(config["requiresUniqueEmail"]' "true")' CultureInfo.InvariantCulture);" is 127.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,Initialize,The length of the statement  "                    throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrConfigSectionNotFound' "system.web/machineKey"));" is 145.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ChangePassword,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);" is 259.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ChangePasswordQuestionAndAnswer,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"PasswordQuestion\" = @PasswordQuestion' \"PasswordAnswer\" = @PasswordAnswer WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);" is 257.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The length of the statement  "                        dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"Password\"' \"Email\"' \"PasswordQuestion\"' \"PasswordAnswer\"' \"IsApproved\"' \"CreationDate\"' \"LastPasswordChangedDate\"' \"LastActivityDate\"' \"ApplicationName\"' \"IsLockedOut\"' \"LastLockedOutDate\"' \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\") Values (@pId' @Username' @Password' @Email' @PasswordQuestion' @PasswordAnswer' @IsApproved' @CreationDate' @LastPasswordChangedDate' @LastActivityDate' @ApplicationName' @IsLockedOut' @LastLockedOutDate' @FailedPasswordAttemptCount' @FailedPasswordAttemptWindowStart' @FailedPasswordAnswerAttemptCount' @FailedPasswordAnswerAttemptWindowStart)"' s_tableName);" is 838.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,DeleteUser,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);" is 179.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByEmail,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND  \"ApplicationName\" = @ApplicationName"' s_tableName);" is 186.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByEmail,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);" is 449.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByName,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);" is 192.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByName,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);" is 455.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetAllUsers,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName"' s_tableName);" is 158.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetAllUsers,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);" is 422.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetNumberOfUsersOnline,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"LastActivityDate\" > @CompareTime AND  \"ApplicationName\" = @ApplicationName"' s_tableName);" is 199.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetPassword,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 228.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUser,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 390.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUser,The length of the statement  "                                        dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"pId\" = @pId"' s_tableName);" is 171.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUser,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"pId\" = @pId"' s_tableName);" is 337.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUser,The length of the statement  "                                        dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"pId\" = @pId"' s_tableName);" is 171.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserNameByEmail,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Email\" = @Email AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 185.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ResetPassword,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 214.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ResetPassword,The length of the statement  "                            dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);" is 299.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UnlockUser,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE  \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 253.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateUser,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE  \"{0}\" SET \"Email\" = @Email' \"Comment\" = @Comment' \"IsApproved\" = @IsApproved WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 251.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ValidateUser,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"IsApproved\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);" is 242.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ValidateUser,The length of the statement  "                            dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastLoginDate\" = @LastLoginDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 212.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 329.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The length of the statement  "                                dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 270.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The length of the statement  "                                dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 282.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The length of the statement  "                                dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 252.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The length of the statement  "                                    throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));" is 123.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The length of the statement  "                                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 217.
Long Statement,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The length of the statement  "                                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 223.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,Initialize,The length of the statement  "            m_applicationName = PgMembershipProvider.GetConfigValue(config["applicationName"]' HostingEnvironment.ApplicationVirtualPath);" is 126.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,GetPropertyValues,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Name\"' \"ValueString\"' \"ValueBinary\" FROM \"{0}\" WHERE \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);" is 342.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,GetPropertyValues,The length of the statement  "                        itemValue.PropertyValue = SerializationHelper.DeserializeFromXml<object>((string)databaseResult[item.Name]' s_serializationNamespace);" is 134.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The length of the statement  "                    deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Name\" = @Name AND \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);" is 324.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The length of the statement  "                    insertCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Profile\"' \"Name\"' \"ValueString\"' \"ValueBinary\") VALUES (@pId' (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)' @Name' @ValueString' @ValueBinary)"' s_profileDataTableName' s_profilesTableName);" is 400.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,CreateProfileForUser,The length of the statement  "                throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrProfileAlreadyExist' username));" is 128.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,CreateProfileForUser,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"ApplicationName\"' \"IsAnonymous\"' \"LastActivityDate\"' \"LastUpdatedDate\") Values (@pId' @Username' @ApplicationName' @IsAuthenticated' @LastActivityDate' @LastUpdatedDate)"' s_profilesTableName);" is 315.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,ProfileExists,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_profilesTableName);" is 195.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,UpdateActivityDates,The length of the statement  "                        dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated"' s_profilesTableName);" is 265.
Long Statement,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,UpdateActivityDates,The length of the statement  "                        dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate' \"LastUpdatedDate\" = @LastActivityDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated"' s_profilesTableName);" is 306.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,Initialize,The length of the statement  "            m_applicationName = PgMembershipProvider.GetConfigValue(config["applicationName"]' HostingEnvironment.ApplicationVirtualPath);" is 126.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,AddUsersToRoles,The length of the statement  "                    throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrRoleNotExist' rolename));" is 121.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,AddUsersToRoles,The length of the statement  "                        throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrUserAlreadyInRole' username' rolename));" is 136.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,AddUsersToRoles,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"Username\"' \"Rolename\"' \"ApplicationName\") Values (@Username' @Rolename' @ApplicationName)"' s_userInRolesTableName);" is 213.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,CreateRole,The length of the statement  "                throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrRoleAlreadyExist' roleName));" is 125.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,CreateRole,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"Rolename\"' \"ApplicationName\") Values (@Rolename' @ApplicationName)"' s_rolesTableName);" is 182.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,DeleteRole,The length of the statement  "                throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrRoleNotExist' roleName));" is 121.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,DeleteRole,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_rolesTableName);" is 183.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,FindUsersInRole,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC"' s_userInRolesTableName);" is 261.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,GetAllRoles,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Rolename\" FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName ORDER BY \"Rolename\" ASC"' s_rolesTableName);" is 193.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,GetRolesForUser,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Rolename\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName ORDER BY \"Rolename\" ASC"' s_userInRolesTableName);" is 228.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,GetUsersInRole,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC"' s_userInRolesTableName);" is 228.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,IsUserInRole,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Username\" = @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_userInRolesTableName);" is 227.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,RemoveUsersFromRoles,The length of the statement  "                    throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrRoleNotExist' rolename));" is 121.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,RemoveUsersFromRoles,The length of the statement  "                        throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrUserIsNotInRole' username' rolename));" is 134.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,RemoveUsersFromRoles,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Username\" = @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_userInRolesTableName);" is 218.
Long Statement,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,RoleExists,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_rolesTableName);" is 192.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,Initialize,The length of the statement  "            m_applicationName = PgMembershipProvider.GetConfigValue(config["applicationName"]' HostingEnvironment.ApplicationVirtualPath);" is 126.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,Initialize,The length of the statement  "            bool enableExpiredSessionAutoDeletion = Convert.ToBoolean(PgMembershipProvider.GetConfigValue(config["enableExpiredSessionAutoDeletion"]' "false")' CultureInfo.InvariantCulture);" is 178.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,Initialize,The length of the statement  "            m_enableExpireCallback = Convert.ToBoolean(PgMembershipProvider.GetConfigValue(config["enableSessionExpireCallback"]' "false")' CultureInfo.InvariantCulture);" is 158.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,Initialize,The length of the statement  "            double expiredSessionAutoDeletionInterval = Convert.ToDouble(PgMembershipProvider.GetConfigValue(config["expiredSessionAutoDeletionInterval"]' "1800000")' CultureInfo.InvariantCulture); //default: 30 minutes" is 207.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,CreateNewStoreData,The length of the statement  "            return new SessionStateStoreData(new SessionStateItemCollection()' SessionStateUtility.GetSessionStaticObjects(context)' timeout);" is 130.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,ReleaseItemExclusive,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);" is 249.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,RemoveItem,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);" is 205.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,ResetItemTimeout,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 202.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The length of the statement  "                        delCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 181.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The length of the statement  "                        dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"' s_tableName);" is 351.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The length of the statement  "                        dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked' \"Data\" = @Data WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);" is 267.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetItemExpireCallback,The length of the statement  "            // Accept and store callback if session expire callback is enabled. If not' return false in order to inform SessionStateModule" is 126.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,CreateUninitializedItemTryInsert,The length of the statement  "                                                      "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"'" is 269.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,CreateUninitializedItemTryUpdate,The length of the statement  "                                                      "UPDATE \"{0}\" SET \"Created\" = @Created' \"Expires\" = @Expires' \"Timeout\" = @Timeout' \"Locked\" = @Locked' \"LockId\" = @LockId' \"LockDate\" = @LockDate' \"Data\" = @Data' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"'" is 276.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The length of the statement  "                        dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);" is 275.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The length of the statement  "                        result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));" is 167.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The length of the statement  "                            dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 267.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,InvokeExpireCallbackAndDeleteSession,The length of the statement  "                    selectCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"SessionId\"' \"Data\" FROM \"{0}\" WHERE \"Expires\" < @Expires AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 204.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,InvokeExpireCallbackAndDeleteSession,The length of the statement  "                                expiredSessions.Add(sessionId' new SessionStateStoreData(Deserialize(serializedItems)' new HttpStaticObjectsCollection()' Convert.ToInt32(m_config.Timeout.TotalMinutes)));" is 171.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,InvokeExpireCallbackAndDeleteSession,The length of the statement  "                    deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 184.
Long Statement,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,DeleteExpiredSessionsFromDatabase,The length of the statement  "                    dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Expires\" < @Expires AND \"ApplicationName\" = @ApplicationName"' s_tableName);" is 176.
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ChangePassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 128).Value = EncodePassword(newPassword);                     dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ChangePassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 128).Value = EncodePassword(newPassword);                     dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ChangePassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 128).Value = EncodePassword(newPassword);                     dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ChangePasswordQuestionAndAnswer,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"PasswordQuestion\" = @PasswordQuestion' \"PasswordAnswer\" = @PasswordAnswer WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = newPasswordQuestion;                     dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(newPasswordAnswer);                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ChangePasswordQuestionAndAnswer,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"PasswordQuestion\" = @PasswordQuestion' \"PasswordAnswer\" = @PasswordAnswer WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = newPasswordQuestion;                     dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(newPasswordAnswer);                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ChangePasswordQuestionAndAnswer,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"PasswordQuestion\" = @PasswordQuestion' \"PasswordAnswer\" = @PasswordAnswer WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = newPasswordQuestion;                     dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(newPasswordAnswer);                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ChangePasswordQuestionAndAnswer,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"PasswordQuestion\" = @PasswordQuestion' \"PasswordAnswer\" = @PasswordAnswer WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = newPasswordQuestion;                     dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(newPasswordAnswer);                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The following statement contains a magic number: if (GetUser(username' false) == null)             {                 DateTime createDate = DateTime.Now;                  if (providerUserKey == null)                 {                     providerUserKey = Guid.NewGuid();                 }                 else                 {                     if (!(providerUserKey is Guid))                     {                         status = MembershipCreateStatus.InvalidProviderUserKey;                         return null;                     }                 }                  // Create user in database                 using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))                 {                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"Password\"' \"Email\"' \"PasswordQuestion\"' \"PasswordAnswer\"' \"IsApproved\"' \"CreationDate\"' \"LastPasswordChangedDate\"' \"LastActivityDate\"' \"ApplicationName\"' \"IsLockedOut\"' \"LastLockedOutDate\"' \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\") Values (@pId' @Username' @Password' @Email' @PasswordQuestion' @PasswordAnswer' @IsApproved' @CreationDate' @LastPasswordChangedDate' @LastActivityDate' @ApplicationName' @IsLockedOut' @LastLockedOutDate' @FailedPasswordAttemptCount' @FailedPasswordAttemptWindowStart' @FailedPasswordAnswerAttemptCount' @FailedPasswordAnswerAttemptWindowStart)"' s_tableName);                          dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = providerUserKey;                         dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                         dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(password);                         dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = email;                         dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = passwordQuestion;                         dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(passwordAnswer);                         dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = isApproved;                         dbCommand.Parameters.Add("@CreationDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                          try                         {                             dbConn.Open();                             dbCommand.Prepare();                              if (dbCommand.ExecuteNonQuery() > 0)                             {                                 status = MembershipCreateStatus.Success;                             }                             else                             {                                 status = MembershipCreateStatus.UserRejected;                             }                         }                         catch (NpgsqlException e)                         {                             status = MembershipCreateStatus.ProviderError;                             Trace.WriteLine(e.ToString());                             throw new ProviderException(Properties.Resources.ErrOperationAborted);                         }                         finally                         {                             if (dbConn != null)                                 dbConn.Close();                         }                          return GetUser(username' false);                     }                 }             }             else             {                 status = MembershipCreateStatus.DuplicateUserName;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The following statement contains a magic number: if (GetUser(username' false) == null)             {                 DateTime createDate = DateTime.Now;                  if (providerUserKey == null)                 {                     providerUserKey = Guid.NewGuid();                 }                 else                 {                     if (!(providerUserKey is Guid))                     {                         status = MembershipCreateStatus.InvalidProviderUserKey;                         return null;                     }                 }                  // Create user in database                 using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))                 {                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"Password\"' \"Email\"' \"PasswordQuestion\"' \"PasswordAnswer\"' \"IsApproved\"' \"CreationDate\"' \"LastPasswordChangedDate\"' \"LastActivityDate\"' \"ApplicationName\"' \"IsLockedOut\"' \"LastLockedOutDate\"' \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\") Values (@pId' @Username' @Password' @Email' @PasswordQuestion' @PasswordAnswer' @IsApproved' @CreationDate' @LastPasswordChangedDate' @LastActivityDate' @ApplicationName' @IsLockedOut' @LastLockedOutDate' @FailedPasswordAttemptCount' @FailedPasswordAttemptWindowStart' @FailedPasswordAnswerAttemptCount' @FailedPasswordAnswerAttemptWindowStart)"' s_tableName);                          dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = providerUserKey;                         dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                         dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(password);                         dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = email;                         dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = passwordQuestion;                         dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(passwordAnswer);                         dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = isApproved;                         dbCommand.Parameters.Add("@CreationDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                          try                         {                             dbConn.Open();                             dbCommand.Prepare();                              if (dbCommand.ExecuteNonQuery() > 0)                             {                                 status = MembershipCreateStatus.Success;                             }                             else                             {                                 status = MembershipCreateStatus.UserRejected;                             }                         }                         catch (NpgsqlException e)                         {                             status = MembershipCreateStatus.ProviderError;                             Trace.WriteLine(e.ToString());                             throw new ProviderException(Properties.Resources.ErrOperationAborted);                         }                         finally                         {                             if (dbConn != null)                                 dbConn.Close();                         }                          return GetUser(username' false);                     }                 }             }             else             {                 status = MembershipCreateStatus.DuplicateUserName;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The following statement contains a magic number: if (GetUser(username' false) == null)             {                 DateTime createDate = DateTime.Now;                  if (providerUserKey == null)                 {                     providerUserKey = Guid.NewGuid();                 }                 else                 {                     if (!(providerUserKey is Guid))                     {                         status = MembershipCreateStatus.InvalidProviderUserKey;                         return null;                     }                 }                  // Create user in database                 using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))                 {                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"Password\"' \"Email\"' \"PasswordQuestion\"' \"PasswordAnswer\"' \"IsApproved\"' \"CreationDate\"' \"LastPasswordChangedDate\"' \"LastActivityDate\"' \"ApplicationName\"' \"IsLockedOut\"' \"LastLockedOutDate\"' \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\") Values (@pId' @Username' @Password' @Email' @PasswordQuestion' @PasswordAnswer' @IsApproved' @CreationDate' @LastPasswordChangedDate' @LastActivityDate' @ApplicationName' @IsLockedOut' @LastLockedOutDate' @FailedPasswordAttemptCount' @FailedPasswordAttemptWindowStart' @FailedPasswordAnswerAttemptCount' @FailedPasswordAnswerAttemptWindowStart)"' s_tableName);                          dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = providerUserKey;                         dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                         dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(password);                         dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = email;                         dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = passwordQuestion;                         dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(passwordAnswer);                         dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = isApproved;                         dbCommand.Parameters.Add("@CreationDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                          try                         {                             dbConn.Open();                             dbCommand.Prepare();                              if (dbCommand.ExecuteNonQuery() > 0)                             {                                 status = MembershipCreateStatus.Success;                             }                             else                             {                                 status = MembershipCreateStatus.UserRejected;                             }                         }                         catch (NpgsqlException e)                         {                             status = MembershipCreateStatus.ProviderError;                             Trace.WriteLine(e.ToString());                             throw new ProviderException(Properties.Resources.ErrOperationAborted);                         }                         finally                         {                             if (dbConn != null)                                 dbConn.Close();                         }                          return GetUser(username' false);                     }                 }             }             else             {                 status = MembershipCreateStatus.DuplicateUserName;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The following statement contains a magic number: if (GetUser(username' false) == null)             {                 DateTime createDate = DateTime.Now;                  if (providerUserKey == null)                 {                     providerUserKey = Guid.NewGuid();                 }                 else                 {                     if (!(providerUserKey is Guid))                     {                         status = MembershipCreateStatus.InvalidProviderUserKey;                         return null;                     }                 }                  // Create user in database                 using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))                 {                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"Password\"' \"Email\"' \"PasswordQuestion\"' \"PasswordAnswer\"' \"IsApproved\"' \"CreationDate\"' \"LastPasswordChangedDate\"' \"LastActivityDate\"' \"ApplicationName\"' \"IsLockedOut\"' \"LastLockedOutDate\"' \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\") Values (@pId' @Username' @Password' @Email' @PasswordQuestion' @PasswordAnswer' @IsApproved' @CreationDate' @LastPasswordChangedDate' @LastActivityDate' @ApplicationName' @IsLockedOut' @LastLockedOutDate' @FailedPasswordAttemptCount' @FailedPasswordAttemptWindowStart' @FailedPasswordAnswerAttemptCount' @FailedPasswordAnswerAttemptWindowStart)"' s_tableName);                          dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = providerUserKey;                         dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                         dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(password);                         dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = email;                         dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = passwordQuestion;                         dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(passwordAnswer);                         dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = isApproved;                         dbCommand.Parameters.Add("@CreationDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                          try                         {                             dbConn.Open();                             dbCommand.Prepare();                              if (dbCommand.ExecuteNonQuery() > 0)                             {                                 status = MembershipCreateStatus.Success;                             }                             else                             {                                 status = MembershipCreateStatus.UserRejected;                             }                         }                         catch (NpgsqlException e)                         {                             status = MembershipCreateStatus.ProviderError;                             Trace.WriteLine(e.ToString());                             throw new ProviderException(Properties.Resources.ErrOperationAborted);                         }                         finally                         {                             if (dbConn != null)                                 dbConn.Close();                         }                          return GetUser(username' false);                     }                 }             }             else             {                 status = MembershipCreateStatus.DuplicateUserName;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The following statement contains a magic number: if (GetUser(username' false) == null)             {                 DateTime createDate = DateTime.Now;                  if (providerUserKey == null)                 {                     providerUserKey = Guid.NewGuid();                 }                 else                 {                     if (!(providerUserKey is Guid))                     {                         status = MembershipCreateStatus.InvalidProviderUserKey;                         return null;                     }                 }                  // Create user in database                 using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))                 {                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"Password\"' \"Email\"' \"PasswordQuestion\"' \"PasswordAnswer\"' \"IsApproved\"' \"CreationDate\"' \"LastPasswordChangedDate\"' \"LastActivityDate\"' \"ApplicationName\"' \"IsLockedOut\"' \"LastLockedOutDate\"' \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\") Values (@pId' @Username' @Password' @Email' @PasswordQuestion' @PasswordAnswer' @IsApproved' @CreationDate' @LastPasswordChangedDate' @LastActivityDate' @ApplicationName' @IsLockedOut' @LastLockedOutDate' @FailedPasswordAttemptCount' @FailedPasswordAttemptWindowStart' @FailedPasswordAnswerAttemptCount' @FailedPasswordAnswerAttemptWindowStart)"' s_tableName);                          dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = providerUserKey;                         dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                         dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(password);                         dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = email;                         dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = passwordQuestion;                         dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(passwordAnswer);                         dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = isApproved;                         dbCommand.Parameters.Add("@CreationDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                          try                         {                             dbConn.Open();                             dbCommand.Prepare();                              if (dbCommand.ExecuteNonQuery() > 0)                             {                                 status = MembershipCreateStatus.Success;                             }                             else                             {                                 status = MembershipCreateStatus.UserRejected;                             }                         }                         catch (NpgsqlException e)                         {                             status = MembershipCreateStatus.ProviderError;                             Trace.WriteLine(e.ToString());                             throw new ProviderException(Properties.Resources.ErrOperationAborted);                         }                         finally                         {                             if (dbConn != null)                                 dbConn.Close();                         }                          return GetUser(username' false);                     }                 }             }             else             {                 status = MembershipCreateStatus.DuplicateUserName;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The following statement contains a magic number: if (GetUser(username' false) == null)             {                 DateTime createDate = DateTime.Now;                  if (providerUserKey == null)                 {                     providerUserKey = Guid.NewGuid();                 }                 else                 {                     if (!(providerUserKey is Guid))                     {                         status = MembershipCreateStatus.InvalidProviderUserKey;                         return null;                     }                 }                  // Create user in database                 using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))                 {                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"Password\"' \"Email\"' \"PasswordQuestion\"' \"PasswordAnswer\"' \"IsApproved\"' \"CreationDate\"' \"LastPasswordChangedDate\"' \"LastActivityDate\"' \"ApplicationName\"' \"IsLockedOut\"' \"LastLockedOutDate\"' \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\") Values (@pId' @Username' @Password' @Email' @PasswordQuestion' @PasswordAnswer' @IsApproved' @CreationDate' @LastPasswordChangedDate' @LastActivityDate' @ApplicationName' @IsLockedOut' @LastLockedOutDate' @FailedPasswordAttemptCount' @FailedPasswordAttemptWindowStart' @FailedPasswordAnswerAttemptCount' @FailedPasswordAnswerAttemptWindowStart)"' s_tableName);                          dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = providerUserKey;                         dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                         dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(password);                         dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = email;                         dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = passwordQuestion;                         dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(passwordAnswer);                         dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = isApproved;                         dbCommand.Parameters.Add("@CreationDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                          try                         {                             dbConn.Open();                             dbCommand.Prepare();                              if (dbCommand.ExecuteNonQuery() > 0)                             {                                 status = MembershipCreateStatus.Success;                             }                             else                             {                                 status = MembershipCreateStatus.UserRejected;                             }                         }                         catch (NpgsqlException e)                         {                             status = MembershipCreateStatus.ProviderError;                             Trace.WriteLine(e.ToString());                             throw new ProviderException(Properties.Resources.ErrOperationAborted);                         }                         finally                         {                             if (dbConn != null)                                 dbConn.Close();                         }                          return GetUser(username' false);                     }                 }             }             else             {                 status = MembershipCreateStatus.DuplicateUserName;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,CreateUser,The following statement contains a magic number: if (GetUser(username' false) == null)             {                 DateTime createDate = DateTime.Now;                  if (providerUserKey == null)                 {                     providerUserKey = Guid.NewGuid();                 }                 else                 {                     if (!(providerUserKey is Guid))                     {                         status = MembershipCreateStatus.InvalidProviderUserKey;                         return null;                     }                 }                  // Create user in database                 using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))                 {                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"Password\"' \"Email\"' \"PasswordQuestion\"' \"PasswordAnswer\"' \"IsApproved\"' \"CreationDate\"' \"LastPasswordChangedDate\"' \"LastActivityDate\"' \"ApplicationName\"' \"IsLockedOut\"' \"LastLockedOutDate\"' \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\") Values (@pId' @Username' @Password' @Email' @PasswordQuestion' @PasswordAnswer' @IsApproved' @CreationDate' @LastPasswordChangedDate' @LastActivityDate' @ApplicationName' @IsLockedOut' @LastLockedOutDate' @FailedPasswordAttemptCount' @FailedPasswordAttemptWindowStart' @FailedPasswordAnswerAttemptCount' @FailedPasswordAnswerAttemptWindowStart)"' s_tableName);                          dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = providerUserKey;                         dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                         dbCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(password);                         dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = email;                         dbCommand.Parameters.Add("@PasswordQuestion"' NpgsqlDbType.Varchar' 255).Value = passwordQuestion;                         dbCommand.Parameters.Add("@PasswordAnswer"' NpgsqlDbType.Varchar' 255).Value = EncodePassword(passwordAnswer);                         dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = isApproved;                         dbCommand.Parameters.Add("@CreationDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptCount"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@FailedPasswordAnswerAttemptWindowStart"' NpgsqlDbType.TimestampTZ).Value = createDate;                          try                         {                             dbConn.Open();                             dbCommand.Prepare();                              if (dbCommand.ExecuteNonQuery() > 0)                             {                                 status = MembershipCreateStatus.Success;                             }                             else                             {                                 status = MembershipCreateStatus.UserRejected;                             }                         }                         catch (NpgsqlException e)                         {                             status = MembershipCreateStatus.ProviderError;                             Trace.WriteLine(e.ToString());                             throw new ProviderException(Properties.Resources.ErrOperationAborted);                         }                         finally                         {                             if (dbConn != null)                                 dbConn.Close();                         }                          return GetUser(username' false);                     }                 }             }             else             {                 status = MembershipCreateStatus.DuplicateUserName;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,DeleteUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                          if (deleteAllRelatedData)                         {                             // Process commands to delete all data for the user in the database.                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,DeleteUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Username\" = @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                          if (deleteAllRelatedData)                         {                             // Process commands to delete all data for the user in the database.                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByEmail,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = emailToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = emailToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByEmail,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = emailToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = emailToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByEmail,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = emailToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = emailToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByEmail,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = emailToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Email\" ILIKE @Email AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = emailToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByName,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByName,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByName,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,FindUsersByName,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetAllUsers,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetAllUsers,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Get user count                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out totalRecords))                             return users;                          if (totalRecords <= 0) { return users; }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  // Fetch user from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC LIMIT @MaxCount OFFSET @StartIndex"' s_tableName);                      dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@MaxCount"' NpgsqlDbType.Integer).Value = pageSize;                     dbCommand.Parameters.Add("@StartIndex"' NpgsqlDbType.Integer).Value = pageSize * pageIndex;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 MembershipUser u = GetUserFromReader(reader);                                 users.Add(u);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetNumberOfUsersOnline,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     TimeSpan onlineSpan = new TimeSpan(0' System.Web.Security.Membership.UserIsOnlineTimeWindow' 0);                     DateTime compareTime = DateTime.Now.Subtract(onlineSpan);                      dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"LastActivityDate\" > @CompareTime AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@CompareTime"' NpgsqlDbType.TimestampTZ' 255).Value = compareTime;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          numOnline = (int)dbCommand.ExecuteScalar();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetNumberOfUsersOnline,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     TimeSpan onlineSpan = new TimeSpan(0' System.Web.Security.Membership.UserIsOnlineTimeWindow' 0);                     DateTime compareTime = DateTime.Now.Subtract(onlineSpan);                      dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT Count(*) FROM \"{0}\" WHERE \"LastActivityDate\" > @CompareTime AND  \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@CompareTime"' NpgsqlDbType.TimestampTZ' 255).Value = compareTime;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          numOnline = (int)dbCommand.ExecuteScalar();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetPassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  string password = reader.GetString(0);                                 string passwordAnswer = reader.IsDBNull(1) ? string.Empty : reader.GetString(1);                                 bool isLockedOut = reader.IsDBNull(2) ? false : reader.GetBoolean(2);                                  reader.Close();                                  if (isLockedOut)                                     throw new MembershipPasswordException(Properties.Resources.ErrUserIsLoggedOut);                                  if (m_requiresQuestionAndAnswer && !CheckPassword(answer' passwordAnswer))                                 {                                     UpdateFailureCount(username' FailureType.PasswordAnswer);                                      throw new MembershipPasswordException(Properties.Resources.ErrIncorrectPasswordAnswer);                                 }                                  if (m_passwordFormat == MembershipPasswordFormat.Encrypted)                                 {                                     password = UnEncodePassword(password);                                 }                                  return password;                             }                             else                             {                                 throw new MembershipPasswordException(Properties.Resources.ErrUserNotFound);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetPassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  string password = reader.GetString(0);                                 string passwordAnswer = reader.IsDBNull(1) ? string.Empty : reader.GetString(1);                                 bool isLockedOut = reader.IsDBNull(2) ? false : reader.GetBoolean(2);                                  reader.Close();                                  if (isLockedOut)                                     throw new MembershipPasswordException(Properties.Resources.ErrUserIsLoggedOut);                                  if (m_requiresQuestionAndAnswer && !CheckPassword(answer' passwordAnswer))                                 {                                     UpdateFailureCount(username' FailureType.PasswordAnswer);                                      throw new MembershipPasswordException(Properties.Resources.ErrIncorrectPasswordAnswer);                                 }                                  if (m_passwordFormat == MembershipPasswordFormat.Encrypted)                                 {                                     password = UnEncodePassword(password);                                 }                                  return password;                             }                             else                             {                                 throw new MembershipPasswordException(Properties.Resources.ErrUserNotFound);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetPassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  string password = reader.GetString(0);                                 string passwordAnswer = reader.IsDBNull(1) ? string.Empty : reader.GetString(1);                                 bool isLockedOut = reader.IsDBNull(2) ? false : reader.GetBoolean(2);                                  reader.Close();                                  if (isLockedOut)                                     throw new MembershipPasswordException(Properties.Resources.ErrUserIsLoggedOut);                                  if (m_requiresQuestionAndAnswer && !CheckPassword(answer' passwordAnswer))                                 {                                     UpdateFailureCount(username' FailureType.PasswordAnswer);                                      throw new MembershipPasswordException(Properties.Resources.ErrIncorrectPasswordAnswer);                                 }                                  if (m_passwordFormat == MembershipPasswordFormat.Encrypted)                                 {                                     password = UnEncodePassword(password);                                 }                                  return password;                             }                             else                             {                                 throw new MembershipPasswordException(Properties.Resources.ErrUserNotFound);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetPassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  string password = reader.GetString(0);                                 string passwordAnswer = reader.IsDBNull(1) ? string.Empty : reader.GetString(1);                                 bool isLockedOut = reader.IsDBNull(2) ? false : reader.GetBoolean(2);                                  reader.Close();                                  if (isLockedOut)                                     throw new MembershipPasswordException(Properties.Resources.ErrUserIsLoggedOut);                                  if (m_requiresQuestionAndAnswer && !CheckPassword(answer' passwordAnswer))                                 {                                     UpdateFailureCount(username' FailureType.PasswordAnswer);                                      throw new MembershipPasswordException(Properties.Resources.ErrIncorrectPasswordAnswer);                                 }                                  if (m_passwordFormat == MembershipPasswordFormat.Encrypted)                                 {                                     password = UnEncodePassword(password);                                 }                                  return password;                             }                             else                             {                                 throw new MembershipPasswordException(Properties.Resources.ErrUserNotFound);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                 u = GetUserFromReader(reader);                                 reader.Close();                                  if (userIsOnline)                                 {                                     // Update user online status                                     using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                                     {                                         dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"pId\" = @pId"' s_tableName);                                          dbUpdateCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                         dbUpdateCommand.Parameters.Add("@pId"' NpgsqlDbType.Char' 36).Value = u.ProviderUserKey;                                          dbUpdateCommand.Prepare();                                          dbUpdateCommand.ExecuteNonQuery();                                     }                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                 u = GetUserFromReader(reader);                                 reader.Close();                                  if (userIsOnline)                                 {                                     // Update user online status                                     using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                                     {                                         dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"pId\" = @pId"' s_tableName);                                          dbUpdateCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                         dbUpdateCommand.Parameters.Add("@pId"' NpgsqlDbType.Char' 36).Value = u.ProviderUserKey;                                          dbUpdateCommand.Prepare();                                          dbUpdateCommand.ExecuteNonQuery();                                     }                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                 u = GetUserFromReader(reader);                                 reader.Close();                                  if (userIsOnline)                                 {                                     // Update user online status                                     using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                                     {                                         dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"pId\" = @pId"' s_tableName);                                          dbUpdateCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                         dbUpdateCommand.Parameters.Add("@pId"' NpgsqlDbType.Char' 36).Value = u.ProviderUserKey;                                          dbUpdateCommand.Prepare();                                          dbUpdateCommand.ExecuteNonQuery();                                     }                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"pId\" = @pId"' s_tableName);                      dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Char' 36).Value = providerUserKey;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                 u = GetUserFromReader(reader);                                 reader.Close();                                  if (userIsOnline)                                 {                                     // Update user online status                                     using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                                     {                                         dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"pId\" = @pId"' s_tableName);                                          dbUpdateCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                         dbUpdateCommand.Parameters.Add("@pId"' NpgsqlDbType.Char' 36).Value = u.ProviderUserKey;                                          dbUpdateCommand.Prepare();                                          dbUpdateCommand.ExecuteNonQuery();                                     }                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"pId\"' \"Username\"' \"Email\"' \"PasswordQuestion\"' \"Comment\"' \"IsApproved\"' \"IsLockedOut\"' \"CreationDate\"' \"LastLoginDate\"' \"LastActivityDate\"' \"LastPasswordChangedDate\"' \"LastLockedOutDate\" FROM \"{0}\" WHERE \"pId\" = @pId"' s_tableName);                      dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Char' 36).Value = providerUserKey;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                 u = GetUserFromReader(reader);                                 reader.Close();                                  if (userIsOnline)                                 {                                     // Update user online status                                     using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                                     {                                         dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"pId\" = @pId"' s_tableName);                                          dbUpdateCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                         dbUpdateCommand.Parameters.Add("@pId"' NpgsqlDbType.Char' 36).Value = u.ProviderUserKey;                                          dbUpdateCommand.Prepare();                                          dbUpdateCommand.ExecuteNonQuery();                                     }                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserNameByEmail,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Email\" = @Email AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = email;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          username = (dbCommand.ExecuteScalar() as string) ?? string.Empty;                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserNameByEmail,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Email\" = @Email AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = email;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          username = (dbCommand.ExecuteScalar() as string) ?? string.Empty;                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ResetPassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         string passwordAnswer = string.Empty;                          dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  passwordAnswer = reader.IsDBNull(0) ? string.Empty : reader.GetString(0); ;                                 bool isLockedOut = reader.IsDBNull(1) ? false : reader.GetBoolean(1);                                  reader.Close();                                  if (isLockedOut)                                     throw new MembershipPasswordException(Properties.Resources.ErrUserIsLoggedOut);                                  if (m_requiresQuestionAndAnswer && !CheckPassword(answer' passwordAnswer))                                 {                                     UpdateFailureCount(username' FailureType.PasswordAnswer);                                      throw new MembershipPasswordException(Properties.Resources.ErrIncorrectPasswordAnswer);                                 }                             }                             else                             {                                 throw new MembershipPasswordException(Properties.Resources.ErrUserNotFound);                             }                         }                          // Reset Password                         using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                         {                             dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);                              dbUpdateCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 128).Value = EncodePassword(newPassword);                             dbUpdateCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbUpdateCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbUpdateCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                             dbUpdateCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                              dbUpdateCommand.Prepare();                              rowsAffected = dbUpdateCommand.ExecuteNonQuery();                         }                      }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ResetPassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         string passwordAnswer = string.Empty;                          dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  passwordAnswer = reader.IsDBNull(0) ? string.Empty : reader.GetString(0); ;                                 bool isLockedOut = reader.IsDBNull(1) ? false : reader.GetBoolean(1);                                  reader.Close();                                  if (isLockedOut)                                     throw new MembershipPasswordException(Properties.Resources.ErrUserIsLoggedOut);                                  if (m_requiresQuestionAndAnswer && !CheckPassword(answer' passwordAnswer))                                 {                                     UpdateFailureCount(username' FailureType.PasswordAnswer);                                      throw new MembershipPasswordException(Properties.Resources.ErrIncorrectPasswordAnswer);                                 }                             }                             else                             {                                 throw new MembershipPasswordException(Properties.Resources.ErrUserNotFound);                             }                         }                          // Reset Password                         using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                         {                             dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);                              dbUpdateCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 128).Value = EncodePassword(newPassword);                             dbUpdateCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbUpdateCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbUpdateCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                             dbUpdateCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                              dbUpdateCommand.Prepare();                              rowsAffected = dbUpdateCommand.ExecuteNonQuery();                         }                      }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ResetPassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         string passwordAnswer = string.Empty;                          dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  passwordAnswer = reader.IsDBNull(0) ? string.Empty : reader.GetString(0); ;                                 bool isLockedOut = reader.IsDBNull(1) ? false : reader.GetBoolean(1);                                  reader.Close();                                  if (isLockedOut)                                     throw new MembershipPasswordException(Properties.Resources.ErrUserIsLoggedOut);                                  if (m_requiresQuestionAndAnswer && !CheckPassword(answer' passwordAnswer))                                 {                                     UpdateFailureCount(username' FailureType.PasswordAnswer);                                      throw new MembershipPasswordException(Properties.Resources.ErrIncorrectPasswordAnswer);                                 }                             }                             else                             {                                 throw new MembershipPasswordException(Properties.Resources.ErrUserNotFound);                             }                         }                          // Reset Password                         using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                         {                             dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);                              dbUpdateCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 128).Value = EncodePassword(newPassword);                             dbUpdateCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbUpdateCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbUpdateCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                             dbUpdateCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                              dbUpdateCommand.Prepare();                              rowsAffected = dbUpdateCommand.ExecuteNonQuery();                         }                      }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ResetPassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         string passwordAnswer = string.Empty;                          dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  passwordAnswer = reader.IsDBNull(0) ? string.Empty : reader.GetString(0); ;                                 bool isLockedOut = reader.IsDBNull(1) ? false : reader.GetBoolean(1);                                  reader.Close();                                  if (isLockedOut)                                     throw new MembershipPasswordException(Properties.Resources.ErrUserIsLoggedOut);                                  if (m_requiresQuestionAndAnswer && !CheckPassword(answer' passwordAnswer))                                 {                                     UpdateFailureCount(username' FailureType.PasswordAnswer);                                      throw new MembershipPasswordException(Properties.Resources.ErrIncorrectPasswordAnswer);                                 }                             }                             else                             {                                 throw new MembershipPasswordException(Properties.Resources.ErrUserNotFound);                             }                         }                          // Reset Password                         using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                         {                             dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);                              dbUpdateCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 128).Value = EncodePassword(newPassword);                             dbUpdateCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbUpdateCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbUpdateCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                             dbUpdateCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                              dbUpdateCommand.Prepare();                              rowsAffected = dbUpdateCommand.ExecuteNonQuery();                         }                      }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ResetPassword,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"PasswordAnswer\"' \"IsLockedOut\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         string passwordAnswer = string.Empty;                          dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  passwordAnswer = reader.IsDBNull(0) ? string.Empty : reader.GetString(0); ;                                 bool isLockedOut = reader.IsDBNull(1) ? false : reader.GetBoolean(1);                                  reader.Close();                                  if (isLockedOut)                                     throw new MembershipPasswordException(Properties.Resources.ErrUserIsLoggedOut);                                  if (m_requiresQuestionAndAnswer && !CheckPassword(answer' passwordAnswer))                                 {                                     UpdateFailureCount(username' FailureType.PasswordAnswer);                                      throw new MembershipPasswordException(Properties.Resources.ErrIncorrectPasswordAnswer);                                 }                             }                             else                             {                                 throw new MembershipPasswordException(Properties.Resources.ErrUserNotFound);                             }                         }                          // Reset Password                         using (NpgsqlCommand dbUpdateCommand = dbConn.CreateCommand())                         {                             dbUpdateCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Password\" = @Password' \"LastPasswordChangedDate\" = @LastPasswordChangedDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);                              dbUpdateCommand.Parameters.Add("@Password"' NpgsqlDbType.Varchar' 128).Value = EncodePassword(newPassword);                             dbUpdateCommand.Parameters.Add("@LastPasswordChangedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbUpdateCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbUpdateCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                             dbUpdateCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                              dbUpdateCommand.Prepare();                              rowsAffected = dbUpdateCommand.ExecuteNonQuery();                         }                      }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UnlockUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE  \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                     dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = userName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UnlockUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE  \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                     dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = userName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          rowsAffected = dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE  \"{0}\" SET \"Email\" = @Email' \"Comment\" = @Comment' \"IsApproved\" = @IsApproved WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = user.Email;                     dbCommand.Parameters.Add("@Comment"' NpgsqlDbType.Varchar' 255).Value = user.Comment;                     dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = user.IsApproved;                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = user.UserName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE  \"{0}\" SET \"Email\" = @Email' \"Comment\" = @Comment' \"IsApproved\" = @IsApproved WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = user.Email;                     dbCommand.Parameters.Add("@Comment"' NpgsqlDbType.Varchar' 255).Value = user.Comment;                     dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = user.IsApproved;                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = user.UserName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE  \"{0}\" SET \"Email\" = @Email' \"Comment\" = @Comment' \"IsApproved\" = @IsApproved WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = user.Email;                     dbCommand.Parameters.Add("@Comment"' NpgsqlDbType.Varchar' 255).Value = user.Comment;                     dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = user.IsApproved;                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = user.UserName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE  \"{0}\" SET \"Email\" = @Email' \"Comment\" = @Comment' \"IsApproved\" = @IsApproved WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Email"' NpgsqlDbType.Varchar' 128).Value = user.Email;                     dbCommand.Parameters.Add("@Comment"' NpgsqlDbType.Varchar' 255).Value = user.Comment;                     dbCommand.Parameters.Add("@IsApproved"' NpgsqlDbType.Boolean).Value = user.IsApproved;                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = user.UserName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ValidateUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"IsApproved\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                 dbPassword = reader.GetString(0);                                 dbIsApproved = reader.IsDBNull(1) ? false : reader.GetBoolean(1);                             }                             else                             {                                 return false;                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  if (CheckPassword(password' dbPassword))                 {                     if (dbIsApproved)                     {                         // Update last login date                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastLoginDate\" = @LastLoginDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@LastLoginDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              try                             {                                 dbConn.Open();                                 dbCommand.Prepare();                                  dbCommand.ExecuteNonQuery();                                  return true;                             }                             catch (NpgsqlException e)                             {                                 Trace.WriteLine(e.ToString());                                 throw new ProviderException(Properties.Resources.ErrOperationAborted);                             }                             finally                             {                                 if (dbConn != null)                                     dbConn.Close();                             }                         }                     }                 }                  return false;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ValidateUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"IsApproved\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                 dbPassword = reader.GetString(0);                                 dbIsApproved = reader.IsDBNull(1) ? false : reader.GetBoolean(1);                             }                             else                             {                                 return false;                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  if (CheckPassword(password' dbPassword))                 {                     if (dbIsApproved)                     {                         // Update last login date                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastLoginDate\" = @LastLoginDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@LastLoginDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              try                             {                                 dbConn.Open();                                 dbCommand.Prepare();                                  dbCommand.ExecuteNonQuery();                                  return true;                             }                             catch (NpgsqlException e)                             {                                 Trace.WriteLine(e.ToString());                                 throw new ProviderException(Properties.Resources.ErrOperationAborted);                             }                             finally                             {                                 if (dbConn != null)                                     dbConn.Close();                             }                         }                     }                 }                  return false;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ValidateUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"IsApproved\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                 dbPassword = reader.GetString(0);                                 dbIsApproved = reader.IsDBNull(1) ? false : reader.GetBoolean(1);                             }                             else                             {                                 return false;                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  if (CheckPassword(password' dbPassword))                 {                     if (dbIsApproved)                     {                         // Update last login date                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastLoginDate\" = @LastLoginDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@LastLoginDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              try                             {                                 dbConn.Open();                                 dbCommand.Prepare();                                  dbCommand.ExecuteNonQuery();                                  return true;                             }                             catch (NpgsqlException e)                             {                                 Trace.WriteLine(e.ToString());                                 throw new ProviderException(Properties.Resources.ErrOperationAborted);                             }                             finally                             {                                 if (dbConn != null)                                     dbConn.Close();                             }                         }                     }                 }                  return false;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,ValidateUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Password\"' \"IsApproved\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsLockedOut\" = @IsLockedOut"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = false;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                 dbPassword = reader.GetString(0);                                 dbIsApproved = reader.IsDBNull(1) ? false : reader.GetBoolean(1);                             }                             else                             {                                 return false;                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }                  if (CheckPassword(password' dbPassword))                 {                     if (dbIsApproved)                     {                         // Update last login date                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastLoginDate\" = @LastLoginDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@LastLoginDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              try                             {                                 dbConn.Open();                                 dbCommand.Prepare();                                  dbCommand.ExecuteNonQuery();                                  return true;                             }                             catch (NpgsqlException e)                             {                                 Trace.WriteLine(e.ToString());                                 throw new ProviderException(Properties.Resources.ErrOperationAborted);                             }                             finally                             {                                 if (dbConn != null)                                     dbConn.Close();                             }                         }                     }                 }                  return false;             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: string email = reader.IsDBNull(2) ? string.Empty : reader.GetString(2);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: string email = reader.IsDBNull(2) ? string.Empty : reader.GetString(2);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: string passwordQuestion = reader.IsDBNull(3) ? string.Empty : reader.GetString(3);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: string passwordQuestion = reader.IsDBNull(3) ? string.Empty : reader.GetString(3);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: string comment = reader.IsDBNull(4) ? string.Empty : reader.GetString(4);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: string comment = reader.IsDBNull(4) ? string.Empty : reader.GetString(4);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: bool isApproved = reader.IsDBNull(5) ? false : reader.GetBoolean(5);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: bool isApproved = reader.IsDBNull(5) ? false : reader.GetBoolean(5);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: bool isLockedOut = reader.IsDBNull(6) ? false : reader.GetBoolean(6);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: bool isLockedOut = reader.IsDBNull(6) ? false : reader.GetBoolean(6);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime creationDate = reader.IsDBNull(7) ? DateTime.MinValue : reader.GetDateTime(7);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime creationDate = reader.IsDBNull(7) ? DateTime.MinValue : reader.GetDateTime(7);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastLoginDate = reader.IsDBNull(8) ? DateTime.MinValue : reader.GetDateTime(8);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastLoginDate = reader.IsDBNull(8) ? DateTime.MinValue : reader.GetDateTime(8);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastActivityDate = reader.IsDBNull(9) ? DateTime.MinValue : reader.GetDateTime(9);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastActivityDate = reader.IsDBNull(9) ? DateTime.MinValue : reader.GetDateTime(9);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastPasswordChangedDate = reader.IsDBNull(10) ? DateTime.MinValue : reader.GetDateTime(10);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastPasswordChangedDate = reader.IsDBNull(10) ? DateTime.MinValue : reader.GetDateTime(10);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastLockedOutDate = reader.IsDBNull(11) ? DateTime.MinValue : reader.GetDateTime(11);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,GetUserFromReader,The following statement contains a magic number: DateTime lastLockedOutDate = reader.IsDBNull(11) ? DateTime.MinValue : reader.GetDateTime(11);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,HexToByte,The following statement contains a magic number: byte[] returnBytes = new byte[hexString.Length / 2];
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < returnBytes.Length; i++)                 returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < returnBytes.Length; i++)                 returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < returnBytes.Length; i++)                 returnBytes[i] = Convert.ToByte(hexString.Substring(i * 2' 2)' 16);
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgMembershipProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgMembershipProvider.cs,UpdateFailureCount,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 // Fetch user data from database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"FailedPasswordAttemptCount\"' \"FailedPasswordAttemptWindowStart\"' \"FailedPasswordAnswerAttemptCount\"' \"FailedPasswordAnswerAttemptWindowStart\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 reader.Read();                                  if (failType.Equals(FailureType.Password))                                 {                                     failureCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);                                     windowStart = reader.IsDBNull(1) ? DateTime.MinValue : reader.GetDateTime(1);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     failureCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);                                     windowStart = reader.IsDBNull(3) ? DateTime.MinValue : reader.GetDateTime(3);                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  // Calculate failture count and update database                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     DateTime windowEnd = windowStart.AddMinutes(m_passwordAttemptWindow);                      try                     {                         if (failureCount == 0 || DateTime.Now > windowEnd)                         {                             // First password failure or outside of PasswordAttemptWindow.                              // Start a new password failure count from 1 and a new window starting now.                              if (failType.Equals(FailureType.Password))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count' \"FailedPasswordAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                             else if (failType.Equals(FailureType.PasswordAnswer))                             {                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count' \"FailedPasswordAnswerAttemptWindowStart\" = @WindowStart WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                             }                              dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = 1;                             dbCommand.Parameters.Add("@WindowStart"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              if (dbCommand.ExecuteNonQuery() < 0)                                 throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCountAndWindowStart);                         }                         else                         {                             failureCount++;                              if (failureCount >= m_maxInvalidPasswordAttempts)                             {                                 // Password attempts have exceeded the failure threshold. Lock out                                 // the user.                                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"IsLockedOut\" = @IsLockedOut' \"LastLockedOutDate\" = @LastLockedOutDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                  dbCommand.Parameters.Add("@IsLockedOut"' NpgsqlDbType.Boolean).Value = true;                                 dbCommand.Parameters.Add("@LastLockedOutDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ErrCantLogoutUser' username));                             }                             else                             {                                 // Password attempts have not exceeded the failure threshold. Update                                 // the failure counts. Leave the window the same.                                 if (failType.Equals(FailureType.Password))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                 else if (failType.Equals(FailureType.PasswordAnswer))                                 {                                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"FailedPasswordAnswerAttemptCount\" = @Count WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_tableName);                                 }                                  dbCommand.Parameters.Add("@Count"' NpgsqlDbType.Integer).Value = failureCount;                                 dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                                  if (dbCommand.ExecuteNonQuery() < 0)                                     throw new ProviderException(Properties.Resources.ErrCantUpdateFailtureCount);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,GetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Name\"' \"ValueString\"' \"ValueBinary\" FROM \"{0}\" WHERE \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 object resultData = null;                                 if (!reader.IsDBNull(1))                                     resultData = reader.GetValue(1);                                 else if (!reader.IsDBNull(2))                                     resultData = reader.GetValue(2);                                  databaseResult.Add(reader.GetString(0)' resultData);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,GetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Name\"' \"ValueString\"' \"ValueBinary\" FROM \"{0}\" WHERE \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 object resultData = null;                                 if (!reader.IsDBNull(1))                                     resultData = reader.GetValue(1);                                 else if (!reader.IsDBNull(2))                                     resultData = reader.GetValue(2);                                  databaseResult.Add(reader.GetString(0)' resultData);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,GetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Name\"' \"ValueString\"' \"ValueBinary\" FROM \"{0}\" WHERE \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 object resultData = null;                                 if (!reader.IsDBNull(1))                                     resultData = reader.GetValue(1);                                 else if (!reader.IsDBNull(2))                                     resultData = reader.GetValue(2);                                  databaseResult.Add(reader.GetString(0)' resultData);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,GetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Name\"' \"ValueString\"' \"ValueBinary\" FROM \"{0}\" WHERE \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 object resultData = null;                                 if (!reader.IsDBNull(1))                                     resultData = reader.GetValue(1);                                 else if (!reader.IsDBNull(2))                                     resultData = reader.GetValue(2);                                  databaseResult.Add(reader.GetString(0)' resultData);                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand deleteCommand = dbConn.CreateCommand()'                     insertCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Name\" = @Name AND \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      deleteCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     deleteCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     deleteCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                       insertCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Profile\"' \"Name\"' \"ValueString\"' \"ValueBinary\") VALUES (@pId' (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)' @Name' @ValueString' @ValueBinary)"' s_profileDataTableName' s_profilesTableName);                      insertCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36);                     insertCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     insertCommand.Parameters.Add("@ValueString"' NpgsqlDbType.Text);                     insertCommand.Parameters["@ValueString"].IsNullable = true;                     insertCommand.Parameters.Add("@ValueBinary"' NpgsqlDbType.Bytea);                     insertCommand.Parameters["@ValueBinary"].IsNullable = true;                     insertCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     insertCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     insertCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         deleteCommand.Prepare();                         insertCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                              foreach (SettingsPropertyValue item in collection)                             {                                 if (!item.IsDirty)                                     continue;                                  deleteCommand.Parameters["@Name"].Value = item.Name;                                  insertCommand.Parameters["@pId"].Value = Guid.NewGuid().ToString();                                 insertCommand.Parameters["@Name"].Value = item.Name;                                  if (item.Property.SerializeAs == SettingsSerializeAs.String)                                 {                                     insertCommand.Parameters["@ValueString"].Value = SerializationHelper.SerializeToBase64(item.PropertyValue);                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Xml)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToXml<object>(item.PropertyValue' s_serializationNamespace);                                     insertCommand.Parameters["@ValueString"].Value = item.SerializedValue;                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Binary)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToBinary(item.PropertyValue);                                     insertCommand.Parameters["@ValueString"].Value = DBNull.Value;                                     insertCommand.Parameters["@ValueBinary"].Value = item.SerializedValue;                                 }                                  deleteCommand.ExecuteNonQuery();                                 insertCommand.ExecuteNonQuery();                             }                              // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand deleteCommand = dbConn.CreateCommand()'                     insertCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Name\" = @Name AND \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      deleteCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     deleteCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     deleteCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                       insertCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Profile\"' \"Name\"' \"ValueString\"' \"ValueBinary\") VALUES (@pId' (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)' @Name' @ValueString' @ValueBinary)"' s_profileDataTableName' s_profilesTableName);                      insertCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36);                     insertCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     insertCommand.Parameters.Add("@ValueString"' NpgsqlDbType.Text);                     insertCommand.Parameters["@ValueString"].IsNullable = true;                     insertCommand.Parameters.Add("@ValueBinary"' NpgsqlDbType.Bytea);                     insertCommand.Parameters["@ValueBinary"].IsNullable = true;                     insertCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     insertCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     insertCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         deleteCommand.Prepare();                         insertCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                              foreach (SettingsPropertyValue item in collection)                             {                                 if (!item.IsDirty)                                     continue;                                  deleteCommand.Parameters["@Name"].Value = item.Name;                                  insertCommand.Parameters["@pId"].Value = Guid.NewGuid().ToString();                                 insertCommand.Parameters["@Name"].Value = item.Name;                                  if (item.Property.SerializeAs == SettingsSerializeAs.String)                                 {                                     insertCommand.Parameters["@ValueString"].Value = SerializationHelper.SerializeToBase64(item.PropertyValue);                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Xml)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToXml<object>(item.PropertyValue' s_serializationNamespace);                                     insertCommand.Parameters["@ValueString"].Value = item.SerializedValue;                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Binary)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToBinary(item.PropertyValue);                                     insertCommand.Parameters["@ValueString"].Value = DBNull.Value;                                     insertCommand.Parameters["@ValueBinary"].Value = item.SerializedValue;                                 }                                  deleteCommand.ExecuteNonQuery();                                 insertCommand.ExecuteNonQuery();                             }                              // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand deleteCommand = dbConn.CreateCommand()'                     insertCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Name\" = @Name AND \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      deleteCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     deleteCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     deleteCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                       insertCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Profile\"' \"Name\"' \"ValueString\"' \"ValueBinary\") VALUES (@pId' (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)' @Name' @ValueString' @ValueBinary)"' s_profileDataTableName' s_profilesTableName);                      insertCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36);                     insertCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     insertCommand.Parameters.Add("@ValueString"' NpgsqlDbType.Text);                     insertCommand.Parameters["@ValueString"].IsNullable = true;                     insertCommand.Parameters.Add("@ValueBinary"' NpgsqlDbType.Bytea);                     insertCommand.Parameters["@ValueBinary"].IsNullable = true;                     insertCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     insertCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     insertCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         deleteCommand.Prepare();                         insertCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                              foreach (SettingsPropertyValue item in collection)                             {                                 if (!item.IsDirty)                                     continue;                                  deleteCommand.Parameters["@Name"].Value = item.Name;                                  insertCommand.Parameters["@pId"].Value = Guid.NewGuid().ToString();                                 insertCommand.Parameters["@Name"].Value = item.Name;                                  if (item.Property.SerializeAs == SettingsSerializeAs.String)                                 {                                     insertCommand.Parameters["@ValueString"].Value = SerializationHelper.SerializeToBase64(item.PropertyValue);                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Xml)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToXml<object>(item.PropertyValue' s_serializationNamespace);                                     insertCommand.Parameters["@ValueString"].Value = item.SerializedValue;                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Binary)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToBinary(item.PropertyValue);                                     insertCommand.Parameters["@ValueString"].Value = DBNull.Value;                                     insertCommand.Parameters["@ValueBinary"].Value = item.SerializedValue;                                 }                                  deleteCommand.ExecuteNonQuery();                                 insertCommand.ExecuteNonQuery();                             }                              // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand deleteCommand = dbConn.CreateCommand()'                     insertCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Name\" = @Name AND \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      deleteCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     deleteCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     deleteCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                       insertCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Profile\"' \"Name\"' \"ValueString\"' \"ValueBinary\") VALUES (@pId' (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)' @Name' @ValueString' @ValueBinary)"' s_profileDataTableName' s_profilesTableName);                      insertCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36);                     insertCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     insertCommand.Parameters.Add("@ValueString"' NpgsqlDbType.Text);                     insertCommand.Parameters["@ValueString"].IsNullable = true;                     insertCommand.Parameters.Add("@ValueBinary"' NpgsqlDbType.Bytea);                     insertCommand.Parameters["@ValueBinary"].IsNullable = true;                     insertCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     insertCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     insertCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         deleteCommand.Prepare();                         insertCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                              foreach (SettingsPropertyValue item in collection)                             {                                 if (!item.IsDirty)                                     continue;                                  deleteCommand.Parameters["@Name"].Value = item.Name;                                  insertCommand.Parameters["@pId"].Value = Guid.NewGuid().ToString();                                 insertCommand.Parameters["@Name"].Value = item.Name;                                  if (item.Property.SerializeAs == SettingsSerializeAs.String)                                 {                                     insertCommand.Parameters["@ValueString"].Value = SerializationHelper.SerializeToBase64(item.PropertyValue);                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Xml)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToXml<object>(item.PropertyValue' s_serializationNamespace);                                     insertCommand.Parameters["@ValueString"].Value = item.SerializedValue;                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Binary)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToBinary(item.PropertyValue);                                     insertCommand.Parameters["@ValueString"].Value = DBNull.Value;                                     insertCommand.Parameters["@ValueBinary"].Value = item.SerializedValue;                                 }                                  deleteCommand.ExecuteNonQuery();                                 insertCommand.ExecuteNonQuery();                             }                              // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand deleteCommand = dbConn.CreateCommand()'                     insertCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Name\" = @Name AND \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      deleteCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     deleteCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     deleteCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                       insertCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Profile\"' \"Name\"' \"ValueString\"' \"ValueBinary\") VALUES (@pId' (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)' @Name' @ValueString' @ValueBinary)"' s_profileDataTableName' s_profilesTableName);                      insertCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36);                     insertCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     insertCommand.Parameters.Add("@ValueString"' NpgsqlDbType.Text);                     insertCommand.Parameters["@ValueString"].IsNullable = true;                     insertCommand.Parameters.Add("@ValueBinary"' NpgsqlDbType.Bytea);                     insertCommand.Parameters["@ValueBinary"].IsNullable = true;                     insertCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     insertCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     insertCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         deleteCommand.Prepare();                         insertCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                              foreach (SettingsPropertyValue item in collection)                             {                                 if (!item.IsDirty)                                     continue;                                  deleteCommand.Parameters["@Name"].Value = item.Name;                                  insertCommand.Parameters["@pId"].Value = Guid.NewGuid().ToString();                                 insertCommand.Parameters["@Name"].Value = item.Name;                                  if (item.Property.SerializeAs == SettingsSerializeAs.String)                                 {                                     insertCommand.Parameters["@ValueString"].Value = SerializationHelper.SerializeToBase64(item.PropertyValue);                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Xml)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToXml<object>(item.PropertyValue' s_serializationNamespace);                                     insertCommand.Parameters["@ValueString"].Value = item.SerializedValue;                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Binary)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToBinary(item.PropertyValue);                                     insertCommand.Parameters["@ValueString"].Value = DBNull.Value;                                     insertCommand.Parameters["@ValueBinary"].Value = item.SerializedValue;                                 }                                  deleteCommand.ExecuteNonQuery();                                 insertCommand.ExecuteNonQuery();                             }                              // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand deleteCommand = dbConn.CreateCommand()'                     insertCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Name\" = @Name AND \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      deleteCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     deleteCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     deleteCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                       insertCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Profile\"' \"Name\"' \"ValueString\"' \"ValueBinary\") VALUES (@pId' (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)' @Name' @ValueString' @ValueBinary)"' s_profileDataTableName' s_profilesTableName);                      insertCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36);                     insertCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     insertCommand.Parameters.Add("@ValueString"' NpgsqlDbType.Text);                     insertCommand.Parameters["@ValueString"].IsNullable = true;                     insertCommand.Parameters.Add("@ValueBinary"' NpgsqlDbType.Bytea);                     insertCommand.Parameters["@ValueBinary"].IsNullable = true;                     insertCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     insertCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     insertCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         deleteCommand.Prepare();                         insertCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                              foreach (SettingsPropertyValue item in collection)                             {                                 if (!item.IsDirty)                                     continue;                                  deleteCommand.Parameters["@Name"].Value = item.Name;                                  insertCommand.Parameters["@pId"].Value = Guid.NewGuid().ToString();                                 insertCommand.Parameters["@Name"].Value = item.Name;                                  if (item.Property.SerializeAs == SettingsSerializeAs.String)                                 {                                     insertCommand.Parameters["@ValueString"].Value = SerializationHelper.SerializeToBase64(item.PropertyValue);                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Xml)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToXml<object>(item.PropertyValue' s_serializationNamespace);                                     insertCommand.Parameters["@ValueString"].Value = item.SerializedValue;                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Binary)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToBinary(item.PropertyValue);                                     insertCommand.Parameters["@ValueString"].Value = DBNull.Value;                                     insertCommand.Parameters["@ValueBinary"].Value = item.SerializedValue;                                 }                                  deleteCommand.ExecuteNonQuery();                                 insertCommand.ExecuteNonQuery();                             }                              // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,SetPropertyValues,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand deleteCommand = dbConn.CreateCommand()'                     insertCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Name\" = @Name AND \"Profile\" = (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)"' s_profileDataTableName' s_profilesTableName);                      deleteCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     deleteCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     deleteCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                       insertCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Profile\"' \"Name\"' \"ValueString\"' \"ValueBinary\") VALUES (@pId' (SELECT \"pId\" FROM \"{1}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated)' @Name' @ValueString' @ValueBinary)"' s_profileDataTableName' s_profilesTableName);                      insertCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36);                     insertCommand.Parameters.Add("@Name"' NpgsqlDbType.Varchar' 255);                     insertCommand.Parameters.Add("@ValueString"' NpgsqlDbType.Text);                     insertCommand.Parameters["@ValueString"].IsNullable = true;                     insertCommand.Parameters.Add("@ValueBinary"' NpgsqlDbType.Bytea);                     insertCommand.Parameters["@ValueBinary"].IsNullable = true;                     insertCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     insertCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     insertCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         deleteCommand.Prepare();                         insertCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                              foreach (SettingsPropertyValue item in collection)                             {                                 if (!item.IsDirty)                                     continue;                                  deleteCommand.Parameters["@Name"].Value = item.Name;                                  insertCommand.Parameters["@pId"].Value = Guid.NewGuid().ToString();                                 insertCommand.Parameters["@Name"].Value = item.Name;                                  if (item.Property.SerializeAs == SettingsSerializeAs.String)                                 {                                     insertCommand.Parameters["@ValueString"].Value = SerializationHelper.SerializeToBase64(item.PropertyValue);                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Xml)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToXml<object>(item.PropertyValue' s_serializationNamespace);                                     insertCommand.Parameters["@ValueString"].Value = item.SerializedValue;                                     insertCommand.Parameters["@ValueBinary"].Value = DBNull.Value;                                 }                                 else if (item.Property.SerializeAs == SettingsSerializeAs.Binary)                                 {                                     item.SerializedValue = SerializationHelper.SerializeToBinary(item.PropertyValue);                                     insertCommand.Parameters["@ValueString"].Value = DBNull.Value;                                     insertCommand.Parameters["@ValueBinary"].Value = item.SerializedValue;                                 }                                  deleteCommand.ExecuteNonQuery();                                 insertCommand.ExecuteNonQuery();                             }                              // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,CreateProfileForUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"ApplicationName\"' \"IsAnonymous\"' \"LastActivityDate\"' \"LastUpdatedDate\") Values (@pId' @Username' @ApplicationName' @IsAuthenticated' @LastActivityDate' @LastUpdatedDate)"' s_profilesTableName);                      dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = Guid.NewGuid().ToString();                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                     dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     dbCommand.Parameters.Add("@LastUpdatedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,CreateProfileForUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"ApplicationName\"' \"IsAnonymous\"' \"LastActivityDate\"' \"LastUpdatedDate\") Values (@pId' @Username' @ApplicationName' @IsAuthenticated' @LastActivityDate' @LastUpdatedDate)"' s_profilesTableName);                      dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = Guid.NewGuid().ToString();                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                     dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     dbCommand.Parameters.Add("@LastUpdatedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,CreateProfileForUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"pId\"' \"Username\"' \"ApplicationName\"' \"IsAnonymous\"' \"LastActivityDate\"' \"LastUpdatedDate\") Values (@pId' @Username' @ApplicationName' @IsAuthenticated' @LastActivityDate' @LastUpdatedDate)"' s_profilesTableName);                      dbCommand.Parameters.Add("@pId"' NpgsqlDbType.Varchar' 36).Value = Guid.NewGuid().ToString();                     dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                     dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     dbCommand.Parameters.Add("@LastUpdatedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,ProfileExists,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_profilesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          int numRecs = 0;                         if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out numRecs))                             return false;                          if (numRecs > 0)                             return true;                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,ProfileExists,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName"' s_profilesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          int numRecs = 0;                         if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out numRecs))                             return false;                          if (numRecs > 0)                             return true;                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,UpdateActivityDates,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     if (activityOnly)                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated"' s_profilesTableName);                          dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     }                     else                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate' \"LastUpdatedDate\" = @LastActivityDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated"' s_profilesTableName);                          dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         //dbCommand.Parameters.Add("@LastUpdatedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     }                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgProfileProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgProfileProvider.cs,UpdateActivityDates,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     if (activityOnly)                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated"' s_profilesTableName);                          dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     }                     else                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"LastActivityDate\" = @LastActivityDate' \"LastUpdatedDate\" = @LastActivityDate WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName AND \"IsAnonymous\" = @IsAuthenticated"' s_profilesTableName);                          dbCommand.Parameters.Add("@LastActivityDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         //dbCommand.Parameters.Add("@LastUpdatedDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     }                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@IsAuthenticated"' NpgsqlDbType.Boolean).Value = !isAuthenticated;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,AddUsersToRoles,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"Username\"' \"Rolename\"' \"ApplicationName\") Values (@Username' @Rolename' @ApplicationName)"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                             foreach (string username in usernames)                             {                                 foreach (string rolename in roleNames)                                 {                                     dbCommand.Parameters["@Username"].Value = username;                                     dbCommand.Parameters["@Rolename"].Value = rolename;                                     dbCommand.ExecuteNonQuery();                                 }                             }                             // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,AddUsersToRoles,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"Username\"' \"Rolename\"' \"ApplicationName\") Values (@Username' @Rolename' @ApplicationName)"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                             foreach (string username in usernames)                             {                                 foreach (string rolename in roleNames)                                 {                                     dbCommand.Parameters["@Username"].Value = username;                                     dbCommand.Parameters["@Rolename"].Value = rolename;                                     dbCommand.ExecuteNonQuery();                                 }                             }                             // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,AddUsersToRoles,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"Username\"' \"Rolename\"' \"ApplicationName\") Values (@Username' @Rolename' @ApplicationName)"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                             foreach (string username in usernames)                             {                                 foreach (string rolename in roleNames)                                 {                                     dbCommand.Parameters["@Username"].Value = username;                                     dbCommand.Parameters["@Rolename"].Value = rolename;                                     dbCommand.ExecuteNonQuery();                                 }                             }                             // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,CreateRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"Rolename\"' \"ApplicationName\") Values (@Rolename' @ApplicationName)"' s_rolesTableName);                      dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,CreateRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"Rolename\"' \"ApplicationName\") Values (@Rolename' @ApplicationName)"' s_rolesTableName);                      dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbCommand.ExecuteNonQuery();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,DeleteRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_rolesTableName);                      dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                             dbCommand.ExecuteNonQuery();                              // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,DeleteRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_rolesTableName);                      dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                             dbCommand.ExecuteNonQuery();                              // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,FindUsersInRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 while (reader.Read())                                 {                                     userList.Add(reader.GetString(0));                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,FindUsersInRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 while (reader.Read())                                 {                                     userList.Add(reader.GetString(0));                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,FindUsersInRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Username\" ILIKE @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = usernameToMatch;                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 while (reader.Read())                                 {                                     userList.Add(reader.GetString(0));                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,GetAllRoles,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Rolename\" FROM \"{0}\" WHERE \"ApplicationName\" = @ApplicationName ORDER BY \"Rolename\" ASC"' s_rolesTableName);                      dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             while (reader.Read())                             {                                 rolesList.Add(reader.GetString(0));                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,GetRolesForUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Rolename\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName ORDER BY \"Rolename\" ASC"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 while (reader.Read())                                 {                                     rolesList.Add(reader.GetString(0));                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,GetRolesForUser,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Rolename\" FROM \"{0}\" WHERE \"Username\" = @Username AND \"ApplicationName\" = @ApplicationName ORDER BY \"Rolename\" ASC"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 while (reader.Read())                                 {                                     rolesList.Add(reader.GetString(0));                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,GetUsersInRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 while (reader.Read())                                 {                                     userList.Add(reader.GetString(0));                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,GetUsersInRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Username\" FROM \"{0}\" WHERE \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName ORDER BY \"Username\" ASC"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader())                         {                             if (reader.HasRows)                             {                                 while (reader.Read())                                 {                                     userList.Add(reader.GetString(0));                                 }                             }                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,IsUserInRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Username\" = @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          int numRecs = 0;                         if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out numRecs))                             return false;                          if (numRecs > 0)                             return true;                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,IsUserInRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Username\" = @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          int numRecs = 0;                         if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out numRecs))                             return false;                          if (numRecs > 0)                             return true;                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,IsUserInRole,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Username\" = @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255).Value = username;                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          int numRecs = 0;                         if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out numRecs))                             return false;                          if (numRecs > 0)                             return true;                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,RemoveUsersFromRoles,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Username\" = @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                             foreach (string username in usernames)                             {                                 foreach (string rolename in roleNames)                                 {                                     dbCommand.Parameters["@Username"].Value = username;                                     dbCommand.Parameters["@Rolename"].Value = rolename;                                     dbCommand.ExecuteNonQuery();                                 }                             }                             // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,RemoveUsersFromRoles,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Username\" = @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                             foreach (string username in usernames)                             {                                 foreach (string rolename in roleNames)                                 {                                     dbCommand.Parameters["@Username"].Value = username;                                     dbCommand.Parameters["@Rolename"].Value = rolename;                                     dbCommand.ExecuteNonQuery();                                 }                             }                             // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,RemoveUsersFromRoles,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Username\" = @Username AND \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_userInRolesTableName);                      dbCommand.Parameters.Add("@Username"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255);                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          using (dbTrans = dbConn.BeginTransaction())                         {                             foreach (string username in usernames)                             {                                 foreach (string rolename in roleNames)                                 {                                     dbCommand.Parameters["@Username"].Value = username;                                     dbCommand.Parameters["@Rolename"].Value = rolename;                                     dbCommand.ExecuteNonQuery();                                 }                             }                             // Attempt to commit the transaction                             dbTrans.Commit();                         }                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,RoleExists,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_rolesTableName);                      dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          int numRecs = 0;                         if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out numRecs))                             return false;                          if (numRecs > 0)                             return true;                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgRoleProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgRoleProvider.cs,RoleExists,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT COUNT(*) FROM \"{0}\" WHERE \"Rolename\" = @Rolename AND \"ApplicationName\" = @ApplicationName"' s_rolesTableName);                      dbCommand.Parameters.Add("@Rolename"' NpgsqlDbType.Varchar' 255).Value = roleName;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          int numRecs = 0;                         if (!Int32.TryParse(dbCommand.ExecuteScalar().ToString()' out numRecs))                             return false;                          if (numRecs > 0)                             return true;                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                         throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,CreateUninitializedItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 try                 {                     dbConn.Open();                      /*                       * Bug #16: CreateUninitializedItem(...) throws ProviderException / duplicate key violation                      * Url: http://dev.nauck-it.de/issues/show/16                      *                       * PostgreSQL is missing a InsertOrUpdate method so                      * try to insert first. If the insert failed due an already existing session id try                      * to update the database record. if this also fails' e.g. due session cleanup tasks' try                      * insert a new record again.                      * Try the whole process 10 times before give up.                      *                       */                     int failureCount = 0;                     while(failureCount <= 10)                     {                         // try insert new item' on success leave while                         if (CreateUninitializedItemTryInsert(id' timeout' dbConn))                             return; // success' leave                          // if insert fails due already existing session id' try update                         if (CreateUninitializedItemTryUpdate(id' timeout' dbConn))                             return; // success' leave                          // try again                         failureCount++;                     }                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                     throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbConn != null)                         dbConn.Close();                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,ReleaseItemExclusive,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                      dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.Add(m_config.Timeout);                     dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                     dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbTrans = dbConn.BeginTransaction();                          dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (NpgsqlException re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,ReleaseItemExclusive,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                      dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.Add(m_config.Timeout);                     dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                     dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbTrans = dbConn.BeginTransaction();                          dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (NpgsqlException e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (NpgsqlException re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,RemoveItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                      dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbTrans = dbConn.BeginTransaction();                          dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,RemoveItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                      dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                     dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbTrans = dbConn.BeginTransaction();                          dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,ResetItemTimeout,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.Add(m_config.Timeout);                     dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbTrans = dbConn.BeginTransaction();                          dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,ResetItemTimeout,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.Add(m_config.Timeout);                     dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbTrans = dbConn.BeginTransaction();                          dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand()'                         delCommand = dbConn.CreateCommand())                 {                     if (newItem)                     {                         // Delete existing expired session if exist                         delCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                          delCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         delCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          // Insert new session data                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = item.Timeout;                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                     }                     else                     {                         // Update existing session                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked' \"Data\" = @Data WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                          dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                     }                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbTrans = dbConn.BeginTransaction();                          if (newItem)                         {                             delCommand.Prepare();                             delCommand.ExecuteNonQuery();                         }                          dbCommand.Prepare();                         dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand()'                         delCommand = dbConn.CreateCommand())                 {                     if (newItem)                     {                         // Delete existing expired session if exist                         delCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                          delCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         delCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          // Insert new session data                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = item.Timeout;                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                     }                     else                     {                         // Update existing session                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked' \"Data\" = @Data WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                          dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                     }                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbTrans = dbConn.BeginTransaction();                          if (newItem)                         {                             delCommand.Prepare();                             delCommand.ExecuteNonQuery();                         }                          dbCommand.Prepare();                         dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand()'                         delCommand = dbConn.CreateCommand())                 {                     if (newItem)                     {                         // Delete existing expired session if exist                         delCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                          delCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         delCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          // Insert new session data                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = item.Timeout;                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                     }                     else                     {                         // Update existing session                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked' \"Data\" = @Data WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                          dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                     }                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbTrans = dbConn.BeginTransaction();                          if (newItem)                         {                             delCommand.Prepare();                             delCommand.ExecuteNonQuery();                         }                          dbCommand.Prepare();                         dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand()'                         delCommand = dbConn.CreateCommand())                 {                     if (newItem)                     {                         // Delete existing expired session if exist                         delCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                          delCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         delCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          // Insert new session data                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = item.Timeout;                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                     }                     else                     {                         // Update existing session                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked' \"Data\" = @Data WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                          dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                     }                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbTrans = dbConn.BeginTransaction();                          if (newItem)                         {                             delCommand.Prepare();                             delCommand.ExecuteNonQuery();                         }                          dbCommand.Prepare();                         dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand()'                         delCommand = dbConn.CreateCommand())                 {                     if (newItem)                     {                         // Delete existing expired session if exist                         delCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                          delCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         delCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          // Insert new session data                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = item.Timeout;                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                     }                     else                     {                         // Update existing session                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked' \"Data\" = @Data WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                          dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                     }                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbTrans = dbConn.BeginTransaction();                          if (newItem)                         {                             delCommand.Prepare();                             delCommand.ExecuteNonQuery();                         }                          dbCommand.Prepare();                         dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,SetAndReleaseItemExclusive,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand()'                         delCommand = dbConn.CreateCommand())                 {                     if (newItem)                     {                         // Delete existing expired session if exist                         delCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                          delCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         delCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          // Insert new session data                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = item.Timeout;                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                         dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                     }                     else                     {                         // Update existing session                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Expires\" = @Expires' \"Locked\" = @Locked' \"Data\" = @Data WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName AND \"LockId\" = @LockId"' s_tableName);                          dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)item.Timeout);                         dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                         dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = serializedItems;                         dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                         dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                     }                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbTrans = dbConn.BeginTransaction();                          if (newItem)                         {                             delCommand.Prepare();                             delCommand.ExecuteNonQuery();                         }                          dbCommand.Prepare();                         dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception e)                     {                         Trace.WriteLine(e.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,CreateUninitializedItemTryInsert,The following statement contains a magic number: using (NpgsqlCommand dbCommand = dbConn.CreateCommand())             {                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture'                                                       "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"'                                                       s_tableName);                  dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                 dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                 dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double) timeout);                 dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = timeout;                 dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                 dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                 dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                 dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = string.Empty;                 dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 1;                  NpgsqlTransaction dbTrans = null;                  try                 {                     dbCommand.Prepare();                      dbTrans = dbConn.BeginTransaction();                      dbCommand.ExecuteNonQuery();                      // Attempt to commit the transaction                     dbTrans.Commit();                      return true;                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      return false;                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,CreateUninitializedItemTryInsert,The following statement contains a magic number: using (NpgsqlCommand dbCommand = dbConn.CreateCommand())             {                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture'                                                       "INSERT INTO \"{0}\" (\"SessionId\"' \"ApplicationName\"' \"Created\"' \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\") Values (@SessionId' @ApplicationName' @Created' @Expires' @Timeout' @Locked' @LockId' @LockDate' @Data' @Flags)"'                                                       s_tableName);                  dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                 dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                 dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double) timeout);                 dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = timeout;                 dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                 dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                 dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                 dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = string.Empty;                 dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 1;                  NpgsqlTransaction dbTrans = null;                  try                 {                     dbCommand.Prepare();                      dbTrans = dbConn.BeginTransaction();                      dbCommand.ExecuteNonQuery();                      // Attempt to commit the transaction                     dbTrans.Commit();                      return true;                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      return false;                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,CreateUninitializedItemTryUpdate,The following statement contains a magic number: using (NpgsqlCommand dbCommand = dbConn.CreateCommand())             {                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture'                                                       "UPDATE \"{0}\" SET \"Created\" = @Created' \"Expires\" = @Expires' \"Timeout\" = @Timeout' \"Locked\" = @Locked' \"LockId\" = @LockId' \"LockDate\" = @LockDate' \"Data\" = @Data' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"'                                                       s_tableName);                  dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                 dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                 dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)timeout);                 dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = timeout;                 dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                 dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                 dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                 dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = string.Empty;                 dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 1;                  NpgsqlTransaction dbTrans = null;                  try                 {                     dbCommand.Prepare();                      dbTrans = dbConn.BeginTransaction();                      var result = dbCommand.ExecuteNonQuery();                      // Attempt to commit the transaction                     dbTrans.Commit();                      return (result > 0);                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      return false;                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,CreateUninitializedItemTryUpdate,The following statement contains a magic number: using (NpgsqlCommand dbCommand = dbConn.CreateCommand())             {                 dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture'                                                       "UPDATE \"{0}\" SET \"Created\" = @Created' \"Expires\" = @Expires' \"Timeout\" = @Timeout' \"Locked\" = @Locked' \"LockId\" = @LockId' \"LockDate\" = @LockDate' \"Data\" = @Data' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"'                                                       s_tableName);                  dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                 dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                 dbCommand.Parameters.Add("@Created"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                 dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now.AddMinutes((Double)timeout);                 dbCommand.Parameters.Add("@Timeout"' NpgsqlDbType.Integer).Value = timeout;                 dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = false;                 dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = 0;                 dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                 dbCommand.Parameters.Add("@Data"' NpgsqlDbType.Text).Value = string.Empty;                 dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 1;                  NpgsqlTransaction dbTrans = null;                  try                 {                     dbCommand.Prepare();                      dbTrans = dbConn.BeginTransaction();                      var result = dbCommand.ExecuteNonQuery();                      // Attempt to commit the transaction                     dbTrans.Commit();                      return (result > 0);                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (NpgsqlException re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      return false;                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,GetSessionStoreItem,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 NpgsqlTransaction dbTrans = null;                 try                 {                     dbConn.Open();                     dbTrans = dbConn.BeginTransaction();                      // Retrieve the current session item information and lock row                     using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                     {                         dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"Expires\"' \"Timeout\"' \"Locked\"' \"LockId\"' \"LockDate\"' \"Data\"' \"Flags\" FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName FOR UPDATE"' s_tableName);                          dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                         dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                          using (NpgsqlDataReader reader = dbCommand.ExecuteReader(System.Data.CommandBehavior.SingleRow))                         {                             while (reader.Read())                             {                                 expires = reader.GetDateTime(0);                                 timeout = reader.GetInt32(1);                                 locked = reader.GetBoolean(2);                                 lockId = reader.GetInt32(3);                                 lockAge = DateTime.Now.Subtract(reader.GetDateTime(4));                                  if (!reader.IsDBNull(5))                                     serializedItems = reader.GetString(5);                                  actionFlags = (SessionStateActions)reader.GetInt32(6);                             }                             reader.Close();                         }                     }                      // If record was not found' is expired or is locked' return.                     if (expires < DateTime.Now || locked)                         return result;                      // If the actionFlags parameter is not InitializeItem' deserialize the stored SessionStateItemCollection                     if (actionFlags == SessionStateActions.InitializeItem)                         result = CreateNewStoreData(context' Convert.ToInt32(m_config.Timeout.TotalMinutes));                     else                         result = new SessionStateStoreData(Deserialize(serializedItems)' SessionStateUtility.GetSessionStaticObjects(context)' Convert.ToInt32(m_config.Timeout.TotalMinutes));                      if (lockRecord)                     {                         lockId = (int)lockId + 1;                         // Obtain a lock to the record                         using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                         {                             dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "UPDATE \"{0}\" SET \"Locked\" = @Locked' \"LockId\" = @LockId'\"LockDate\" = @LockDate' \"Flags\" = @Flags WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                              dbCommand.Parameters.Add("@Locked"' NpgsqlDbType.Boolean).Value = true;                             dbCommand.Parameters.Add("@LockId"' NpgsqlDbType.Integer).Value = lockId;                             dbCommand.Parameters.Add("@LockDate"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                             dbCommand.Parameters.Add("@Flags"' NpgsqlDbType.Integer).Value = 0;                             dbCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80).Value = id;                             dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                              dbCommand.ExecuteNonQuery();                         }                     }                      // Attempt to commit the transaction                     dbTrans.Commit();                 }                 catch (Exception e)                 {                     Trace.WriteLine(e.ToString());                      if (dbTrans != null)                     {                         try                         {                             // Attempt to roll back the transaction                             Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                             dbTrans.Rollback();                         }                         catch (Exception re)                         {                             // Rollback failed                             Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                             Trace.WriteLine(re.ToString());                         }                     }                      throw new ProviderException(Properties.Resources.ErrOperationAborted);                 }                 finally                 {                     if (dbTrans != null)                         dbTrans.Dispose();                      if (dbConn != null)                         dbConn.Close();                 }                  return result;             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,InvokeExpireCallbackAndDeleteSession,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand selectCommand = dbConn.CreateCommand())                 {                     selectCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"SessionId\"' \"Data\" FROM \"{0}\" WHERE \"Expires\" < @Expires AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      selectCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     selectCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         selectCommand.Prepare();                          using (NpgsqlDataReader reader = selectCommand.ExecuteReader())                         {                             if (!reader.HasRows)                                 return;                              expiredSessions = new Dictionary<string' SessionStateStoreData>(reader.RecordsAffected);                              // Get session data from data reader and reconstruct session.                             // NOTE:	I'm not sure if I should pass any static objects to the constructor of the SessionStateStoreData class.                             //			Seems to me you should not since garbage collection is say highly unlikely to be run in an actual http context.                             while (reader.Read())                             {                                 string sessionId = reader.GetString(0);                                 string serializedItems = reader.IsDBNull(1) ? null : reader.GetString(1);                                  expiredSessions.Add(sessionId' new SessionStateStoreData(Deserialize(serializedItems)' new HttpStaticObjectsCollection()' Convert.ToInt32(m_config.Timeout.TotalMinutes)));                             }                         }                     }                     catch (Exception ex)                     {                         Trace.WriteLine(ex.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  using (NpgsqlCommand deleteCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      deleteCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80);                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         deleteCommand.Prepare();                         dbTrans = dbConn.BeginTransaction();                          // Actually invoke session expire callback and delete session from the session table.                         foreach (KeyValuePair<string' SessionStateStoreData> expiredSession in expiredSessions)                         {                             // TODO: use async invocation insted?                             m_expireCallback.Invoke(expiredSession.Key' expiredSession.Value);                              deleteCommand.Parameters["@SessionId"].Value = expiredSession.Key;                              deleteCommand.ExecuteNonQuery();                         }                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception ex)                     {                         Trace.WriteLine(ex.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,InvokeExpireCallbackAndDeleteSession,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand selectCommand = dbConn.CreateCommand())                 {                     selectCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"SessionId\"' \"Data\" FROM \"{0}\" WHERE \"Expires\" < @Expires AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      selectCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     selectCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         selectCommand.Prepare();                          using (NpgsqlDataReader reader = selectCommand.ExecuteReader())                         {                             if (!reader.HasRows)                                 return;                              expiredSessions = new Dictionary<string' SessionStateStoreData>(reader.RecordsAffected);                              // Get session data from data reader and reconstruct session.                             // NOTE:	I'm not sure if I should pass any static objects to the constructor of the SessionStateStoreData class.                             //			Seems to me you should not since garbage collection is say highly unlikely to be run in an actual http context.                             while (reader.Read())                             {                                 string sessionId = reader.GetString(0);                                 string serializedItems = reader.IsDBNull(1) ? null : reader.GetString(1);                                  expiredSessions.Add(sessionId' new SessionStateStoreData(Deserialize(serializedItems)' new HttpStaticObjectsCollection()' Convert.ToInt32(m_config.Timeout.TotalMinutes)));                             }                         }                     }                     catch (Exception ex)                     {                         Trace.WriteLine(ex.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  using (NpgsqlCommand deleteCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      deleteCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80);                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         deleteCommand.Prepare();                         dbTrans = dbConn.BeginTransaction();                          // Actually invoke session expire callback and delete session from the session table.                         foreach (KeyValuePair<string' SessionStateStoreData> expiredSession in expiredSessions)                         {                             // TODO: use async invocation insted?                             m_expireCallback.Invoke(expiredSession.Key' expiredSession.Value);                              deleteCommand.Parameters["@SessionId"].Value = expiredSession.Key;                              deleteCommand.ExecuteNonQuery();                         }                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception ex)                     {                         Trace.WriteLine(ex.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,InvokeExpireCallbackAndDeleteSession,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand selectCommand = dbConn.CreateCommand())                 {                     selectCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "SELECT \"SessionId\"' \"Data\" FROM \"{0}\" WHERE \"Expires\" < @Expires AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      selectCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     selectCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      try                     {                         dbConn.Open();                         selectCommand.Prepare();                          using (NpgsqlDataReader reader = selectCommand.ExecuteReader())                         {                             if (!reader.HasRows)                                 return;                              expiredSessions = new Dictionary<string' SessionStateStoreData>(reader.RecordsAffected);                              // Get session data from data reader and reconstruct session.                             // NOTE:	I'm not sure if I should pass any static objects to the constructor of the SessionStateStoreData class.                             //			Seems to me you should not since garbage collection is say highly unlikely to be run in an actual http context.                             while (reader.Read())                             {                                 string sessionId = reader.GetString(0);                                 string serializedItems = reader.IsDBNull(1) ? null : reader.GetString(1);                                  expiredSessions.Add(sessionId' new SessionStateStoreData(Deserialize(serializedItems)' new HttpStaticObjectsCollection()' Convert.ToInt32(m_config.Timeout.TotalMinutes)));                             }                         }                     }                     catch (Exception ex)                     {                         Trace.WriteLine(ex.ToString());                          if (dbConn != null)                             dbConn.Close();                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                 }                  using (NpgsqlCommand deleteCommand = dbConn.CreateCommand())                 {                     deleteCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"SessionId\" = @SessionId AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      deleteCommand.Parameters.Add("@SessionId"' NpgsqlDbType.Varchar' 80);                     deleteCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         deleteCommand.Prepare();                         dbTrans = dbConn.BeginTransaction();                          // Actually invoke session expire callback and delete session from the session table.                         foreach (KeyValuePair<string' SessionStateStoreData> expiredSession in expiredSessions)                         {                             // TODO: use async invocation insted?                             m_expireCallback.Invoke(expiredSession.Key' expiredSession.Value);                              deleteCommand.Parameters["@SessionId"].Value = expiredSession.Key;                              deleteCommand.ExecuteNonQuery();                         }                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception ex)                     {                         Trace.WriteLine(ex.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
Magic Number,NauckIT.PostgreSQLProvider,PgSessionStateStoreProvider,C:\repos\dnauck_AspSQLProvider\src\NauckIT.PostgreSQLProvider\PgSessionStateStoreProvider.cs,DeleteExpiredSessionsFromDatabase,The following statement contains a magic number: using (NpgsqlConnection dbConn = new NpgsqlConnection(m_connectionString))             {                 using (NpgsqlCommand dbCommand = dbConn.CreateCommand())                 {                     dbCommand.CommandText = string.Format(CultureInfo.InvariantCulture' "DELETE FROM \"{0}\" WHERE \"Expires\" < @Expires AND \"ApplicationName\" = @ApplicationName"' s_tableName);                      dbCommand.Parameters.Add("@Expires"' NpgsqlDbType.TimestampTZ).Value = DateTime.Now;                     dbCommand.Parameters.Add("@ApplicationName"' NpgsqlDbType.Varchar' 255).Value = m_applicationName;                      NpgsqlTransaction dbTrans = null;                      try                     {                         dbConn.Open();                         dbCommand.Prepare();                          dbTrans = dbConn.BeginTransaction();                          dbCommand.ExecuteNonQuery();                          // Attempt to commit the transaction                         dbTrans.Commit();                     }                     catch (Exception ex)                     {                         Trace.WriteLine(ex.ToString());                          if (dbTrans != null)                         {                             try                             {                                 // Attempt to roll back the transaction                                 Trace.WriteLine(Properties.Resources.LogRollbackAttempt);                                 dbTrans.Rollback();                             }                             catch (Exception re)                             {                                 // Rollback failed                                 Trace.WriteLine(Properties.Resources.ErrRollbackFailed);                                 Trace.WriteLine(re.ToString());                             }                         }                          throw new ProviderException(Properties.Resources.ErrOperationAborted);                     }                     finally                     {                         if (dbTrans != null)                             dbTrans.Dispose();                          if (dbConn != null)                             dbConn.Close();                     }                 }             }
