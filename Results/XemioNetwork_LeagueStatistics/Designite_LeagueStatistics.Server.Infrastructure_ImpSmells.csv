Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LeagueStatistics.Server.Infrastructure.Extensions,StringExtensions,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Extensions\StringExtensions.cs,FormatWith,Cyclomatic complexity of the method is 22
Complex Method,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,ConvertGameMode,Cyclomatic complexity of the method is 8
Complex Method,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,ConvertGameSubType,Cyclomatic complexity of the method is 21
Long Parameter List,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,Execute,The method has 9 parameters.
Long Parameter List,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetItemsAsync,The method has 5 parameters.
Long Statement,LeagueStatistics.Server.Infrastructure.Controllers,ChampionsController,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Controllers\ChampionsController.cs,GetChampions,The length of the statement  "	var champions = this.DocumentSession.Query<Champion> ().TransformWith<ChampionToChampionModelTransformer' ChampionModel> ().OrderBy (f => f.Id).ToList (); " is 154.
Long Statement,LeagueStatistics.Server.Infrastructure.Controllers,ItemsController,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Controllers\ItemsController.cs,GetItems,The length of the statement  "	var items = this.DocumentSession.Query<Item> ().TransformWith<ItemToItemModelTransformer' ItemModel> ().OrderBy (f => f.Id).Take (512)//Just some value because CURRENTLY there are only about 250 items' so no paging needed " is 221.
Long Statement,LeagueStatistics.Server.Infrastructure.Controllers,MapsController,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Controllers\MapsController.cs,GetMaps,The length of the statement  "	var maps = this.DocumentSession.Query<Map> ().TransformWith<MapToMapModelTransformer' MapModel> ().OrderBy (f => f.Id).ToList (); " is 129.
Long Statement,LeagueStatistics.Server.Infrastructure.Controllers,SpellsController,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Controllers\SpellsController.cs,GetSpells,The length of the statement  "	var spells = this.DocumentSession.Query<Spell> ().TransformWith<SpellToSpellModelTransformer' SpellModel> ().OrderBy (f => f.Id).ToList (); " is 139.
Long Statement,LeagueStatistics.Server.Infrastructure.Controllers,SummonersController,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Controllers\SummonersController.cs,GetSummoners,The length of the statement  "	var summoners = this.DocumentSession.Query<Summoner> ().TransformWith<SummonerToSummonerModelTransformer' SummonerModel> ().OrderBy (f => f.Id).Paging (page' pageSize).ToList (); " is 178.
Long Statement,LeagueStatistics.Server.Infrastructure.Filters,HandleExceptionAttribute,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Filters\HandleExceptionAttribute.cs,GetLogger,The length of the statement  "	ILoggerFactory loggerFactory = context.ActionContext.ControllerContext.Configuration.DependencyResolver.GetService<ILoggerFactory> (); " is 134.
Long Statement,LeagueStatistics.Server.Infrastructure.Implementations.Lifetime,MatchImportStarter,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Lifetime\MatchImportStarter.cs,Start,The length of the statement  "	var trigger = TriggerBuilder.Create ().WithSimpleSchedule (f => f.WithIntervalInSeconds (15).RepeatForever ()).StartNow ().Build (); " is 132.
Long Statement,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,Execute,The length of the statement  "				IEnumerable<Match> importedMatches = this._leagueService.GetRecentMatchesAsync (neededMatch.SummonerId.GetIntId ()).Result; " is 123.
Long Statement,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,GetSummonersToLoadMatchesFrom,The length of the statement  "	return documentSession.Query<Summoner> ().Where (f => f.NextMatchImportDate <= DateTimeOffset.UtcNow).Take (10).ToList (); " is 122.
Long Statement,LeagueStatistics.Server.Infrastructure.Windsor,QuartzInstaller,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Windsor\QuartzInstaller.cs,Install,The length of the statement  "	container.Register (Component.For<IScheduler> ().Instance (this.GetScheduler (container))' Classes.FromThisAssembly ().BasedOn<IJob> ().WithServiceSelf ().LifestyleTransient ()); " is 178.
Long Statement,LeagueStatistics.Server.Infrastructure.Windsor,RavenInstaller,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Windsor\RavenInstaller.cs,Install,The length of the statement  "	container.Register (Component.For<IDocumentStore> ().Instance (this.GetDocumentStore ()).LifestyleSingleton ()' Component.For<IDocumentSession> ().UsingFactoryMethod ((kernel' context) => kernel.Resolve<IDocumentStore> ().OpenSession ()).LifestyleScoped ()); " is 258.
Long Statement,LeagueStatistics.Server.Infrastructure.Windsor,ServiceInstaller,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Windsor\ServiceInstaller.cs,Install,The length of the statement  "	container.Register (Classes.FromThisAssembly ().BasedOn<IService> ().WithServiceFirstInterface ().LifestyleTransient ().ConfigureFor<LeagueService> (f => f.DependsOn (Dependency.OnValue ("apiKey"' Config.GetValue ("ApiKey"))' Dependency.OnValue ("region"' Enum.Parse (typeof(RegionEnum)' Config.GetValue ("Region")))))); " is 320.
Empty Catch Block,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,Execute,The method has an empty catch block.
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,Execute,The following statement contains a magic number: try {  	using (IDocumentSession documentSession = this._documentStore.OpenSession ()) {  		//Load the next summoners  		List<Summoner> summoners = this.GetSummonersToLoadMatchesFrom (documentSession);  		foreach (var summoner in summoners) {  			//Get the matches that currently dont exist  			IEnumerable<Match> matches = from match in this._leagueService.GetRecentMatchesAsync (summoner.Id.GetIntId ()).Result  			where this._documentStore.DatabaseCommands.DocumentExists (match.Id) == false  			select match;  			foreach (var match in matches) {  				//Store these matches  				try {  					documentSession.Store (match);  				}  				catch (NonUniqueObjectException) {  					//Just ignore if we import a match twice in one run  				}  				this.Logger.DebugFormat ("Imported match '{0}'."' match.Id);  				//Store the other players as "NeededSummonerMatch"es  				foreach (var player in match.Teams.SelectMany (f => f.Players).Where (f => f.DataLoaded == false)) {  					documentSession.Store (new NeededSummonerMatch {  						Date = DateTimeOffset.Now'  						SummonerId = player.SummonerId'  						MatchId = match.Id'  					});  				}  			}  			//Update the summoner  			summoner.LastMatchImportDate = DateTimeOffset.UtcNow;  			summoner.NextMatchImportDate = summoner.LastMatchImportDate.AddMinutes (30);  		}  		//Now load the needed matches  		List<NeededSummonerMatch> neededMatches = this.GetAdditionalMatchesFrom (documentSession' summoners.Count);  		foreach (var neededMatch in neededMatches) {  			//Get the matches from the player  			IEnumerable<Match> importedMatches = this._leagueService.GetRecentMatchesAsync (neededMatch.SummonerId.GetIntId ()).Result;  			Match importedMatch = importedMatches.FirstOrDefault (f => f.Id == neededMatch.MatchId);  			//If the needed match doesnt exist we cant do anything  			if (importedMatch != null) {  				PlayerStats playerStats = importedMatch.Teams.SelectMany (f => f.Players).First (f => f.DataLoaded);  				Match loadedMatch = documentSession.Load<Match> (importedMatch.Id);  				Team team = loadedMatch.Teams.First (f => f.Players.Any (d => d.SummonerId == playerStats.SummonerId));  				team.Players.Remove (team.Players.First (f => f.SummonerId == playerStats.SummonerId));  				team.Players.Add (playerStats);  			}  			documentSession.Delete (neededMatch);  		}  		documentSession.SaveChanges ();  	}  }  catch (Exception exception) {  	this.Logger.ErrorFormat (exception' "Unhandled exception occured while executing the match import.");  }  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,Execute,The following statement contains a magic number: using (IDocumentSession documentSession = this._documentStore.OpenSession ()) {  	//Load the next summoners  	List<Summoner> summoners = this.GetSummonersToLoadMatchesFrom (documentSession);  	foreach (var summoner in summoners) {  		//Get the matches that currently dont exist  		IEnumerable<Match> matches = from match in this._leagueService.GetRecentMatchesAsync (summoner.Id.GetIntId ()).Result  		where this._documentStore.DatabaseCommands.DocumentExists (match.Id) == false  		select match;  		foreach (var match in matches) {  			//Store these matches  			try {  				documentSession.Store (match);  			}  			catch (NonUniqueObjectException) {  				//Just ignore if we import a match twice in one run  			}  			this.Logger.DebugFormat ("Imported match '{0}'."' match.Id);  			//Store the other players as "NeededSummonerMatch"es  			foreach (var player in match.Teams.SelectMany (f => f.Players).Where (f => f.DataLoaded == false)) {  				documentSession.Store (new NeededSummonerMatch {  					Date = DateTimeOffset.Now'  					SummonerId = player.SummonerId'  					MatchId = match.Id'  				});  			}  		}  		//Update the summoner  		summoner.LastMatchImportDate = DateTimeOffset.UtcNow;  		summoner.NextMatchImportDate = summoner.LastMatchImportDate.AddMinutes (30);  	}  	//Now load the needed matches  	List<NeededSummonerMatch> neededMatches = this.GetAdditionalMatchesFrom (documentSession' summoners.Count);  	foreach (var neededMatch in neededMatches) {  		//Get the matches from the player  		IEnumerable<Match> importedMatches = this._leagueService.GetRecentMatchesAsync (neededMatch.SummonerId.GetIntId ()).Result;  		Match importedMatch = importedMatches.FirstOrDefault (f => f.Id == neededMatch.MatchId);  		//If the needed match doesnt exist we cant do anything  		if (importedMatch != null) {  			PlayerStats playerStats = importedMatch.Teams.SelectMany (f => f.Players).First (f => f.DataLoaded);  			Match loadedMatch = documentSession.Load<Match> (importedMatch.Id);  			Team team = loadedMatch.Teams.First (f => f.Players.Any (d => d.SummonerId == playerStats.SummonerId));  			team.Players.Remove (team.Players.First (f => f.SummonerId == playerStats.SummonerId));  			team.Players.Add (playerStats);  		}  		documentSession.Delete (neededMatch);  	}  	documentSession.SaveChanges ();  }  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,Execute,The following statement contains a magic number: foreach (var summoner in summoners) {  	//Get the matches that currently dont exist  	IEnumerable<Match> matches = from match in this._leagueService.GetRecentMatchesAsync (summoner.Id.GetIntId ()).Result  	where this._documentStore.DatabaseCommands.DocumentExists (match.Id) == false  	select match;  	foreach (var match in matches) {  		//Store these matches  		try {  			documentSession.Store (match);  		}  		catch (NonUniqueObjectException) {  			//Just ignore if we import a match twice in one run  		}  		this.Logger.DebugFormat ("Imported match '{0}'."' match.Id);  		//Store the other players as "NeededSummonerMatch"es  		foreach (var player in match.Teams.SelectMany (f => f.Players).Where (f => f.DataLoaded == false)) {  			documentSession.Store (new NeededSummonerMatch {  				Date = DateTimeOffset.Now'  				SummonerId = player.SummonerId'  				MatchId = match.Id'  			});  		}  	}  	//Update the summoner  	summoner.LastMatchImportDate = DateTimeOffset.UtcNow;  	summoner.NextMatchImportDate = summoner.LastMatchImportDate.AddMinutes (30);  }  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,Execute,The following statement contains a magic number: summoner.NextMatchImportDate = summoner.LastMatchImportDate.AddMinutes (30);  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,GetSummonersToLoadMatchesFrom,The following statement contains a magic number: return documentSession.Query<Summoner> ().Where (f => f.NextMatchImportDate <= DateTimeOffset.UtcNow).Take (10).ToList ();  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Matches,MatchImportJob,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Matches\MatchImportJob.cs,GetAdditionalMatchesFrom,The following statement contains a magic number: return documentStore.Query<NeededSummonerMatch> ().OrderBy (f => f.Date).Take (10 - count).ToList ();  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetRecentMatchesAsync,The following statement contains a magic number: try {  	IEnumerable<IGame> games = await this._leagueApi.Game.GetRecentGamesBySummonerIdAsync (summonerId);  	return games.Select (f =>  {  		var match = new Match {  			Id = string.Format ("Matches/{0}"' f.GameId)'  			CreationDate = f.CreateDate'  			Length = TimeSpan.FromSeconds (f.Stats.TimePlayed)'  			GameMode = this.ConvertGameMode (f.GameMode)'  			GameType = this.ConvertGameType (f.GameType)'  			GameSubType = this.ConvertGameSubType (f.GameSubType)'  			MapId = string.Format ("Maps/{0}"' (int)f.Map)'  			Teams = new Collection<Team> {  				new Team {  					Color = ConvertTeam (f.TeamId)'  					Win = f.Stats.Win'  					Players = new Collection<PlayerStats> {  						new PlayerStats {  							ChampionId = string.Format ("Champions/{0}"' f.ChampionId)'  							FirstSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.First ())'  							SecondSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.Last ())'  							DataLoaded = true'  							Win = f.Stats.Win'  							InfluencePointsEarned = f.IpEarned'  							TotalHeal = f.Stats.TotalHeal'  							TotalDamageDealt = f.Stats.TotalDamageDealt'  							TrueDamageDealt = f.Stats.TrueDamageDealtPlayer'  							PhysicalDamageDealt = f.Stats.PhysicalDamageDealtPlayer'  							MagicDamageDealt = f.Stats.MagicDamageDealtPlayer'  							TotalDamageDealtToChampions = f.Stats.TotalDamageDealtToChampions'  							TrueDamageDealtToChampions = f.Stats.TrueDamageDealtToChampions'  							PhysicalDamageDealtToChampions = f.Stats.PhysicalDamageDealtToChampions'  							MagicDamageDealtToChampions = f.Stats.MagicDamageDealtToChampions'  							TotalDamageTaken = f.Stats.TotalDamageTaken'  							TrueDamageTaken = f.Stats.TrueDamageTaken'  							PhysicalDamageTaken = f.Stats.PhysicalDamageTaken'  							MagicDamageTaken = f.Stats.MagicDamageTaken'  							Level = f.Stats.Level'  							GoldEarned = f.Stats.GoldEarned'  							GoldSpent = f.Stats.GoldSpent'  							Item1Id = this.ConvertItemId (f.Stats.ItemIds [0])'  							Item2Id = this.ConvertItemId (f.Stats.ItemIds [1])'  							Item3Id = this.ConvertItemId (f.Stats.ItemIds [2])'  							Item4Id = this.ConvertItemId (f.Stats.ItemIds [3])'  							Item5Id = this.ConvertItemId (f.Stats.ItemIds [4])'  							Item6Id = this.ConvertItemId (f.Stats.ItemIds [5])'  							SightWardsBought = f.Stats.SightWardsBought'  							WardsKilled = f.Stats.WardKilled'  							WardsPlaced = f.Stats.WardPlaced'  							ChampionsKilled = f.Stats.ChampionsKilled'  							Assists = f.Stats.Assists'  							Deaths = f.Stats.NumDeaths'  							MinionsKilled = f.Stats.MinionsKilled'  							NeutralMinionsKilledYourJungle = f.Stats.NeutralMinionsKilledYourJungle'  							NeutralMinionsKilledEnemyJungle = f.Stats.NeutralMinionsKilledEnemyJungle'  							LargestMultiKill = f.Stats.LargestMultiKill'  							SummonerId = string.Format ("Summoners/{0}"' summonerId)  						}  					}  				}'  				new Team {  					Color = GetOtherTeam (f.TeamId)'  					Win = !f.Stats.Win'  					Players = new Collection<PlayerStats> ()  				}  			}  		};  		foreach (var player in f.OtherPlayers) {  			Team team = match.Teams.First (d => d.Color == ConvertTeam (player.TeamId));  			team.Players.Add (new PlayerStats {  				DataLoaded = false'  				SummonerId = string.Format ("Summoners/{0}"' player.SummonerId)'  				ChampionId = string.Format ("Champions/{0}"' player.ChampionId)  			});  		}  		return match;  	});  }  catch (Exception exception) {  	this.Logger.ErrorFormat (exception' "Unhandled exception in 'GetRecentMatchesAsync' for summoner '{0}'."' summonerId);  	return new List<Match> ();  }  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetRecentMatchesAsync,The following statement contains a magic number: try {  	IEnumerable<IGame> games = await this._leagueApi.Game.GetRecentGamesBySummonerIdAsync (summonerId);  	return games.Select (f =>  {  		var match = new Match {  			Id = string.Format ("Matches/{0}"' f.GameId)'  			CreationDate = f.CreateDate'  			Length = TimeSpan.FromSeconds (f.Stats.TimePlayed)'  			GameMode = this.ConvertGameMode (f.GameMode)'  			GameType = this.ConvertGameType (f.GameType)'  			GameSubType = this.ConvertGameSubType (f.GameSubType)'  			MapId = string.Format ("Maps/{0}"' (int)f.Map)'  			Teams = new Collection<Team> {  				new Team {  					Color = ConvertTeam (f.TeamId)'  					Win = f.Stats.Win'  					Players = new Collection<PlayerStats> {  						new PlayerStats {  							ChampionId = string.Format ("Champions/{0}"' f.ChampionId)'  							FirstSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.First ())'  							SecondSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.Last ())'  							DataLoaded = true'  							Win = f.Stats.Win'  							InfluencePointsEarned = f.IpEarned'  							TotalHeal = f.Stats.TotalHeal'  							TotalDamageDealt = f.Stats.TotalDamageDealt'  							TrueDamageDealt = f.Stats.TrueDamageDealtPlayer'  							PhysicalDamageDealt = f.Stats.PhysicalDamageDealtPlayer'  							MagicDamageDealt = f.Stats.MagicDamageDealtPlayer'  							TotalDamageDealtToChampions = f.Stats.TotalDamageDealtToChampions'  							TrueDamageDealtToChampions = f.Stats.TrueDamageDealtToChampions'  							PhysicalDamageDealtToChampions = f.Stats.PhysicalDamageDealtToChampions'  							MagicDamageDealtToChampions = f.Stats.MagicDamageDealtToChampions'  							TotalDamageTaken = f.Stats.TotalDamageTaken'  							TrueDamageTaken = f.Stats.TrueDamageTaken'  							PhysicalDamageTaken = f.Stats.PhysicalDamageTaken'  							MagicDamageTaken = f.Stats.MagicDamageTaken'  							Level = f.Stats.Level'  							GoldEarned = f.Stats.GoldEarned'  							GoldSpent = f.Stats.GoldSpent'  							Item1Id = this.ConvertItemId (f.Stats.ItemIds [0])'  							Item2Id = this.ConvertItemId (f.Stats.ItemIds [1])'  							Item3Id = this.ConvertItemId (f.Stats.ItemIds [2])'  							Item4Id = this.ConvertItemId (f.Stats.ItemIds [3])'  							Item5Id = this.ConvertItemId (f.Stats.ItemIds [4])'  							Item6Id = this.ConvertItemId (f.Stats.ItemIds [5])'  							SightWardsBought = f.Stats.SightWardsBought'  							WardsKilled = f.Stats.WardKilled'  							WardsPlaced = f.Stats.WardPlaced'  							ChampionsKilled = f.Stats.ChampionsKilled'  							Assists = f.Stats.Assists'  							Deaths = f.Stats.NumDeaths'  							MinionsKilled = f.Stats.MinionsKilled'  							NeutralMinionsKilledYourJungle = f.Stats.NeutralMinionsKilledYourJungle'  							NeutralMinionsKilledEnemyJungle = f.Stats.NeutralMinionsKilledEnemyJungle'  							LargestMultiKill = f.Stats.LargestMultiKill'  							SummonerId = string.Format ("Summoners/{0}"' summonerId)  						}  					}  				}'  				new Team {  					Color = GetOtherTeam (f.TeamId)'  					Win = !f.Stats.Win'  					Players = new Collection<PlayerStats> ()  				}  			}  		};  		foreach (var player in f.OtherPlayers) {  			Team team = match.Teams.First (d => d.Color == ConvertTeam (player.TeamId));  			team.Players.Add (new PlayerStats {  				DataLoaded = false'  				SummonerId = string.Format ("Summoners/{0}"' player.SummonerId)'  				ChampionId = string.Format ("Champions/{0}"' player.ChampionId)  			});  		}  		return match;  	});  }  catch (Exception exception) {  	this.Logger.ErrorFormat (exception' "Unhandled exception in 'GetRecentMatchesAsync' for summoner '{0}'."' summonerId);  	return new List<Match> ();  }  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetRecentMatchesAsync,The following statement contains a magic number: try {  	IEnumerable<IGame> games = await this._leagueApi.Game.GetRecentGamesBySummonerIdAsync (summonerId);  	return games.Select (f =>  {  		var match = new Match {  			Id = string.Format ("Matches/{0}"' f.GameId)'  			CreationDate = f.CreateDate'  			Length = TimeSpan.FromSeconds (f.Stats.TimePlayed)'  			GameMode = this.ConvertGameMode (f.GameMode)'  			GameType = this.ConvertGameType (f.GameType)'  			GameSubType = this.ConvertGameSubType (f.GameSubType)'  			MapId = string.Format ("Maps/{0}"' (int)f.Map)'  			Teams = new Collection<Team> {  				new Team {  					Color = ConvertTeam (f.TeamId)'  					Win = f.Stats.Win'  					Players = new Collection<PlayerStats> {  						new PlayerStats {  							ChampionId = string.Format ("Champions/{0}"' f.ChampionId)'  							FirstSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.First ())'  							SecondSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.Last ())'  							DataLoaded = true'  							Win = f.Stats.Win'  							InfluencePointsEarned = f.IpEarned'  							TotalHeal = f.Stats.TotalHeal'  							TotalDamageDealt = f.Stats.TotalDamageDealt'  							TrueDamageDealt = f.Stats.TrueDamageDealtPlayer'  							PhysicalDamageDealt = f.Stats.PhysicalDamageDealtPlayer'  							MagicDamageDealt = f.Stats.MagicDamageDealtPlayer'  							TotalDamageDealtToChampions = f.Stats.TotalDamageDealtToChampions'  							TrueDamageDealtToChampions = f.Stats.TrueDamageDealtToChampions'  							PhysicalDamageDealtToChampions = f.Stats.PhysicalDamageDealtToChampions'  							MagicDamageDealtToChampions = f.Stats.MagicDamageDealtToChampions'  							TotalDamageTaken = f.Stats.TotalDamageTaken'  							TrueDamageTaken = f.Stats.TrueDamageTaken'  							PhysicalDamageTaken = f.Stats.PhysicalDamageTaken'  							MagicDamageTaken = f.Stats.MagicDamageTaken'  							Level = f.Stats.Level'  							GoldEarned = f.Stats.GoldEarned'  							GoldSpent = f.Stats.GoldSpent'  							Item1Id = this.ConvertItemId (f.Stats.ItemIds [0])'  							Item2Id = this.ConvertItemId (f.Stats.ItemIds [1])'  							Item3Id = this.ConvertItemId (f.Stats.ItemIds [2])'  							Item4Id = this.ConvertItemId (f.Stats.ItemIds [3])'  							Item5Id = this.ConvertItemId (f.Stats.ItemIds [4])'  							Item6Id = this.ConvertItemId (f.Stats.ItemIds [5])'  							SightWardsBought = f.Stats.SightWardsBought'  							WardsKilled = f.Stats.WardKilled'  							WardsPlaced = f.Stats.WardPlaced'  							ChampionsKilled = f.Stats.ChampionsKilled'  							Assists = f.Stats.Assists'  							Deaths = f.Stats.NumDeaths'  							MinionsKilled = f.Stats.MinionsKilled'  							NeutralMinionsKilledYourJungle = f.Stats.NeutralMinionsKilledYourJungle'  							NeutralMinionsKilledEnemyJungle = f.Stats.NeutralMinionsKilledEnemyJungle'  							LargestMultiKill = f.Stats.LargestMultiKill'  							SummonerId = string.Format ("Summoners/{0}"' summonerId)  						}  					}  				}'  				new Team {  					Color = GetOtherTeam (f.TeamId)'  					Win = !f.Stats.Win'  					Players = new Collection<PlayerStats> ()  				}  			}  		};  		foreach (var player in f.OtherPlayers) {  			Team team = match.Teams.First (d => d.Color == ConvertTeam (player.TeamId));  			team.Players.Add (new PlayerStats {  				DataLoaded = false'  				SummonerId = string.Format ("Summoners/{0}"' player.SummonerId)'  				ChampionId = string.Format ("Champions/{0}"' player.ChampionId)  			});  		}  		return match;  	});  }  catch (Exception exception) {  	this.Logger.ErrorFormat (exception' "Unhandled exception in 'GetRecentMatchesAsync' for summoner '{0}'."' summonerId);  	return new List<Match> ();  }  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetRecentMatchesAsync,The following statement contains a magic number: try {  	IEnumerable<IGame> games = await this._leagueApi.Game.GetRecentGamesBySummonerIdAsync (summonerId);  	return games.Select (f =>  {  		var match = new Match {  			Id = string.Format ("Matches/{0}"' f.GameId)'  			CreationDate = f.CreateDate'  			Length = TimeSpan.FromSeconds (f.Stats.TimePlayed)'  			GameMode = this.ConvertGameMode (f.GameMode)'  			GameType = this.ConvertGameType (f.GameType)'  			GameSubType = this.ConvertGameSubType (f.GameSubType)'  			MapId = string.Format ("Maps/{0}"' (int)f.Map)'  			Teams = new Collection<Team> {  				new Team {  					Color = ConvertTeam (f.TeamId)'  					Win = f.Stats.Win'  					Players = new Collection<PlayerStats> {  						new PlayerStats {  							ChampionId = string.Format ("Champions/{0}"' f.ChampionId)'  							FirstSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.First ())'  							SecondSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.Last ())'  							DataLoaded = true'  							Win = f.Stats.Win'  							InfluencePointsEarned = f.IpEarned'  							TotalHeal = f.Stats.TotalHeal'  							TotalDamageDealt = f.Stats.TotalDamageDealt'  							TrueDamageDealt = f.Stats.TrueDamageDealtPlayer'  							PhysicalDamageDealt = f.Stats.PhysicalDamageDealtPlayer'  							MagicDamageDealt = f.Stats.MagicDamageDealtPlayer'  							TotalDamageDealtToChampions = f.Stats.TotalDamageDealtToChampions'  							TrueDamageDealtToChampions = f.Stats.TrueDamageDealtToChampions'  							PhysicalDamageDealtToChampions = f.Stats.PhysicalDamageDealtToChampions'  							MagicDamageDealtToChampions = f.Stats.MagicDamageDealtToChampions'  							TotalDamageTaken = f.Stats.TotalDamageTaken'  							TrueDamageTaken = f.Stats.TrueDamageTaken'  							PhysicalDamageTaken = f.Stats.PhysicalDamageTaken'  							MagicDamageTaken = f.Stats.MagicDamageTaken'  							Level = f.Stats.Level'  							GoldEarned = f.Stats.GoldEarned'  							GoldSpent = f.Stats.GoldSpent'  							Item1Id = this.ConvertItemId (f.Stats.ItemIds [0])'  							Item2Id = this.ConvertItemId (f.Stats.ItemIds [1])'  							Item3Id = this.ConvertItemId (f.Stats.ItemIds [2])'  							Item4Id = this.ConvertItemId (f.Stats.ItemIds [3])'  							Item5Id = this.ConvertItemId (f.Stats.ItemIds [4])'  							Item6Id = this.ConvertItemId (f.Stats.ItemIds [5])'  							SightWardsBought = f.Stats.SightWardsBought'  							WardsKilled = f.Stats.WardKilled'  							WardsPlaced = f.Stats.WardPlaced'  							ChampionsKilled = f.Stats.ChampionsKilled'  							Assists = f.Stats.Assists'  							Deaths = f.Stats.NumDeaths'  							MinionsKilled = f.Stats.MinionsKilled'  							NeutralMinionsKilledYourJungle = f.Stats.NeutralMinionsKilledYourJungle'  							NeutralMinionsKilledEnemyJungle = f.Stats.NeutralMinionsKilledEnemyJungle'  							LargestMultiKill = f.Stats.LargestMultiKill'  							SummonerId = string.Format ("Summoners/{0}"' summonerId)  						}  					}  				}'  				new Team {  					Color = GetOtherTeam (f.TeamId)'  					Win = !f.Stats.Win'  					Players = new Collection<PlayerStats> ()  				}  			}  		};  		foreach (var player in f.OtherPlayers) {  			Team team = match.Teams.First (d => d.Color == ConvertTeam (player.TeamId));  			team.Players.Add (new PlayerStats {  				DataLoaded = false'  				SummonerId = string.Format ("Summoners/{0}"' player.SummonerId)'  				ChampionId = string.Format ("Champions/{0}"' player.ChampionId)  			});  		}  		return match;  	});  }  catch (Exception exception) {  	this.Logger.ErrorFormat (exception' "Unhandled exception in 'GetRecentMatchesAsync' for summoner '{0}'."' summonerId);  	return new List<Match> ();  }  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetRecentMatchesAsync,The following statement contains a magic number: return games.Select (f =>  {  	var match = new Match {  		Id = string.Format ("Matches/{0}"' f.GameId)'  		CreationDate = f.CreateDate'  		Length = TimeSpan.FromSeconds (f.Stats.TimePlayed)'  		GameMode = this.ConvertGameMode (f.GameMode)'  		GameType = this.ConvertGameType (f.GameType)'  		GameSubType = this.ConvertGameSubType (f.GameSubType)'  		MapId = string.Format ("Maps/{0}"' (int)f.Map)'  		Teams = new Collection<Team> {  			new Team {  				Color = ConvertTeam (f.TeamId)'  				Win = f.Stats.Win'  				Players = new Collection<PlayerStats> {  					new PlayerStats {  						ChampionId = string.Format ("Champions/{0}"' f.ChampionId)'  						FirstSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.First ())'  						SecondSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.Last ())'  						DataLoaded = true'  						Win = f.Stats.Win'  						InfluencePointsEarned = f.IpEarned'  						TotalHeal = f.Stats.TotalHeal'  						TotalDamageDealt = f.Stats.TotalDamageDealt'  						TrueDamageDealt = f.Stats.TrueDamageDealtPlayer'  						PhysicalDamageDealt = f.Stats.PhysicalDamageDealtPlayer'  						MagicDamageDealt = f.Stats.MagicDamageDealtPlayer'  						TotalDamageDealtToChampions = f.Stats.TotalDamageDealtToChampions'  						TrueDamageDealtToChampions = f.Stats.TrueDamageDealtToChampions'  						PhysicalDamageDealtToChampions = f.Stats.PhysicalDamageDealtToChampions'  						MagicDamageDealtToChampions = f.Stats.MagicDamageDealtToChampions'  						TotalDamageTaken = f.Stats.TotalDamageTaken'  						TrueDamageTaken = f.Stats.TrueDamageTaken'  						PhysicalDamageTaken = f.Stats.PhysicalDamageTaken'  						MagicDamageTaken = f.Stats.MagicDamageTaken'  						Level = f.Stats.Level'  						GoldEarned = f.Stats.GoldEarned'  						GoldSpent = f.Stats.GoldSpent'  						Item1Id = this.ConvertItemId (f.Stats.ItemIds [0])'  						Item2Id = this.ConvertItemId (f.Stats.ItemIds [1])'  						Item3Id = this.ConvertItemId (f.Stats.ItemIds [2])'  						Item4Id = this.ConvertItemId (f.Stats.ItemIds [3])'  						Item5Id = this.ConvertItemId (f.Stats.ItemIds [4])'  						Item6Id = this.ConvertItemId (f.Stats.ItemIds [5])'  						SightWardsBought = f.Stats.SightWardsBought'  						WardsKilled = f.Stats.WardKilled'  						WardsPlaced = f.Stats.WardPlaced'  						ChampionsKilled = f.Stats.ChampionsKilled'  						Assists = f.Stats.Assists'  						Deaths = f.Stats.NumDeaths'  						MinionsKilled = f.Stats.MinionsKilled'  						NeutralMinionsKilledYourJungle = f.Stats.NeutralMinionsKilledYourJungle'  						NeutralMinionsKilledEnemyJungle = f.Stats.NeutralMinionsKilledEnemyJungle'  						LargestMultiKill = f.Stats.LargestMultiKill'  						SummonerId = string.Format ("Summoners/{0}"' summonerId)  					}  				}  			}'  			new Team {  				Color = GetOtherTeam (f.TeamId)'  				Win = !f.Stats.Win'  				Players = new Collection<PlayerStats> ()  			}  		}  	};  	foreach (var player in f.OtherPlayers) {  		Team team = match.Teams.First (d => d.Color == ConvertTeam (player.TeamId));  		team.Players.Add (new PlayerStats {  			DataLoaded = false'  			SummonerId = string.Format ("Summoners/{0}"' player.SummonerId)'  			ChampionId = string.Format ("Champions/{0}"' player.ChampionId)  		});  	}  	return match;  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetRecentMatchesAsync,The following statement contains a magic number: return games.Select (f =>  {  	var match = new Match {  		Id = string.Format ("Matches/{0}"' f.GameId)'  		CreationDate = f.CreateDate'  		Length = TimeSpan.FromSeconds (f.Stats.TimePlayed)'  		GameMode = this.ConvertGameMode (f.GameMode)'  		GameType = this.ConvertGameType (f.GameType)'  		GameSubType = this.ConvertGameSubType (f.GameSubType)'  		MapId = string.Format ("Maps/{0}"' (int)f.Map)'  		Teams = new Collection<Team> {  			new Team {  				Color = ConvertTeam (f.TeamId)'  				Win = f.Stats.Win'  				Players = new Collection<PlayerStats> {  					new PlayerStats {  						ChampionId = string.Format ("Champions/{0}"' f.ChampionId)'  						FirstSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.First ())'  						SecondSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.Last ())'  						DataLoaded = true'  						Win = f.Stats.Win'  						InfluencePointsEarned = f.IpEarned'  						TotalHeal = f.Stats.TotalHeal'  						TotalDamageDealt = f.Stats.TotalDamageDealt'  						TrueDamageDealt = f.Stats.TrueDamageDealtPlayer'  						PhysicalDamageDealt = f.Stats.PhysicalDamageDealtPlayer'  						MagicDamageDealt = f.Stats.MagicDamageDealtPlayer'  						TotalDamageDealtToChampions = f.Stats.TotalDamageDealtToChampions'  						TrueDamageDealtToChampions = f.Stats.TrueDamageDealtToChampions'  						PhysicalDamageDealtToChampions = f.Stats.PhysicalDamageDealtToChampions'  						MagicDamageDealtToChampions = f.Stats.MagicDamageDealtToChampions'  						TotalDamageTaken = f.Stats.TotalDamageTaken'  						TrueDamageTaken = f.Stats.TrueDamageTaken'  						PhysicalDamageTaken = f.Stats.PhysicalDamageTaken'  						MagicDamageTaken = f.Stats.MagicDamageTaken'  						Level = f.Stats.Level'  						GoldEarned = f.Stats.GoldEarned'  						GoldSpent = f.Stats.GoldSpent'  						Item1Id = this.ConvertItemId (f.Stats.ItemIds [0])'  						Item2Id = this.ConvertItemId (f.Stats.ItemIds [1])'  						Item3Id = this.ConvertItemId (f.Stats.ItemIds [2])'  						Item4Id = this.ConvertItemId (f.Stats.ItemIds [3])'  						Item5Id = this.ConvertItemId (f.Stats.ItemIds [4])'  						Item6Id = this.ConvertItemId (f.Stats.ItemIds [5])'  						SightWardsBought = f.Stats.SightWardsBought'  						WardsKilled = f.Stats.WardKilled'  						WardsPlaced = f.Stats.WardPlaced'  						ChampionsKilled = f.Stats.ChampionsKilled'  						Assists = f.Stats.Assists'  						Deaths = f.Stats.NumDeaths'  						MinionsKilled = f.Stats.MinionsKilled'  						NeutralMinionsKilledYourJungle = f.Stats.NeutralMinionsKilledYourJungle'  						NeutralMinionsKilledEnemyJungle = f.Stats.NeutralMinionsKilledEnemyJungle'  						LargestMultiKill = f.Stats.LargestMultiKill'  						SummonerId = string.Format ("Summoners/{0}"' summonerId)  					}  				}  			}'  			new Team {  				Color = GetOtherTeam (f.TeamId)'  				Win = !f.Stats.Win'  				Players = new Collection<PlayerStats> ()  			}  		}  	};  	foreach (var player in f.OtherPlayers) {  		Team team = match.Teams.First (d => d.Color == ConvertTeam (player.TeamId));  		team.Players.Add (new PlayerStats {  			DataLoaded = false'  			SummonerId = string.Format ("Summoners/{0}"' player.SummonerId)'  			ChampionId = string.Format ("Champions/{0}"' player.ChampionId)  		});  	}  	return match;  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetRecentMatchesAsync,The following statement contains a magic number: return games.Select (f =>  {  	var match = new Match {  		Id = string.Format ("Matches/{0}"' f.GameId)'  		CreationDate = f.CreateDate'  		Length = TimeSpan.FromSeconds (f.Stats.TimePlayed)'  		GameMode = this.ConvertGameMode (f.GameMode)'  		GameType = this.ConvertGameType (f.GameType)'  		GameSubType = this.ConvertGameSubType (f.GameSubType)'  		MapId = string.Format ("Maps/{0}"' (int)f.Map)'  		Teams = new Collection<Team> {  			new Team {  				Color = ConvertTeam (f.TeamId)'  				Win = f.Stats.Win'  				Players = new Collection<PlayerStats> {  					new PlayerStats {  						ChampionId = string.Format ("Champions/{0}"' f.ChampionId)'  						FirstSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.First ())'  						SecondSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.Last ())'  						DataLoaded = true'  						Win = f.Stats.Win'  						InfluencePointsEarned = f.IpEarned'  						TotalHeal = f.Stats.TotalHeal'  						TotalDamageDealt = f.Stats.TotalDamageDealt'  						TrueDamageDealt = f.Stats.TrueDamageDealtPlayer'  						PhysicalDamageDealt = f.Stats.PhysicalDamageDealtPlayer'  						MagicDamageDealt = f.Stats.MagicDamageDealtPlayer'  						TotalDamageDealtToChampions = f.Stats.TotalDamageDealtToChampions'  						TrueDamageDealtToChampions = f.Stats.TrueDamageDealtToChampions'  						PhysicalDamageDealtToChampions = f.Stats.PhysicalDamageDealtToChampions'  						MagicDamageDealtToChampions = f.Stats.MagicDamageDealtToChampions'  						TotalDamageTaken = f.Stats.TotalDamageTaken'  						TrueDamageTaken = f.Stats.TrueDamageTaken'  						PhysicalDamageTaken = f.Stats.PhysicalDamageTaken'  						MagicDamageTaken = f.Stats.MagicDamageTaken'  						Level = f.Stats.Level'  						GoldEarned = f.Stats.GoldEarned'  						GoldSpent = f.Stats.GoldSpent'  						Item1Id = this.ConvertItemId (f.Stats.ItemIds [0])'  						Item2Id = this.ConvertItemId (f.Stats.ItemIds [1])'  						Item3Id = this.ConvertItemId (f.Stats.ItemIds [2])'  						Item4Id = this.ConvertItemId (f.Stats.ItemIds [3])'  						Item5Id = this.ConvertItemId (f.Stats.ItemIds [4])'  						Item6Id = this.ConvertItemId (f.Stats.ItemIds [5])'  						SightWardsBought = f.Stats.SightWardsBought'  						WardsKilled = f.Stats.WardKilled'  						WardsPlaced = f.Stats.WardPlaced'  						ChampionsKilled = f.Stats.ChampionsKilled'  						Assists = f.Stats.Assists'  						Deaths = f.Stats.NumDeaths'  						MinionsKilled = f.Stats.MinionsKilled'  						NeutralMinionsKilledYourJungle = f.Stats.NeutralMinionsKilledYourJungle'  						NeutralMinionsKilledEnemyJungle = f.Stats.NeutralMinionsKilledEnemyJungle'  						LargestMultiKill = f.Stats.LargestMultiKill'  						SummonerId = string.Format ("Summoners/{0}"' summonerId)  					}  				}  			}'  			new Team {  				Color = GetOtherTeam (f.TeamId)'  				Win = !f.Stats.Win'  				Players = new Collection<PlayerStats> ()  			}  		}  	};  	foreach (var player in f.OtherPlayers) {  		Team team = match.Teams.First (d => d.Color == ConvertTeam (player.TeamId));  		team.Players.Add (new PlayerStats {  			DataLoaded = false'  			SummonerId = string.Format ("Summoners/{0}"' player.SummonerId)'  			ChampionId = string.Format ("Champions/{0}"' player.ChampionId)  		});  	}  	return match;  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetRecentMatchesAsync,The following statement contains a magic number: return games.Select (f =>  {  	var match = new Match {  		Id = string.Format ("Matches/{0}"' f.GameId)'  		CreationDate = f.CreateDate'  		Length = TimeSpan.FromSeconds (f.Stats.TimePlayed)'  		GameMode = this.ConvertGameMode (f.GameMode)'  		GameType = this.ConvertGameType (f.GameType)'  		GameSubType = this.ConvertGameSubType (f.GameSubType)'  		MapId = string.Format ("Maps/{0}"' (int)f.Map)'  		Teams = new Collection<Team> {  			new Team {  				Color = ConvertTeam (f.TeamId)'  				Win = f.Stats.Win'  				Players = new Collection<PlayerStats> {  					new PlayerStats {  						ChampionId = string.Format ("Champions/{0}"' f.ChampionId)'  						FirstSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.First ())'  						SecondSpellId = string.Format ("Spells/{0}"' f.SummonerSpells.Last ())'  						DataLoaded = true'  						Win = f.Stats.Win'  						InfluencePointsEarned = f.IpEarned'  						TotalHeal = f.Stats.TotalHeal'  						TotalDamageDealt = f.Stats.TotalDamageDealt'  						TrueDamageDealt = f.Stats.TrueDamageDealtPlayer'  						PhysicalDamageDealt = f.Stats.PhysicalDamageDealtPlayer'  						MagicDamageDealt = f.Stats.MagicDamageDealtPlayer'  						TotalDamageDealtToChampions = f.Stats.TotalDamageDealtToChampions'  						TrueDamageDealtToChampions = f.Stats.TrueDamageDealtToChampions'  						PhysicalDamageDealtToChampions = f.Stats.PhysicalDamageDealtToChampions'  						MagicDamageDealtToChampions = f.Stats.MagicDamageDealtToChampions'  						TotalDamageTaken = f.Stats.TotalDamageTaken'  						TrueDamageTaken = f.Stats.TrueDamageTaken'  						PhysicalDamageTaken = f.Stats.PhysicalDamageTaken'  						MagicDamageTaken = f.Stats.MagicDamageTaken'  						Level = f.Stats.Level'  						GoldEarned = f.Stats.GoldEarned'  						GoldSpent = f.Stats.GoldSpent'  						Item1Id = this.ConvertItemId (f.Stats.ItemIds [0])'  						Item2Id = this.ConvertItemId (f.Stats.ItemIds [1])'  						Item3Id = this.ConvertItemId (f.Stats.ItemIds [2])'  						Item4Id = this.ConvertItemId (f.Stats.ItemIds [3])'  						Item5Id = this.ConvertItemId (f.Stats.ItemIds [4])'  						Item6Id = this.ConvertItemId (f.Stats.ItemIds [5])'  						SightWardsBought = f.Stats.SightWardsBought'  						WardsKilled = f.Stats.WardKilled'  						WardsPlaced = f.Stats.WardPlaced'  						ChampionsKilled = f.Stats.ChampionsKilled'  						Assists = f.Stats.Assists'  						Deaths = f.Stats.NumDeaths'  						MinionsKilled = f.Stats.MinionsKilled'  						NeutralMinionsKilledYourJungle = f.Stats.NeutralMinionsKilledYourJungle'  						NeutralMinionsKilledEnemyJungle = f.Stats.NeutralMinionsKilledEnemyJungle'  						LargestMultiKill = f.Stats.LargestMultiKill'  						SummonerId = string.Format ("Summoners/{0}"' summonerId)  					}  				}  			}'  			new Team {  				Color = GetOtherTeam (f.TeamId)'  				Win = !f.Stats.Win'  				Players = new Collection<PlayerStats> ()  			}  		}  	};  	foreach (var player in f.OtherPlayers) {  		Team team = match.Teams.First (d => d.Color == ConvertTeam (player.TeamId));  		team.Players.Add (new PlayerStats {  			DataLoaded = false'  			SummonerId = string.Format ("Summoners/{0}"' player.SummonerId)'  			ChampionId = string.Format ("Champions/{0}"' player.ChampionId)  		});  	}  	return match;  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetMapsAsync,The following statement contains a magic number: return Task.FromResult ((IEnumerable<Map>)new List<Map> {  	new Map (1' "Summoner's Rift")'  	new Map (2' "Summoner's Rift")'  	new Map (3' "The Proving Grounds")'  	new Map (4' "Twisted Treeline")'  	new Map (8' "The Crystal Scar")'  	new Map (10' "Twisted Treeline")'  	new Map (12' "Howling Abyss")  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetMapsAsync,The following statement contains a magic number: return Task.FromResult ((IEnumerable<Map>)new List<Map> {  	new Map (1' "Summoner's Rift")'  	new Map (2' "Summoner's Rift")'  	new Map (3' "The Proving Grounds")'  	new Map (4' "Twisted Treeline")'  	new Map (8' "The Crystal Scar")'  	new Map (10' "Twisted Treeline")'  	new Map (12' "Howling Abyss")  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetMapsAsync,The following statement contains a magic number: return Task.FromResult ((IEnumerable<Map>)new List<Map> {  	new Map (1' "Summoner's Rift")'  	new Map (2' "Summoner's Rift")'  	new Map (3' "The Proving Grounds")'  	new Map (4' "Twisted Treeline")'  	new Map (8' "The Crystal Scar")'  	new Map (10' "Twisted Treeline")'  	new Map (12' "Howling Abyss")  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetMapsAsync,The following statement contains a magic number: return Task.FromResult ((IEnumerable<Map>)new List<Map> {  	new Map (1' "Summoner's Rift")'  	new Map (2' "Summoner's Rift")'  	new Map (3' "The Proving Grounds")'  	new Map (4' "Twisted Treeline")'  	new Map (8' "The Crystal Scar")'  	new Map (10' "Twisted Treeline")'  	new Map (12' "Howling Abyss")  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetMapsAsync,The following statement contains a magic number: return Task.FromResult ((IEnumerable<Map>)new List<Map> {  	new Map (1' "Summoner's Rift")'  	new Map (2' "Summoner's Rift")'  	new Map (3' "The Proving Grounds")'  	new Map (4' "Twisted Treeline")'  	new Map (8' "The Crystal Scar")'  	new Map (10' "Twisted Treeline")'  	new Map (12' "Howling Abyss")  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,GetMapsAsync,The following statement contains a magic number: return Task.FromResult ((IEnumerable<Map>)new List<Map> {  	new Map (1' "Summoner's Rift")'  	new Map (2' "Summoner's Rift")'  	new Map (3' "The Proving Grounds")'  	new Map (4' "Twisted Treeline")'  	new Map (8' "The Crystal Scar")'  	new Map (10' "Twisted Treeline")'  	new Map (12' "Howling Abyss")  });  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,ConvertTeam,The following statement contains a magic number: switch (teamId) {  case 100:  	return TeamColor.Blue;  case 200:  	return TeamColor.Purple;  default:  	throw new ArgumentOutOfRangeException ("teamId");  }  
Magic Number,LeagueStatistics.Server.Infrastructure.Implementations.Services,LeagueService,C:\repos\XemioNetwork_LeagueStatistics\src\Server\LeagueStatistics.Server.Infrastructure\Implementations\Services\LeagueService.cs,ConvertTeam,The following statement contains a magic number: switch (teamId) {  case 100:  	return TeamColor.Blue;  case 200:  	return TeamColor.Purple;  default:  	throw new ArgumentOutOfRangeException ("teamId");  }  
