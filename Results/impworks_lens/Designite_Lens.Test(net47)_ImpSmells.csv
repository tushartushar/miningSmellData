Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The method has 103 lines of code.
Long Statement,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportAllOverloads,The length of the statement  "                ctx => { ctx.RegisterFunctionOverloads(typeof(ImportableStaticMethods)' nameof(ImportableStaticMethods.OverloadedAdd)' "myAdd"); }' " is 131.
Long Statement,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportPrivateMethodError,The length of the statement  "            var method = typeof(ImportableStaticMethods).GetMethod("UnimportableMethod2"' BindingFlags.NonPublic | BindingFlags.Static); " is 124.
Long Statement,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,EnumBitOperatorsTest,The length of the statement  "            Test("StringComparison::Ordinal | StringComparison::CurrentCulture"' StringComparison.Ordinal | StringComparison.CurrentCulture); " is 129.
Long Statement,Lens.Test.Internals,ExtensionMethodResolverTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\ExtensionMethodResolverTest.cs,Test,The length of the statement  "            var res = new ExtensionMethodResolver(new Dictionary<string' bool> {{"System"' true}' {"System.Linq"' true}}' new ReferencedAssemblyCache()); " is 141.
Long Statement,Lens.Test,TestBase,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\TestBase.cs,CreateCompiler,The length of the statement  "            compiler.RegisterAssembly(Assembly.Load("System.Drawing' Version=4.0.0.0' Culture=neutral' PublicKeyToken=b03f5f7f11d50a3a")); " is 126.
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesUpcast,The following statement contains a magic number: Test("1.2f as decimal"' 1.2M);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesUpcast,The following statement contains a magic number: Test("1.5 as decimal"' 1.5M);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesDowncast,The following statement contains a magic number: Test("42M as int"' 42);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesDowncast,The following statement contains a magic number: Test("42M as long"' 42L);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesDowncast,The following statement contains a magic number: Test("13.0M as double"' 13.0);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesDowncast,The following statement contains a magic number: Test("13.0M as float"' 13.0f);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesDowncast,The following statement contains a magic number: Test("13.37 as float"' 13.37f);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesDowncast,The following statement contains a magic number: Test("13.37 as long"' 13L);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesDowncast,The following statement contains a magic number: Test("13.37 as int"' 13);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesDowncast,The following statement contains a magic number: Test("13.37f as long"' 13L);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,NumericTypesDowncast,The following statement contains a magic number: Test("13.37f as int"' 13);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,CastToNullableNumeric,The following statement contains a magic number: Test("1.3 as float?"' 1.3f);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,CastFromNullableNumeric,The following statement contains a magic number: Test("(34 as int?) as int"' 34);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,Boxing,The following statement contains a magic number: Test("42M as object"' 42);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,Boxing,The following statement contains a magic number: Test("1.3 as object"' 1.3);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,Unboxing,The following statement contains a magic number: Test("(1.3 as object) as double"' 1.3);
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,DelegateCasting2,The following statement contains a magic number: Test(src' new[] {3' 4' 5});
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,DelegateCasting2,The following statement contains a magic number: Test(src' new[] {3' 4' 5});
Magic Number,Lens.Test.Features,CastingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\CastingTest.cs,DelegateCasting2,The following statement contains a magic number: Test(src' new[] {3' 4' 5});
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,Condition1,The following statement contains a magic number: Test(src' 2);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,Condition3,The following statement contains a magic number: Test(src' 3);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,Loop,The following statement contains a magic number: Test(src' 32);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,LoopResult,The following statement contains a magic number: Test(src' 16);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,NotNestedLoop,The following statement contains a magic number: Test(src' 15);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,NestedLoop,The following statement contains a magic number: Test(src' 45);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,ForLoop2,The following statement contains a magic number: Test(src' 5);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,TryCatch,The following statement contains a magic number: Test(src' 2);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,TryFinally,The following statement contains a magic number: Test(src' new[] {1' 2});
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,Using,The following statement contains a magic number: Test(src' 2);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,Using2,The following statement contains a magic number: Test(src' 2);
Magic Number,Lens.Test.Features,ControlStructuresTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ControlStructuresTest.cs,MultiDefinition,The following statement contains a magic number: Test(src' 42);
Magic Number,Lens.Test.Features,EventsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\EventsTest.cs,BasicEvent,The following statement contains a magic number: Test(src' 2);
Magic Number,Lens.Test.Features,EventsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\EventsTest.cs,SpecificEvent,The following statement contains a magic number: Test(src' 3);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,Closure1,The following statement contains a magic number: Test(src' 6);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,Closure2,The following statement contains a magic number: Test(src' 14);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,FunctionComposition1,The following statement contains a magic number: Test(src' 10);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,FunctionComposition2,The following statement contains a magic number: Test(src' 1337);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,FunctionComposition3,The following statement contains a magic number: Test(src' 1337);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,Wildcards1,The following statement contains a magic number: Test(src' 3);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,PartialApplication1,The following statement contains a magic number: Test(src' 10);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,PartialApplication3,The following statement contains a magic number: Test(src' 6);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,ConstructorApplication2,The following statement contains a magic number: Test(src' 12);
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,FunctionUnneededArgs,The following statement contains a magic number: Test(src' new[] {3' 3' 3});
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,FunctionUnneededArgs,The following statement contains a magic number: Test(src' new[] {3' 3' 3});
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,FunctionUnneededArgs,The following statement contains a magic number: Test(src' new[] {3' 3' 3});
Magic Number,Lens.Test.Features,FunctionalTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\FunctionalTest.cs,LambdaUnneededArgs,The following statement contains a magic number: Test(src' new[] {1' 3});
Magic Number,Lens.Test.Features,GlobalProperties,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\GlobalProperties.cs,Getter,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterProperty("half"' HalfValue); }'                  "half * 2"'                  42              );
Magic Number,Lens.Test.Features,GlobalProperties,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\GlobalProperties.cs,Statics,The following statement contains a magic number: SetX(1337);
Magic Number,Lens.Test.Features,GlobalProperties,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\GlobalProperties.cs,Statics,The following statement contains a magic number: Assert.AreEqual(1000' _y);
Magic Number,Lens.Test.Features,GlobalProperties,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\GlobalProperties.cs,Lambdas,The following statement contains a magic number: var x = 10;
Magic Number,Lens.Test.Features,GlobalProperties,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\GlobalProperties.cs,Lambdas,The following statement contains a magic number: Assert.AreEqual(42' y);
Magic Number,Lens.Test.Features,GlobalProperties,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\GlobalProperties.cs,ImportFunction,The following statement contains a magic number: Func<int' int> doubler = x => x * 2;
Magic Number,Lens.Test.Features,GlobalProperties,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\GlobalProperties.cs,ImportFunction,The following statement contains a magic number: TestConfigured(                  ctx =>                  {                      ctx.RegisterFunction("doubler"' doubler);                  }'                  "doubler 21"'                  42              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportFunctionWithArgs,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("addNumbers"' method); }'                  "addNumbers 1 2"'                  3              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportFunctionWithParams,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("sum"' method); }'                  "sum 1 2 3"'                  6              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportGenericFunctionWithLambda1,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("project"' method); }'                  @"  project    <| new [1; 2; 3; 4; 5]    <| x -> x*x  "'                  new List<int> {1' 4' 9' 16' 25}              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportGenericFunctionWithLambda1,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("project"' method); }'                  @"  project    <| new [1; 2; 3; 4; 5]    <| x -> x*x  "'                  new List<int> {1' 4' 9' 16' 25}              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportGenericFunctionWithLambda1,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("project"' method); }'                  @"  project    <| new [1; 2; 3; 4; 5]    <| x -> x*x  "'                  new List<int> {1' 4' 9' 16' 25}              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportGenericFunctionWithLambda1,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("project"' method); }'                  @"  project    <| new [1; 2; 3; 4; 5]    <| x -> x*x  "'                  new List<int> {1' 4' 9' 16' 25}              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportGenericFunctionWithLambda2,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("project"' method); }'                  "new [1; 2; 3; 4; 5].project (x -> x*x)"'                  new List<int> {1' 4' 9' 16' 25}              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportGenericFunctionWithLambda2,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("project"' method); }'                  "new [1; 2; 3; 4; 5].project (x -> x*x)"'                  new List<int> {1' 4' 9' 16' 25}              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportGenericFunctionWithLambda2,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("project"' method); }'                  "new [1; 2; 3; 4; 5].project (x -> x*x)"'                  new List<int> {1' 4' 9' 16' 25}              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportGenericFunctionWithLambda2,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunction("project"' method); }'                  "new [1; 2; 3; 4; 5].project (x -> x*x)"'                  new List<int> {1' 4' 9' 16' 25}              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportAllOverloads,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunctionOverloads(typeof(ImportableStaticMethods)' nameof(ImportableStaticMethods.OverloadedAdd)' "myAdd"); }'                  @"  new [      myAdd 1.3 3.7      myAdd 1 2 3      myAdd ""hello"" ""world""  ]  "'                  new object[] {5.0' 6.0' "helloworld"}              );
Magic Number,Lens.Test.Features,ImportingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\ImportingTest.cs,ImportAllOverloads,The following statement contains a magic number: TestConfigured(                  ctx => { ctx.RegisterFunctionOverloads(typeof(ImportableStaticMethods)' nameof(ImportableStaticMethods.OverloadedAdd)' "myAdd"); }'                  @"  new [      myAdd 1.3 3.7      myAdd 1 2 3      myAdd ""hello"" ""world""  ]  "'                  new object[] {5.0' 6.0' "helloworld"}              );
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,Linq1,The following statement contains a magic number: Test(src' new[] {3' 4' 5});
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,Linq1,The following statement contains a magic number: Test(src' new[] {3' 4' 5});
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,Linq1,The following statement contains a magic number: Test(src' new[] {3' 4' 5});
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,Linq2,The following statement contains a magic number: var result = new[] {4' 8' 12' 16' 20};
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,Linq2,The following statement contains a magic number: var result = new[] {4' 8' 12' 16' 20};
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,Linq2,The following statement contains a magic number: var result = new[] {4' 8' 12' 16' 20};
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,Linq2,The following statement contains a magic number: var result = new[] {4' 8' 12' 16' 20};
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,Linq2,The following statement contains a magic number: var result = new[] {4' 8' 12' 16' 20};
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,LambdaImplicitType1,The following statement contains a magic number: Test(src' 3);
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,LambdaComposition,The following statement contains a magic number: Test(src' 7);
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,LambdaIndexAssignment,The following statement contains a magic number: Test(src' 6);
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,LambdaCast1,The following statement contains a magic number: Test(src' 3);
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,LambdaCast2,The following statement contains a magic number: Test(src' new[] {1' 2' 4' 5});
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,LambdaCast2,The following statement contains a magic number: Test(src' new[] {1' 2' 4' 5});
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,LambdaCast2,The following statement contains a magic number: Test(src' new[] {1' 2' 4' 5});
Magic Number,Lens.Test.Features,LambdasInferenceTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LambdasInferenceTest.cs,MultiDefinitionInference,The following statement contains a magic number: Test(src' 12);
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,IntLiteral,The following statement contains a magic number: Test("1337"' 1337);
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,LongLiteral,The following statement contains a magic number: Test("4294967294L"' 4294967294);
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,FloatLiteral,The following statement contains a magic number: Test("1.337f"' 1.337f);
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,DoubleLiteral,The following statement contains a magic number: Test("1.337"' 1.337);
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,DecimalLiteral,The following statement contains a magic number: Test("1.337M"' 1.337M);
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,ArrayLiteral,The following statement contains a magic number: Test("new [1; 2; 3]"' new[] {1' 2' 3});
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,ArrayLiteral,The following statement contains a magic number: Test("new [1; 2; 3]"' new[] {1' 2' 3});
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,ListLiteral,The following statement contains a magic number: Test(@"new [[1; 42; 1337]]"' new List<int> {1' 42' 1337});
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,ListLiteral,The following statement contains a magic number: Test(@"new [[1; 42; 1337]]"' new List<int> {1' 42' 1337});
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,DictLiteral,The following statement contains a magic number: Test("new { 1 => true; 2 => false; 42 => true }"' new Dictionary<int' bool> {{1' true}' {2' false}' {42' true}});
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,DictLiteral,The following statement contains a magic number: Test("new { 1 => true; 2 => false; 42 => true }"' new Dictionary<int' bool> {{1' true}' {2' false}' {42' true}});
Magic Number,Lens.Test.Features,LiteralsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\LiteralsTest.cs,SizedArray,The following statement contains a magic number: Test("new int[2]"' new int[2]);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("1 + 2"' 3' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("13 + 0.37"' 13.37' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("1336.9 + 0.1"' 1337' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("(1336 as UInt32) + (1 as UInt32)"' 1337' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("43 - 1"' 42' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("21 * 2"' 42' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("1.5 * 1.5"' 2.25' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("84 / 2"' 42' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("92 % 50"' 42' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("2 ** 2"' 4' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArithmeticsTest,The following statement contains a magic number: Test("1.5 ** 5"' 7.59375' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NegationTest,The following statement contains a magic number: Test("-1.5"' -1.5' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NegationTest,The following statement contains a magic number: Test(src' -2' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OperatorPrecedenceTest,The following statement contains a magic number: Test("2 + 2 * 2"' 6' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OperatorPrecedenceTest,The following statement contains a magic number: Test("2 / 2 + 1"' 2' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OperatorPrecedenceTest,The following statement contains a magic number: Test("1 + 2 * 3 ** 4"' 163' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,XorTest,The following statement contains a magic number: Test("42 ^^ 1337"' 1299' true);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,IntegerBitOperatorsTest,The following statement contains a magic number: Test("1 | 2 | 4"' 7);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,IntegerBitOperatorsTest,The following statement contains a magic number: Test("1 | 3 | 6"' 7);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,IntegerBitOperatorsTest,The following statement contains a magic number: Test("1337 & 42"' 40);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,IntegerBitOperatorsTest,The following statement contains a magic number: Test("1337 ^ 42"' 1299);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,GetIndexTest,The following statement contains a magic number: Test("(new [1; 2; 3])[1]"' 2);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,GetIndexTest,The following statement contains a magic number: Test("new [1; 2; 3][1]"' 2);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OverloadedOperators,The following statement contains a magic number: Test("1M + 2M"' 3);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OverloadedOperators,The following statement contains a magic number: Test("2M * 2M"' 4);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OverloadedOperators,The following statement contains a magic number: Test("42M / 2M"' 21);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OverloadedOperatorsCasting,The following statement contains a magic number: Test("1M + 1"' 2M);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OverloadedOperatorsCasting,The following statement contains a magic number: Test("1 + 1M"' 2M);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OverloadedOperatorsCasting,The following statement contains a magic number: Test("1M + 2L"' 3M);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,OverloadedOperatorsCasting,The following statement contains a magic number: Test("2L + 1M"' 3M);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayConcat,The following statement contains a magic number: Test("new [1; 2; 3] + new [4; 5; 6]"' new[] {1' 2' 3' 4' 5' 6});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayConcat,The following statement contains a magic number: Test("new [1; 2; 3] + new [4; 5; 6]"' new[] {1' 2' 3' 4' 5' 6});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayConcat,The following statement contains a magic number: Test("new [1; 2; 3] + new [4; 5; 6]"' new[] {1' 2' 3' 4' 5' 6});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayConcat,The following statement contains a magic number: Test("new [1; 2; 3] + new [4; 5; 6]"' new[] {1' 2' 3' 4' 5' 6});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayConcat,The following statement contains a magic number: Test("new [1; 2; 3] + new [4; 5; 6]"' new[] {1' 2' 3' 4' 5' 6});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,IEnumerableConcat,The following statement contains a magic number: Test(                  @"(new [1; 2; 3].Select (x -> x * 2)) + new [[8; 10]]"'                  new[] {2' 4' 6' 8' 10}              );
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,IEnumerableConcat,The following statement contains a magic number: Test(                  @"(new [1; 2; 3].Select (x -> x * 2)) + new [[8; 10]]"'                  new[] {2' 4' 6' 8' 10}              );
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,IEnumerableConcat,The following statement contains a magic number: Test(                  @"(new [1; 2; 3].Select (x -> x * 2)) + new [[8; 10]]"'                  new[] {2' 4' 6' 8' 10}              );
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,IEnumerableConcat,The following statement contains a magic number: Test(                  @"(new [1; 2; 3].Select (x -> x * 2)) + new [[8; 10]]"'                  new[] {2' 4' 6' 8' 10}              );
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,IEnumerableConcat,The following statement contains a magic number: Test(                  @"(new [1; 2; 3].Select (x -> x * 2)) + new [[8; 10]]"'                  new[] {2' 4' 6' 8' 10}              );
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,DictionaryConcat,The following statement contains a magic number: Test(                  @"new {1 => true; 2 => true } + new { 2 => false; 3 => false }"'                  new Dictionary<int' bool> {{1' true}' {2' false}' {3' false}}              );
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,DictionaryConcat,The following statement contains a magic number: Test(                  @"new {1 => true; 2 => true } + new { 2 => false; 3 => false }"'                  new Dictionary<int' bool> {{1' true}' {2' false}' {3' false}}              );
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayRepetition,The following statement contains a magic number: Test(@"new [1; 2; 3] * 3"' new[] {1' 2' 3' 1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayRepetition,The following statement contains a magic number: Test(@"new [1; 2; 3] * 3"' new[] {1' 2' 3' 1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayRepetition,The following statement contains a magic number: Test(@"new [1; 2; 3] * 3"' new[] {1' 2' 3' 1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayRepetition,The following statement contains a magic number: Test(@"new [1; 2; 3] * 3"' new[] {1' 2' 3' 1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayRepetition,The following statement contains a magic number: Test(@"new [1; 2; 3] * 3"' new[] {1' 2' 3' 1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ArrayRepetition,The following statement contains a magic number: Test(@"new [1; 2; 3] * 3"' new[] {1' 2' 3' 1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,TypedSequenceRepetition,The following statement contains a magic number: Test(@"(1.to 3) * 2"' new[] {1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,TypedSequenceRepetition,The following statement contains a magic number: Test(@"(1.to 3) * 2"' new[] {1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,TypedSequenceRepetition,The following statement contains a magic number: Test(@"(1.to 3) * 2"' new[] {1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,TypedSequenceRepetition,The following statement contains a magic number: Test(@"(1.to 3) * 2"' new[] {1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,UntypedSequenceRepetition,The following statement contains a magic number: Test(src' new[] {1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,UntypedSequenceRepetition,The following statement contains a magic number: Test(src' new[] {1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,UntypedSequenceRepetition,The following statement contains a magic number: Test(src' new[] {1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,UntypedSequenceRepetition,The following statement contains a magic number: Test(src' new[] {1' 2' 3' 1' 2' 3});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ShorthandAssignment1,The following statement contains a magic number: Test(src' 3);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ShorthandAssignment3,The following statement contains a magic number: Test(src' 4);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ShorthandAssignment4,The following statement contains a magic number: Test(src' new[] {1' 3' 5});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ShorthandAssignment4,The following statement contains a magic number: Test(src' new[] {1' 3' 5});
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,ComplexConstants,The following statement contains a magic number: Test(src' 2.5M);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesce1,The following statement contains a magic number: Test("(null as int?) ?? 2.3"' 2.3);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesce1,The following statement contains a magic number: Test("(null as double?) ?? 3"' 3.0);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesce1,The following statement contains a magic number: Test("(4 as int?) ?? 2"' 4);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesce1,The following statement contains a magic number: Test("(5 as int?) ?? 2.3"' 5.0);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesce1,The following statement contains a magic number: Test("(6.1 as double?) ?? 1"' 6.1);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesce1,The following statement contains a magic number: Test("(7.1 as double?) ?? 5.0"' 7.1);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesce1,The following statement contains a magic number: Test("(8 as int?) ?? (1 as int?)"' 8);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesce1,The following statement contains a magic number: Test("(9 as int?) ?? (1 as double?)"' 9);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesce1,The following statement contains a magic number: Test("null ?? null ?? 10"' 10);
Magic Number,Lens.Test.Features,OperatorsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\OperatorsTest.cs,NullCoalesceCache,The following statement contains a magic number: Test(src' new [] { 1' 42 });
Magic Number,Lens.Test.Features,PatternMatchingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\PatternMatchingTest.cs,ArraySubsequence1,The following statement contains a magic number: Test(src' new[] {1' 2});
Magic Number,Lens.Test.Features,PatternMatchingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\PatternMatchingTest.cs,ArraySubsequence2,The following statement contains a magic number: Test(src' new[] {2' 3});
Magic Number,Lens.Test.Features,PatternMatchingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\PatternMatchingTest.cs,ArraySubsequence2,The following statement contains a magic number: Test(src' new[] {2' 3});
Magic Number,Lens.Test.Features,PatternMatchingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\PatternMatchingTest.cs,ArraySubsequence3,The following statement contains a magic number: Test(src' new[] {3' 4});
Magic Number,Lens.Test.Features,PatternMatchingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\PatternMatchingTest.cs,ArraySubsequence3,The following statement contains a magic number: Test(src' new[] {3' 4});
Magic Number,Lens.Test.Features,PatternMatchingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\PatternMatchingTest.cs,ArraySubsequence4,The following statement contains a magic number: Test(src' 4);
Magic Number,Lens.Test.Features,PatternMatchingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\PatternMatchingTest.cs,RegexNamedGroupsWithConverters,The following statement contains a magic number: Test(src' 42);
Magic Number,Lens.Test.Features,PatternMatchingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\PatternMatchingTest.cs,RegexModifiers,The following statement contains a magic number: Test(src' new[] {2' 3' 1});
Magic Number,Lens.Test.Features,PatternMatchingTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\PatternMatchingTest.cs,RegexModifiers,The following statement contains a magic number: Test(src' new[] {2' 3' 1});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,SaveAndLoadLocal,The following statement contains a magic number: Test(src2' new[] {1' 2});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,InvokeDynamic2,The following statement contains a magic number: Test(@"(1+2).GetHashCode ()"' 3);
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ArrayIndexSetter,The following statement contains a magic number: Test(src' 11);
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ListIndexSetter,The following statement contains a magic number: Test(src' 11);
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,DictIndexSetter,The following statement contains a magic number: Test(src' 4);
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,GetArrayLength,The following statement contains a magic number: Test(src' 2);
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ExtensionMethods,The following statement contains a magic number: Test(src' 5);
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,CustomWhile,The following statement contains a magic number: Test(src' 10);
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,Shift,The following statement contains a magic number: Test(src' new[] {4' 48' 16' 4' 0});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,Shift,The following statement contains a magic number: Test(src' new[] {4' 48' 16' 4' 0});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,Shift,The following statement contains a magic number: Test(src' new[] {4' 48' 16' 4' 0});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,Shift,The following statement contains a magic number: Test(src' new[] {4' 48' 16' 4' 0});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,RefArray,The following statement contains a magic number: Test(src' new[] {1' 2' 3});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,RefArray,The following statement contains a magic number: Test(src' new[] {1' 2' 3});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ScopeNames1,The following statement contains a magic number: Test(src' new[] {3' 4' 9' 8' 15});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ScopeNames1,The following statement contains a magic number: Test(src' new[] {3' 4' 9' 8' 15});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ScopeNames1,The following statement contains a magic number: Test(src' new[] {3' 4' 9' 8' 15});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ScopeNames1,The following statement contains a magic number: Test(src' new[] {3' 4' 9' 8' 15});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ScopeNames1,The following statement contains a magic number: Test(src' new[] {3' 4' 9' 8' 15});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ScopeNames2,The following statement contains a magic number: Test(src' new[] {2' 4' 6});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ScopeNames2,The following statement contains a magic number: Test(src' new[] {2' 4' 6});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ScopeNames2,The following statement contains a magic number: Test(src' new[] {2' 4' 6});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,SizedArray1,The following statement contains a magic number: Test(src' 5);
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,SizedArray3,The following statement contains a magic number: Test(src' 21);
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,SubScopeClosures,The following statement contains a magic number: Test(src' new[] {2' 6' 6' 12' 10});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,SubScopeClosures,The following statement contains a magic number: Test(src' new[] {2' 6' 6' 12' 10});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,SubScopeClosures,The following statement contains a magic number: Test(src' new[] {2' 6' 6' 12' 10});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,SubScopeClosures,The following statement contains a magic number: Test(src' new[] {2' 6' 6' 12' 10});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,SubScopeClosures,The following statement contains a magic number: Test(src' new[] {2' 6' 6' 12' 10});
Magic Number,Lens.Test.Features,Snippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\Snippets.cs,ComplexGenericResolution2,The following statement contains a magic number: TestConfigured(                  x =>                  {                      x.RegisterType(typeof(RestrictionTest));                      x.RegisterType(typeof(RestrictionAcceptor));                  }'                  src'                  2              );
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,TimesTest1,The following statement contains a magic number: Test(src' 32);
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RandTest1,The following statement contains a magic number: idx < 1000
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RandTest2,The following statement contains a magic number: Assert.IsTrue(res >= 1 && res <= 1000);
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RandTest2,The following statement contains a magic number: idx < 1000
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RandTest3,The following statement contains a magic number: Assert.IsTrue(res >= 1 && res <= 5);
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RandTest3,The following statement contains a magic number: idx < 100
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,ClampTest,The following statement contains a magic number: Test("1.clamp 10 20"' 10);
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,ClampTest,The following statement contains a magic number: Test("100.clamp 10 20"' 20);
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,ClampTest,The following statement contains a magic number: Test("1.2.clamp 10 20"' 10.0);
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,ClampTest,The following statement contains a magic number: Test("1337.1.clamp 10 20"' 20.0);
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("1.to 5"' new[] {1' 2' 3' 4' 5});
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("1.to 5"' new[] {1' 2' 3' 4' 5});
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("1.to 5"' new[] {1' 2' 3' 4' 5});
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("1.to 5"' new[] {1' 2' 3' 4' 5});
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("5.to 1"' new[] {5' 4' 3' 2' 1});
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("5.to 1"' new[] {5' 4' 3' 2' 1});
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("5.to 1"' new[] {5' 4' 3' 2' 1});
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("5.to 1"' new[] {5' 4' 3' 2' 1});
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("1.to 100 3"' Enumerable.Range(1' 100).Where((x' id) => id % 3 == 0));
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("1.to 100 3"' Enumerable.Range(1' 100).Where((x' id) => id % 3 == 0));
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("100.to 1 3"' Enumerable.Range(1' 100).Reverse().Where((x' id) => id % 3 == 0));
Magic Number,Lens.Test.Features,StdlibTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\StdlibTest.cs,RangeIntTest,The following statement contains a magic number: Test("100.to 1 3"' Enumerable.Range(1' 100).Reverse().Where((x' id) => id % 3 == 0));
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,FuncDeclareAndInvoke,The following statement contains a magic number: Test(src' 10);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,Algebraic2,The following statement contains a magic number: Test(src' 101);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,Records1,The following statement contains a magic number: Test(src' 6);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,Records2,The following statement contains a magic number: Test(src' 6);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,RefFunction1,The following statement contains a magic number: Test(src' 100);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,RefFunction2,The following statement contains a magic number: Test(src' 42);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,GenericWithCustom1,The following statement contains a magic number: Test(src' 3);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,GenericWithCustom2,The following statement contains a magic number: Test(src' 3);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,GenericWithCustom3,The following statement contains a magic number: Test(src' 5);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,CustomTypeLinq2,The following statement contains a magic number: Test(src' 42);
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc0,The following statement contains a magic number: Test(src' new[] {42' 42});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc0,The following statement contains a magic number: Test(src' new[] {42' 42});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc1,The following statement contains a magic number: Test(src' new[] {2' 4' 4' 6' 2});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc1,The following statement contains a magic number: Test(src' new[] {2' 4' 4' 6' 2});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc1,The following statement contains a magic number: Test(src' new[] {2' 4' 4' 6' 2});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc1,The following statement contains a magic number: Test(src' new[] {2' 4' 4' 6' 2});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc1,The following statement contains a magic number: Test(src' new[] {2' 4' 4' 6' 2});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc2,The following statement contains a magic number: Test(src' new[] {2' 3' 5' 2' 5});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc2,The following statement contains a magic number: Test(src' new[] {2' 3' 5' 2' 5});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc2,The following statement contains a magic number: Test(src' new[] {2' 3' 5' 2' 5});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc2,The following statement contains a magic number: Test(src' new[] {2' 3' 5' 2' 5});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,PureFunc2,The following statement contains a magic number: Test(src' new[] {2' 3' 5' 2' 5});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,VariadicFunction1,The following statement contains a magic number: Test(src' new[] {1' 3' 15' 6});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,VariadicFunction1,The following statement contains a magic number: Test(src' new[] {1' 3' 15' 6});
Magic Number,Lens.Test.Features,UserDeclarationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Features\UserDeclarationsTest.cs,VariadicFunction1,The following statement contains a magic number: Test(src' new[] {1' 3' 15' 6});
Magic Number,Lens.Test.Internals,FunctionalHelperTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\FunctionalHelperTest.cs,CreateActionTypeTest,The following statement contains a magic number: Assert.Throws<LensCompilerException>(() => FunctionalHelper.CreateActionType(new Type[20]));
Magic Number,Lens.Test.Internals,FunctionalHelperTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\FunctionalHelperTest.cs,CreateFuncTypeTest,The following statement contains a magic number: Assert.Throws<LensCompilerException>(() => FunctionalHelper.CreateFuncType(typeof(int)' new Type[20]));
Magic Number,Lens.Test.Internals,FunctionalHelperTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\FunctionalHelperTest.cs,CreateLambdaTypeTest,The following statement contains a magic number: Assert.Throws<LensCompilerException>(() => FunctionalHelper.CreateLambdaType(new Type[20]));
Magic Number,Lens.Test.Internals,RestrictionAcceptor,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\ImportableClasses.cs,AcceptStatic,The following statement contains a magic number: return 2;
Magic Number,Lens.Test.Internals,TranslationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TranslationsTest.cs,MessagePrefixCorrectness,The following statement contains a magic number: var unmatched = lookups[0].Keys.Where(k => lookups[0][k].Substring(0' 6) != lookups[1][k].Substring(0' 6)).ToArray();
Magic Number,Lens.Test.Internals,TranslationsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TranslationsTest.cs,MessagePrefixCorrectness,The following statement contains a magic number: var unmatched = lookups[0].Keys.Where(k => lookups[0][k].Substring(0' 6) != lookups[1][k].Substring(0' 6)).ToArray();
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,MultiArgumentGeneric,The following statement contains a magic number: TestDistanceFrom<Action<DerivedClass' DerivedClass>' Action<ParentClass' ParentClass>>(2);
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,MultiArgumentGeneric,The following statement contains a magic number: TestDistanceFrom<Func<DerivedClass' ParentClass>' Func<ParentClass' DerivedClass>>(2);
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,IntegralTypeConversion,The following statement contains a magic number: TestDistanceFrom<long' sbyte>(3);
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,FloatingPointTypeConversion,The following statement contains a magic number: TestDistanceFrom<decimal' float>(2);
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,CrossDomainNumberConversion,The following statement contains a magic number: TestDistanceFrom<double' short>(3);
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,CrossDomainNumberConversion,The following statement contains a magic number: TestDistanceFrom<decimal' sbyte>(4);
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,UnsignedToFloatConversion,The following statement contains a magic number: TestDistanceFrom<float' ushort>(2);
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,UnsignedToFloatConversion,The following statement contains a magic number: TestDistanceFrom<double' uint>(2);
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,ArrayAsObjectDistance,The following statement contains a magic number: TestDistanceFrom<object' int[]>(2);
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,GenericParameter,The following statement contains a magic number: Assert.AreEqual(2' to.DistanceFrom(from));
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,GenericParameter2,The following statement contains a magic number: Assert.AreEqual(2' to[0].DistanceFrom(from1));
Magic Number,Lens.Test.Internals,TypeExtensionsTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Internals\TypeExtensionsTest.cs,GenericParameter2,The following statement contains a magic number: Assert.AreEqual(2' to[1].DistanceFrom(from2));
Magic Number,Lens.Test.Parsers,LexerTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\LexerTest.cs,StringErrorLocation,The following statement contains a magic number: TestError(                  @"let x = ""hello"'                  LexerMessages.UnclosedString'                  ex =>                  {                      Assert.AreEqual(new LexemLocation {Line = 1' Offset = 9}' ex.StartLocation);                      Assert.AreEqual(new LexemLocation {Line = 1' Offset = 15}' ex.EndLocation);                  }              );
Magic Number,Lens.Test.Parsers,LexerTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\LexerTest.cs,StringErrorLocation,The following statement contains a magic number: TestError(                  @"let x = ""hello"'                  LexerMessages.UnclosedString'                  ex =>                  {                      Assert.AreEqual(new LexemLocation {Line = 1' Offset = 9}' ex.StartLocation);                      Assert.AreEqual(new LexemLocation {Line = 1' Offset = 15}' ex.EndLocation);                  }              );
Magic Number,Lens.Test.Parsers,LexerTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\LexerTest.cs,StringEscapeTest,The following statement contains a magic number: Assert.AreEqual(lexer.Lexems.Count' 2);
Magic Number,Lens.Test.Parsers,LexerTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\LexerTest.cs,CharEscapeTest,The following statement contains a magic number: Assert.AreEqual(lexer.Lexems.Count' 2);
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,LargeSnippets,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserLargeTest.cs,GraphicScript1,The following statement contains a magic number: var nodes = new NodeBase[]              {                  Expr.Fun(                      "maker"'                      "Rect"'                      new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                      Expr.Let("r"' Expr.New("Rect"))'                      Expr.SetMember(                          Expr.Get("r")'                          "X"'                          Expr.Mult(                              Expr.Add(Expr.Get("x")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Y"'                          Expr.Mult(                              Expr.Add(Expr.Get("y")' Expr.Int(1))'                              Expr.Int(50)                          )                      )'                      Expr.SetMember(                          Expr.Get("r")'                          "Focus"'                          Expr.Lambda(                              Expr.SetMember(                                  Expr.Get("r")'                                  "Fill"'                                  Expr.Invoke(                                      "System.Windows.Media.Color"'                                      "FromRgb"'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )'                                      Expr.Cast(                                          Expr.Invoke("rand"' Expr.Int(100)' Expr.Int(255))'                                          "byte"                                      )                                  )                              )                          )                      )'                      Expr.Get("r")                  )'                    Expr.Let(                      "create"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")' Expr.Arg("y"' "int")}'                          Expr.Invoke(                              Expr.Get("Screen")'                              "Add"'                              Expr.Invoke(                                  "maker"'                                  Expr.Get("x")'                                  Expr.Get("y")                              )                          )                      )                  )'                    Expr.Invoke(                      Expr.Int(10)'                      "times"'                      Expr.Lambda(                          new[] {Expr.Arg("x"' "int")}'                          Expr.Invoke(                              Expr.Int(10)'                              "times"'                              Expr.Lambda(                                  new[] {Expr.Arg("y"' "int")}'                                  Expr.Invoke(                                      "create"'                                      Expr.Get("x")'                                      Expr.Get("y")                                  )                              )                          )                      )                  )              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,ArrayDeclaration,The following statement contains a magic number: var result = Expr.Array(                  Expr.Int(1)'                  Expr.Int(2)'                  Expr.Add(Expr.Int(1)' Expr.Int(2))              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,ArrayDeclaration,The following statement contains a magic number: var result = Expr.Array(                  Expr.Int(1)'                  Expr.Int(2)'                  Expr.Add(Expr.Int(1)' Expr.Int(2))              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,TupleDeclaration,The following statement contains a magic number: var result = Expr.Tuple(                  Expr.Int(1)'                  Expr.Double(1.2)'                  Expr.Str("hello world")'                  Expr.True()              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,NewObjectDeclaration,The following statement contains a magic number: var result = Expr.New(                  "SomeObject"'                  Expr.False()'                  Expr.Double(13.37)              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,BareLambda,The following statement contains a magic number: var result = Expr.Let("getFive"' Expr.Lambda(Expr.Int(5)));
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,ParametricLambda,The following statement contains a magic number: var result = Expr.Invoke(                  Expr.Get("a")'                  "Where"'                  Expr.Lambda(                      new[] {Expr.Arg("x"' "int")}'                      Expr.Less(                          Expr.Get("x")'                          Expr.Int(10)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,GetDynamicMember2,The following statement contains a magic number: var result = Expr.Set(                  "a"'                  Expr.GetMember(                      Expr.Add(Expr.Int(1)' Expr.Int(2))'                      "someShit"                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,SetDynamicMember2,The following statement contains a magic number: var result = Expr.SetMember(                  Expr.Add(Expr.Int(1)' Expr.Int(2))'                  "someShit"'                  Expr.Get("a")              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,GetIndex,The following statement contains a magic number: var result = Expr.Set(                  "a"'                  Expr.GetIdx(                      Expr.Get("b")'                      Expr.Pow(                          Expr.Int(2)'                          Expr.Int(2)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,GetIndex,The following statement contains a magic number: var result = Expr.Set(                  "a"'                  Expr.GetIdx(                      Expr.Get("b")'                      Expr.Pow(                          Expr.Int(2)'                          Expr.Int(2)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,SetIndex,The following statement contains a magic number: var result = Expr.SetIdx(                  Expr.Get("a")'                  Expr.Pow(Expr.Int(2)' Expr.Int(2))'                  Expr.Invoke(                      "test"'                      Expr.Int(1)'                      Expr.Int(2)'                      Expr.Int(3)                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,SetIndex,The following statement contains a magic number: var result = Expr.SetIdx(                  Expr.Get("a")'                  Expr.Pow(Expr.Int(2)' Expr.Int(2))'                  Expr.Invoke(                      "test"'                      Expr.Int(1)'                      Expr.Int(2)'                      Expr.Int(3)                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,SetIndex,The following statement contains a magic number: var result = Expr.SetIdx(                  Expr.Get("a")'                  Expr.Pow(Expr.Int(2)' Expr.Int(2))'                  Expr.Invoke(                      "test"'                      Expr.Int(1)'                      Expr.Int(2)'                      Expr.Int(3)                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,SetIndex,The following statement contains a magic number: var result = Expr.SetIdx(                  Expr.Get("a")'                  Expr.Pow(Expr.Int(2)' Expr.Int(2))'                  Expr.Invoke(                      "test"'                      Expr.Int(1)'                      Expr.Int(2)'                      Expr.Int(3)                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,MultilineLambda,The following statement contains a magic number: var result = Expr.Lambda              (                  new[] {Expr.Arg("a"' "double")}'                  Expr.Invoke(                      Expr.Get("logger")'                      "log"'                      Expr.Get("a")                  )'                  Expr.Pow(                      Expr.Get("a")'                      Expr.Int(2)                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,MultilineInvocation,The following statement contains a magic number: var result = Expr.Invoke(                  "test"'                  Expr.True()'                  Expr.Lambda                  (                      new[] {Expr.Arg("a"' "double")}'                      Expr.Invoke(                          Expr.Get("logger")'                          "log"'                          Expr.Get("a")                      )'                      Expr.Pow(                          Expr.Get("a")'                          Expr.Int(2)                      )                  )'                  Expr.False()              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,ConditionSimple,The following statement contains a magic number: var result = Expr.If(                  Expr.True()'                  Expr.Block(                      Expr.Set("a"' Expr.Int(1))'                      Expr.Set("b"' Expr.Int(2))                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,ManyParameters,The following statement contains a magic number: var result = Expr.Invoke(                  "test"'                  Expr.Int(1337)'                  Expr.True()'                  Expr.Str("hello")'                  Expr.Tuple(                      Expr.Double(13.37)'                      Expr.Array(                          Expr.Int(1)'                          Expr.Int(2)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,ManyParameters,The following statement contains a magic number: var result = Expr.Invoke(                  "test"'                  Expr.Int(1337)'                  Expr.True()'                  Expr.Str("hello")'                  Expr.Tuple(                      Expr.Double(13.37)'                      Expr.Array(                          Expr.Int(1)'                          Expr.Int(2)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,ManyParameters,The following statement contains a magic number: var result = Expr.Invoke(                  "test"'                  Expr.Int(1337)'                  Expr.True()'                  Expr.Str("hello")'                  Expr.Tuple(                      Expr.Double(13.37)'                      Expr.Array(                          Expr.Int(1)'                          Expr.Int(2)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,OperatorPriority1,The following statement contains a magic number: var result = Expr.Greater(                  Expr.Invoke(                      "test"'                      Expr.Get("a")'                      Expr.Get("b")                  )'                  Expr.Int(10)              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,OperatorPriority2,The following statement contains a magic number: var result = Expr.Sub(                  Expr.Add(                      Expr.Int(1)'                      Expr.Int(2)                  )'                  Expr.Mod(                      Expr.Div(                          Expr.Mult(                              Expr.Int(3)'                              Expr.Int(4)                          )'                          Expr.Int(5)                      )'                      Expr.Pow(                          Expr.Int(6)'                          Expr.Int(7)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,OperatorPriority2,The following statement contains a magic number: var result = Expr.Sub(                  Expr.Add(                      Expr.Int(1)'                      Expr.Int(2)                  )'                  Expr.Mod(                      Expr.Div(                          Expr.Mult(                              Expr.Int(3)'                              Expr.Int(4)                          )'                          Expr.Int(5)                      )'                      Expr.Pow(                          Expr.Int(6)'                          Expr.Int(7)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,OperatorPriority2,The following statement contains a magic number: var result = Expr.Sub(                  Expr.Add(                      Expr.Int(1)'                      Expr.Int(2)                  )'                  Expr.Mod(                      Expr.Div(                          Expr.Mult(                              Expr.Int(3)'                              Expr.Int(4)                          )'                          Expr.Int(5)                      )'                      Expr.Pow(                          Expr.Int(6)'                          Expr.Int(7)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,OperatorPriority2,The following statement contains a magic number: var result = Expr.Sub(                  Expr.Add(                      Expr.Int(1)'                      Expr.Int(2)                  )'                  Expr.Mod(                      Expr.Div(                          Expr.Mult(                              Expr.Int(3)'                              Expr.Int(4)                          )'                          Expr.Int(5)                      )'                      Expr.Pow(                          Expr.Int(6)'                          Expr.Int(7)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,OperatorPriority2,The following statement contains a magic number: var result = Expr.Sub(                  Expr.Add(                      Expr.Int(1)'                      Expr.Int(2)                  )'                  Expr.Mod(                      Expr.Div(                          Expr.Mult(                              Expr.Int(3)'                              Expr.Int(4)                          )'                          Expr.Int(5)                      )'                      Expr.Pow(                          Expr.Int(6)'                          Expr.Int(7)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,OperatorPriority2,The following statement contains a magic number: var result = Expr.Sub(                  Expr.Add(                      Expr.Int(1)'                      Expr.Int(2)                  )'                  Expr.Mod(                      Expr.Div(                          Expr.Mult(                              Expr.Int(3)'                              Expr.Int(4)                          )'                          Expr.Int(5)                      )'                      Expr.Pow(                          Expr.Int(6)'                          Expr.Int(7)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,DefinitionAndInvocation,The following statement contains a magic number: var definition = Expr.Fun("test"' "int"' Expr.Int(10));
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,LinqCall,The following statement contains a magic number: var result = Expr.Invoke(                  Expr.Array(Expr.Int(1)' Expr.Int(2))'                  "Where"'                  Expr.Lambda(                      new[] {Expr.Arg("x"' "int")}'                      Expr.Greater(                          Expr.Get("x")'                          Expr.Int(1)                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,FluentCall,The following statement contains a magic number: var result = Expr.Invoke(                  Expr.Invoke(                      Expr.Invoke(Expr.GetMember("Enumerable"' "Range")' Expr.Int(1)' Expr.Int(100))'                      "Where"'                      Expr.Lambda(                          new[] {Expr.Arg("i"' "int")}'                          Expr.Equal(Expr.Mod(Expr.Get("i")' Expr.Int(2))' Expr.Int())                      )                  )'                  "Select"'                  Expr.Lambda(                      new[] {Expr.Arg("i"' "int")}'                      Expr.Mult(Expr.Get("i")' Expr.Int(2))                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,FluentCall,The following statement contains a magic number: var result = Expr.Invoke(                  Expr.Invoke(                      Expr.Invoke(Expr.GetMember("Enumerable"' "Range")' Expr.Int(1)' Expr.Int(100))'                      "Where"'                      Expr.Lambda(                          new[] {Expr.Arg("i"' "int")}'                          Expr.Equal(Expr.Mod(Expr.Get("i")' Expr.Int(2))' Expr.Int())                      )                  )'                  "Select"'                  Expr.Lambda(                      new[] {Expr.Arg("i"' "int")}'                      Expr.Mult(Expr.Get("i")' Expr.Int(2))                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,FluentCall,The following statement contains a magic number: var result = Expr.Invoke(                  Expr.Invoke(                      Expr.Invoke(Expr.GetMember("Enumerable"' "Range")' Expr.Int(1)' Expr.Int(100))'                      "Where"'                      Expr.Lambda(                          new[] {Expr.Arg("i"' "int")}'                          Expr.Equal(Expr.Mod(Expr.Get("i")' Expr.Int(2))' Expr.Int())                      )                  )'                  "Select"'                  Expr.Lambda(                      new[] {Expr.Arg("i"' "int")}'                      Expr.Mult(Expr.Get("i")' Expr.Int(2))                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,FluentCall2,The following statement contains a magic number: var result = Expr.Invoke(                  Expr.Invoke(                      Expr.Invoke(Expr.GetMember("Enumerable"' "Range")' Expr.Int(1)' Expr.Int(100))'                      "Where"'                      Expr.Lambda(                          new[] {Expr.Arg("i")}'                          Expr.Equal(Expr.Mod(Expr.Get("i")' Expr.Int(2))' Expr.Int())                      )                  )'                  "Select"'                  Expr.Lambda(                      new[] {Expr.Arg("i")}'                      Expr.Mult(Expr.Get("i")' Expr.Int(2))                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,FluentCall2,The following statement contains a magic number: var result = Expr.Invoke(                  Expr.Invoke(                      Expr.Invoke(Expr.GetMember("Enumerable"' "Range")' Expr.Int(1)' Expr.Int(100))'                      "Where"'                      Expr.Lambda(                          new[] {Expr.Arg("i")}'                          Expr.Equal(Expr.Mod(Expr.Get("i")' Expr.Int(2))' Expr.Int())                      )                  )'                  "Select"'                  Expr.Lambda(                      new[] {Expr.Arg("i")}'                      Expr.Mult(Expr.Get("i")' Expr.Int(2))                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,FluentCall2,The following statement contains a magic number: var result = Expr.Invoke(                  Expr.Invoke(                      Expr.Invoke(Expr.GetMember("Enumerable"' "Range")' Expr.Int(1)' Expr.Int(100))'                      "Where"'                      Expr.Lambda(                          new[] {Expr.Arg("i")}'                          Expr.Equal(Expr.Mod(Expr.Get("i")' Expr.Int(2))' Expr.Int())                      )                  )'                  "Select"'                  Expr.Lambda(                      new[] {Expr.Arg("i")}'                      Expr.Mult(Expr.Get("i")' Expr.Int(2))                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,Algebraic2,The following statement contains a magic number: var result = new NodeBase[]              {                  Expr.Type(                      "TestType"'                      Expr.Label("Small"' "int")'                      Expr.Label("Large"' "int")                  )'                    Expr.Var("a"' Expr.New("Small"' Expr.Int(1)))'                  Expr.Var("b"' Expr.New("Large"' Expr.Int(100)))'                  Expr.Add(                      Expr.GetMember(Expr.Get("a")' "Tag")'                      Expr.GetMember(Expr.Get("b")' "Tag")                  )              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,FunWithIfThenElse,The following statement contains a magic number: var result = Expr.Fun(                  "part"'                  new[]                  {                      Expr.Arg("x"' "int")                  }'                  Expr.If(                      Expr.Greater(Expr.Get("x")' Expr.Int(100))'                      Expr.Block(                          Expr.Cast(                              Expr.New("Large"' Expr.Get("x"))'                              "TestType"                          )                      )'                      Expr.Block(                          Expr.New("Small"' Expr.Get("x"))                      )                  )              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,Algebraic3,The following statement contains a magic number: var result = new NodeBase[]              {                  Expr.Type(                      "TestType"'                      Expr.Label("Small"' "int")'                      Expr.Label("Large"' "int")                  )'                    Expr.Fun(                      "part"'                      "TestType"'                      new[] {Expr.Arg("x"' "int")}'                      Expr.If(                          Expr.Greater(Expr.Get("x")' Expr.Int(100))'                          Expr.Block(                              Expr.Cast(                                  Expr.New("Large"' Expr.Get("x"))'                                  "TestType"                              )                          )'                          Expr.Block(                              Expr.New("Small"' Expr.Get("x"))                          )                      )                  )'                    Expr.Var("a"' Expr.Invoke("part"' Expr.Int(10)))'                  Expr.Array(                      Expr.Is(Expr.Get("a")' "TestType")'                      Expr.Is(Expr.Get("a")' "Small")'                      Expr.Is(Expr.Get("a")' "Large")                  )              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,Algebraic3,The following statement contains a magic number: var result = new NodeBase[]              {                  Expr.Type(                      "TestType"'                      Expr.Label("Small"' "int")'                      Expr.Label("Large"' "int")                  )'                    Expr.Fun(                      "part"'                      "TestType"'                      new[] {Expr.Arg("x"' "int")}'                      Expr.If(                          Expr.Greater(Expr.Get("x")' Expr.Int(100))'                          Expr.Block(                              Expr.Cast(                                  Expr.New("Large"' Expr.Get("x"))'                                  "TestType"                              )                          )'                          Expr.Block(                              Expr.New("Small"' Expr.Get("x"))                          )                      )                  )'                    Expr.Var("a"' Expr.Invoke("part"' Expr.Int(10)))'                  Expr.Array(                      Expr.Is(Expr.Get("a")' "TestType")'                      Expr.Is(Expr.Get("a")' "Small")'                      Expr.Is(Expr.Get("a")' "Large")                  )              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,Records1,The following statement contains a magic number: var result = new NodeBase[]              {                  Expr.Record(                      "Holder"'                      Expr.Field("A"' "int")'                      Expr.Field("B"' "int")                  )'                    Expr.Var(                      "a"'                      Expr.New("Holder"' Expr.Int(2)' Expr.Int(3))                  )'                  Expr.Mult(                      Expr.GetMember(Expr.Get("a")' "A")'                      Expr.GetMember(Expr.Get("a")' "B")                  )              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,Records1,The following statement contains a magic number: var result = new NodeBase[]              {                  Expr.Record(                      "Holder"'                      Expr.Field("A"' "int")'                      Expr.Field("B"' "int")                  )'                    Expr.Var(                      "a"'                      Expr.New("Holder"' Expr.Int(2)' Expr.Int(3))                  )'                  Expr.Mult(                      Expr.GetMember(Expr.Get("a")' "A")'                      Expr.GetMember(Expr.Get("a")' "B")                  )              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,Records2,The following statement contains a magic number: var result = new NodeBase[]              {                  Expr.Record("First"' Expr.Field("A"' "int"))'                  Expr.Record("Second"' Expr.Field("B"' "int"))'                    Expr.Var("a"' Expr.New("First"' Expr.Int(2)))'                  Expr.Var("b"' Expr.New("Second"' Expr.Int(3)))'                  Expr.Mult(                      Expr.GetMember(Expr.Get("a")' "A")'                      Expr.GetMember(Expr.Get("b")' "B")                  )              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,Records2,The following statement contains a magic number: var result = new NodeBase[]              {                  Expr.Record("First"' Expr.Field("A"' "int"))'                  Expr.Record("Second"' Expr.Field("B"' "int"))'                    Expr.Var("a"' Expr.New("First"' Expr.Int(2)))'                  Expr.Var("b"' Expr.New("Second"' Expr.Int(3)))'                  Expr.Mult(                      Expr.GetMember(Expr.Get("a")' "A")'                      Expr.GetMember(Expr.Get("b")' "B")                  )              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,RefFunction2,The following statement contains a magic number: var result = new NodeBase[]              {                  Expr.Fun(                      "test"'                      new[] {Expr.Arg("a"' "int")' Expr.Arg("x"' "int"' true)}'                      Expr.Set(                          "x"'                          Expr.Mult(Expr.Get("a")' Expr.Int(2))                      )                  )'                  Expr.Var("result"' Expr.Int(0))'                  Expr.Invoke("test"' Expr.Int(21)' Expr.Ref(Expr.Get("result")))'                  Expr.Get("result")              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,RefFunction2,The following statement contains a magic number: var result = new NodeBase[]              {                  Expr.Fun(                      "test"'                      new[] {Expr.Arg("a"' "int")' Expr.Arg("x"' "int"' true)}'                      Expr.Set(                          "x"'                          Expr.Mult(Expr.Get("a")' Expr.Int(2))                      )                  )'                  Expr.Var("result"' Expr.Int(0))'                  Expr.Invoke("test"' Expr.Int(21)' Expr.Ref(Expr.Get("result")))'                  Expr.Get("result")              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,IfThenElse,The following statement contains a magic number: var result = Expr.If(Expr.Get("x")' Expr.Block(Expr.Int(1))' Expr.Block(Expr.Int(2)));
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,VariableLocation,The following statement contains a magic number: Assert.AreEqual(new LexemLocation {Line = 1' Offset = 2}' variable.EndLocation);
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,ArgumentLocation,The following statement contains a magic number: Assert.AreEqual(new LexemLocation {Line = 1' Offset = 15}' argument.StartLocation);
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,TypeSignatureLocation,The following statement contains a magic number: Assert.AreEqual(new LexemLocation {Line = 1' Offset = 5}' typeSignature.StartLocation);
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,TypeSignatureLocation,The following statement contains a magic number: Assert.AreEqual(new LexemLocation {Line = 1' Offset = 13}' typeSignature.EndLocation);
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,UsingWithVariable,The following statement contains a magic number: var result = Expr.Using(                  "x"'                  Expr.New("FileStream"' Expr.Str("C:/file.txt"))'                  Expr.Invoke(Expr.Get("x")' "Write"' Expr.Int(1))'                  Expr.Invoke(Expr.Get("x")' "Write"' Expr.Int(2))              );
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,SizedArray,The following statement contains a magic number: var result = new[]              {                  Expr.Let(                      "x"'                      Expr.Array("Tuple<string~'System.Uri>"' Expr.Int(5))                  )'                  Expr.Let(                      "y"'                      Expr.Array("string"' Expr.Add(Expr.Int(1)' Expr.Int(3)))                  )'              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,SizedArray,The following statement contains a magic number: var result = new[]              {                  Expr.Let(                      "x"'                      Expr.Array("Tuple<string~'System.Uri>"' Expr.Int(5))                  )'                  Expr.Let(                      "y"'                      Expr.Array("string"' Expr.Add(Expr.Int(1)' Expr.Int(3)))                  )'              };
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,AssignmentLocation,The following statement contains a magic number: Assert.AreEqual(3' node2.StartLocation.Line);
Magic Number,Lens.Test.Parsers,ParserTest,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\Parsers\ParserTest.cs,Comments,The following statement contains a magic number: var result = new[]              {                  Expr.Let("x"' Expr.Int(1))'                  Expr.Let("y"' Expr.Int(2))              };
Magic Number,Lens.Test,TestBase,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\TestBase.cs,TestError,The following statement contains a magic number: var srcId = exception.Message.Substring(0' 6);
Magic Number,Lens.Test,TestBase,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\TestBase.cs,TestError,The following statement contains a magic number: var msgId = msg.Substring(0' 6);
Magic Number,Lens.Test,TestBase,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\TestBase.cs,TestErrorConfigured,The following statement contains a magic number: var srcId = exception.Message.Substring(0' 6);
Magic Number,Lens.Test,TestBase,D:\research\architectureSmells\repos\impworks_lens\Lens.Test\TestBase.cs,TestErrorConfigured,The following statement contains a magic number: var msgId = msg.Substring(0' 6);
