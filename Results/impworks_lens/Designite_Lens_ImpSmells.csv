Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,Compile,Cyclomatic complexity of the method is 9
Complex Method,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateEntities,Cyclomatic complexity of the method is 8
Complex Method,Lens.Compiler.Entities,MethodEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\MethodEntity.cs,PrepareSelf,Cyclomatic complexity of the method is 8
Complex Method,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,declareFunction,Cyclomatic complexity of the method is 9
Complex Method,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,prepareEntities,Cyclomatic complexity of the method is 8
Complex Method,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,Cyclomatic complexity of the method is 21
Complex Method,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,Cyclomatic complexity of the method is 17
Complex Method,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,Cyclomatic complexity of the method is 17
Complex Method,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitSaveLocal,Cyclomatic complexity of the method is 15
Complex Method,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadFromPointer,Cyclomatic complexity of the method is 11
Complex Method,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadIndex,Cyclomatic complexity of the method is 13
Complex Method,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitSaveIndex,Cyclomatic complexity of the method is 8
Complex Method,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitSaveObject,Cyclomatic complexity of the method is 9
Complex Method,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConvert,Cyclomatic complexity of the method is 11
Complex Method,Lens.Resolver,GenericHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,ApplyGenericArguments,Cyclomatic complexity of the method is 8
Complex Method,Lens.Resolver,GenericHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,MakeGenericTypeChecked,Cyclomatic complexity of the method is 10
Complex Method,Lens.Resolver,ExtensionMethodResolver,F:\newReposMay17\impworks_lens\Lens\Resolver\ExtensionMethodResolver.cs,findMethodsForType,Cyclomatic complexity of the method is 11
Complex Method,Lens.Resolver,TypeResolver,F:\newReposMay17\impworks_lens\Lens\Resolver\TypeResolver.cs,findType,Cyclomatic complexity of the method is 9
Complex Method,Lens.Resolver,TypeExtensions,F:\newReposMay17\impworks_lens\Lens\Resolver\TypeExtensions.cs,GetMostCommonType,Cyclomatic complexity of the method is 8
Complex Method,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,parse,Cyclomatic complexity of the method is 16
Complex Method,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,processIndent,Cyclomatic complexity of the method is 8
Complex Method,Lens.Stdlib,Utilities,F:\newReposMay17\impworks_lens\Lens\Stdlib\Utilities.cs,Times,Cyclomatic complexity of the method is 9
Complex Method,Lens.Stdlib,Utilities,F:\newReposMay17\impworks_lens\Lens\Stdlib\Utilities.cs,Range,Cyclomatic complexity of the method is 8
Complex Method,Lens.Stdlib,Utilities,F:\newReposMay17\impworks_lens\Lens\Stdlib\Utilities.cs,Range,Cyclomatic complexity of the method is 8
Complex Method,Lens.SyntaxTree.ControlFlow,IfNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\IfNode.cs,emitCode,Cyclomatic complexity of the method is 8
Complex Method,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,resolve,Cyclomatic complexity of the method is 9
Complex Method,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,emitCode,Cyclomatic complexity of the method is 9
Complex Method,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,resolveSelf,Cyclomatic complexity of the method is 9
Complex Method,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,emitField,Cyclomatic complexity of the method is 13
Complex Method,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,emitEqualityComparison,Cyclomatic complexity of the method is 16
Complex Method,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,emitRelation,Cyclomatic complexity of the method is 8
Complex Method,Lens.SyntaxTree.Operators.Binary,PowOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\PowOperatorNode.cs,emitOperator,Cyclomatic complexity of the method is 9
Complex Method,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,resolve,Cyclomatic complexity of the method is 8
Complex Method,Lens.SyntaxTree.PatternMatching.Rules,MatchArrayRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchArrayRule.cs,Resolve,Cyclomatic complexity of the method is 9
Complex Method,Lens.SyntaxTree.PatternMatching.Rules,MatchArrayRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchArrayRule.cs,Expand,Cyclomatic complexity of the method is 19
Complex Method,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,resolveGetMember,Cyclomatic complexity of the method is 10
Complex Method,Lens.SyntaxTree.Operators.TypeBased,CastOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\CastOperatorNode.cs,emitCode,Cyclomatic complexity of the method is 17
Complex Method,Lens.SyntaxTree.Operators.TypeBased,DefaultOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\DefaultOperatorNode.cs,emitCode,Cyclomatic complexity of the method is 8
Long Parameter List,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateMethod,The method has 6 parameters.
Long Parameter List,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateMethod,The method has 6 parameters.
Long Parameter List,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateMethod,The method has 6 parameters.
Long Parameter List,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createMethodCore,The method has 5 parameters.
Long Parameter List,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,ResolveMethod,The method has 5 parameters.
Long Parameter List,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,ResolveExtensionMethod,The method has 5 parameters.
Long Parameter List,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,CreateType,The method has 5 parameters.
Long Parameter List,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,CreateType,The method has 5 parameters.
Long Parameter List,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,createTypeCore,The method has 5 parameters.
Long Parameter List,Lens.Resolver,GenericHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,ResolveMethodGenericsByArgs,The method has 5 parameters.
Long Parameter List,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The method has 5 parameters.
Long Parameter List,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveExtensionMethod,The method has 6 parameters.
Long Parameter List,Lens.Resolver,GlobalPropertyInfo,F:\newReposMay17\impworks_lens\Lens\Resolver\GlobalPropertyHelper.cs,GlobalPropertyInfo,The method has 6 parameters.
Long Parameter List,Lens.SyntaxTree,Expr,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expr.cs,Fun,The method has 5 parameters.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createSpecificEquals,The length of the statement  "		var expr = isSeq ? Expr.Invoke ("Enumerable"' "SequenceEqual"' left' right) : Expr.Invoke (Expr.This ()' "Equals"' Expr.Cast (left' "object")' Expr.Cast (right' "object")); " is 172.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createGenericEquals,The length of the statement  "	eq.Body.Add (Expr.If (Expr.Invoke (Expr.This ()' "ReferenceEquals"' Expr.Null ()' Expr.Get ("obj"))' Expr.Block (Expr.False ())' Expr.Block (Expr.Or (Expr.Invoke (Expr.This ()' "ReferenceEquals"' Expr.This ()' Expr.Get ("obj"))' Expr.And (Expr.Equal (Expr.Invoke (Expr.Get ("obj")' "GetType")' Expr.Invoke (Expr.This ()' "GetType"))' Expr.Invoke (Expr.This ()' "Equals"' Expr.Cast (Expr.Get ("obj")' Name))))))); " is 412.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createGetHashCode,The length of the statement  "			expr = Expr.If (Expr.NotEqual (Expr.GetMember (Expr.This ()' f.Name)' Expr.Null ())' Expr.Block (Expr.Invoke (Expr.GetMember (Expr.This ()' f.Name)' "GetHashCode"))' Expr.Block (Expr.Int (0))); " is 193.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createPureWrapper0,The length of the statement  "	Expr.If (Expr.Not (Expr.GetMember (EntityNames.MainTypeName' flagName))' Expr.Block (Expr.SetMember (EntityNames.MainTypeName' fieldName' Expr.Invoke (EntityNames.MainTypeName' pureName))' Expr.SetMember (EntityNames.MainTypeName' flagName' Expr.True ())))' // $cache " is 267.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createPureWrapper1,The length of the statement  "	wrapper.Body = Expr.Block (ScopeKind.FunctionRoot' // if ($dict == null) $dict = new Dictionary<$argType' $valueType> () " is 120.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createPureWrapper1,The length of the statement  "	Expr.If (Expr.Equal (Expr.GetMember (EntityNames.MainTypeName' fieldName)' Expr.Null ())' Expr.Block (Expr.SetMember (EntityNames.MainTypeName' fieldName' Expr.New (fieldType))))' // if(not $dict.ContainsKey key) $dict.Add ($internal arg) " is 238.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createPureWrapper1,The length of the statement  "	Expr.If (Expr.Not (Expr.Invoke (Expr.GetMember (EntityNames.MainTypeName' fieldName)' "ContainsKey"' Expr.Get (argName)))' Expr.Block (Expr.Invoke (Expr.GetMember (EntityNames.MainTypeName' fieldName)' "Add"' Expr.Get (argName)' Expr.Invoke (EntityNames.MainTypeName' pureName' Expr.Get (argName)))))' // $dict[arg] " is 315.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createPureWrapperMany,The length of the statement  "	Expr.Let (tupleName' Expr.New (tupleType' argGetters))' // if ($dict == null) $dict = new Dictionary<$tupleType' $valueType> () " is 127.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createPureWrapperMany,The length of the statement  "	Expr.If (Expr.Equal (Expr.GetMember (EntityNames.MainTypeName' fieldName)' Expr.Null ())' Expr.Block (Expr.SetMember (EntityNames.MainTypeName' fieldName' Expr.New (fieldType))))' // if(not $dict.ContainsKey key) $dict.Add ($internal arg) " is 238.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createPureWrapperMany,The length of the statement  "	Expr.If (Expr.Not (Expr.Invoke (Expr.GetMember (EntityNames.MainTypeName' fieldName)' "ContainsKey"' Expr.Get (tupleName)))' Expr.Block (Expr.Invoke (Expr.GetMember (EntityNames.MainTypeName' fieldName)' "Add"' Expr.Get (tupleName)' Expr.Invoke (EntityNames.MainTypeName' pureName' argGetters))))' // $dict[arg] " is 311.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateMethod,The length of the statement  "	var args = argTypes == null ? null : argTypes.Select ((a' idx) => new FunctionArgument ("arg" + idx.ToString ()' a)).ToArray (); " is 128.
Long Statement,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,ResolveField,The length of the statement  "		throw new InvalidOperationException (string.Format ("Type '{0}' must be prepared before its entities can be resolved."' Name)); " is 127.
Long Statement,Lens.Compiler.Entities,ConstructorEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\ConstructorEntity.cs,PrepareSelf,The length of the statement  "	ConstructorBuilder = ContainerType.TypeBuilder.DefineConstructor (MethodAttributes.Public' CallingConventions.HasThis' ArgumentTypes); " is 134.
Long Statement,Lens.Compiler.Entities,MethodEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\MethodEntity.cs,PrepareSelf,The length of the statement  "		ReturnType = ReturnTypeSignature == null || string.IsNullOrEmpty (ReturnTypeSignature.FullSignature) ? typeof(UnitType) : ctx.ResolveType (ReturnTypeSignature); " is 160.
Long Statement,Lens.Compiler.Entities,MethodEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\MethodEntity.cs,PrepareSelf,The length of the statement  "	MethodBuilder = ContainerType.TypeBuilder.DefineMethod (Name' attrs' ReturnType.IsVoid () ? typeof(void) : ReturnType' ArgumentTypes); " is 134.
Long Statement,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,IsTypeAllowed,The length of the statement  "	var exists = _ExplicitTypes.ContainsKey (type.FullName) || (type.Namespace != null && _ExplicitNamespaces.Keys.Any (k => type.Namespace.StartsWith (k))); " is 153.
Long Statement,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,ResolveMethod,The length of the statement  "			mw.ArgumentTypes = method.GetArgumentTypes (this).Select (t => GenericHelper.ApplyGenericArguments (t' genericDefs' genericValues)).ToArray (); " is 143.
Long Statement,Lens.Compiler,Context,F:\newReposMay17\impworks_lens\Lens\Compiler\Context.Compilation.cs,ResolveConvertorToType,The length of the statement  "	return ResolveMethodGroup (@from' "op_Explicit").FirstOrDefault (x => x.ReturnType == to) ?? ResolveMethodGroup (@from' "op_Implicit").FirstOrDefault (x => x.ReturnType == to); " is 176.
Long Statement,Lens.Resolver,GenericHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,ApplyGenericArguments,The length of the statement  "		return ApplyGenericArguments (type' source.GetGenericTypeDefinition ().GetGenericArguments ()' source.GetGenericArguments ()' throwNotFound); " is 141.
Long Statement,Lens.Resolver,GenericHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,ApplyGenericArguments,The length of the statement  "		var processed = type.GetGenericArguments ().Select (a => ApplyGenericArguments (a' generics' values' throwNotFound)).ToArray (); " is 128.
Long Statement,Lens.Resolver,GenericHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,MakeGenericTypeChecked,The length of the statement  "				throw new TypeMatchException (string.Format (CompilerMessages.GenericInheritanceConstraintViolated' value' arg' type' currBase)); " is 129.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveConstructor,The length of the statement  "		var ctor = ResolveMethodByArgs (type.GetConstructors ()' c => c.GetParameters ().Select (p => p.ParameterType).ToArray ()' IsVariadic' argTypes); " is 145.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveConstructor,The length of the statement  "		var genCtor = ResolveMethodByArgs (genType.GetConstructors ()' c => c.GetParameters ().Select (p => GenericHelper.ApplyGenericArguments (p.ParameterType' type)).ToArray ()' IsVariadic' argTypes); " is 195.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The length of the statement  "		var method = ResolveMethodByArgs (getMethodsByName (type' name)' m => m.GetParameters ().Select (p => p.ParameterType).ToArray ()' IsVariadic' argTypes); " is 153.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The length of the statement  "		var genMethod = ResolveMethodByArgs (getMethodsByName (genType' name)' m => m.GetParameters ().Select (p => GenericHelper.ApplyGenericArguments (p.ParameterType' type' false)).ToArray ()' IsVariadic' argTypes); " is 210.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The length of the statement  "			var genericValues = GenericHelper.ResolveMethodGenericsByArgs (genMethod.ArgumentTypes' argTypes' genericDefs' hints' lambdaResolver); " is 134.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The length of the statement  "			mw.ArgumentTypes = mInfoOriginal.GetParameters ().Select (p => GenericHelper.ApplyGenericArguments (p.ParameterType' totalGenericDefs' totalGenericValues)).ToArray (); " is 167.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The length of the statement  "			mw.ArgumentTypes = mInfoOriginal.GetParameters ().Select (p => GenericHelper.ApplyGenericArguments (p.ParameterType' type)).ToArray (); " is 135.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveExtensionMethod,The length of the statement  "		var genericValues = GenericHelper.ResolveMethodGenericsByArgs (expectedTypes' extMethodArgs.ToArray ()' genericDefs' hints' lambdaResolver); " is 140.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveExtensionMethod,The length of the statement  "		info.ArgumentTypes = expectedTypes.Select (t => GenericHelper.ApplyGenericArguments (t' genericDefs' genericValues)).ToArray (); " is 128.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethodGroup,The length of the statement  "				ArgumentTypes = m.GetParameters ().Select (p => GenericHelper.ApplyGenericArguments (p.ParameterType' declType)).ToArray ()' " is 124.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveIndexer,The length of the statement  "			ArgumentTypes = indexer.GetParameters ().Select (p => GenericHelper.ApplyGenericArguments (p.ParameterType' type)).ToArray ()' " is 126.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethodByArgs,The length of the statement  "	var result = list.Select (x => TypeExtensions.ArgumentDistance (argTypes' argsGetter (x)' x' isVariadicGetter (x))).OrderBy (rec => rec.Distance).Take (2)// no more than 2 is needed " is 181.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,getMethodsByName,The length of the statement  "	const BindingFlags flags = BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy; " is 125.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,getMethodsByName,The length of the statement  "		result = type.GetInterfaces ().Select (x => x.IsGenericType ? x.GetGenericTypeDefinition () : x).SelectMany (x => getMethodsByName (x' name)).ToArray (); " is 153.
Long Statement,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,resolveActualDeclaringType,The length of the statement  "			if (curr == decl || (curr.IsGenericType && decl.IsGenericType && curr.GetGenericTypeDefinition () == decl.GetGenericTypeDefinition ())) " is 135.
Long Statement,Lens.Resolver,TypeResolver,F:\newReposMay17\impworks_lens\Lens\Resolver\TypeResolver.cs,parseTypeSignature,The length of the statement  "		return hasArgs ? GenericHelper.MakeGenericTypeChecked (type' signature.Arguments.Select (parseTypeSignature).ToArray ()) : type; " is 128.
Long Statement,Lens.Resolver,TypeResolver,F:\newReposMay17\impworks_lens\Lens\Resolver\TypeResolver.cs,findType,The length of the statement  "				throw new ArgumentException (string.Format (CompilerMessages.TypeIsAmbiguous' name' foundType.Namespace' foundType.Assembly.GetName ().Name' type.Namespace' currAsm.FullName' Environment.NewLine)); " is 197.
Long Statement,Lens.Resolver,TypeExtensions,F:\newReposMay17\impworks_lens\Lens\Resolver\TypeExtensions.cs,genericParameterDistance,The length of the statement  "	return varType.IsGenericParameter ? DistanceFrom (varType.BaseType' exprType' exactly) : DistanceFrom (exprType.BaseType' varType' exactly); " is 140.
Long Statement,Lens.Resolver,TypeExtensions,F:\newReposMay17\impworks_lens\Lens\Resolver\TypeExtensions.cs,getMostCommonType,The length of the statement  "		return leftElem.IsValueType || rightElem.IsValueType ? typeof(object) : getMostCommonType (leftElem' rightElem).MakeArrayType (); " is 129.
Long Statement,Lens.Resolver,TypeExtensions,F:\newReposMay17\impworks_lens\Lens\Resolver\TypeExtensions.cs,ArgumentDistance,The length of the statement  "	var distance = simpleDistance == int.MaxValue || variadicDistance == int.MaxValue ? int.MaxValue : simpleDistance + variadicDistance; " is 133.
Long Statement,Lens.Resolver,TypeExtensions,F:\newReposMay17\impworks_lens\Lens\Resolver\TypeExtensions.cs,IsAppliedVersionOf,The length of the statement  "		throw new ArgumentException (string.Format ("Interface {0} cannot implement a type! ({1} given)."' type.FullName' genericType.FullName)); " is 137.
Long Statement,Lens.Resolver,TypeExtensions,F:\newReposMay17\impworks_lens\Lens\Resolver\TypeExtensions.cs,IsAppliedVersionOf,The length of the statement  "	return genericType.IsInterface ? type.Implements (genericType' true) : type.GetGenericTypeDefinition () == genericType.GetGenericTypeDefinition (); " is 147.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseStmt,The length of the statement  "	return attempt (parseUsing) ?? attempt (parseRecordDef) ?? attempt (parseTypeDef) ?? attempt (parseFunDef) ?? ensure (parseLocalStmt' ParserMessages.UnknownStatement); " is 167.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseBlockExpr,The length of the statement  "	return attempt (parseIfBlock) ?? attempt (parseWhileBlock) ?? attempt (parseForBlock) ?? attempt (parseUsingBlock) ?? attempt (parseTryStmt) ?? attempt (parseMatchBlock) ?? attempt (parseNewBlockExpr) ?? attempt (parseInvokeBlockExpr) ?? attempt (parseInvokeBlockPassExpr) ?? attempt (parseLambdaBlockExpr) as NodeBase; " is 319.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseNewBlockExpr,The length of the statement  "	return attempt (parseNewTupleBlock) ?? attempt (parseNewListBlock) ?? attempt (parseNewArrayBlock) ?? attempt (parseNewDictBlock) ?? attempt (parseNewObjectBlock) as NodeBase; " is 175.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseRuleGeneric,The length of the statement  "	return attempt (parseRuleTuple) ?? attempt (parseRuleArray) ?? attempt (parseRegex) ?? attempt (parseRuleRecord) ?? attempt (parseRuleType) ?? attempt (parseRuleRange) ?? attempt (parseRuleLiteral) ?? attempt (parseRuleName) as MatchRuleBase; " is 242.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseLineExpr,The length of the statement  "	return attempt (parseIfLine) ?? attempt (parseWhileLine) ?? attempt (parseForLine) ?? attempt (parseUsingLine) ?? attempt (parseThrowStmt) ?? attempt (parseNewObjectExpr) ?? attempt (parseTypeopExpr) ?? attempt (parseLineTypecheckExpr); " is 236.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseAtom,The length of the statement  "	return attempt (parseLiteral) ?? attempt (parseGetStmbrExpr) ?? attempt (parseGetIdExpr) ?? attempt (parseNewCollectionExpr) ?? attempt (parseParenExpr); " is 153.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseNewCollectionExpr,The length of the statement  "	return attempt (parseNewTupleLine) ?? attempt (parseNewListLine) ?? attempt (parseNewArrayLine) ?? attempt (parseNewDictLine) as NodeBase; " is 138.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseLiteral,The length of the statement  "	return attempt (parseUnit) ?? attempt (parseNull) ?? attempt (parseBool) ?? attempt (parseInt) ?? attempt (parseLong) ?? attempt (parseFloat) ?? attempt (parseDouble) ?? attempt (parseDecimal) ?? attempt (parseChar) ?? attempt (parseString) as NodeBase; " is 253.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseLong,The length of the statement  "		return new LongNode (long.Parse (value.Substring (0' value.Length - 1)' NumberStyles.Integer' CultureInfo.InvariantCulture)); " is 125.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseFloat,The length of the statement  "		return new FloatNode (float.Parse (value.Substring (0' value.Length - 1)' NumberStyles.Float' CultureInfo.InvariantCulture)); " is 125.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseDecimal,The length of the statement  "		return new DecimalNode (decimal.Parse (value.Substring (0' value.Length - 1)' NumberStyles.Float' CultureInfo.InvariantCulture)); " is 129.
Long Statement,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,processOperator,The length of the statement  "	var unaryCvt = _UnaryOperatorPriorities.ContainsKey (priority) && check (_UnaryOperatorPriorities [priority].Item1) ? _UnaryOperatorPriorities [priority].Item2 : null; " is 167.
Long Statement,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,expandEnumerable,The length of the statement  "	var enumerableType = _EnumeratorType.IsGenericType ? typeof(IEnumerable<>).MakeGenericType (_EnumeratorType.GetGenericArguments () [0]) : typeof(IEnumerable); " is 158.
Long Statement,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,expandEnumerable,The length of the statement  "	var loop = Expr.While (Expr.Invoke (Expr.Get (iteratorVar)' "MoveNext")' Expr.Block (getIndexAssignment (Expr.GetMember (Expr.Get (iteratorVar)' "Current"))' Body)); " is 165.
Long Statement,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,expandArray,The length of the statement  "	return Expr.Block (Expr.Set (idxVar' Expr.Int (0))' Expr.Set (arrayVar' IterableExpression)' Expr.Set (lenVar' Expr.GetMember (Expr.Get (arrayVar)' "Length"))' Expr.While (Expr.Less (Expr.Get (idxVar)' Expr.Get (lenVar))' Expr.Block (getIndexAssignment (Expr.GetIdx (Expr.Get (arrayVar)' Expr.Get (idxVar)))' Expr.Set (idxVar' Expr.Add (Expr.Get (idxVar)' Expr.Int (1)))' Body))); " is 380.
Long Statement,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,expandRange,The length of the statement  "	return Expr.Block (Expr.Set (idxVar' RangeStart)' Expr.Set (signVar' Expr.Invoke ("Math"' "Sign"' Expr.Sub (RangeEnd' Expr.Get (idxVar))))' Expr.While (Expr.NotEqual (Expr.Get (idxVar)' RangeEnd)' Expr.Block (getIndexAssignment (Expr.Get (idxVar))' Body' Expr.Set (idxVar' Expr.Add (Expr.Get (idxVar)' Expr.Get (signVar)))))); " is 326.
Long Statement,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,Equals,The length of the statement  "	return string.Equals (VariableName' other.VariableName) && Equals (IterableExpression' other.IterableExpression) && Equals (RangeStart' other.RangeStart) && Equals (RangeEnd' other.RangeEnd) && Equals (Body' other.Body); " is 220.
Long Statement,Lens.SyntaxTree.ControlFlow,CatchNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\CatchNode.cs,Equals,The length of the statement  "	return Equals (ExceptionType' other.ExceptionType) && string.Equals (ExceptionVariable' other.ExceptionVariable) && Equals (Code' other.Code); " is 142.
Long Statement,Lens.SyntaxTree.ControlFlow,IfNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\IfNode.cs,Equals,The length of the statement  "	return Equals (Condition' other.Condition) && Equals (TrueAction' other.TrueAction) && Equals (FalseAction' other.FalseAction); " is 127.
Long Statement,Lens.SyntaxTree.ControlFlow,WhileNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\WhileNode.cs,expand,The length of the statement  "	if (Condition.IsConstant && condType == typeof(bool) && Condition.ConstantValue == false && ctx.Options.UnrollConstants) " is 120.
Long Statement,Lens.SyntaxTree.Declarations,UsingNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\UsingNode.cs,resolve,The length of the statement  "	return string.IsNullOrEmpty (VariableName) ? Body.Resolve (ctx) : Scope.WithTempLocals (ctx' () => Body.Resolve (ctx)' new Local (VariableName' exprType)); " is 155.
Long Statement,Lens.SyntaxTree.Declarations,UsingNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\UsingNode.cs,Equals,The length of the statement  "	return string.Equals (VariableName' other.VariableName) && Equals (Expression' other.Expression) && Equals (Body' other.Body); " is 126.
Long Statement,Lens.SyntaxTree.Expressions.Instantiation,NewDictionaryNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewDictionaryNode.cs,Equals,The length of the statement  "	return Expressions.Select (e => e.Key).SequenceEqual (other.Expressions.Select (e => e.Key)) && Expressions.Select (e => e.Value).SequenceEqual (other.Expressions.Select (e => e.Value)); " is 186.
Long Statement,Lens.SyntaxTree.Expressions.Instantiation,NewDictionaryNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewDictionaryNode.cs,ToString,The length of the statement  "	return string.Format ("dict({0})"' string.Join (";"' Expressions.Select (x => string.Format ("{0} => {1}"' x.Key' x.Value)))); " is 126.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,ShortAssignmentNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\ShortAssignmentNode.cs,expandMember,The length of the statement  "		return Expr.SetMember (node.StaticType' node.MemberName' _AssignmentOperator (Expr.GetMember (node.StaticType' node.MemberName)' node.Value)); " is 142.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,ShortAssignmentNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\ShortAssignmentNode.cs,expandMember,The length of the statement  "		return Expr.SetMember (node.Expression' node.MemberName' _AssignmentOperator (Expr.GetMember (node.Expression' node.MemberName)' node.Value)); " is 142.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,ShortAssignmentNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\ShortAssignmentNode.cs,expandMember,The length of the statement  "	return Expr.Block (Expr.Set (tmpVar' node.Expression)' Expr.SetMember (Expr.Get (tmpVar)' node.MemberName' _AssignmentOperator (Expr.GetMember (Expr.Get (tmpVar)' node.MemberName)' node.Value))); " is 195.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,ShortAssignmentNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\ShortAssignmentNode.cs,expandIndex,The length of the statement  "	body.Add (Expr.SetIdx (node.Expression' node.Index' _AssignmentOperator (Expr.GetIdx (node.Expression' node.Index)' node.Value))); " is 130.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,Equals,The length of the statement  "	return base.Equals (other) && RefArgumentRequired.Equals (other.RefArgumentRequired) && PointerRequired.Equals (other.PointerRequired); " is 135.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,GetIndexNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIndexNode.cs,Equals,The length of the statement  "	return base.Equals (other) && RefArgumentRequired.Equals (other.RefArgumentRequired) && PointerRequired.Equals (other.PointerRequired); " is 135.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,resolve,The length of the statement  "	return _Method.ReturnType.IsVoid () ? FunctionalHelper.CreateActionType (_Method.ArgumentTypes) : FunctionalHelper.CreateFuncType (_Method.ReturnType' _Method.ArgumentTypes); " is 174.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,resolveSelf,The length of the statement  "		error (argTypes.Length == 0 ? CompilerMessages.TypeIdentifierNotFound : CompilerMessages.TypeMethodNotFound' _Type.Name' MemberName); " is 133.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,emitMethod,The length of the statement  "	var type = retType.IsVoid () ? FunctionalHelper.CreateActionType (_Method.ArgumentTypes) : FunctionalHelper.CreateFuncType (retType' _Method.ArgumentTypes); " is 156.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,Equals,The length of the statement  "	return base.Equals (other) && PointerRequired.Equals (other.PointerRequired) && RefArgumentRequired.Equals (other.RefArgumentRequired) && TypeHints.SequenceEqual (other.TypeHints); " is 180.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,ToString,The length of the statement  "	return StaticType == null ? string.Format ("getmbr({0}{1} of value {2})"' MemberName' typehints' Expression) : string.Format ("getmbr({0}{1} of type {2})"' MemberName' typehints' StaticType); " is 191.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,MemberNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\MemberNodeBase.cs,Equals,The length of the statement  "	return Equals (Expression' other.Expression) && string.Equals (MemberName' other.MemberName) && Equals (StaticType' other.StaticType); " is 134.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,SetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetIdentifierNode.cs,resolve,The length of the statement  "		error (nameInfo != null ? CompilerMessages.IdentifierTypeMismatch : CompilerMessages.GlobalPropertyTypeMismatch' exprType' destType); " is 133.
Long Statement,Lens.SyntaxTree.Operators.Binary,ShiftOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\ShiftOperatorNode.cs,expand,The length of the statement  "		var argDefs = delegateType.ArgumentTypes.Select (x => Expr.Arg (ctx.Unique.AnonymousArgName ()' x.FullName)).ToArray (); " is 120.
Long Statement,Lens.SyntaxTree.Operators.Binary,ShiftOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\ShiftOperatorNode.cs,expand,The length of the statement  "		return Expr.Lambda (argDefs' Expr.Block (Expr.Let (leftVar' LeftOperand)' Expr.Let (rightVar' RightOperand)' Expr.Invoke (Expr.Get (rightVar)' Expr.Invoke (Expr.Get (leftVar)' argDefs.Select (x => Expr.Get (x.Name)).ToArray ())))); " is 231.
Long Statement,Lens.SyntaxTree.Operators.Binary,AddOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\AddOperatorNode.cs,resolveOperatorType,The length of the statement  "	var enumerableType = typeof(IEnumerable<>).ResolveCommonImplementationFor (leftType' rightType) ?? typeof(IEnumerable).ResolveCommonImplementationFor (leftType' rightType); " is 172.
Long Statement,Lens.SyntaxTree.Operators.Binary,AddOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\AddOperatorNode.cs,arrayExpand,The length of the statement  "	return Expr.Block (Expr.Set (tmpLeft' LeftOperand)' Expr.Set (tmpRight' RightOperand)' Expr.Set (tmpArray' Expr.Array (type.GetElementType ()' Expr.Add (Expr.GetMember (Expr.Get (tmpLeft)' "Length")' Expr.GetMember (Expr.Get (tmpRight)' "Length"))))' Expr.Invoke ("System.Array"' "Copy"' Expr.Get (tmpLeft)' Expr.Get (tmpArray)' Expr.GetMember (Expr.Get (tmpLeft)' "Length"))' Expr.Invoke ("System.Array"' "Copy"' Expr.Get (tmpRight)' Expr.Int (0)' Expr.Get (tmpArray)' Expr.GetMember (Expr.Get (tmpLeft)' "Length")' Expr.GetMember (Expr.Get (tmpRight)' "Length"))' Expr.Get (tmpArray)); " is 587.
Long Statement,Lens.SyntaxTree.Operators.Binary,AddOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\AddOperatorNode.cs,seqExpand,The length of the statement  "	return Expr.Invoke ("System.Linq.Enumerable"' "Concat"' Expr.Invoke (Expr.GetMember ("System.Linq.Enumerable"' "OfType"' "object")' LeftOperand)' Expr.Invoke (Expr.GetMember ("System.Linq.Enumerable"' "OfType"' "object")' RightOperand)); " is 237.
Long Statement,Lens.SyntaxTree.Operators.Binary,AddOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\AddOperatorNode.cs,dictExpand,The length of the statement  "	return Expr.Block (Expr.Set (tmpDict' Expr.New (dictType' LeftOperand))' Expr.For (tmpCurr' RightOperand' Expr.Block (Expr.SetIdx (Expr.Get (tmpDict)' Expr.GetMember (Expr.Get (tmpCurr)' "Key")' Expr.GetMember (Expr.Get (tmpCurr)' "Value"))))' Expr.Get (tmpDict)); " is 264.
Long Statement,Lens.SyntaxTree.Operators.Binary,BooleanOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\BooleanOperatorNode.cs,expand,The length of the statement  "		return Kind == LogicalOperatorKind.And ? Expr.If (LeftOperand' Expr.Block (Expr.Cast<bool> (RightOperand))' Expr.Block (Expr.False ())) : Expr.If (LeftOperand' Expr.Block (Expr.True ())' Expr.Block (Expr.Cast<bool> (RightOperand))); " is 232.
Long Statement,Lens.SyntaxTree.Operators.Binary,MultiplyOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\MultiplyOperatorNode.cs,stringExpand,The length of the statement  "	return Expr.Block (Expr.Let (tmpString' LeftOperand)' Expr.Let (tmpSb' Expr.New (typeof(StringBuilder)))' Expr.For (tmpIdx' Expr.Int (1)' RightOperand' Expr.Block (Expr.Invoke (Expr.Get (tmpSb)' "Append"' Expr.Get (tmpString))))' Expr.Invoke (Expr.Get (tmpSb)' "ToString")); " is 274.
Long Statement,Lens.SyntaxTree.Operators.Binary,MultiplyOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\MultiplyOperatorNode.cs,arrayExpand,The length of the statement  "	return Expr.Block (Expr.Set (tmpLeft' LeftOperand)' Expr.Set (tmpRight' Expr.Invoke ("System.Math"' "Abs"' RightOperand))' Expr.Set (tmpResult' Expr.Array (arrayType.GetElementType ()' Expr.Mult (Expr.GetMember (Expr.Get (tmpLeft)' "Length")' Expr.Get (tmpRight))))' Expr.For (tmpIndex' Expr.Int (0)' Expr.Get (tmpRight)' Expr.Block (Expr.Invoke ("System.Array"' "Copy"' Expr.Get (tmpLeft)' Expr.Int (0)' Expr.Get (tmpResult)' Expr.Mult (Expr.Get (tmpIndex)' Expr.GetMember (Expr.Get (tmpLeft)' "Length"))' Expr.GetMember (Expr.Get (tmpLeft)' "Length"))))' Expr.Get (tmpResult)); " is 579.
Long Statement,Lens.SyntaxTree.Operators.Binary,MultiplyOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\MultiplyOperatorNode.cs,seqExpand,The length of the statement  "	return Expr.Block (Expr.Set (tmpLeft' leftWrapper)' Expr.Set (tmpResult' Expr.Get (tmpLeft))' Expr.For (tmpIndex' Expr.Int (1)' Expr.Invoke ("System.Math"' "Abs"' RightOperand)' Expr.Block (Expr.Set (tmpResult' Expr.Invoke ("System.Linq.Enumerable"' "Concat"' Expr.Get (tmpResult)' Expr.Get (tmpLeft)))))' Expr.Get (tmpResult)); " is 328.
Long Statement,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,expand,The length of the statement  "			return Expr.If (Expr.And (Expr.GetMember (LeftOperand' "HasValue")' Expr.GetMember (RightOperand' "HasValue"))' Expr.Block (recreateSelfWithArgs (Expr.GetMember (LeftOperand' "Value")' Expr.GetMember (RightOperand' "Value")))' Expr.Block (Expr.Null ())); " is 254.
Long Statement,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,expand,The length of the statement  "			return Expr.If (Expr.GetMember (LeftOperand' "HasValue")' Expr.Block (recreateSelfWithArgs (Expr.GetMember (LeftOperand' "Value")' RightOperand))' Expr.Block (Expr.Null ())); " is 174.
Long Statement,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,expand,The length of the statement  "			return Expr.If (Expr.GetMember (RightOperand' "HasValue")' Expr.Block (recreateSelfWithArgs (LeftOperand' Expr.GetMember (RightOperand' "Value")))' Expr.Block (Expr.Null ())); " is 175.
Long Statement,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,GetHashCode,The length of the statement  "		return ((LeftOperand != null ? LeftOperand.GetHashCode () : 0) * 397) ^ (RightOperand != null ? RightOperand.GetHashCode () : 0); " is 129.
Long Statement,Lens.SyntaxTree.PatternMatching,MatchNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\MatchNode.cs,GetRuleLabels,The length of the statement  "	var next = currIndex < _RuleLabels.Count - 1 ? _RuleLabels [currIndex + 1].Item2 : (_MustReturnValue ? _DefaultLabel : EndLabel); " is 129.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchArrayRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchArrayRule.cs,Resolve,The length of the statement  "		var itemType = SubsequenceIndex != idx ? ElementType : (IsIndexable ? ElementType.MakeArrayType () : typeof(IEnumerable<>).MakeGenericType (ElementType)); " is 154.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchArrayRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchArrayRule.cs,Expand,The length of the statement  "			yield return MakeJumpIf (nextStatement' Expr.NotEqual (Expr.GetMember (expression' SizeMemberName)' Expr.Int (ElementRules.Count))); " is 132.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchArrayRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchArrayRule.cs,Expand,The length of the statement  "		yield return MakeJumpIf (nextStatement' Expr.Less (Expr.GetMember (expression' SizeMemberName)' Expr.Int (ElementRules.Count - 1))); " is 132.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchArrayRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchArrayRule.cs,Expand,The length of the statement  "			yield return Expr.Set (subseqVar' Expr.Invoke (Expr.Invoke (subseqExpr' "Take"' Expr.Sub (Expr.GetMember (expression' SizeMemberName)' Expr.Int (ElementRules.Count - 1)))' "ToArray")); " is 184.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchArrayRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchArrayRule.cs,Expand,The length of the statement  "			var rules = ElementRules [idx].Expand (ctx' Expr.GetIdx (expression' Expr.Sub (Expr.GetMember (expression' SizeMemberName)' Expr.Int (ElementRules.Count - idx)))' nextStatement); " is 178.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchNameRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchNameRule.cs,Resolve,The length of the statement  "		if (!specifiedType.IsExtendablyAssignableFrom (expressionType) && !expressionType.IsExtendablyAssignableFrom (specifiedType)) " is 125.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchRangeRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRangeRule.cs,Expand,The length of the statement  "	yield return Expr.If (Expr.Or (Expr.Less (expression' RangeStartRule.Literal as NodeBase)' Expr.Greater (expression' RangeEndRule.Literal as NodeBase))' Expr.Block (Expr.JumpTo (nextStatement))); " is 195.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchRecordRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRecordRule.cs,Expand,The length of the statement  "		var rules = fieldRule.Rule.Expand (ctx' Expr.GetMember (Expr.Cast (expression' Type)' fieldRule.Name.FullSignature)' nextStatement); " is 132.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchRegexNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRegexNode.cs,Expand,The length of the statement  "		var valueExpr = Expr.GetMember (Expr.GetIdx (Expr.GetMember (Expr.Get (matchVar)' "Groups")' Expr.Str (curr.Name))' "Value"); " is 125.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchRegexNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRegexNode.cs,Expand,The length of the statement  "			yield return MakeJumpIf (nextStatement' Expr.Not (Expr.Invoke (curr.Type.FullName' "TryParse"' valueExpr' Expr.Ref (Expr.Get (curr.Name))))); " is 141.
Long Statement,Lens.SyntaxTree.Declarations.Functions,LambdaNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\LambdaNode.cs,SetInferredArgumentTypes,The length of the statement  "			throw new InvalidOperationException (string.Format ("Argument type differs: specified '{0}'' inferred '{1}'!"' specified' inferred)); " is 133.
Long Statement,Lens.SyntaxTree.Declarations.Functions,LambdaNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\LambdaNode.cs,ToString,The length of the statement  "	var arglist = Arguments.Select (x => string.Format ("{0}:{1}"' x.Name' x.Type != null ? x.Type.Name : x.TypeSignature)); " is 120.
Long Statement,Lens.SyntaxTree.Declarations.Functions,FunctionNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,Equals,The length of the statement  "	return base.Equals (other) && string.Equals (Name' other.Name) && IsPure.Equals (other.IsPure) && Equals (ReturnTypeSignature' other.ReturnTypeSignature); " is 154.
Long Statement,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,resolveGetMember,The length of the statement  "			_Method = ctx.ResolveMethod (type' node.MemberName' _ArgTypes' _TypeHints' (idx' types) => ctx.ResolveLambda (Arguments [idx] as LambdaNode' types)); " is 149.
Long Statement,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,resolveGetMember,The length of the statement  "			_Method = ctx.ResolveMethod (ctx.MainType.TypeInfo' node.MemberName' _ArgTypes' resolver: (idx' types) => ctx.ResolveLambda (Arguments [idx] as LambdaNode' types)); " is 164.
Long Statement,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,resolveGetMember,The length of the statement  "			_Method = ctx.ResolveExtensionMethod (type' node.MemberName' oldArgTypes' _TypeHints' (idx' types) => ctx.ResolveLambda (Arguments [idx] as LambdaNode' types)); " is 160.
Long Statement,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,resolveGetIdentifier,The length of the statement  "		_Method = ctx.ResolveMethod (ctx.MainType.TypeInfo' node.Identifier' _ArgTypes' resolver: (idx' types) => ctx.ResolveLambda (Arguments [idx] as LambdaNode' types)); " is 164.
Long Statement,Lens.SyntaxTree.Operators.TypeBased,CastOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\CastOperatorNode.cs,castDelegate,The length of the statement  "	if (fromArgs.Length != toArgs.Length || toArgs.Select ((ta' id) => !ta.IsExtendablyAssignableFrom (fromArgs [id]' true)).Any (x => x)) " is 134.
Complex Conditional,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,resolveActualDeclaringType,The conditional expression  "curr == decl || (curr.IsGenericType && decl.IsGenericType && curr.GetGenericTypeDefinition () == decl.GetGenericTypeDefinition ())"  is complex.
Complex Conditional,Lens.SyntaxTree.ControlFlow,WhileNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\WhileNode.cs,expand,The conditional expression  "Condition.IsConstant && condType == typeof(bool) && Condition.ConstantValue == false && ctx.Options.UnrollConstants"  is complex.
Complex Conditional,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,canCompare,The conditional expression  "(right == typeof(NullType) && !left.IsValueType) || (left == typeof(NullType) && !right.IsValueType)"  is complex.
Complex Conditional,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,emitEqualityComparison,The conditional expression  "(left.IsNumericType () && right.IsNumericType ()) || (left == right && left == typeof(bool))"  is complex.
Empty Catch Block,Lens.Resolver,ReferencedAssemblyCache,F:\newReposMay17\impworks_lens\Lens\Resolver\ReferencedAssemblyCache.cs,ReferencedAssemblyCache,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,resolve,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,resolve,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,resolveSelf,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,resolveSelf,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,resolveSelf,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,resolve,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,resolveGetMember,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,resolveGetMember,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,resolveGetMember,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Operators.Unary,UnaryOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Unary\UnaryOperatorNodeBase.cs,resolve,The method has an empty catch block.
Magic Number,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createGetHashCode,The following statement contains a magic number: foreach (var f in _Fields.Values) {  	var fieldType = f.Type ?? Context.ResolveType (f.TypeSignature);  	NodeBase expr;  	if (fieldType.IsIntegerType ())  		expr = Expr.GetMember (Expr.This ()' f.Name);  	else if (fieldType.IsValueType)  		expr = Expr.Invoke (Expr.Cast (Expr.GetMember (Expr.This ()' f.Name)' typeof(object))' "GetHashCode");  	else  		expr = Expr.If (Expr.NotEqual (Expr.GetMember (Expr.This ()' f.Name)' Expr.Null ())' Expr.Block (Expr.Invoke (Expr.GetMember (Expr.This ()' f.Name)' "GetHashCode"))' Expr.Block (Expr.Int (0)));  	if (id < _Fields.Count - 1)  		expr = Expr.Mult (expr' Expr.Int (397));  	ghc.Body.Add (Expr.Set ("result"' Expr.Xor (Expr.Get ("result")' expr)));  	id++;  }  
Magic Number,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createGetHashCode,The following statement contains a magic number: if (id < _Fields.Count - 1)  	expr = Expr.Mult (expr' Expr.Int (397));  
Magic Number,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createGetHashCode,The following statement contains a magic number: expr = Expr.Mult (expr' Expr.Int (397));  
Magic Number,Lens.Compiler.Entities,TypeEntity,F:\newReposMay17\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,createPureWrapper,The following statement contains a magic number: if (argCount >= 8)  	Context.Error (CompilerMessages.PureFunctionTooManyArgs' method.Name);  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	return;  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	return;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	return;  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	return;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	return;  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	return;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	return;  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	return;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	return;  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	return;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	return;  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	return;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	return;  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	return;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value > -127 && value < 127)  	gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  else  	gen.Emit (OpCodes.Ldc_I4' value);  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value > -127 && value < 127)  	gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  else  	gen.Emit (OpCodes.Ldc_I4' value);  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value <= int.MaxValue && value >= int.MinValue && Decimal.Truncate (value) == value) {  	var ctor = typeof(Decimal).GetConstructor (new[] {  		typeof(int)  	});  	gen.EmitConstant ((int)value);  	gen.EmitCreateObject (ctor);  } else {  	var bits = Decimal.GetBits (value);  	var ctor = typeof(Decimal).GetConstructor (new[] {  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(bool)'  		typeof(byte)  	});  	var sign = value < Decimal.Zero;  	var scale = (bits [3] >> 16) & 0xFF;  	gen.EmitConstant (bits [0]);  	gen.EmitConstant (bits [1]);  	gen.EmitConstant (bits [2]);  	gen.EmitConstant (sign);  	gen.EmitConstant ((byte)scale);  	gen.EmitCreateObject (ctor);  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value <= int.MaxValue && value >= int.MinValue && Decimal.Truncate (value) == value) {  	var ctor = typeof(Decimal).GetConstructor (new[] {  		typeof(int)  	});  	gen.EmitConstant ((int)value);  	gen.EmitCreateObject (ctor);  } else {  	var bits = Decimal.GetBits (value);  	var ctor = typeof(Decimal).GetConstructor (new[] {  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(bool)'  		typeof(byte)  	});  	var sign = value < Decimal.Zero;  	var scale = (bits [3] >> 16) & 0xFF;  	gen.EmitConstant (bits [0]);  	gen.EmitConstant (bits [1]);  	gen.EmitConstant (bits [2]);  	gen.EmitConstant (sign);  	gen.EmitConstant ((byte)scale);  	gen.EmitCreateObject (ctor);  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value <= int.MaxValue && value >= int.MinValue && Decimal.Truncate (value) == value) {  	var ctor = typeof(Decimal).GetConstructor (new[] {  		typeof(int)  	});  	gen.EmitConstant ((int)value);  	gen.EmitCreateObject (ctor);  } else {  	var bits = Decimal.GetBits (value);  	var ctor = typeof(Decimal).GetConstructor (new[] {  		typeof(int)'  		typeof(int)'  		typeof(int)'  		typeof(bool)'  		typeof(byte)  	});  	var sign = value < Decimal.Zero;  	var scale = (bits [3] >> 16) & 0xFF;  	gen.EmitConstant (bits [0]);  	gen.EmitConstant (bits [1]);  	gen.EmitConstant (bits [2]);  	gen.EmitConstant (sign);  	gen.EmitConstant ((byte)scale);  	gen.EmitCreateObject (ctor);  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: gen.EmitConstant (bits [2]);  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,The following statement contains a magic number: if (getPointer) {  	if (argId < 255)  		gen.Emit (OpCodes.Ldarga_S' (byte)argId);  	else  		gen.Emit (OpCodes.Ldarga' (short)argId);  } else {  	switch (argId) {  	case 0:  		gen.Emit (OpCodes.Ldarg_0);  		break;  	case 1:  		gen.Emit (OpCodes.Ldarg_1);  		break;  	case 2:  		gen.Emit (OpCodes.Ldarg_2);  		break;  	case 3:  		gen.Emit (OpCodes.Ldarg_3);  		break;  	default:  		gen.Emit (OpCodes.Ldarg' (short)argId);  		break;  	}  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,The following statement contains a magic number: if (getPointer) {  	if (argId < 255)  		gen.Emit (OpCodes.Ldarga_S' (byte)argId);  	else  		gen.Emit (OpCodes.Ldarga' (short)argId);  } else {  	switch (argId) {  	case 0:  		gen.Emit (OpCodes.Ldarg_0);  		break;  	case 1:  		gen.Emit (OpCodes.Ldarg_1);  		break;  	case 2:  		gen.Emit (OpCodes.Ldarg_2);  		break;  	case 3:  		gen.Emit (OpCodes.Ldarg_3);  		break;  	default:  		gen.Emit (OpCodes.Ldarg' (short)argId);  		break;  	}  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,The following statement contains a magic number: if (getPointer) {  	if (argId < 255)  		gen.Emit (OpCodes.Ldarga_S' (byte)argId);  	else  		gen.Emit (OpCodes.Ldarga' (short)argId);  } else {  	switch (argId) {  	case 0:  		gen.Emit (OpCodes.Ldarg_0);  		break;  	case 1:  		gen.Emit (OpCodes.Ldarg_1);  		break;  	case 2:  		gen.Emit (OpCodes.Ldarg_2);  		break;  	case 3:  		gen.Emit (OpCodes.Ldarg_3);  		break;  	default:  		gen.Emit (OpCodes.Ldarg' (short)argId);  		break;  	}  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,The following statement contains a magic number: if (argId < 255)  	gen.Emit (OpCodes.Ldarga_S' (byte)argId);  else  	gen.Emit (OpCodes.Ldarga' (short)argId);  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,The following statement contains a magic number: switch (argId) {  case 0:  	gen.Emit (OpCodes.Ldarg_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldarg_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldarg_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldarg_3);  	break;  default:  	gen.Emit (OpCodes.Ldarg' (short)argId);  	break;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,The following statement contains a magic number: switch (argId) {  case 0:  	gen.Emit (OpCodes.Ldarg_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldarg_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldarg_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldarg_3);  	break;  default:  	gen.Emit (OpCodes.Ldarg' (short)argId);  	break;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitSaveArgument,The following statement contains a magic number: if (argId < 255)  	gen.Emit (OpCodes.Starg_S' (byte)argId);  else  	gen.Emit (OpCodes.Starg' (short)argId);  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,The following statement contains a magic number: if (getPointer) {  	if (varId < 255)  		gen.Emit (OpCodes.Ldloca_S' (byte)varId);  	else  		gen.Emit (OpCodes.Ldloca' (short)varId);  } else {  	switch (varId) {  	case 0:  		gen.Emit (OpCodes.Ldloc_0);  		break;  	case 1:  		gen.Emit (OpCodes.Ldloc_1);  		break;  	case 2:  		gen.Emit (OpCodes.Ldloc_2);  		break;  	case 3:  		gen.Emit (OpCodes.Ldloc_3);  		break;  	default:  		gen.Emit (OpCodes.Ldloc' loc);  		break;  	}  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,The following statement contains a magic number: if (getPointer) {  	if (varId < 255)  		gen.Emit (OpCodes.Ldloca_S' (byte)varId);  	else  		gen.Emit (OpCodes.Ldloca' (short)varId);  } else {  	switch (varId) {  	case 0:  		gen.Emit (OpCodes.Ldloc_0);  		break;  	case 1:  		gen.Emit (OpCodes.Ldloc_1);  		break;  	case 2:  		gen.Emit (OpCodes.Ldloc_2);  		break;  	case 3:  		gen.Emit (OpCodes.Ldloc_3);  		break;  	default:  		gen.Emit (OpCodes.Ldloc' loc);  		break;  	}  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,The following statement contains a magic number: if (getPointer) {  	if (varId < 255)  		gen.Emit (OpCodes.Ldloca_S' (byte)varId);  	else  		gen.Emit (OpCodes.Ldloca' (short)varId);  } else {  	switch (varId) {  	case 0:  		gen.Emit (OpCodes.Ldloc_0);  		break;  	case 1:  		gen.Emit (OpCodes.Ldloc_1);  		break;  	case 2:  		gen.Emit (OpCodes.Ldloc_2);  		break;  	case 3:  		gen.Emit (OpCodes.Ldloc_3);  		break;  	default:  		gen.Emit (OpCodes.Ldloc' loc);  		break;  	}  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,The following statement contains a magic number: if (varId < 255)  	gen.Emit (OpCodes.Ldloca_S' (byte)varId);  else  	gen.Emit (OpCodes.Ldloca' (short)varId);  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,The following statement contains a magic number: switch (varId) {  case 0:  	gen.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldloc_3);  	break;  default:  	gen.Emit (OpCodes.Ldloc' loc);  	break;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,The following statement contains a magic number: switch (varId) {  case 0:  	gen.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldloc_3);  	break;  default:  	gen.Emit (OpCodes.Ldloc' loc);  	break;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitSaveLocal,The following statement contains a magic number: switch (loc.LocalIndex) {  case 0:  	gen.Emit (OpCodes.Stloc_0);  	break;  case 1:  	gen.Emit (OpCodes.Stloc_1);  	break;  case 2:  	gen.Emit (OpCodes.Stloc_2);  	break;  case 3:  	gen.Emit (OpCodes.Stloc_3);  	break;  default:  	gen.Emit (OpCodes.Stloc' loc);  	break;  }  
Magic Number,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitSaveLocal,The following statement contains a magic number: switch (loc.LocalIndex) {  case 0:  	gen.Emit (OpCodes.Stloc_0);  	break;  case 1:  	gen.Emit (OpCodes.Stloc_1);  	break;  case 2:  	gen.Emit (OpCodes.Stloc_2);  	break;  case 3:  	gen.Emit (OpCodes.Stloc_3);  	break;  default:  	gen.Emit (OpCodes.Stloc' loc);  	break;  }  
Magic Number,Lens.Compiler,FunctionArgument,F:\newReposMay17\impworks_lens\Lens\Compiler\FunctionArgument.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Name != null ? Name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.Compiler,FunctionArgument,F:\newReposMay17\impworks_lens\Lens\Compiler\FunctionArgument.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Name != null ? Name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.Compiler,FunctionArgument,F:\newReposMay17\impworks_lens\Lens\Compiler\FunctionArgument.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode () : 0);  
Magic Number,Lens.Compiler,FunctionArgument,F:\newReposMay17\impworks_lens\Lens\Compiler\FunctionArgument.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode () : 0);  
Magic Number,Lens.Resolver,ReflectionHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethodByArgs,The following statement contains a magic number: if (result.Length == 2 && result [0].Distance == result [1].Distance)  	throw new AmbiguousMatchException ();  
Magic Number,Lens.Resolver,FunctionalHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\FunctionalHelper.cs,CreateFuncType,The following statement contains a magic number: if (args.Length > 16)  	throw new LensCompilerException ("Func<> can have up to 16 arguments!");  
Magic Number,Lens.Resolver,FunctionalHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\FunctionalHelper.cs,CreateActionType,The following statement contains a magic number: if (args.Length > 16)  	throw new LensCompilerException ("Action<> can have up to 16 arguments!");  
Magic Number,Lens.Resolver,FunctionalHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\FunctionalHelper.cs,CreateLambdaType,The following statement contains a magic number: if (args.Length > 16)  	throw new LensCompilerException ("Lambda<> can have up to 16 arguments!");  
Magic Number,Lens.Resolver,FunctionalHelper,F:\newReposMay17\impworks_lens\Lens\Resolver\FunctionalHelper.cs,CreateTupleType,The following statement contains a magic number: if (args.Length > 8)  	throw new LensCompilerException ("Tuple<> can have up to 8 type arguments!");  
Magic Number,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,processStringLiteral,The following statement contains a magic number: while (inBounds ()) {  	var ch = _Source [_Position];  	if (!isEscaped && ch == '\\') {  		isEscaped = true;  		continue;  	}  	if (isEscaped) {  		sb.Append (escapeChar (_Source [_Position + 1]));  		skip (2);  		isEscaped = false;  		continue;  	}  	if (ch == '"') {  		skip ();  		Lexems.Add (new Lexem (LexemType.String' startPos' getPosition ()' sb.ToString ()));  		return;  	}  	if (ch == '\n') {  		_Offset = 1;  		_Line++;  	}  	sb.Append (ch);  	skip ();  }  
Magic Number,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,processStringLiteral,The following statement contains a magic number: if (isEscaped) {  	sb.Append (escapeChar (_Source [_Position + 1]));  	skip (2);  	isEscaped = false;  	continue;  }  
Magic Number,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,processStringLiteral,The following statement contains a magic number: skip (2);  
Magic Number,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,isComment,The following statement contains a magic number: return _Position < _Source.Length - 2 && _Source [_Position] == '/' && _Source [_Position + 1] == '/';  
Magic Number,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,transformCharLiteral,The following statement contains a magic number: if (value.Length < 3 || value.Length > 4)  	error (LexerMessages.IncorrectCharLiteral);  
Magic Number,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,transformCharLiteral,The following statement contains a magic number: if (value.Length < 3 || value.Length > 4)  	error (LexerMessages.IncorrectCharLiteral);  
Magic Number,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,transformCharLiteral,The following statement contains a magic number: value = value [1] == '\\' ? escapeChar (value [2]).ToString () : value [1].ToString ();  
Magic Number,Lens.Lexer,Lexem,F:\newReposMay17\impworks_lens\Lens\Lexer\Lexem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (Type.GetHashCode () * 397) ^ (Value != null ? Value.GetHashCode () : 0);  }  
Magic Number,Lens.Lexer,Lexem,F:\newReposMay17\impworks_lens\Lens\Lexer\Lexem.cs,GetHashCode,The following statement contains a magic number: return (Type.GetHashCode () * 397) ^ (Value != null ? Value.GetHashCode () : 0);  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseType,The following statement contains a magic number: while (true) {  	if (peek (LexemType.SquareOpen' LexemType.SquareClose)) {  		node = new TypeSignature (null' "[]"' node);  		skip (2);  	} else if (check (LexemType.Tilde))  		node = new TypeSignature (null' "~"' node);  	else if (check (LexemType.QuestionMark))  		node = new TypeSignature (null' "?"' node);  	else  		return node;  }  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseType,The following statement contains a magic number: if (peek (LexemType.SquareOpen' LexemType.SquareClose)) {  	node = new TypeSignature (null' "[]"' node);  	skip (2);  } else if (check (LexemType.Tilde))  	node = new TypeSignature (null' "~"' node);  else if (check (LexemType.QuestionMark))  	node = new TypeSignature (null' "?"' node);  else  	return node;  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseType,The following statement contains a magic number: skip (2);  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseSetIdStmt,The following statement contains a magic number: if (peekAny (_BinaryOperators) && peek (1' LexemType.Assign)) {  	var opType = _Lexems [_LexemId].Type;  	skip (2);  	node.Value = ensure (parseExpr' ParserMessages.ExpressionExpected);  	return new ShortAssignmentNode (opType' node);  }  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseSetIdStmt,The following statement contains a magic number: skip (2);  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseSetStmbrStmt,The following statement contains a magic number: if (peekAny (_BinaryOperators) && peek (1' LexemType.Assign)) {  	var opType = _Lexems [_LexemId].Type;  	skip (2);  	node.Value = ensure (parseExpr' ParserMessages.ExpressionExpected);  	return new ShortAssignmentNode (opType' node);  }  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseSetStmbrStmt,The following statement contains a magic number: skip (2);  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseSetAnyStmt,The following statement contains a magic number: if (peekAny (_BinaryOperators) && peek (1' LexemType.Assign)) {  	var opType = _Lexems [_LexemId].Type;  	skip (2);  	var expr = ensure (parseExpr' ParserMessages.AssignExpressionExpected);  	return new ShortAssignmentNode (opType' makeSetter (node' expr));  }  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseSetAnyStmt,The following statement contains a magic number: skip (2);  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseNewListBlock,The following statement contains a magic number: skip (2);  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseNewListBlock,The following statement contains a magic number: skip (2);  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseNewListLine,The following statement contains a magic number: skip (2);  
Magic Number,Lens.Parser,LensParser,F:\newReposMay17\impworks_lens\Lens\Parser\LensParser.cs,parseNewListLine,The following statement contains a magic number: skip (2);  
Magic Number,Lens.Stdlib,Utilities,F:\newReposMay17\impworks_lens\Lens\Stdlib\Utilities.cs,Odd,The following statement contains a magic number: return value % 2 != 0;  
Magic Number,Lens.Stdlib,Utilities,F:\newReposMay17\impworks_lens\Lens\Stdlib\Utilities.cs,Even,The following statement contains a magic number: return value % 2 == 0;  
Magic Number,Lens.Stdlib,Utilities,F:\newReposMay17\impworks_lens\Lens\Stdlib\Utilities.cs,Odd,The following statement contains a magic number: return value % 2 != 0;  
Magic Number,Lens.Stdlib,Utilities,F:\newReposMay17\impworks_lens\Lens\Stdlib\Utilities.cs,Even,The following statement contains a magic number: return value % 2 == 0;  
Magic Number,Lens.Stdlib,Randomizer,F:\newReposMay17\impworks_lens\Lens\Stdlib\Randomizer.cs,Random,The following statement contains a magic number: if (weight < 0.000001)  	throw new ArgumentException ("src");  
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (VariableName != null ? VariableName.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (IterableExpression != null ? IterableExpression.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (RangeStart != null ? RangeStart.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (RangeEnd != null ? RangeEnd.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (VariableName != null ? VariableName.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (IterableExpression != null ? IterableExpression.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (RangeStart != null ? RangeStart.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (RangeEnd != null ? RangeEnd.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (VariableName != null ? VariableName.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (IterableExpression != null ? IterableExpression.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (RangeStart != null ? RangeStart.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (RangeEnd != null ? RangeEnd.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (VariableName != null ? VariableName.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (IterableExpression != null ? IterableExpression.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (RangeStart != null ? RangeStart.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (RangeEnd != null ? RangeEnd.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (IterableExpression != null ? IterableExpression.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (RangeStart != null ? RangeStart.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (RangeEnd != null ? RangeEnd.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,CatchNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\CatchNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (ExceptionType != null ? ExceptionType.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ExceptionVariable != null ? ExceptionVariable.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Code != null ? Code.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,CatchNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\CatchNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (ExceptionType != null ? ExceptionType.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ExceptionVariable != null ? ExceptionVariable.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Code != null ? Code.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,CatchNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\CatchNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (ExceptionVariable != null ? ExceptionVariable.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,CatchNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\CatchNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Code != null ? Code.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,IfNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\IfNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Condition != null ? Condition.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (TrueAction != null ? TrueAction.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (FalseAction != null ? FalseAction.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,IfNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\IfNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Condition != null ? Condition.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (TrueAction != null ? TrueAction.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (FalseAction != null ? FalseAction.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,IfNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\IfNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (TrueAction != null ? TrueAction.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,IfNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\IfNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FalseAction != null ? FalseAction.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,WhileNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\WhileNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Condition != null ? Condition.GetHashCode () : 0) * 397) ^ (Body != null ? Body.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.ControlFlow,WhileNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\WhileNode.cs,GetHashCode,The following statement contains a magic number: return ((Condition != null ? Condition.GetHashCode () : 0) * 397) ^ (Body != null ? Body.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,TryNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\TryNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Code != null ? Code.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (CatchClauses != null ? CatchClauses.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Finally != null ? Finally.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,TryNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\TryNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Code != null ? Code.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (CatchClauses != null ? CatchClauses.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Finally != null ? Finally.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.ControlFlow,TryNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\TryNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (CatchClauses != null ? CatchClauses.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.ControlFlow,TryNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\ControlFlow\TryNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Finally != null ? Finally.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Declarations,UsingNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\UsingNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (VariableName != null ? VariableName.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Expression != null ? Expression.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Declarations,UsingNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\UsingNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (VariableName != null ? VariableName.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Expression != null ? Expression.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Declarations,UsingNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\UsingNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Expression != null ? Expression.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Declarations,UsingNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\UsingNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewObjectArrayNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewObjectArrayNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (TypeSignature != null ? TypeSignature.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Size != null ? Size.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewObjectArrayNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewObjectArrayNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (TypeSignature != null ? TypeSignature.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Size != null ? Size.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewObjectArrayNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewObjectArrayNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewObjectArrayNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewObjectArrayNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Size != null ? Size.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewObjectNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewObjectNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (base.GetHashCode () * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewObjectNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewObjectNode.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode () * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewTupleNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewTupleNode.cs,resolve,The following statement contains a magic number: if (Expressions.Count > 8)  	error (CompilerMessages.TupleTooManyArgs);  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = base.GetHashCode ();  	hash = (hash * 397) ^ PointerRequired.GetHashCode ();  	hash = (hash * 397) ^ RefArgumentRequired.GetHashCode ();  	return hash;  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = base.GetHashCode ();  	hash = (hash * 397) ^ PointerRequired.GetHashCode ();  	hash = (hash * 397) ^ RefArgumentRequired.GetHashCode ();  	return hash;  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ PointerRequired.GetHashCode ();  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ RefArgumentRequired.GetHashCode ();  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIndexNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIndexNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = base.GetHashCode ();  	hash = (hash * 397) ^ PointerRequired.GetHashCode ();  	hash = (hash * 397) ^ RefArgumentRequired.GetHashCode ();  	return hash;  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIndexNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIndexNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var hash = base.GetHashCode ();  	hash = (hash * 397) ^ PointerRequired.GetHashCode ();  	hash = (hash * 397) ^ RefArgumentRequired.GetHashCode ();  	return hash;  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIndexNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIndexNode.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ PointerRequired.GetHashCode ();  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIndexNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIndexNode.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ RefArgumentRequired.GetHashCode ();  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,resolveSelf,The following statement contains a magic number: if (_Method.ArgumentTypes.Length > 16)  	error (CompilerMessages.CallableTooManyArguments);  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = base.GetHashCode ();  	hashCode = (hashCode * 397) ^ PointerRequired.GetHashCode ();  	hashCode = (hashCode * 397) ^ RefArgumentRequired.GetHashCode ();  	hashCode = (hashCode * 397) ^ (TypeHints != null ? TypeHints.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = base.GetHashCode ();  	hashCode = (hashCode * 397) ^ PointerRequired.GetHashCode ();  	hashCode = (hashCode * 397) ^ RefArgumentRequired.GetHashCode ();  	hashCode = (hashCode * 397) ^ (TypeHints != null ? TypeHints.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = base.GetHashCode ();  	hashCode = (hashCode * 397) ^ PointerRequired.GetHashCode ();  	hashCode = (hashCode * 397) ^ RefArgumentRequired.GetHashCode ();  	hashCode = (hashCode * 397) ^ (TypeHints != null ? TypeHints.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ PointerRequired.GetHashCode ();  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ RefArgumentRequired.GetHashCode ();  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (TypeHints != null ? TypeHints.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,IndexNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\IndexNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Expression != null ? Expression.GetHashCode () : 0) * 397) ^ (Index != null ? Index.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,IndexNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\IndexNodeBase.cs,GetHashCode,The following statement contains a magic number: return ((Expression != null ? Expression.GetHashCode () : 0) * 397) ^ (Index != null ? Index.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,MemberNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\MemberNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Expression != null ? Expression.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (MemberName != null ? MemberName.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (StaticType != null ? StaticType.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,MemberNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\MemberNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Expression != null ? Expression.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (MemberName != null ? MemberName.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (StaticType != null ? StaticType.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,MemberNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\MemberNodeBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (MemberName != null ? MemberName.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,MemberNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\MemberNodeBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (StaticType != null ? StaticType.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,SetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetIdentifierNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (base.GetHashCode () * 397) ^ (Value != null ? Value.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,SetIdentifierNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetIdentifierNode.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode () * 397) ^ (Value != null ? Value.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,SetIndexNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetIndexNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (base.GetHashCode () * 397) ^ (Value != null ? Value.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,SetIndexNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetIndexNode.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode () * 397) ^ (Value != null ? Value.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,SetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetMemberNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (base.GetHashCode () * 397) ^ (Value != null ? Value.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Expressions.GetSet,SetMemberNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetMemberNode.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode () * 397) ^ (Value != null ? Value.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (base.GetHashCode () * 397) ^ (int)Kind;  }  
Magic Number,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode () * 397) ^ (int)Kind;  
Magic Number,Lens.SyntaxTree.Operators.Binary,PowOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\PowOperatorNode.cs,emitOperator,The following statement contains a magic number: if (RightOperand.IsConstant && RightOperand.ConstantValue is int) {  	var constPower = (int)RightOperand.ConstantValue;  	if (constPower > 0 && constPower <= 10) {  		var gen = ctx.CurrentMethod.Generator;  		// detect maximum power of 2 inside current power  		var squareCount = 0;  		var powerOf2 = 1;  		while (constPower - powerOf2 >= powerOf2) {  			powerOf2 *= 2;  			squareCount++;  		}  		var multCount = constPower - powerOf2;  		LeftOperand.Emit (ctx' true);  		gen.EmitConvert (typeof(double));  		for (var i = 0; i < multCount; i++)  			gen.EmitDup ();  		for (var i = 0; i < squareCount; i++) {  			gen.EmitDup ();  			gen.EmitMultiply ();  		}  		for (var i = 0; i < multCount; i++)  			gen.EmitMultiply ();  		return;  	}  }  
Magic Number,Lens.SyntaxTree.Operators.Binary,PowOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\PowOperatorNode.cs,emitOperator,The following statement contains a magic number: if (RightOperand.IsConstant && RightOperand.ConstantValue is int) {  	var constPower = (int)RightOperand.ConstantValue;  	if (constPower > 0 && constPower <= 10) {  		var gen = ctx.CurrentMethod.Generator;  		// detect maximum power of 2 inside current power  		var squareCount = 0;  		var powerOf2 = 1;  		while (constPower - powerOf2 >= powerOf2) {  			powerOf2 *= 2;  			squareCount++;  		}  		var multCount = constPower - powerOf2;  		LeftOperand.Emit (ctx' true);  		gen.EmitConvert (typeof(double));  		for (var i = 0; i < multCount; i++)  			gen.EmitDup ();  		for (var i = 0; i < squareCount; i++) {  			gen.EmitDup ();  			gen.EmitMultiply ();  		}  		for (var i = 0; i < multCount; i++)  			gen.EmitMultiply ();  		return;  	}  }  
Magic Number,Lens.SyntaxTree.Operators.Binary,PowOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\PowOperatorNode.cs,emitOperator,The following statement contains a magic number: if (constPower > 0 && constPower <= 10) {  	var gen = ctx.CurrentMethod.Generator;  	// detect maximum power of 2 inside current power  	var squareCount = 0;  	var powerOf2 = 1;  	while (constPower - powerOf2 >= powerOf2) {  		powerOf2 *= 2;  		squareCount++;  	}  	var multCount = constPower - powerOf2;  	LeftOperand.Emit (ctx' true);  	gen.EmitConvert (typeof(double));  	for (var i = 0; i < multCount; i++)  		gen.EmitDup ();  	for (var i = 0; i < squareCount; i++) {  		gen.EmitDup ();  		gen.EmitMultiply ();  	}  	for (var i = 0; i < multCount; i++)  		gen.EmitMultiply ();  	return;  }  
Magic Number,Lens.SyntaxTree.Operators.Binary,PowOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\PowOperatorNode.cs,emitOperator,The following statement contains a magic number: if (constPower > 0 && constPower <= 10) {  	var gen = ctx.CurrentMethod.Generator;  	// detect maximum power of 2 inside current power  	var squareCount = 0;  	var powerOf2 = 1;  	while (constPower - powerOf2 >= powerOf2) {  		powerOf2 *= 2;  		squareCount++;  	}  	var multCount = constPower - powerOf2;  	LeftOperand.Emit (ctx' true);  	gen.EmitConvert (typeof(double));  	for (var i = 0; i < multCount; i++)  		gen.EmitDup ();  	for (var i = 0; i < squareCount; i++) {  		gen.EmitDup ();  		gen.EmitMultiply ();  	}  	for (var i = 0; i < multCount; i++)  		gen.EmitMultiply ();  	return;  }  
Magic Number,Lens.SyntaxTree.Operators.Binary,PowOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\PowOperatorNode.cs,emitOperator,The following statement contains a magic number: while (constPower - powerOf2 >= powerOf2) {  	powerOf2 *= 2;  	squareCount++;  }  
Magic Number,Lens.SyntaxTree.Operators.Binary,PowOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\PowOperatorNode.cs,emitOperator,The following statement contains a magic number: powerOf2 *= 2;  
Magic Number,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((LeftOperand != null ? LeftOperand.GetHashCode () : 0) * 397) ^ (RightOperand != null ? RightOperand.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,GetHashCode,The following statement contains a magic number: return ((LeftOperand != null ? LeftOperand.GetHashCode () : 0) * 397) ^ (RightOperand != null ? RightOperand.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchTupleRule,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchTupleRule.cs,Resolve,The following statement contains a magic number: if (ElementRules.Count > 7)  	Error (CompilerMessages.PatternTupleTooManyArgs);  
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Arguments != null ? Arguments.GetHashCode () : 0) * 397) ^ (Body != null ? Body.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNodeBase.cs,GetHashCode,The following statement contains a magic number: return ((Arguments != null ? Arguments.GetHashCode () : 0) * 397) ^ (Body != null ? Body.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = base.GetHashCode ();  	hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ IsPure.GetHashCode ();  	hashCode = (hashCode * 397) ^ (ReturnTypeSignature != null ? ReturnTypeSignature.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = base.GetHashCode ();  	hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ IsPure.GetHashCode ();  	hashCode = (hashCode * 397) ^ (ReturnTypeSignature != null ? ReturnTypeSignature.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = base.GetHashCode ();  	hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ IsPure.GetHashCode ();  	hashCode = (hashCode * 397) ^ (ReturnTypeSignature != null ? ReturnTypeSignature.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IsPure.GetHashCode ();  
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (ReturnTypeSignature != null ? ReturnTypeSignature.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Declarations.Types,RecordField,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Types\RecordDefinitionNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Name != null ? Name.GetHashCode () : 0) * 397) ^ (Type != null ? Type.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Declarations.Types,RecordField,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Types\RecordDefinitionNode.cs,GetHashCode,The following statement contains a magic number: return ((Name != null ? Name.GetHashCode () : 0) * 397) ^ (Type != null ? Type.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Declarations.Types,TypeLabel,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Types\TypeDefinitionNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Name != null ? Name.GetHashCode () : 0) * 397) ^ (TagType != null ? TagType.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Declarations.Types,TypeLabel,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Types\TypeDefinitionNode.cs,GetHashCode,The following statement contains a magic number: return ((Name != null ? Name.GetHashCode () : 0) * 397) ^ (TagType != null ? TagType.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Declarations.Types,TypeDefinitionNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Types\TypeDefinitionNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Name != null ? Name.GetHashCode () : 0) * 397) ^ (Entries != null ? Entries.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Declarations.Types,TypeDefinitionNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Types\TypeDefinitionNodeBase.cs,GetHashCode,The following statement contains a magic number: return ((Name != null ? Name.GetHashCode () : 0) * 397) ^ (Entries != null ? Entries.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree,Expr,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expr.cs,Compose,The following statement contains a magic number: if (args.Length < 2)  	throw new ArgumentException ("At least 2 functions are required for composition!");  
Magic Number,Lens.SyntaxTree,Expr,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expr.cs,Compose,The following statement contains a magic number: for (var idx = 2; idx < args.Length; idx++)  	node = ShiftRight (node' args [idx]);  
Magic Number,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = base.GetHashCode ();  	hashCode = (hashCode * 397) ^ (Expression != null ? Expression.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Expressions,InvocationNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Expression != null ? Expression.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Operators.TypeBased,TypeOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\TypeOperatorNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Type != null ? Type.GetHashCode () : 0) * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Operators.TypeBased,TypeOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\TypeOperatorNodeBase.cs,GetHashCode,The following statement contains a magic number: return ((Type != null ? Type.GetHashCode () : 0) * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Operators.TypeBased,TypeCheckOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\TypeOperatorNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (base.GetHashCode () * 397) ^ (Expression != null ? Expression.GetHashCode () : 0);  }  
Magic Number,Lens.SyntaxTree.Operators.TypeBased,TypeCheckOperatorNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\TypeOperatorNodeBase.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode () * 397) ^ (Expression != null ? Expression.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Declarations.Locals,NameDeclarationNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Locals\NameDeclarationNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = IsConstant.GetHashCode ();  	hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Value != null ? Value.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Declarations.Locals,NameDeclarationNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Locals\NameDeclarationNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = IsConstant.GetHashCode ();  	hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (Value != null ? Value.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,Lens.SyntaxTree.Declarations.Locals,NameDeclarationNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Locals\NameDeclarationNodeBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode () : 0);  
Magic Number,Lens.SyntaxTree.Declarations.Locals,NameDeclarationNodeBase,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Declarations\Locals\NameDeclarationNodeBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Value != null ? Value.GetHashCode () : 0);  
Magic Number,Lens.Utils,PatternNameBinding,F:\newReposMay17\impworks_lens\Lens\Utils\PatternNameBinding.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (Name.GetHashCode () * 397) ^ Type.GetHashCode ();  }  
Magic Number,Lens.Utils,PatternNameBinding,F:\newReposMay17\impworks_lens\Lens\Utils\PatternNameBinding.cs,GetHashCode,The following statement contains a magic number: return (Name.GetHashCode () * 397) ^ Type.GetHashCode ();  
Missing Default,Lens.Compiler,EmitterExtensions,F:\newReposMay17\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following switch statement is missing a default case: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	return;  case -1:  	gen.Emit (OpCodes.Ldc_I4_M1);  	return;  }  
Missing Default,Lens.Lexer,LensLexer,F:\newReposMay17\impworks_lens\Lens\Lexer\LensLexer.cs,escapeChar,The following switch statement is missing a default case: switch (t) {  case 't':  	return '\t';  case 'n':  	return '\n';  case 'r':  	return '\r';  case '\\':  case '"':  case '\'':  	return t;  }  
Missing Default,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,F:\newReposMay17\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,unrollConstant,The following switch statement is missing a default case: switch (Kind) {  case ComparisonOperatorKind.Equals:  	return left == right;  case ComparisonOperatorKind.NotEquals:  	return left != right;  case ComparisonOperatorKind.Less:  	return left < right;  case ComparisonOperatorKind.LessEquals:  	return left <= right;  case ComparisonOperatorKind.Greater:  	return left > right;  case ComparisonOperatorKind.GreaterEquals:  	return left >= right;  }  
