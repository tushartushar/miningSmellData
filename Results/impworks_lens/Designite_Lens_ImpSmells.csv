Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lens.SyntaxTree.PatternMatching.Rules,MatchArrayRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchArrayRule.cs,Expand,The method has 107 lines of code.
Complex Method,Lens.Compiler.Entities,MethodEntity,C:\repos\impworks_lens\Lens\Compiler\Entities\MethodEntity.cs,PrepareSelf,Cyclomatic complexity of the method is 9
Complex Method,Lens.Compiler,Context,C:\repos\impworks_lens\Lens\Compiler\Context.Compilation.cs,DeclareFunction,Cyclomatic complexity of the method is 8
Complex Method,Lens.Resolver,GenericHelper,C:\repos\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,ApplyGenericArguments,Cyclomatic complexity of the method is 8
Complex Method,Lens.Resolver,GenericHelper,C:\repos\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,MakeGenericTypeChecked,Cyclomatic complexity of the method is 10
Complex Method,Lens.Resolver,ExtensionMethodResolver,C:\repos\impworks_lens\Lens\Resolver\ExtensionMethodResolver.cs,FindMethodsForType,Cyclomatic complexity of the method is 10
Complex Method,Lens.Resolver,TypeResolver,C:\repos\impworks_lens\Lens\Resolver\TypeResolver.cs,FindType,Cyclomatic complexity of the method is 10
Complex Method,Lens.Resolver,TypeExtensions,C:\repos\impworks_lens\Lens\Resolver\TypeExtensions.cs,distanceFrom,Cyclomatic complexity of the method is 20
Complex Method,Lens.Resolver,TypeExtensions,C:\repos\impworks_lens\Lens\Resolver\TypeExtensions.cs,GetMostCommonType,Cyclomatic complexity of the method is 11
Complex Method,Lens.Resolver,TypeExtensions,C:\repos\impworks_lens\Lens\Resolver\TypeExtensions.cs,GetMostCommonType,Cyclomatic complexity of the method is 12
Complex Method,Lens.Lexer,LensLexer,C:\repos\impworks_lens\Lens\Lexer\LensLexer.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,Lens.SyntaxTree.ControlFlow,IfNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\IfNode.cs,EmitInternal,Cyclomatic complexity of the method is 8
Complex Method,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,EmitInternal,Cyclomatic complexity of the method is 9
Complex Method,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,CanCompare,Cyclomatic complexity of the method is 10
Complex Method,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,EmitEqualityComparison,Cyclomatic complexity of the method is 14
Complex Method,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,ResolveInternal,Cyclomatic complexity of the method is 9
Complex Method,Lens.SyntaxTree.PatternMatching.Rules,MatchArrayRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchArrayRule.cs,Expand,Cyclomatic complexity of the method is 11
Complex Method,Lens.SyntaxTree,Expr,C:\repos\impworks_lens\Lens\SyntaxTree\Expr.cs,Constant,Cyclomatic complexity of the method is 8
Long Parameter List,Lens.Compiler.Entities,TypeEntity,C:\repos\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateMethod,The method has 6 parameters. Parameters: name' returnType' argTypes' isStatic' isVirtual' prepare
Long Parameter List,Lens.Compiler.Entities,TypeEntity,C:\repos\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateMethod,The method has 6 parameters. Parameters: name' returnType' argTypes' isStatic' isVirtual' prepare
Long Parameter List,Lens.Compiler.Entities,TypeEntity,C:\repos\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateMethod,The method has 6 parameters. Parameters: name' returnType' args' isStatic' isVirtual' prepare
Long Parameter List,Lens.Compiler.Entities,TypeEntity,C:\repos\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateMethodCore,The method has 5 parameters. Parameters: name' isStatic' isVirtual' prepare' extraInit
Long Parameter List,Lens.Compiler,Context,C:\repos\impworks_lens\Lens\Compiler\Context.Compilation.cs,ResolveMethod,The method has 5 parameters. Parameters: type' name' argTypes' hints' resolver
Long Parameter List,Lens.Compiler,Context,C:\repos\impworks_lens\Lens\Compiler\Context.Compilation.cs,ResolveExtensionMethod,The method has 5 parameters. Parameters: type' name' argTypes' hints' lambdaResolver
Long Parameter List,Lens.Compiler,Context,C:\repos\impworks_lens\Lens\Compiler\Context.Compilation.cs,CreateType,The method has 5 parameters. Parameters: name' parent' isSealed' defaultCtor' prepare
Long Parameter List,Lens.Compiler,Context,C:\repos\impworks_lens\Lens\Compiler\Context.Compilation.cs,CreateTypeCore,The method has 5 parameters. Parameters: name' isSealed' defaultCtor' prepare' extraInit
Long Parameter List,Lens.Resolver,GenericHelper,C:\repos\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,ResolveMethodGenericsByArgs,The method has 5 parameters. Parameters: expectedTypes' actualTypes' genericDefs' hints' lambdaResolver
Long Parameter List,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The method has 5 parameters. Parameters: type' name' argTypes' hints' lambdaResolver
Long Parameter List,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveExtensionMethod,The method has 6 parameters. Parameters: resolver' type' name' argTypes' hints' lambdaResolver
Long Parameter List,Lens.Resolver,GlobalPropertyInfo,C:\repos\impworks_lens\Lens\Resolver\GlobalPropertyHelper.cs,GlobalPropertyInfo,The method has 6 parameters. Parameters: id' propType' hasGetter' hasSetter' getterMethod' setterMethod
Long Parameter List,Lens.SyntaxTree,Expr,C:\repos\impworks_lens\Lens\SyntaxTree\Expr.cs,Fun,The method has 5 parameters. Parameters: name' type' isPure' args' body
Long Identifier,Lens.Compiler.Entities,EntityNames,C:\repos\impworks_lens\Lens\Compiler\Entities\EntityNames.cs,,The length of the parameter PureMethodCacheFlagNameTemplate is 31.
Long Statement,Lens.Compiler.Entities,ConstructorEntity,C:\repos\impworks_lens\Lens\Compiler\Entities\ConstructorEntity.cs,PrepareSelf,The length of the statement  "            ConstructorBuilder = ContainerType.TypeBuilder.DefineConstructor(MethodAttributes.Public' CallingConventions.HasThis' ArgumentTypes); " is 133.
Long Statement,Lens.Compiler.Entities,MethodEntity,C:\repos\impworks_lens\Lens\Compiler\Entities\MethodEntity.cs,PrepareSelf,The length of the statement  "            MethodBuilder = ContainerType.TypeBuilder.DefineMethod(Name' attrs' ReturnType.IsVoid() ? typeof(void) : ReturnType' ArgumentTypes); " is 132.
Long Statement,Lens.Compiler,Context,C:\repos\impworks_lens\Lens\Compiler\Context.Compilation.cs,IsTypeAllowed,The length of the statement  "            var exists = _explicitTypes.ContainsKey(type.FullName) || (type.Namespace != null && _explicitNamespaces.Keys.Any(k => type.Namespace.StartsWith(k))); " is 150.
Long Statement,Lens.Compiler,Context,C:\repos\impworks_lens\Lens\Compiler\Context.Compilation.cs,ResolveMethod,The length of the statement  "                    mw.ArgumentTypes = method.GetArgumentTypes(this).Select(t => GenericHelper.ApplyGenericArguments(t' genericDefs' genericValues)).ToArray(); " is 139.
Long Statement,Lens.Resolver,GenericHelper,C:\repos\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,ApplyGenericArguments,The length of the statement  "                var processed = type.GetGenericArguments().Select(a => ApplyGenericArguments(a' generics' values' throwNotFound)).ToArray(); " is 124.
Long Statement,Lens.Resolver,GenericHelper,C:\repos\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,MakeGenericTypeChecked,The length of the statement  "                        throw new TypeMatchException(string.Format(CompilerMessages.GenericInheritanceConstraintViolated' value' arg' type' currBase)); " is 127.
Long Statement,Lens.Resolver,GenericResolver,C:\repos\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,FindImplementation,The length of the statement  "                    var matching = actual.ResolveInterfaces().Where(i => i.IsGenericType && i.GetGenericTypeDefinition() == generic).Take(2).ToArray(); " is 131.
Long Statement,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The length of the statement  "                    var genericValues = GenericHelper.ResolveMethodGenericsByArgs(genMethod.ArgumentTypes' argTypes' genericDefs' hints' lambdaResolver); " is 133.
Long Statement,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The length of the statement  "                    mw.ArgumentTypes = mInfoOriginal.GetParameters().Select(p => GenericHelper.ApplyGenericArguments(p.ParameterType' totalGenericDefs' totalGenericValues)).ToArray(); " is 163.
Long Statement,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethod,The length of the statement  "                    mw.ArgumentTypes = mInfoOriginal.GetParameters().Select(p => GenericHelper.ApplyGenericArguments(p.ParameterType' type)).ToArray(); " is 131.
Long Statement,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveExtensionMethod,The length of the statement  "                info.ArgumentTypes = expectedTypes.Select(t => GenericHelper.ApplyGenericArguments(t' genericDefs' genericValues)).ToArray(); " is 125.
Long Statement,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethodGroup,The length of the statement  "                            ArgumentTypes = m.GetParameters().Select(p => GenericHelper.ApplyGenericArguments(p.ParameterType' declType)).ToArray()' " is 120.
Long Statement,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveIndexer,The length of the statement  "                    ArgumentTypes = indexer.GetParameters().Select(p => GenericHelper.ApplyGenericArguments(p.ParameterType' type)).ToArray()' " is 122.
Long Statement,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,GetMethodsByName,The length of the statement  "            const BindingFlags flags = BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy; " is 125.
Long Statement,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveActualDeclaringType,The length of the statement  "                    if (curr == decl || (curr.IsGenericType && decl.IsGenericType && curr.GetGenericTypeDefinition() == decl.GetGenericTypeDefinition())) " is 133.
Long Statement,Lens.Resolver,TypeExtensions,C:\repos\impworks_lens\Lens\Resolver\TypeExtensions.cs,ArgumentDistance,The length of the statement  "            var distance = simpleDistance == int.MaxValue || variadicDistance == int.MaxValue ? int.MaxValue : simpleDistance + variadicDistance; " is 133.
Long Statement,Lens.Resolver,TypeExtensions,C:\repos\impworks_lens\Lens\Resolver\TypeExtensions.cs,IsAppliedVersionOf,The length of the statement  "                throw new ArgumentException(string.Format("Interface {0} cannot implement a type! ({1} given)."' type.FullName' genericType.FullName)); " is 135.
Long Statement,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseLong,The length of the statement  "                return new LongNode(long.Parse(value.Substring(0' value.Length - 1)' NumberStyles.Integer' CultureInfo.InvariantCulture)); " is 122.
Long Statement,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseFloat,The length of the statement  "                return new FloatNode(float.Parse(value.Substring(0' value.Length - 1)' NumberStyles.Float' CultureInfo.InvariantCulture)); " is 122.
Long Statement,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseDecimal,The length of the statement  "                return new DecimalNode(decimal.Parse(value.Substring(0' value.Length - 1)' NumberStyles.Float' CultureInfo.InvariantCulture)); " is 126.
Long Statement,Lens.SyntaxTree.ControlFlow,WhileNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\WhileNode.cs,Expand,The length of the statement  "            if (Condition.IsConstant && condType == typeof(bool) && Condition.ConstantValue == false && ctx.Options.UnrollConstants) " is 120.
Long Statement,Lens.SyntaxTree.Declarations,UsingNode,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\UsingNode.cs,Equals,The length of the statement  "            return string.Equals(VariableName' other.VariableName) && Equals(Expression' other.Expression) && Equals(Body' other.Body); " is 123.
Long Statement,Lens.SyntaxTree.Expressions.Instantiation,NewDictionaryNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewDictionaryNode.cs,ToString,The length of the statement  "            return string.Format("dict({0})"' string.Join(";"' Expressions.Select(x => string.Format("{0} => {1}"' x.Key' x.Value)))); " is 122.
Long Statement,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,ResolveSelf,The length of the statement  "                Error(argTypes.Length == 0 ? CompilerMessages.TypeIdentifierNotFound : CompilerMessages.TypeMethodNotFound' _type.Name' MemberName); " is 132.
Long Statement,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,GetHashCode,The length of the statement  "                return ((LeftOperand != null ? LeftOperand.GetHashCode() : 0) * 397) ^ (RightOperand != null ? RightOperand.GetHashCode() : 0); " is 127.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchNameRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchNameRule.cs,Resolve,The length of the statement  "                if (!specifiedType.IsExtendablyAssignableFrom(expressionType) && !expressionType.IsExtendablyAssignableFrom(specifiedType)) " is 123.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchRangeRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRangeRule.cs,GetHashCode,The length of the statement  "                return ((RangeStartRule != null ? RangeStartRule.GetHashCode() : 0) * 397) ^ (RangeEndRule != null ? RangeEndRule.GetHashCode() : 0); " is 133.
Long Statement,Lens.SyntaxTree.PatternMatching.Rules,MatchRecordRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRecordRule.cs,GetHashCode,The length of the statement  "                return ((Identifier != null ? Identifier.GetHashCode() : 0) * 397) ^ (FieldRules != null ? FieldRules.GetHashCode() : 0); " is 121.
Long Statement,Lens.SyntaxTree,Expr,C:\repos\impworks_lens\Lens\SyntaxTree\Expr.cs,GreaterEqual,The length of the statement  "            return new ComparisonOperatorNode {Kind = ComparisonOperatorKind.GreaterEquals' LeftOperand = left' RightOperand = right}; " is 122.
Long Statement,Lens.SyntaxTree.Operators.TypeBased,CastOperatorNode,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\CastOperatorNode.cs,CastDelegate,The length of the statement  "            if (fromArgs.Length != toArgs.Length || toArgs.Select((ta' id) => !ta.IsExtendablyAssignableFrom(fromArgs[id]' true)).Any(x => x)) " is 130.
Complex Conditional,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveActualDeclaringType,The conditional expression  "curr == decl || (curr.IsGenericType && decl.IsGenericType && curr.GetGenericTypeDefinition() == decl.GetGenericTypeDefinition())"  is complex.
Complex Conditional,Lens.SyntaxTree.ControlFlow,WhileNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\WhileNode.cs,Expand,The conditional expression  "Condition.IsConstant && condType == typeof(bool) && Condition.ConstantValue == false && ctx.Options.UnrollConstants"  is complex.
Complex Conditional,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,CanCompare,The conditional expression  "(right == typeof(NullType) && !left.IsValueType) || (left == typeof(NullType) && !right.IsValueType)"  is complex.
Complex Conditional,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,EmitEqualityComparison,The conditional expression  "(left.IsNumericType() && right.IsNumericType()) || (left == right && left == typeof(bool))"  is complex.
Empty Catch Block,Lens.Resolver,ReferencedAssemblyCache,C:\repos\impworks_lens\Lens\Resolver\ReferencedAssemblyCache.cs,ReferencedAssemblyCache,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,ResolveInternal,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,ResolveInternal,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,ResolveSelf,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,ResolveSelf,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,ResolveSelf,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,ResolveInternal,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions,InvocationNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,ResolveGetMember,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions,InvocationNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,ResolveGetMember,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions,InvocationNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,ResolveGetMember,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Expressions,InvocationNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,ResolveGetIdentifier,The method has an empty catch block.
Empty Catch Block,Lens.SyntaxTree.Operators.Unary,UnaryOperatorNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Unary\UnaryOperatorNodeBase.cs,ResolveInternal,The method has an empty catch block.
Magic Number,Lens.Compiler.Entities,TypeEntity,C:\repos\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreateGetHashCode,The following statement contains a magic number: foreach (var f in _fields.Values)              {                  var fieldType = f.Type ?? Context.ResolveType(f.TypeSignature);                  NodeBase expr;                  if (fieldType.IsIntegerType())                  {                      expr = Expr.GetMember(Expr.This()' f.Name);                  }                  else if (fieldType.IsValueType)                  {                      expr = Expr.Invoke(                          Expr.Cast(Expr.GetMember(Expr.This()' f.Name)' typeof(object))'                          "GetHashCode"                      );                  }                  else                  {                      expr = Expr.If(                          Expr.NotEqual(                              Expr.GetMember(Expr.This()' f.Name)'                              Expr.Null()                          )'                          Expr.Block(                              Expr.Invoke(                                  Expr.GetMember(Expr.This()' f.Name)'                                  "GetHashCode"                              )                          )'                          Expr.Block(Expr.Int(0))                      );                  }                    if (id < _fields.Count - 1)                      expr = Expr.Mult(expr' Expr.Int(397));                    ghc.Body.Add(                      Expr.Set("result"' Expr.Xor(Expr.Get("result")' expr))                  );                    id++;              }
Magic Number,Lens.Compiler.Entities,TypeEntity,C:\repos\impworks_lens\Lens\Compiler\Entities\TypeEntity.Autogeneration.cs,CreatePureWrapper,The following statement contains a magic number: if (argCount >= 8)                  Context.Error(CompilerMessages.PureFunctionTooManyArgs' method.Name);
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      return;                  case -1:                      gen.Emit(OpCodes.Ldc_I4_M1);                      return;              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      return;                  case -1:                      gen.Emit(OpCodes.Ldc_I4_M1);                      return;              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      return;                  case -1:                      gen.Emit(OpCodes.Ldc_I4_M1);                      return;              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      return;                  case -1:                      gen.Emit(OpCodes.Ldc_I4_M1);                      return;              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      return;                  case -1:                      gen.Emit(OpCodes.Ldc_I4_M1);                      return;              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      return;                  case -1:                      gen.Emit(OpCodes.Ldc_I4_M1);                      return;              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: switch (value)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      return;                  case -1:                      gen.Emit(OpCodes.Ldc_I4_M1);                      return;              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value > -127 && value < 127)                  gen.Emit(OpCodes.Ldc_I4_S' (sbyte) value);              else                  gen.Emit(OpCodes.Ldc_I4' value);
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value > -127 && value < 127)                  gen.Emit(OpCodes.Ldc_I4_S' (sbyte) value);              else                  gen.Emit(OpCodes.Ldc_I4' value);
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value <= int.MaxValue && value >= int.MinValue && decimal.Truncate(value) == value)              {                  var ctor = typeof(decimal).GetConstructor(new[] {typeof(int)});                  gen.EmitConstant((int) value);                  gen.EmitCreateObject(ctor);              }              else              {                  var bits = decimal.GetBits(value);                  var ctor = typeof(decimal).GetConstructor(new[] {typeof(int)' typeof(int)' typeof(int)' typeof(bool)' typeof(byte)});                  var sign = value < decimal.Zero;                  var scale = (bits[3] >> 16) & 0xFF;                    gen.EmitConstant(bits[0]);                  gen.EmitConstant(bits[1]);                  gen.EmitConstant(bits[2]);                  gen.EmitConstant(sign);                  gen.EmitConstant((byte) scale);                  gen.EmitCreateObject(ctor);              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value <= int.MaxValue && value >= int.MinValue && decimal.Truncate(value) == value)              {                  var ctor = typeof(decimal).GetConstructor(new[] {typeof(int)});                  gen.EmitConstant((int) value);                  gen.EmitCreateObject(ctor);              }              else              {                  var bits = decimal.GetBits(value);                  var ctor = typeof(decimal).GetConstructor(new[] {typeof(int)' typeof(int)' typeof(int)' typeof(bool)' typeof(byte)});                  var sign = value < decimal.Zero;                  var scale = (bits[3] >> 16) & 0xFF;                    gen.EmitConstant(bits[0]);                  gen.EmitConstant(bits[1]);                  gen.EmitConstant(bits[2]);                  gen.EmitConstant(sign);                  gen.EmitConstant((byte) scale);                  gen.EmitCreateObject(ctor);              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following statement contains a magic number: if (value <= int.MaxValue && value >= int.MinValue && decimal.Truncate(value) == value)              {                  var ctor = typeof(decimal).GetConstructor(new[] {typeof(int)});                  gen.EmitConstant((int) value);                  gen.EmitCreateObject(ctor);              }              else              {                  var bits = decimal.GetBits(value);                  var ctor = typeof(decimal).GetConstructor(new[] {typeof(int)' typeof(int)' typeof(int)' typeof(bool)' typeof(byte)});                  var sign = value < decimal.Zero;                  var scale = (bits[3] >> 16) & 0xFF;                    gen.EmitConstant(bits[0]);                  gen.EmitConstant(bits[1]);                  gen.EmitConstant(bits[2]);                  gen.EmitConstant(sign);                  gen.EmitConstant((byte) scale);                  gen.EmitCreateObject(ctor);              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,The following statement contains a magic number: if (getPointer)              {                  if (argId < 255)                      gen.Emit(OpCodes.Ldarga_S' (byte) argId);                  else                      gen.Emit(OpCodes.Ldarga' (short) argId);              }              else              {                  switch (argId)                  {                      case 0:                          gen.Emit(OpCodes.Ldarg_0);                          break;                      case 1:                          gen.Emit(OpCodes.Ldarg_1);                          break;                      case 2:                          gen.Emit(OpCodes.Ldarg_2);                          break;                      case 3:                          gen.Emit(OpCodes.Ldarg_3);                          break;                      default:                          gen.Emit(OpCodes.Ldarg' (short) argId);                          break;                  }              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,The following statement contains a magic number: if (getPointer)              {                  if (argId < 255)                      gen.Emit(OpCodes.Ldarga_S' (byte) argId);                  else                      gen.Emit(OpCodes.Ldarga' (short) argId);              }              else              {                  switch (argId)                  {                      case 0:                          gen.Emit(OpCodes.Ldarg_0);                          break;                      case 1:                          gen.Emit(OpCodes.Ldarg_1);                          break;                      case 2:                          gen.Emit(OpCodes.Ldarg_2);                          break;                      case 3:                          gen.Emit(OpCodes.Ldarg_3);                          break;                      default:                          gen.Emit(OpCodes.Ldarg' (short) argId);                          break;                  }              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadArgument,The following statement contains a magic number: if (getPointer)              {                  if (argId < 255)                      gen.Emit(OpCodes.Ldarga_S' (byte) argId);                  else                      gen.Emit(OpCodes.Ldarga' (short) argId);              }              else              {                  switch (argId)                  {                      case 0:                          gen.Emit(OpCodes.Ldarg_0);                          break;                      case 1:                          gen.Emit(OpCodes.Ldarg_1);                          break;                      case 2:                          gen.Emit(OpCodes.Ldarg_2);                          break;                      case 3:                          gen.Emit(OpCodes.Ldarg_3);                          break;                      default:                          gen.Emit(OpCodes.Ldarg' (short) argId);                          break;                  }              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitSaveArgument,The following statement contains a magic number: if (argId < 255)                  gen.Emit(OpCodes.Starg_S' (byte) argId);              else                  gen.Emit(OpCodes.Starg' (short) argId);
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,The following statement contains a magic number: if (getPointer)              {                  if (varId < 255)                      gen.Emit(OpCodes.Ldloca_S' (byte) varId);                  else                      gen.Emit(OpCodes.Ldloca' (short) varId);              }              else              {                  switch (varId)                  {                      case 0:                          gen.Emit(OpCodes.Ldloc_0);                          break;                      case 1:                          gen.Emit(OpCodes.Ldloc_1);                          break;                      case 2:                          gen.Emit(OpCodes.Ldloc_2);                          break;                      case 3:                          gen.Emit(OpCodes.Ldloc_3);                          break;                      default:                          gen.Emit(OpCodes.Ldloc' loc);                          break;                  }              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,The following statement contains a magic number: if (getPointer)              {                  if (varId < 255)                      gen.Emit(OpCodes.Ldloca_S' (byte) varId);                  else                      gen.Emit(OpCodes.Ldloca' (short) varId);              }              else              {                  switch (varId)                  {                      case 0:                          gen.Emit(OpCodes.Ldloc_0);                          break;                      case 1:                          gen.Emit(OpCodes.Ldloc_1);                          break;                      case 2:                          gen.Emit(OpCodes.Ldloc_2);                          break;                      case 3:                          gen.Emit(OpCodes.Ldloc_3);                          break;                      default:                          gen.Emit(OpCodes.Ldloc' loc);                          break;                  }              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitLoadLocal,The following statement contains a magic number: if (getPointer)              {                  if (varId < 255)                      gen.Emit(OpCodes.Ldloca_S' (byte) varId);                  else                      gen.Emit(OpCodes.Ldloca' (short) varId);              }              else              {                  switch (varId)                  {                      case 0:                          gen.Emit(OpCodes.Ldloc_0);                          break;                      case 1:                          gen.Emit(OpCodes.Ldloc_1);                          break;                      case 2:                          gen.Emit(OpCodes.Ldloc_2);                          break;                      case 3:                          gen.Emit(OpCodes.Ldloc_3);                          break;                      default:                          gen.Emit(OpCodes.Ldloc' loc);                          break;                  }              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitSaveLocal,The following statement contains a magic number: switch (loc.LocalIndex)              {                  case 0:                      gen.Emit(OpCodes.Stloc_0);                      break;                  case 1:                      gen.Emit(OpCodes.Stloc_1);                      break;                  case 2:                      gen.Emit(OpCodes.Stloc_2);                      break;                  case 3:                      gen.Emit(OpCodes.Stloc_3);                      break;                  default:                      gen.Emit(OpCodes.Stloc' loc);                      break;              }
Magic Number,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitSaveLocal,The following statement contains a magic number: switch (loc.LocalIndex)              {                  case 0:                      gen.Emit(OpCodes.Stloc_0);                      break;                  case 1:                      gen.Emit(OpCodes.Stloc_1);                      break;                  case 2:                      gen.Emit(OpCodes.Stloc_2);                      break;                  case 3:                      gen.Emit(OpCodes.Stloc_3);                      break;                  default:                      gen.Emit(OpCodes.Stloc' loc);                      break;              }
Magic Number,Lens.Compiler,FunctionArgument,C:\repos\impworks_lens\Lens\Compiler\FunctionArgument.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.Compiler,FunctionArgument,C:\repos\impworks_lens\Lens\Compiler\FunctionArgument.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.Resolver,GenericResolver,C:\repos\impworks_lens\Lens\Resolver\GenericHelper.Resolver.cs,FindImplementation,The following statement contains a magic number: if (desired.IsInterface)                  {                      var matching = actual.ResolveInterfaces().Where(i => i.IsGenericType && i.GetGenericTypeDefinition() == generic).Take(2).ToArray();                      if (matching.Length == 0)                          throw new TypeMatchException(string.Format(CompilerMessages.GenericInterfaceNotImplemented' actual' generic));                      if (matching.Length > 1)                          throw new TypeMatchException(string.Format(CompilerMessages.GenericInterfaceMultipleImplementations' generic' actual));                        return matching[0];                  }
Magic Number,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethodByArgs,The following statement contains a magic number: var result = list.Select(x => TypeExtensions.ArgumentDistance(argTypes' argsGetter(x)' x' isVariadicGetter(x)))                               .OrderBy(rec => rec.Distance)                               .Take(2) // no more than 2 is needed                               .ToArray();
Magic Number,Lens.Resolver,ReflectionHelper,C:\repos\impworks_lens\Lens\Resolver\ReflectionHelper.cs,ResolveMethodByArgs,The following statement contains a magic number: if (result.Length == 2 && result[0].Distance == result[1].Distance)                  throw new AmbiguousMatchException();
Magic Number,Lens.Resolver,ExtensionMethodResolver,C:\repos\impworks_lens\Lens\Resolver\ExtensionMethodResolver.cs,ResolveExtensionMethod,The following statement contains a magic number: var result = methods.Where(m => m.Name == name)                                  .Select(mi => new {Method = mi' Distance = GetExtensionDistance(mi' type' args)})                                  .OrderBy(p => p.Distance)                                  .Take(2)                                  .ToArray();
Magic Number,Lens.Resolver,FunctionalHelper,C:\repos\impworks_lens\Lens\Resolver\FunctionalHelper.cs,CreateFuncType,The following statement contains a magic number: if (args.Length > 16)                  throw new LensCompilerException("Func<> can have up to 16 arguments!");
Magic Number,Lens.Resolver,FunctionalHelper,C:\repos\impworks_lens\Lens\Resolver\FunctionalHelper.cs,CreateActionType,The following statement contains a magic number: if (args.Length > 16)                  throw new LensCompilerException("Action<> can have up to 16 arguments!");
Magic Number,Lens.Resolver,FunctionalHelper,C:\repos\impworks_lens\Lens\Resolver\FunctionalHelper.cs,CreateLambdaType,The following statement contains a magic number: if (args.Length > 16)                  throw new LensCompilerException("Lambda<> can have up to 16 arguments!");
Magic Number,Lens.Resolver,FunctionalHelper,C:\repos\impworks_lens\Lens\Resolver\FunctionalHelper.cs,CreateTupleType,The following statement contains a magic number: if (args.Length > 8)                  throw new LensCompilerException("Tuple<> can have up to 8 type arguments!");
Magic Number,Lens.Lexer,LensLexer,C:\repos\impworks_lens\Lens\Lexer\LensLexer.cs,ProcessStringLiteral,The following statement contains a magic number: Skip(isVerbatim ? 2 : 1);
Magic Number,Lens.Lexer,LensLexer,C:\repos\impworks_lens\Lens\Lexer\LensLexer.cs,ProcessStringLiteral,The following statement contains a magic number: while (InBounds())              {                  var ch = CurrChar();                    if (!isEscaped && !isVerbatim && ch == '\\')                  {                      isEscaped = true;                      continue;                  }                    if (isEscaped)                  {                      sb.Append(EscapeChar(NextChar().Value));                      Skip(2);                      isEscaped = false;                      continue;                  }                    if (ch == '"')                  {                      if (isVerbatim && NextChar() == '"')                      {                          sb.Append('"');                          Skip(2);                          continue;                      }                      else                      {                          Skip();                          Lexems.Add(new Lexem(LexemType.String' startPos' GetPosition()' sb.ToString()));                          return;                      }                  }                    if (ch == '\n')                  {                      _offset = 1;                      _line++;                  }                    sb.Append(ch);                  Skip();              }
Magic Number,Lens.Lexer,LensLexer,C:\repos\impworks_lens\Lens\Lexer\LensLexer.cs,ProcessStringLiteral,The following statement contains a magic number: while (InBounds())              {                  var ch = CurrChar();                    if (!isEscaped && !isVerbatim && ch == '\\')                  {                      isEscaped = true;                      continue;                  }                    if (isEscaped)                  {                      sb.Append(EscapeChar(NextChar().Value));                      Skip(2);                      isEscaped = false;                      continue;                  }                    if (ch == '"')                  {                      if (isVerbatim && NextChar() == '"')                      {                          sb.Append('"');                          Skip(2);                          continue;                      }                      else                      {                          Skip();                          Lexems.Add(new Lexem(LexemType.String' startPos' GetPosition()' sb.ToString()));                          return;                      }                  }                    if (ch == '\n')                  {                      _offset = 1;                      _line++;                  }                    sb.Append(ch);                  Skip();              }
Magic Number,Lens.Lexer,LensLexer,C:\repos\impworks_lens\Lens\Lexer\LensLexer.cs,TransformCharLiteral,The following statement contains a magic number: if (value.Length < 3 || value.Length > 4)                  Error(lex' LexerMessages.IncorrectCharLiteral);
Magic Number,Lens.Lexer,LensLexer,C:\repos\impworks_lens\Lens\Lexer\LensLexer.cs,TransformCharLiteral,The following statement contains a magic number: if (value.Length < 3 || value.Length > 4)                  Error(lex' LexerMessages.IncorrectCharLiteral);
Magic Number,Lens.Lexer,LensLexer,C:\repos\impworks_lens\Lens\Lexer\LensLexer.cs,TransformCharLiteral,The following statement contains a magic number: value = value[1] == '\\'                  ? EscapeChar(value[2]).ToString()                  : value[1].ToString();
Magic Number,Lens.Lexer,Lexem,C:\repos\impworks_lens\Lens\Lexer\Lexem.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (Type.GetHashCode() * 397) ^ (Value != null ? Value.GetHashCode() : 0);              }
Magic Number,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseType,The following statement contains a magic number: while (true)              {                  if (Peek(LexemType.SquareOpen' LexemType.SquareClose))                  {                      node = new TypeSignature(null' "[]"' node);                      Skip(2);                  }                    else if (Check(LexemType.Tilde))                      node = new TypeSignature(null' "~"' node);                    else if (Check(LexemType.QuestionMark))                      node = new TypeSignature(null' "?"' node);                    else                      return node;              }
Magic Number,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseSetIdStmt,The following statement contains a magic number: if (PeekAny(BinaryOperators) && Peek(1' LexemType.Assign))              {                  var opType = _lexems[_lexemId].Type;                  Skip(2);                  node.Value = Ensure(ParseExpr' ParserMessages.ExpressionExpected);                  return new ShortAssignmentNode(opType' node);              }
Magic Number,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseSetStmbrStmt,The following statement contains a magic number: if (PeekAny(BinaryOperators) && Peek(1' LexemType.Assign))              {                  var opType = _lexems[_lexemId].Type;                  Skip(2);                  node.Value = Ensure(ParseExpr' ParserMessages.ExpressionExpected);                  return new ShortAssignmentNode(opType' node);              }
Magic Number,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseSetAnyStmt,The following statement contains a magic number: if (PeekAny(BinaryOperators) && Peek(1' LexemType.Assign))              {                  var opType = _lexems[_lexemId].Type;                  Skip(2);                  var expr = Ensure(ParseExpr' ParserMessages.AssignExpressionExpected);                  return new ShortAssignmentNode(opType' MakeSetter(node' expr));              }
Magic Number,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseNewListBlock,The following statement contains a magic number: Skip(2);
Magic Number,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseNewListBlock,The following statement contains a magic number: Skip(2);
Magic Number,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseNewListLine,The following statement contains a magic number: Skip(2);
Magic Number,Lens.Parser,LensParser,C:\repos\impworks_lens\Lens\Parser\LensParser.cs,ParseNewListLine,The following statement contains a magic number: Skip(2);
Magic Number,Lens.Stdlib,Utilities,C:\repos\impworks_lens\Lens\Stdlib\Utilities.cs,Odd,The following statement contains a magic number: return value % 2 != 0;
Magic Number,Lens.Stdlib,Utilities,C:\repos\impworks_lens\Lens\Stdlib\Utilities.cs,Even,The following statement contains a magic number: return value % 2 == 0;
Magic Number,Lens.Stdlib,Utilities,C:\repos\impworks_lens\Lens\Stdlib\Utilities.cs,Odd,The following statement contains a magic number: return value % 2 != 0;
Magic Number,Lens.Stdlib,Utilities,C:\repos\impworks_lens\Lens\Stdlib\Utilities.cs,Even,The following statement contains a magic number: return value % 2 == 0;
Magic Number,Lens.Stdlib,Randomizer,C:\repos\impworks_lens\Lens\Stdlib\Randomizer.cs,Random,The following statement contains a magic number: if (weight < 0.000001)                  throw new ArgumentException("src");
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (VariableName != null ? VariableName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (IterableExpression != null ? IterableExpression.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (RangeStart != null ? RangeStart.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (RangeEnd != null ? RangeEnd.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (VariableName != null ? VariableName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (IterableExpression != null ? IterableExpression.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (RangeStart != null ? RangeStart.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (RangeEnd != null ? RangeEnd.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (VariableName != null ? VariableName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (IterableExpression != null ? IterableExpression.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (RangeStart != null ? RangeStart.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (RangeEnd != null ? RangeEnd.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.ControlFlow,ForeachNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\ForeachNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (VariableName != null ? VariableName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (IterableExpression != null ? IterableExpression.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (RangeStart != null ? RangeStart.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (RangeEnd != null ? RangeEnd.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.ControlFlow,CatchNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\CatchNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ExceptionType != null ? ExceptionType.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ExceptionVariable != null ? ExceptionVariable.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Code != null ? Code.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.ControlFlow,CatchNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\CatchNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (ExceptionType != null ? ExceptionType.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ExceptionVariable != null ? ExceptionVariable.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Code != null ? Code.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.ControlFlow,IfNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\IfNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Condition != null ? Condition.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (TrueAction != null ? TrueAction.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (FalseAction != null ? FalseAction.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.ControlFlow,IfNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\IfNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Condition != null ? Condition.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (TrueAction != null ? TrueAction.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (FalseAction != null ? FalseAction.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.ControlFlow,WhileNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\WhileNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Condition != null ? Condition.GetHashCode() : 0) * 397) ^ (Body != null ? Body.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.ControlFlow,TryNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\TryNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Code != null ? Code.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (CatchClauses != null ? CatchClauses.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Finally != null ? Finally.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.ControlFlow,TryNode,C:\repos\impworks_lens\Lens\SyntaxTree\ControlFlow\TryNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Code != null ? Code.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (CatchClauses != null ? CatchClauses.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Finally != null ? Finally.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Declarations.Locals,MultiVarNode,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Locals\MultiVarNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Names != null ? Names.GetHashCode() : 0) * 397) ^ (Type != null ? Type.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Declarations.Locals,NameDeclarationNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Locals\NameDeclarationNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = IsConstant.GetHashCode();                  hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Value != null ? Value.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Declarations.Locals,NameDeclarationNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Locals\NameDeclarationNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = IsConstant.GetHashCode();                  hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Value != null ? Value.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Declarations,UsingNode,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\UsingNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (VariableName != null ? VariableName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Expression != null ? Expression.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Declarations,UsingNode,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\UsingNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (VariableName != null ? VariableName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Expression != null ? Expression.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewObjectArrayNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewObjectArrayNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (TypeSignature != null ? TypeSignature.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Size != null ? Size.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewObjectArrayNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewObjectArrayNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (TypeSignature != null ? TypeSignature.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Size != null ? Size.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewObjectNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewObjectNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (base.GetHashCode() * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Expressions.Instantiation,NewTupleNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\Instantiation\NewTupleNode.cs,ResolveInternal,The following statement contains a magic number: if (Expressions.Count > 8)                  Error(CompilerMessages.TupleTooManyArgs);
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hash = base.GetHashCode();                  hash = (hash * 397) ^ PointerRequired.GetHashCode();                  hash = (hash * 397) ^ RefArgumentRequired.GetHashCode();                  return hash;              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIdentifierNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIdentifierNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hash = base.GetHashCode();                  hash = (hash * 397) ^ PointerRequired.GetHashCode();                  hash = (hash * 397) ^ RefArgumentRequired.GetHashCode();                  return hash;              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIndexNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIndexNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hash = base.GetHashCode();                  hash = (hash * 397) ^ PointerRequired.GetHashCode();                  hash = (hash * 397) ^ RefArgumentRequired.GetHashCode();                  return hash;              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetIndexNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetIndexNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hash = base.GetHashCode();                  hash = (hash * 397) ^ PointerRequired.GetHashCode();                  hash = (hash * 397) ^ RefArgumentRequired.GetHashCode();                  return hash;              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,ResolveSelf,The following statement contains a magic number: if (_method.ArgumentTypes.Length > 16)                  Error(CompilerMessages.CallableTooManyArguments);
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = base.GetHashCode();                  hashCode = (hashCode * 397) ^ PointerRequired.GetHashCode();                  hashCode = (hashCode * 397) ^ RefArgumentRequired.GetHashCode();                  hashCode = (hashCode * 397) ^ (TypeHints != null ? TypeHints.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = base.GetHashCode();                  hashCode = (hashCode * 397) ^ PointerRequired.GetHashCode();                  hashCode = (hashCode * 397) ^ RefArgumentRequired.GetHashCode();                  hashCode = (hashCode * 397) ^ (TypeHints != null ? TypeHints.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,GetMemberNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\GetMemberNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = base.GetHashCode();                  hashCode = (hashCode * 397) ^ PointerRequired.GetHashCode();                  hashCode = (hashCode * 397) ^ RefArgumentRequired.GetHashCode();                  hashCode = (hashCode * 397) ^ (TypeHints != null ? TypeHints.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,IndexNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\IndexNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Expression != null ? Expression.GetHashCode() : 0) * 397) ^ (Index != null ? Index.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,MemberNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\MemberNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Expression != null ? Expression.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (MemberName != null ? MemberName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (StaticType != null ? StaticType.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,MemberNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\MemberNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (Expression != null ? Expression.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (MemberName != null ? MemberName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (StaticType != null ? StaticType.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,SetIdentifierNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetIdentifierNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (base.GetHashCode() * 397) ^ (Value != null ? Value.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,SetIndexNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetIndexNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (base.GetHashCode() * 397) ^ (Value != null ? Value.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Expressions.GetSet,SetMemberNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\GetSet\SetMemberNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (base.GetHashCode() * 397) ^ (Value != null ? Value.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (base.GetHashCode() * 397) ^ (int) Kind;              }
Magic Number,Lens.SyntaxTree.Operators.Binary,PowOperatorNode,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\PowOperatorNode.cs,EmitOperator,The following statement contains a magic number: if (RightOperand.IsConstant && RightOperand.ConstantValue is int)              {                  var constPower = (int) RightOperand.ConstantValue;                  if (constPower > 0 && constPower <= 10)                  {                      var gen = ctx.CurrentMethod.Generator;                        // detect maximum power of 2 inside current power                      var squareCount = 0;                      var powerOf2 = 1;                      while (constPower - powerOf2 >= powerOf2)                      {                          powerOf2 *= 2;                          squareCount++;                      }                        var multCount = constPower - powerOf2;                        LeftOperand.Emit(ctx' true);                      gen.EmitConvert(typeof(double));                        for (var i = 0; i < multCount; i++)                          gen.EmitDup();                        for (var i = 0; i < squareCount; i++)                      {                          gen.EmitDup();                          gen.EmitMultiply();                      }                        for (var i = 0; i < multCount; i++)                          gen.EmitMultiply();                        return;                  }              }
Magic Number,Lens.SyntaxTree.Operators.Binary,PowOperatorNode,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\PowOperatorNode.cs,EmitOperator,The following statement contains a magic number: if (RightOperand.IsConstant && RightOperand.ConstantValue is int)              {                  var constPower = (int) RightOperand.ConstantValue;                  if (constPower > 0 && constPower <= 10)                  {                      var gen = ctx.CurrentMethod.Generator;                        // detect maximum power of 2 inside current power                      var squareCount = 0;                      var powerOf2 = 1;                      while (constPower - powerOf2 >= powerOf2)                      {                          powerOf2 *= 2;                          squareCount++;                      }                        var multCount = constPower - powerOf2;                        LeftOperand.Emit(ctx' true);                      gen.EmitConvert(typeof(double));                        for (var i = 0; i < multCount; i++)                          gen.EmitDup();                        for (var i = 0; i < squareCount; i++)                      {                          gen.EmitDup();                          gen.EmitMultiply();                      }                        for (var i = 0; i < multCount; i++)                          gen.EmitMultiply();                        return;                  }              }
Magic Number,Lens.SyntaxTree.Operators.Binary,BinaryOperatorNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\BinaryOperatorNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((LeftOperand != null ? LeftOperand.GetHashCode() : 0) * 397) ^ (RightOperand != null ? RightOperand.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchKeyValueRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchKeyValueRule.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((KeyRule != null ? KeyRule.GetHashCode() : 0) * 397) ^ (ValueRule != null ? ValueRule.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchNameRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchNameRule.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ IsArraySubsequence.GetHashCode();                  return hashCode;              }
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchNameRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchNameRule.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ IsArraySubsequence.GetHashCode();                  return hashCode;              }
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchRangeRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRangeRule.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((RangeStartRule != null ? RangeStartRule.GetHashCode() : 0) * 397) ^ (RangeEndRule != null ? RangeEndRule.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchRecordRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRecordRule.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Identifier != null ? Identifier.GetHashCode() : 0) * 397) ^ (FieldRules != null ? FieldRules.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchRecordField,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRecordRule.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Name != null ? Name.GetHashCode() : 0) * 397) ^ (Rule != null ? Rule.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchRegexNode,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchRegexNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Value != null ? Value.GetHashCode() : 0) * 397) ^ (Modifiers != null ? Modifiers.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchTupleRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchTupleRule.cs,Resolve,The following statement contains a magic number: if (ElementRules.Count > 7)                  Error(CompilerMessages.PatternTupleTooManyArgs);
Magic Number,Lens.SyntaxTree.PatternMatching.Rules,MatchTypeRule,C:\repos\impworks_lens\Lens\SyntaxTree\PatternMatching\Rules\MatchTypeRule.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Identifier != null ? Identifier.GetHashCode() : 0) * 397) ^ (LabelRule != null ? LabelRule.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Arguments != null ? Arguments.GetHashCode() : 0) * 397) ^ (Body != null ? Body.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNode,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = base.GetHashCode();                  hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ IsPure.GetHashCode();                  hashCode = (hashCode * 397) ^ (ReturnTypeSignature != null ? ReturnTypeSignature.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNode,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = base.GetHashCode();                  hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ IsPure.GetHashCode();                  hashCode = (hashCode * 397) ^ (ReturnTypeSignature != null ? ReturnTypeSignature.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Declarations.Functions,FunctionNode,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Functions\FunctionNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = base.GetHashCode();                  hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ IsPure.GetHashCode();                  hashCode = (hashCode * 397) ^ (ReturnTypeSignature != null ? ReturnTypeSignature.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Declarations.Types,RecordField,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Types\RecordDefinitionNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Name != null ? Name.GetHashCode() : 0) * 397) ^ (Type != null ? Type.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Declarations.Types,TypeLabel,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Types\TypeDefinitionNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Name != null ? Name.GetHashCode() : 0) * 397) ^ (TagType != null ? TagType.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Declarations.Types,TypeDefinitionNodeBase<T>,C:\repos\impworks_lens\Lens\SyntaxTree\Declarations\Types\TypeDefinitionNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Name != null ? Name.GetHashCode() : 0) * 397) ^ (Entries != null ? Entries.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree,Expr,C:\repos\impworks_lens\Lens\SyntaxTree\Expr.cs,Compose,The following statement contains a magic number: if (args.Length < 2)                  throw new ArgumentException("At least 2 functions are required for composition!");
Magic Number,Lens.SyntaxTree,Expr,C:\repos\impworks_lens\Lens\SyntaxTree\Expr.cs,Compose,The following statement contains a magic number: for (var idx = 2; idx < args.Length; idx++)                  node = ShiftRight(node' args[idx]);
Magic Number,Lens.SyntaxTree.Expressions,InvocationNode,C:\repos\impworks_lens\Lens\SyntaxTree\Expressions\InvocationNode.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = base.GetHashCode();                  hashCode = (hashCode * 397) ^ (Expression != null ? Expression.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Lens.SyntaxTree.Operators.TypeBased,TypeOperatorNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\TypeOperatorNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Type != null ? Type.GetHashCode() : 0) * 397) ^ (TypeSignature != null ? TypeSignature.GetHashCode() : 0);              }
Magic Number,Lens.SyntaxTree.Operators.TypeBased,TypeCheckOperatorNodeBase,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\TypeBased\TypeOperatorNodeBase.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (base.GetHashCode() * 397) ^ (Expression != null ? Expression.GetHashCode() : 0);              }
Magic Number,Lens.Utils,PatternNameBinding,C:\repos\impworks_lens\Lens\Utils\PatternNameBinding.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (Name.GetHashCode() * 397) ^ Type.GetHashCode();              }
Missing Default,Lens.Compiler,EmitterExtensions,C:\repos\impworks_lens\Lens\Compiler\EmitterExtensions.cs,EmitConstant,The following switch statement is missing a default case: switch (value)              {                  case 0:                      gen.Emit(OpCodes.Ldc_I4_0);                      return;                  case 1:                      gen.Emit(OpCodes.Ldc_I4_1);                      return;                  case 2:                      gen.Emit(OpCodes.Ldc_I4_2);                      return;                  case 3:                      gen.Emit(OpCodes.Ldc_I4_3);                      return;                  case 4:                      gen.Emit(OpCodes.Ldc_I4_4);                      return;                  case 5:                      gen.Emit(OpCodes.Ldc_I4_5);                      return;                  case 6:                      gen.Emit(OpCodes.Ldc_I4_6);                      return;                  case 7:                      gen.Emit(OpCodes.Ldc_I4_7);                      return;                  case 8:                      gen.Emit(OpCodes.Ldc_I4_8);                      return;                  case -1:                      gen.Emit(OpCodes.Ldc_I4_M1);                      return;              }
Missing Default,Lens.Lexer,LensLexer,C:\repos\impworks_lens\Lens\Lexer\LensLexer.cs,EscapeChar,The following switch statement is missing a default case: switch (t)              {                  case 't':                      return '\t';                    case 'n':                      return '\n';                    case 'r':                      return '\r';                    case '\\':                  case '"':                  case '\'':                      return t;              }
Missing Default,Lens.SyntaxTree.Operators.Binary,ComparisonOperatorNode,C:\repos\impworks_lens\Lens\SyntaxTree\Operators\Binary\ComparisonOperatorNode.cs,UnrollConstant,The following switch statement is missing a default case: switch (Kind)              {                  case ComparisonOperatorKind.Equals: return left == right;                  case ComparisonOperatorKind.NotEquals: return left != right;                  case ComparisonOperatorKind.Less: return left < right;                  case ComparisonOperatorKind.LessEquals: return left <= right;                  case ComparisonOperatorKind.Greater: return left > right;                  case ComparisonOperatorKind.GreaterEquals: return left >= right;              }
