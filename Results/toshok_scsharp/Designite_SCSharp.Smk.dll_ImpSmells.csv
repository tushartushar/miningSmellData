Implementation smell,Namespace,Class,File,Method,Description
Long Method,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The method has 130 lines of code.
Long Method,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The method has 227 lines of code.
Complex Method,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,Cyclomatic complexity of the method is 16
Complex Method,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,Cyclomatic complexity of the method is 28
Long Statement,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,UpdatePalette,The length of the statement  "                    CurrentPalette[palIndex++] = Color.FromArgb(smackerMap[t]' smackerMap[(int)Util.ReadByte(s) & 0x3F]' smackerMap[(int)Util.ReadByte(s) & 0x3F]); " is 143.
Long Statement,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,GetVideoDataBitmap,The length of the statement  "            BitmapData data = bmp.LockBits(new Rectangle(0' 0' bmp.Width' bmp.Height)' System.Drawing.Imaging.ImageLockMode.WriteOnly' System.Drawing.Imaging.PixelFormat.Format8bppIndexed); " is 177.
Magic Number,SCSharp.Smk,BitStream,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\BitStream.cs,ReadBits,The following statement contains a magic number: BitCount > 16
Magic Number,SCSharp.Smk,BitStream,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\BitStream.cs,ReadBits,The following statement contains a magic number: result |= (((int)bytes[mCurrentByte] >> mCurrentBit) & (0xffff >> (16 - BitCount))) << bitsRead;
Magic Number,SCSharp.Smk,BitStream,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\BitStream.cs,ReadBits,The following statement contains a magic number: mCurrentBit + BitCount < 8
Magic Number,SCSharp.Smk,BigHuffmanTree,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Huffmantree.cs,BuildTree,The following statement contains a magic number: iMarker1 = m.ReadBits(16);
Magic Number,SCSharp.Smk,BigHuffmanTree,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Huffmantree.cs,BuildTree,The following statement contains a magic number: iMarker2 = m.ReadBits(16);
Magic Number,SCSharp.Smk,BigHuffmanTree,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Huffmantree.cs,BuildTree,The following statement contains a magic number: iMarker3 = m.ReadBits(16);
Magic Number,SCSharp.Smk,SmackerFile,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,ReadHeader,The following statement contains a magic number: i < 7
Magic Number,SCSharp.Smk,SmackerFile,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,ReadHeader,The following statement contains a magic number: i < 7
Magic Number,SCSharp.Smk,SmackerFile,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,CalcFps,The following statement contains a magic number: return 1000.0 / (int)smk.Pts_Inc;
Magic Number,SCSharp.Smk,SmackerHeader,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,IsStereoTrack,The following statement contains a magic number: return ((AudioRate[i] >> 24) & 16) > 0;
Magic Number,SCSharp.Smk,SmackerHeader,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,IsStereoTrack,The following statement contains a magic number: return ((AudioRate[i] >> 24) & 16) > 0;
Magic Number,SCSharp.Smk,SmackerHeader,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,Is16BitTrack,The following statement contains a magic number: return ((AudioRate[i] >> 24) & 32) > 0;
Magic Number,SCSharp.Smk,SmackerHeader,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,Is16BitTrack,The following statement contains a magic number: return ((AudioRate[i] >> 24) & 32) > 0;
Magic Number,SCSharp.Smk,SmackerHeader,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,IsCompressedTrack,The following statement contains a magic number: return ((AudioRate[i] >> 24) & 128) > 0;
Magic Number,SCSharp.Smk,SmackerHeader,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,IsCompressedTrack,The following statement contains a magic number: return ((AudioRate[i] >> 24) & 128) > 0;
Magic Number,SCSharp.Smk,SmackerHeader,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,IsYInterlaced,The following statement contains a magic number: return (Flags & 2) > 0;
Magic Number,SCSharp.Smk,SmackerHeader,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\Smk.cs,IsYDoubled,The following statement contains a magic number: return (Flags & 4) > 0;
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,SmackerDecoder,The following statement contains a magic number: lastAudioData = new byte[7][];
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,UpdatePalette,The following statement contains a magic number: long frameSize = File.FrameSizes[CurrentFrame] & (~3);
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,UpdatePalette,The following statement contains a magic number: size = size * 4 - 1;
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,UpdatePalette,The following statement contains a magic number: CurrentPalette[palIndex++] = Color.FromArgb(255' 0' 0' 0);
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,UpdatePalette,The following statement contains a magic number: sz < 256
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: byte[] audioData = new byte[unpackedLength + 4];
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: rightBaseMSB = (Int16)(m.ReadBits(8));
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: rightBaseLSB = (Int16)(m.ReadBits(8));
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: leftBaseMSB = (Int16)(m.ReadBits(8));
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: leftBaseLSB = (Int16)(m.ReadBits(8));
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: res = tree[2].Decode(m);
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: res = tree[3].Decode(m);
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: leftBaseMSB += (Int16)(leftBaseLSB >> 8);
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: l < unpackedLength / 2
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,ReadNextFrame,The following statement contains a magic number: i < 7
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: uint nbBlocksX = File.Header.Width / 4;
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: uint nbBlocksY = File.Header.Height / 4;
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: runLength = sizetable[(blockHeader >> 2) & 0x3F];
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: blockType = blockHeader & 3;
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,DecodeVideo,The following statement contains a magic number: switch (blockType)                  {                      case 2: //VOID BLOCK                          //  System.Console.WriteLine("VOID - ");                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              index = 0;                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      index = GetIndex(posX + x' posY + y);                                      currentFrameData[index] = lastFrameData[index];                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 3: //SOLID BLOCK                          //     System.Console.WriteLine("SOLID - ");                          color = (byte)(blockHeader >> 8);                            //Get block address                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              //Get current block coordinates                              posX = 4 * (currentBlock % nbBlocksX);                              posY = 4 * (currentBlock / nbBlocksX);                              for (x = 0; x < 4; x++)                              {                                  for (y = 0; y < 4; y++)                                  {                                      currentFrameData[GetIndex(posX + x' posY + y)] = color;                                  }                              }                                currentBlock++;                          }                          runLengthNotComplete = runLength - i;                          break;                      case 0: //MONO BLOCK                          //    System.Console.WriteLine("MONO - ");                          for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                          {                              colors = (uint)File.MClr.Decode(m);                              color1 = (byte)(colors >> 8);                              color2 = (byte)(colors & 0xFF);                                mask = (uint)File.MMap.Decode(m);                              posX = (currentBlock % nbBlocksX) * 4;                              posY = (currentBlock / nbBlocksX) * 4;                              for (y = 0; y < 4; y++)                              {                                  if ((mask & 1) > 0)                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX' posY + y)] = color2;                                  }                                  if ((mask & 2) > 0)                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 1' posY + y)] = color2;                                  }                                  if ((mask & 4) > 0)                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                  }                                  if ((mask & 8) > 0)                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                  }                                  else                                  {                                      currentFrameData[GetIndex(posX + 3' posY + y)] = color2;                                  }                                    mask >>= 4;                              }                              currentBlock++;                          }                          //  runLengthNotComplete = runLength - i;                          break;                      case 1:                          //    System.Console.WriteLine("FULL - ");                          int mode = 0;                          if (File.IsV4)                          {                              int type = m.ReadBits(1);                                if (type == 0)                              {                                  int abit = m.ReadBits(1);                                  if (abit == 1)                                      mode = 2;                                }                              else                                  mode = 1;                          }                            switch (mode)                          {                              case 0://v2 Full block                                    for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      for (y = 0; y < 4; y++)                                      {                                          colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                            currentFrameData[GetIndex(posX + 3' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + y)] = color2;                                              colors = (uint)File.Full.Decode(m);                                          color1 = (byte)(colors >> 8);                                          color2 = (byte)(colors & 0xFF);                                          currentFrameData[GetIndex(posX + 1' posY + y)] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + y)] = color2;                                        }                                      currentBlock++;                                  }                                  break;                              case 1:                                  for (i = 0; i < runLength && currentBlock < nbBlocks; i++)                                  {                                      posX = (currentBlock % nbBlocksX) * 4;                                      posY = (currentBlock / nbBlocksX) * 4;                                      pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 0)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 0)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 1)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 1)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 1)] = color1;                                        pix = (uint)File.Full.Decode(m);                                        color1 = (byte)(pix >> 8);                                      color2 = (byte)(pix & 0xFF);                                        currentFrameData[GetIndex(posX + 0' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 2)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 2)] = color1;                                      currentFrameData[GetIndex(posX + 0' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 1' posY + 3)] = color2;                                      currentFrameData[GetIndex(posX + 2' posY + 3)] = color1;                                      currentFrameData[GetIndex(posX + 3' posY + 3)] = color1;                                        currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - i;                                  break;                              case 2:                                  for (j = 0; j < runLength && currentBlock < nbBlocks; j++)                                  {                                      posX = (currentBlock % nbBlocksX) << 2;                                      posY = (currentBlock / nbBlocksX) << 2;                                      for (i = 0; i < 2; i++)                                      {                                            pix1 = (uint)File.Full.Decode(m);                                          pix2 = (uint)File.Full.Decode(m);                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                            currentFrameData[GetIndex(posX + 2' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 2' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 3' posY + (i << 1) + 1)] = color1;                                              color1 = (byte)(pix1 >> 8);                                          color2 = (byte)(pix1 & 0xFF);                                              currentFrameData[GetIndex(posX + 0' posY + (i << 1))] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1))] = color1;                                          currentFrameData[GetIndex(posX + 0' posY + (i << 1) + 1)] = color2;                                          currentFrameData[GetIndex(posX + 1' posY + (i << 1) + 1)] = color1;                                          }                                      currentBlock++;                                  }                                  //          runLengthNotComplete = runLength - j;                                  break;                              default:                                  break;                          }                            break;                  }
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,GetVideoDataBitmap,The following statement contains a magic number: ColorPalette pal = GetColorPalette(256);
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,GetVideoDataBitmap,The following statement contains a magic number: Array.Copy(CurrentPalette' pal.Entries' 256);
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,GetColorPalette,The following statement contains a magic number: nColors > 2
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,GetColorPalette,The following statement contains a magic number: nColors > 16
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,Reset,The following statement contains a magic number: int pos = (int)(104 + 5 * nbFrames + file.Header.TreesSize);
Magic Number,SCSharp.Smk,SmackerDecoder,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.Mpq.Smk\SmkDecoder.cs,Reset,The following statement contains a magic number: int pos = (int)(104 + 5 * nbFrames + file.Header.TreesSize);
