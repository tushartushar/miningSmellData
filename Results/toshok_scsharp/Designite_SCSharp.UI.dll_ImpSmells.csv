Implementation smell,Namespace,Class,File,Method,Description
Long Method,SCSharp.UI,Game,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Game.cs,Game,The method has 143 lines of code.
Long Method,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The method has 121 lines of code.
Long Method,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,MouseButtonDown,The method has 103 lines of code.
Long Method,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The method has 359 lines of code.
Complex Method,SCSharp.UI,AStarSolver,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\AStar.cs,FindPath,Cyclomatic complexity of the method is 9
Complex Method,SCSharp.UI,Game,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Game.cs,Game,Cyclomatic complexity of the method is 27
Complex Method,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,Cyclomatic complexity of the method is 8
Complex Method,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,Cyclomatic complexity of the method is 10
Complex Method,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,MouseButtonDown,Cyclomatic complexity of the method is 15
Complex Method,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PointerMotion,Cyclomatic complexity of the method is 16
Complex Method,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,ComposeText,Cyclomatic complexity of the method is 14
Complex Method,SCSharp.UI,ListBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ListBoxElement.cs,KeyboardDown,Cyclomatic complexity of the method is 9
Complex Method,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,Cyclomatic complexity of the method is 13
Complex Method,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,Cyclomatic complexity of the method is 10
Complex Method,SCSharp.UI,MarkupScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,AddMarkup,Cyclomatic complexity of the method is 12
Complex Method,SCSharp.UI,MarkupPage,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,Paint,Cyclomatic complexity of the method is 18
Complex Method,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Redraw,Cyclomatic complexity of the method is 9
Complex Method,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Invalidate,Cyclomatic complexity of the method is 8
Complex Method,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,Cyclomatic complexity of the method is 10
Complex Method,SCSharp.UI,PlayCustomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\PlayCustomScreen.cs,PopulateFileList,Cyclomatic complexity of the method is 9
Complex Method,SCSharp.UI,PlayCustomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\PlayCustomScreen.cs,UpdatePlayersDisplay,Cyclomatic complexity of the method is 9
Complex Method,SCSharp.UI,BriefingRunner,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,Tick,Cyclomatic complexity of the method is 13
Complex Method,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,Cyclomatic complexity of the method is 79
Complex Method,SCSharp.UI,TextBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\TextBoxElement.cs,KeyboardDown,Cyclomatic complexity of the method is 13
Complex Method,SCSharp.UI,UIScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIScreen.cs,ResourceLoader,Cyclomatic complexity of the method is 19
Complex Method,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,ClassifyDirection,Cyclomatic complexity of the method is 9
Long Parameter List,SCSharp.UI,DialogBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\DialogBoxElement.cs,TileRow,The method has 7 parameters. Parameters: surf' grp' pal' l' c' r' y
Long Parameter List,SCSharp.UI,GrpButtonElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GrpButtonElement.cs,GrpButtonElement,The method has 5 parameters. Parameters: screen' grp' palette' x' y
Long Parameter List,SCSharp.UI,GrpElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GrpElement.cs,GrpElement,The method has 5 parameters. Parameters: screen' grp' palette' x' y
Long Parameter List,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,ComposeText,The method has 6 parameters. Parameters: text' font' palette' width' height' offset
Long Parameter List,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurface,The method has 9 parameters. Parameters: data' width' height' depth' stride' rmask' gmask' bmask' amask
Long Parameter List,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurfaceFromRGBAData,The method has 5 parameters. Parameters: data' width' height' depth' stride
Long Parameter List,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurfaceFromRGBData,The method has 5 parameters. Parameters: data' width' height' depth' stride
Long Parameter List,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The method has 5 parameters. Parameters: grid' width' height' palette' with_alpha
Long Parameter List,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The method has 6 parameters. Parameters: grid' width' height' palette' translucent_index' transparent_index
Long Parameter List,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurfaceFromBitmap,The method has 5 parameters. Parameters: grid' width' height' palette' with_alpha
Long Parameter List,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurfaceFromBitmap,The method has 6 parameters. Parameters: grid' width' height' palette' translucent_index' transparent_index
Long Parameter List,SCSharp.UI,ImageElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ImageElement.cs,ImageElement,The method has 6 parameters. Parameters: screen' x1' y1' width' height' translucent_index
Long Parameter List,SCSharp.UI,LabelElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\LabelElement.cs,LabelElement,The method has 5 parameters. Parameters: screen' palette' font' x' y
Long Parameter List,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,AddMovieElements,The method has 6 parameters. Parameters: elementIndex' normalMovie' onMovie' off_x' off_y' on_movie_on_top
Long Parameter List,SCSharp.UI,MovieElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MovieElement.cs,MovieElement,The method has 5 parameters. Parameters: screen' el' palette' resource' scale
Long Parameter List,SCSharp.UI,MovieElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MovieElement.cs,MovieElement,The method has 6 parameters. Parameters: screen' x' y' width' height' scale
Long Parameter List,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,ReadyRoomScreen,The method has 9 parameters. Parameters: mpq' scenario_prefix' start_element_index' cancel_element_index' skiptutorial_element_index' replay_element_index' transmission_element_index' objectives_element_index' first_portrait_element_index
Long Parameter List,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Sprite,The method has 5 parameters. Parameters: mpq' sprite_entry' palette' x' y
Long Parameter List,SCSharp.UI,SpriteManager,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\SpriteManager.cs,CreateSprite,The method has 5 parameters. Parameters: mpq' sprite_number' palette' x' y
Long Parameter List,SCSharp.UI,UIElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIElement.cs,UIElement,The method has 5 parameters. Parameters: screen' x1' y1' width' height
Long Identifier,SCSharp.UI,GameMenuDialog,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameMenuDialog.cs,,The length of the parameter MISSIONOBJECTIVES_ELEMENT_INDEX is 31.
Long Identifier,SCSharp.UI,LoadSavedScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\LoadSavedScreen.cs,,The length of the parameter SAVEDGAME_LISTBOX_ELEMENT_INDEX is 31.
Long Identifier,SCSharp.UI,PlayCustomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\PlayCustomScreen.cs,,The length of the parameter GAMESUBTYPE_LABEL_ELEMENT_INDEX is 31.
Long Identifier,SCSharp.UI,PlayCustomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\PlayCustomScreen.cs,,The length of the parameter GAMESUBTYPE_COMBO_ELEMENT_INDEX is 31.
Long Identifier,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,,The length of the parameter SECOND_BUT_FIRST_INCOMPLETE_INDEX is 33.
Long Identifier,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,,The length of the parameter THIRD_BUT_FIRST_INCOMPLETE_INDEX is 32.
Long Identifier,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,,The length of the parameter THIRD_BUT_SECOND_INCOMPLETE_INDEX is 33.
Long Statement,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintMinimap,The length of the statement  "			Rectangle rect = new Rectangle (new Point ((int)((float)topleft_x / (float)mapRenderer.MapWidth * MINIMAP_WIDTH + MINIMAP_X)' " is 125.
Long Statement,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,ResourceLoader,The length of the statement  "			AddMovieElements (SINGLEPLAYER_ELEMENT_INDEX' "glue\\mainmenu\\Single.smk"' "glue\\mainmenu\\SingleOn.smk"' 50' 70' false); " is 123.
Long Statement,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,ResourceLoader,The length of the statement  "			AddMovieElements (CAMPAIGNEDITOR_ELEMENT_INDEX' "glue\\mainmenu\\Editor.smk"' "glue\\mainmenu\\EditorOn.smk"' 20' 18' true); " is 124.
Long Statement,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToSurface,The length of the statement  "			return GuiUtil.CreateSurfaceFromRGBAData (bitmap' (ushort)pixel_width' (ushort)pixel_height' 32' (ushort)(pixel_width * 4)); " is 124.
Long Statement,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,SelectCampaign,The length of the statement  "			mapdata_index = GlobalResources.Instance.MapDataDat.FileIndexes [(Game.Instance.PlayingBroodWar ? BroodwarCampaigns : StarcraftCampaigns)[campaign].mapDataStart]; " is 162.
Long Statement,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,AddMovieElements,The length of the statement  "				diskPlayer = new SmackerPlayer ((Stream)Mpq.GetResource (Game.Instance.PlayingBroodWar ? "glue\\Expcampaign\\disk.smk" : "glue\\campaign\\disk.smk")' 1); " is 153.
Long Statement,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,AddMovieElements,The length of the statement  "			diskElement.X1 = (ushort)(Elements[elementIndex].X1 + ((Elements[elementIndex].Width - diskElement.MovieSize.Width) / 2)); " is 122.
Long Statement,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,AddMovieElements,The length of the statement  "			normalElement.X1 = (ushort)(Elements[elementIndex].X1 + ((Elements[elementIndex].Width - normalElement.MovieSize.Width) / 2) + off_x); " is 134.
Long Statement,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,AddMovieElements,The length of the statement  "			normalElement.Y1 = (ushort)(((ButtonElement)Elements[elementIndex]).TextPosition.Y - normalElement.MovieSize.Height + off_y); " is 125.
Long Statement,SCSharp.UI,BriefingRunner,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,Tick,The length of the statement  "					Console.WriteLine ("location = {0}' textindex = {1}' wavindex = {2}' delay = {3}' group1 = {4}' group2 = {5}' unittype = {6}' action = {7}' switch = {8}' flags = {9}"' " is 167.
Long Statement,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The length of the statement  "				if ((x > SpriteManager.X - sprite_surface.Width / 2) && (x - sprite_surface.Width / 2 <= SpriteManager.X + Painter.SCREEN_RES_X) " is 128.
Long Statement,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The length of the statement  "				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]); " is 147.
Complex Conditional,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,UpdateCursor,The conditional expression  "cursor_x < sx + half_width && cursor_x > sx - half_width  					    && cursor_y < sy + half_height && cursor_y > sy - half_height"  is complex.
Complex Conditional,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,MouseButtonDown,The conditional expression  "args.X > MINIMAP_X && args.X < MINIMAP_X + MINIMAP_WIDTH &&  				 args.Y > MINIMAP_Y && args.Y < MINIMAP_Y + MINIMAP_HEIGHT"  is complex.
Complex Conditional,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The conditional expression  "(megatile_x >= chk.Width || megatile_x < 0) ||  			    (megatile_y >= chk.Height || megatile_y < 0)"  is complex.
Complex Conditional,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Invalidate,The conditional expression  "r.X >= Painter.SCREEN_RES_X  			    || r.Y >= Painter.SCREEN_RES_Y  			    || r.X + r.Width <= 0  			    || r.Y + r.Height <= 0"  is complex.
Complex Conditional,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The conditional expression  "(x > SpriteManager.X - sprite_surface.Width / 2) && (x - sprite_surface.Width / 2 <= SpriteManager.X + Painter.SCREEN_RES_X)  				    && (y > SpriteManager.Y - sprite_surface.Height / 2) && (y - sprite_surface.Height / 2 <= SpriteManager.Y + 375)"  is complex.
Complex Conditional,SCSharp.UI,TitleScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\TitleScreen.cs,LoadingFlasher,The conditional expression  "(Elements[LOADING_ELEMENT_INDEX].Visible && (totalElapsed < FLASH_ON_DURATION)) ||  			    (!Elements[LOADING_ELEMENT_INDEX].Visible && (totalElapsed < FLASH_OFF_DURATION))"  is complex.
Complex Conditional,SCSharp.UI,UIElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIElement.cs,PointInside,The conditional expression  "x >= X1 && x < X1 + Width &&  			    y >= Y1 && y < Y1 + Height"  is complex.
Complex Conditional,SCSharp.UI,UIScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIScreen.cs,KeyboardDown,The conditional expression  "(args.Key == e.Hotkey)  					     ||  					     (args.Key == Key.Return  					      && (e.Flags & ElementFlags.DefaultButton) == ElementFlags.DefaultButton)  					     ||  					     (args.Key == Key.Escape  					      && (e.Flags & ElementFlags.CancelButton) == ElementFlags.CancelButton)"  is complex.
Magic Number,SCSharp.UI,MapPoint,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\AStar.cs,GetHashCode,The following statement contains a magic number: return (33 * X) ^ (91 * Y);
Magic Number,SCSharp.UI,MapPoint,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\AStar.cs,GetHashCode,The following statement contains a magic number: return (33 * X) ^ (91 * Y);
Magic Number,SCSharp.UI,AStarSolver,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\AStar.cs,NeighborNodes,The following statement contains a magic number: p.X < 0 || p.X >= (map.Chk.Width << 3)
Magic Number,SCSharp.UI,AStarSolver,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\AStar.cs,NeighborNodes,The following statement contains a magic number: p.Y < 0 || p.Y >= (map.Chk.Height << 3)
Magic Number,SCSharp.UI,ButtonElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ButtonElement.cs,CalculateTextPosition,The following statement contains a magic number: text_surf = GuiUtil.ComposeText (Text' Font' Palette' -1' -1'  								 Sensitive ? 4 : 24);
Magic Number,SCSharp.UI,ButtonElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ButtonElement.cs,CalculateTextPosition,The following statement contains a magic number: text_surf = GuiUtil.ComposeText (Text' Font' Palette' -1' -1'  								 Sensitive ? 4 : 24);
Magic Number,SCSharp.UI,ButtonElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ButtonElement.cs,CalculateTextPosition,The following statement contains a magic number: text_x = (Width - text_surf.Width) / 2;
Magic Number,SCSharp.UI,ButtonElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ButtonElement.cs,CalculateTextPosition,The following statement contains a magic number: text_y = (Height - text_surf.Height) / 2;
Magic Number,SCSharp.UI,Cinematic,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Cinematic.cs,VideoPainter,The following statement contains a magic number: Painter.Blit (surf'  					      new Point ((Painter.Width - surf.Width) / 2'  							 (Painter.Height - surf.Height) / 2));
Magic Number,SCSharp.UI,Cinematic,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Cinematic.cs,VideoPainter,The following statement contains a magic number: Painter.Blit (surf'  					      new Point ((Painter.Width - surf.Width) / 2'  							 (Painter.Height - surf.Height) / 2));
Magic Number,SCSharp.UI,ComboBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ComboBoxElement.cs,CreateSurface,The following statement contains a magic number: Surface item_surface = GuiUtil.ComposeText (items[cursor]' Font' Palette' 4);
Magic Number,SCSharp.UI,ComboBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ComboBoxElement.cs,CreateDropdownSurface,The following statement contains a magic number: Surface item_surface = GuiUtil.ComposeText (items[i]' Font' Palette'  									    i == selected_item ? 4 : 24);
Magic Number,SCSharp.UI,ComboBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ComboBoxElement.cs,CreateDropdownSurface,The following statement contains a magic number: Surface item_surface = GuiUtil.ComposeText (items[i]' Font' Palette'  									    i == selected_item ? 4 : 24);
Magic Number,SCSharp.UI,CursorAnimator,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\CursorAnimator.cs,CursorAnimator,The following statement contains a magic number: this.x = 100;
Magic Number,SCSharp.UI,CursorAnimator,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\CursorAnimator.cs,CursorAnimator,The following statement contains a magic number: this.y = 100;
Magic Number,SCSharp.UI,DialogBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\DialogBoxElement.cs,TileRow,The following statement contains a magic number: Surface lsurf = GuiUtil.CreateSurfaceFromBitmap (grp.GetFrame (l)'  									 grp.Width' grp.Height'  									 pal'  									 41' 0);
Magic Number,SCSharp.UI,DialogBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\DialogBoxElement.cs,TileRow,The following statement contains a magic number: Surface csurf = GuiUtil.CreateSurfaceFromBitmap (grp.GetFrame (c)'  									 grp.Width' grp.Height'  									 pal'  									 41' 0);
Magic Number,SCSharp.UI,DialogBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\DialogBoxElement.cs,TileRow,The following statement contains a magic number: Surface rsurf = GuiUtil.CreateSurfaceFromBitmap (grp.GetFrame (r)'  									 grp.Width' grp.Height'  									 pal'  									 41' 0);
Magic Number,SCSharp.UI,GameModeDialog,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameModeDialog.cs,GameModeDialog,The following statement contains a magic number: background_translucent = 42;
Magic Number,SCSharp.UI,GameModeDialog,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameModeDialog.cs,ResourceLoader,The following statement contains a magic number: Elements[TITLE_ELEMENT_INDEX].Text = GlobalResources.Instance.BrooDat.GluAllTbl.Strings[172];
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,GameScreen,The following statement contains a magic number: ScrollCursors = new CursorAnimator[8];
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,GameScreen,The following statement contains a magic number: ScrollCursors = new CursorAnimator[8];
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,The following statement contains a magic number: scroll_factor *= 0.75f;
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,The following statement contains a magic number: scroll_y %= 375;
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,The following statement contains a magic number: scroll_y > 375
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,The following statement contains a magic number: dest = new Rectangle (new Point (0'0)'  						      new Size (Painter.SCREEN_RES_X - scroll_x'  								375 - scroll_y));
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,The following statement contains a magic number: dest = new Rectangle (new Point (Painter.SCREEN_RES_X - scroll_x' 0)'  							      new Size (scroll_x' 375 - scroll_y));
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,The following statement contains a magic number: dest = new Rectangle (new Point (0' 375 - scroll_y)'  							      new Size (Painter.SCREEN_RES_X - scroll_x' scroll_y));
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,The following statement contains a magic number: source.Y -= 375 - scroll_y;
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,The following statement contains a magic number: dest = new Rectangle (new Point (Painter.SCREEN_RES_X - scroll_x' 375 - scroll_y)'  							      new Size (scroll_x' scroll_y));
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PaintStarfield,The following statement contains a magic number: source.Y -= 375 - scroll_y;
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: hudElement = new ImageElement (this' 0' 0' 640' 480' TranslucentIndex);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: hudElement = new ImageElement (this' 0' 0' 640' 480' TranslucentIndex);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: portraitElement = new MovieElement (this' 415' 415' 48' 48' false);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: portraitElement = new MovieElement (this' 415' 415' 48' 48' false);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: portraitElement = new MovieElement (this' 415' 415' 48' 48' false);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: portraitElement = new MovieElement (this' 415' 415' 48' 48' false);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: starfield_layers[i].Fill (new Rectangle (new Point (obj.X' obj.Y)' new Size (2'2))'  									  Color.White);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: starfield_layers[i].Fill (new Rectangle (new Point (obj.X' obj.Y)' new Size (2'2))'  									  Color.White);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: ScrollCursors[i].SetHotSpot (60' 60);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: ScrollCursors[i].SetHotSpot (60' 60);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: MagCursors[i].SetHotSpot (60' 60);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: MagCursors[i].SetHotSpot (60' 60);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: TargetCursors[i].SetHotSpot (60' 60);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: TargetCursors[i].SetHotSpot (60' 60);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: wireframeElement = new GrpElement (this' wireframe' cmdicon_palette' 170' 390);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: wireframeElement = new GrpElement (this' wireframe' cmdicon_palette' 170' 390);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.UnitName] = new LabelElement (this' fontpal.Palette'  										   GuiUtil.GetFonts (Mpq)[1]'  										   254' 390);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.UnitName] = new LabelElement (this' fontpal.Palette'  										   GuiUtil.GetFonts (Mpq)[1]'  										   254' 390);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.ResourceUsed] = new LabelElement (this' fontpal.Palette'  										       GuiUtil.GetFonts (Mpq)[0]'  										       292' 420);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.ResourceUsed] = new LabelElement (this' fontpal.Palette'  										       GuiUtil.GetFonts (Mpq)[0]'  										       292' 420);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.ResourceProvided] = new LabelElement (this' fontpal.Palette'  											   GuiUtil.GetFonts (Mpq)[0]'  											   292' 434);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.ResourceProvided] = new LabelElement (this' fontpal.Palette'  											   GuiUtil.GetFonts (Mpq)[0]'  											   292' 434);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.ResourceTotal] = new LabelElement (this' fontpal.Palette'  											GuiUtil.GetFonts (Mpq)[0]'  											292' 448);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.ResourceTotal] = new LabelElement (this' fontpal.Palette'  											GuiUtil.GetFonts (Mpq)[0]'  											292' 448);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.ResourceMax] = new LabelElement (this' fontpal.Palette'  										      GuiUtil.GetFonts (Mpq)[0]'  										      292' 462);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: labelElements[(int)HudLabels.ResourceMax] = new LabelElement (this' fontpal.Palette'  										      GuiUtil.GetFonts (Mpq)[0]'  										      292' 462);
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: cmdButtonElements = new GrpButtonElement[9];
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ResourceLoader,The following statement contains a magic number: x == 3
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,UpdateCursor,The following statement contains a magic number: int half_width = u.Width / 2;
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,UpdateCursor,The following statement contains a magic number: int half_height = u.Height / 2;
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ScrollTick,The following statement contains a magic number: scroll_elapsed < 20
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,ScrollTick,The following statement contains a magic number: Painter.Invalidate (new Rectangle (new Point (0'0)'  							   new Size (Painter.SCREEN_RES_X' 375)));
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,Recenter,The following statement contains a magic number: topleft_x = x - Painter.SCREEN_RES_X / 2;
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,Recenter,The following statement contains a magic number: topleft_y = y - Painter.SCREEN_RES_Y / 2;
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PlaceInitialUnits,The following statement contains a magic number: unit.FlingyId == 140
Magic Number,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,PlaceInitialUnits,The following statement contains a magic number: Unit unit = new Unit (154);
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: byte[] buf = new byte[g.Width * g.Height * 4];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i + 1] = palette[ (g.Bitmap[y'x] + offset) * 3 + 2];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i + 1] = palette[ (g.Bitmap[y'x] + offset) * 3 + 2];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i + 2] = palette[ (g.Bitmap[y'x] + offset) * 3 + 1];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i + 2] = palette[ (g.Bitmap[y'x] + offset) * 3 + 1];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i + 3] = palette[ (g.Bitmap[y'x] + offset) * 3 ];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i + 3] = palette[ (g.Bitmap[y'x] + offset) * 3 ];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i+1] == 252 && buf[i+2] == 0 && buf[i+3] == 252
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i+1] == 252 && buf[i+2] == 0 && buf[i+3] == 252
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i+1] == 252 && buf[i+2] == 0 && buf[i+3] == 252
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: buf[i+1] == 252 && buf[i+2] == 0 && buf[i+3] == 252
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: i += 4;
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: return CreateSurfaceFromRGBAData (buf' (ushort)g.Width' (ushort)g.Height' 32' g.Width * 4);
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,RenderGlyph,The following statement contains a magic number: return CreateSurfaceFromRGBAData (buf' (ushort)g.Width' (ushort)g.Height' 32' g.Width * 4);
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,ComposeText,The following statement contains a magic number: return ComposeText (text' font' palette' -1' -1' 4);
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: byte[] buf = new byte[width * height * (3 + (with_alpha ? 1 : 0))];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i++] = palette[ grid[y'x] * 3 + 2];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i++] = palette[ grid[y'x] * 3 + 2];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i++] = palette[ grid[y'x] * 3 + 1];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i++] = palette[ grid[y'x] * 3 ];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i-4] = 0x00;
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i - 3] == 0  						    && buf[i - 2] == 0  						    && buf[i - 1] == 0
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i - 3] == 0  						    && buf[i - 2] == 0  						    && buf[i - 1] == 0
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: byte[] buf = new byte[width * height * 4];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i+1] = palette[ grid[y'x] * 3 + 2];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i+1] = palette[ grid[y'x] * 3 + 2];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i+2] = palette[ grid[y'x] * 3 + 1];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i+2] = palette[ grid[y'x] * 3 + 1];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i+3] = palette[ grid[y'x] * 3 + 0];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: buf[i+3] = palette[ grid[y'x] * 3 + 0];
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,GetBitmapData,The following statement contains a magic number: i+= 4;
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurfaceFromBitmap,The following statement contains a magic number: return CreateSurfaceFromRGBAData (buf' width' height' with_alpha ? 32 : 24' width * (3 + (with_alpha ? 1 : 0)));
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurfaceFromBitmap,The following statement contains a magic number: return CreateSurfaceFromRGBAData (buf' width' height' with_alpha ? 32 : 24' width * (3 + (with_alpha ? 1 : 0)));
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurfaceFromBitmap,The following statement contains a magic number: return CreateSurfaceFromRGBAData (buf' width' height' with_alpha ? 32 : 24' width * (3 + (with_alpha ? 1 : 0)));
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurfaceFromBitmap,The following statement contains a magic number: return CreateSurfaceFromRGBAData (buf' width' height' 32' width * 4);
Magic Number,SCSharp.UI,GuiUtil,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GuiUtil.cs,CreateSurfaceFromBitmap,The following statement contains a magic number: return CreateSurfaceFromRGBAData (buf' width' height' 32' width * 4);
Magic Number,SCSharp.UI,LabelElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\LabelElement.cs,CreateSurface,The following statement contains a magic number: Surface textSurf = GuiUtil.ComposeText (Text' Font' Palette' -1' -1'  									Sensitive ? 4 : 24);
Magic Number,SCSharp.UI,LabelElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\LabelElement.cs,CreateSurface,The following statement contains a magic number: Surface textSurf = GuiUtil.ComposeText (Text' Font' Palette' -1' -1'  									Sensitive ? 4 : 24);
Magic Number,SCSharp.UI,ListBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ListBoxElement.cs,CreateSurface,The following statement contains a magic number: Surface item_surface = GuiUtil.ComposeText (items[i]' Font' Palette'  									    (!selectable ||  									     (!selecting && cursor == i) ||  									     (selecting && selectionIndex == i)) ? 4 : 24);
Magic Number,SCSharp.UI,ListBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ListBoxElement.cs,CreateSurface,The following statement contains a magic number: Surface item_surface = GuiUtil.ComposeText (items[i]' Font' Palette'  									    (!selectable ||  									     (!selecting && cursor == i) ||  									     (selecting && selectionIndex == i)) ? 4 : 24);
Magic Number,SCSharp.UI,LoginScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\LoginScreen.cs,ResourceLoader,The following statement contains a magic number: Elements[NEW_ELEMENT_INDEX].Activate +=  				delegate () {  					EntryDialog d = new EntryDialog (this' mpq'  									 GlobalResources.Instance.GluAllTbl.Strings[22]);  					d.Cancel += delegate () { DismissDialog (); };  					d.Ok += delegate () {  						if (listbox.Contains (d.Value)) {  							NameAlreadyExists (d);  						}  						else {  							DismissDialog ();  							listbox.AddItem (d.Value);  						}  					};  					ShowDialog (d);  				};
Magic Number,SCSharp.UI,LoginScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\LoginScreen.cs,ResourceLoader,The following statement contains a magic number: Elements[DELETE_ELEMENT_INDEX].Activate +=  				delegate () {  					OkCancelDialog okd = new OkCancelDialog (this' mpq'  										 GlobalResources.Instance.GluAllTbl.Strings[23]);  					okd.Cancel += delegate () { DismissDialog (); };  					okd.Ok += delegate () {  						DismissDialog ();  						/* actually delete the file */  						listbox.RemoveAt (listbox.SelectedIndex);  					};  					ShowDialog (okd);  				};
Magic Number,SCSharp.UI,LoginScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\LoginScreen.cs,NameAlreadyExists,The following statement contains a magic number: OkDialog okd = new OkDialog (d' mpq'  						     GlobalResources.Instance.GluAllTbl.Strings[24]);
Magic Number,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,ResourceLoader,The following statement contains a magic number: AddMovieElements (SINGLEPLAYER_ELEMENT_INDEX' "glue\\mainmenu\\Single.smk"' "glue\\mainmenu\\SingleOn.smk"' 50' 70' false);
Magic Number,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,ResourceLoader,The following statement contains a magic number: AddMovieElements (SINGLEPLAYER_ELEMENT_INDEX' "glue\\mainmenu\\Single.smk"' "glue\\mainmenu\\SingleOn.smk"' 50' 70' false);
Magic Number,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,ResourceLoader,The following statement contains a magic number: AddMovieElements (MULTIPLAYER_ELEMENT_INDEX' "glue\\mainmenu\\Multi.smk"' "glue\\mainmenu\\MultiOn.smk"' 20' 12' true);
Magic Number,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,ResourceLoader,The following statement contains a magic number: AddMovieElements (MULTIPLAYER_ELEMENT_INDEX' "glue\\mainmenu\\Multi.smk"' "glue\\mainmenu\\MultiOn.smk"' 20' 12' true);
Magic Number,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,ResourceLoader,The following statement contains a magic number: AddMovieElements (CAMPAIGNEDITOR_ELEMENT_INDEX' "glue\\mainmenu\\Editor.smk"' "glue\\mainmenu\\EditorOn.smk"' 20' 18' true);
Magic Number,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,ResourceLoader,The following statement contains a magic number: AddMovieElements (CAMPAIGNEDITOR_ELEMENT_INDEX' "glue\\mainmenu\\Editor.smk"' "glue\\mainmenu\\EditorOn.smk"' 20' 18' true);
Magic Number,SCSharp.UI,MainMenu,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MainMenu.cs,ResourceLoader,The following statement contains a magic number: AddMovieElements (EXIT_ELEMENT_INDEX' "glue\\mainmenu\\Exit.smk"' "glue\\mainmenu\\ExitOn.smk"' 15' 0' true);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,MapRenderer,The following statement contains a magic number: pixel_width = (ushort)(chk.Width * 32);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,MapRenderer,The following statement contains a magic number: pixel_height = (ushort)(chk.Height * 32);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,SetUpperLeft,The following statement contains a magic number: int tl_x = x / 32;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,SetUpperLeft,The following statement contains a magic number: int tl_y = y / 32;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,SetUpperLeft,The following statement contains a magic number: mapSurface.Blit (tile' new Point (map_x * 32 - x' map_y * 32 - y));
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,SetUpperLeft,The following statement contains a magic number: mapSurface.Blit (tile' new Point (map_x * 32 - x' map_y * 32 - y));
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,SetUpperLeft,The following statement contains a magic number: map_x <= tl_x + width / 32 && map_x < chk.Width
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,SetUpperLeft,The following statement contains a magic number: map_y <= tl_y + width / 32 && map_y < chk.Height
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: int tile_group = mapTile >> 4;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: int megatile_id = Util.ReadWord (cv5' (tile_group * 26 + 10 + tile_number) * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: int megatile_id = Util.ReadWord (cv5' (tile_group * 26 + 10 + tile_number) * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: int megatile_id = Util.ReadWord (cv5' (tile_group * 26 + 10 + tile_number) * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image = new byte[32 * 32 * 4];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image = new byte[32 * 32 * 4];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image = new byte[32 * 32 * 4];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: ushort minitile_id = Util.ReadWord (vx4' megatile_id * 32 + minitile_y * 8 + minitile_x * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: ushort minitile_id = Util.ReadWord (vx4' megatile_id * 32 + minitile_y * 8 + minitile_x * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: ushort minitile_id = Util.ReadWord (vx4' megatile_id * 32 + minitile_y * 8 + minitile_x * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: ushort minitile_flags = Util.ReadWord (vf4' megatile_id * 32 + minitile_y * 8 + minitile_x * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: ushort minitile_flags = Util.ReadWord (vf4' megatile_id * 32 + minitile_y * 8 + minitile_x * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: ushort minitile_flags = Util.ReadWord (vf4' megatile_id * 32 + minitile_y * 8 + minitile_x * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: int x = (minitile_x + 1) * 8 - pixel_x - 1;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: int y = (minitile_y * 8) * 32 + pixel_y * 32;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: int y = (minitile_y * 8) * 32 + pixel_y * 32;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: int y = (minitile_y * 8) * 32 + pixel_y * 32;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image[0 + 4 * (x + y)] = 255;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image[0 + 4 * (x + y)] = 255;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image[1 + 4 * (x + y)] = 255;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image[1 + 4 * (x + y)] = 255;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image[2 + 4 * (x + y)] = 0;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image[2 + 4 * (x + y)] = 0;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image[3 + 4 * (x + y)] = 0;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: image[3 + 4 * (x + y)] = 0;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: pixel_y < 8
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: minitile_x < 4
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: minitile_y < 4
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: Surface surf = GuiUtil.CreateSurfaceFromRGBAData (image' 32' 32' 32' 32 * 4);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: Surface surf = GuiUtil.CreateSurfaceFromRGBAData (image' 32' 32' 32' 32 * 4);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: Surface surf = GuiUtil.CreateSurfaceFromRGBAData (image' 32' 32' 32' 32 * 4);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: Surface surf = GuiUtil.CreateSurfaceFromRGBAData (image' 32' 32' 32' 32 * 4);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,GetTile,The following statement contains a magic number: Surface surf = GuiUtil.CreateSurfaceFromRGBAData (image' 32' 32' 32' 32 * 4);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The following statement contains a magic number: megatile_x = point.X >> 3;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The following statement contains a magic number: megatile_y = point.Y >> 3;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The following statement contains a magic number: int tile_group = mapTile >> 4;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The following statement contains a magic number: int megatile_id = Util.ReadWord (cv5' (tile_group * 26 + 10 + tile_number) * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The following statement contains a magic number: int megatile_id = Util.ReadWord (cv5' (tile_group * 26 + 10 + tile_number) * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The following statement contains a magic number: int megatile_id = Util.ReadWord (cv5' (tile_group * 26 + 10 + tile_number) * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The following statement contains a magic number: ushort minitile_flags = Util.ReadWord (vf4' megatile_id * 32 + point.Y * 8 + point.X * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The following statement contains a magic number: ushort minitile_flags = Util.ReadWord (vf4' megatile_id * 32 + point.Y * 8 + point.X * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,Navigable,The following statement contains a magic number: ushort minitile_flags = Util.ReadWord (vf4' megatile_id * 32 + point.Y * 8 + point.X * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToSurface,The following statement contains a magic number: return GuiUtil.CreateSurfaceFromRGBAData (bitmap' (ushort)pixel_width' (ushort)pixel_height' 32' (ushort)(pixel_width * 4));
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToSurface,The following statement contains a magic number: return GuiUtil.CreateSurfaceFromRGBAData (bitmap' (ushort)pixel_width' (ushort)pixel_height' 32' (ushort)(pixel_width * 4));
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: byte[] image = new byte[pixel_width * pixel_height * 4];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: int tile_group = mapTile >> 4;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: int megatile_id = Util.ReadWord (cv5' (tile_group * 26 + 10 + tile_number) * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: int megatile_id = Util.ReadWord (cv5' (tile_group * 26 + 10 + tile_number) * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: int megatile_id = Util.ReadWord (cv5' (tile_group * 26 + 10 + tile_number) * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: ushort minitile_id = Util.ReadWord (vx4' megatile_id * 32 + minitile_y * 8 + minitile_x * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: ushort minitile_id = Util.ReadWord (vx4' megatile_id * 32 + minitile_y * 8 + minitile_x * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: ushort minitile_id = Util.ReadWord (vx4' megatile_id * 32 + minitile_y * 8 + minitile_x * 2);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: int x = map_x * 32 + (minitile_x + 1) * 8 - pixel_x - 1;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: int x = map_x * 32 + (minitile_x + 1) * 8 - pixel_x - 1;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: int y = (map_y * 32 + minitile_y * 8) * pixel_width + pixel_y * pixel_width;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: int y = (map_y * 32 + minitile_y * 8) * pixel_width + pixel_y * pixel_width;
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: byte palette_entry = vr4[minitile_id * 64 + pixel_y * 8 + pixel_x];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: byte palette_entry = vr4[minitile_id * 64 + pixel_y * 8 + pixel_x];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[0 + 4 * (x + y)] = (byte)(255 - wpe[palette_entry * 4 + 3]);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[0 + 4 * (x + y)] = (byte)(255 - wpe[palette_entry * 4 + 3]);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[0 + 4 * (x + y)] = (byte)(255 - wpe[palette_entry * 4 + 3]);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[0 + 4 * (x + y)] = (byte)(255 - wpe[palette_entry * 4 + 3]);
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[1 + 4 * (x + y)] = wpe[palette_entry * 4 + 2];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[1 + 4 * (x + y)] = wpe[palette_entry * 4 + 2];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[1 + 4 * (x + y)] = wpe[palette_entry * 4 + 2];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[2 + 4 * (x + y)] = wpe[palette_entry * 4 + 1];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[2 + 4 * (x + y)] = wpe[palette_entry * 4 + 1];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[2 + 4 * (x + y)] = wpe[palette_entry * 4 + 1];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[3 + 4 * (x + y)] = wpe[palette_entry * 4 + 0];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[3 + 4 * (x + y)] = wpe[palette_entry * 4 + 0];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: image[3 + 4 * (x + y)] = wpe[palette_entry * 4 + 0];
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: pixel_y < 8
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: minitile_x < 4
Magic Number,SCSharp.UI,MapRenderer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MapRenderer.cs,RenderToBitmap,The following statement contains a magic number: minitile_y < 4
Magic Number,SCSharp.UI,MarkupScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,ResourceLoader,The following statement contains a magic number: fnt = GuiUtil.GetFonts(mpq)[3];
Magic Number,SCSharp.UI,MarkupScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,ResourceLoader,The following statement contains a magic number: millisDelay = 4000;
Magic Number,SCSharp.UI,MarkupPage,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,MarkupPage,The following statement contains a magic number: newBackground = GuiUtil.SurfaceFromStream (background' 254' 0);
Magic Number,SCSharp.UI,MarkupPage,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,Paint,The following statement contains a magic number: switch (location) {  				case PageLocation.Top:  					y = Y_OFFSET;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.Bottom:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Left:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.LowerLeft:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Right:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (Painter.Width - s.Width - X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Center:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				}
Magic Number,SCSharp.UI,MarkupPage,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,Paint,The following statement contains a magic number: switch (location) {  				case PageLocation.Top:  					y = Y_OFFSET;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.Bottom:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Left:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.LowerLeft:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Right:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (Painter.Width - s.Width - X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Center:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				}
Magic Number,SCSharp.UI,MarkupPage,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,Paint,The following statement contains a magic number: switch (location) {  				case PageLocation.Top:  					y = Y_OFFSET;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.Bottom:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Left:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.LowerLeft:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Right:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (Painter.Width - s.Width - X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Center:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				}
Magic Number,SCSharp.UI,MarkupPage,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,Paint,The following statement contains a magic number: switch (location) {  				case PageLocation.Top:  					y = Y_OFFSET;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.Bottom:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Left:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.LowerLeft:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Right:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (Painter.Width - s.Width - X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Center:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				}
Magic Number,SCSharp.UI,MarkupPage,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,Paint,The following statement contains a magic number: switch (location) {  				case PageLocation.Top:  					y = Y_OFFSET;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.Bottom:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Left:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.LowerLeft:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Right:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (Painter.Width - s.Width - X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Center:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				}
Magic Number,SCSharp.UI,MarkupPage,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,Paint,The following statement contains a magic number: switch (location) {  				case PageLocation.Top:  					y = Y_OFFSET;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.Bottom:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Left:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.LowerLeft:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Right:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (Painter.Width - s.Width - X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Center:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				}
Magic Number,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Redraw,The following statement contains a magic number: fps_rect = new Rectangle (new Point (10' 10)' new Size (80' 30));
Magic Number,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Redraw,The following statement contains a magic number: fps_rect = new Rectangle (new Point (10' 10)' new Size (80' 30));
Magic Number,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Redraw,The following statement contains a magic number: fps_rect = new Rectangle (new Point (10' 10)' new Size (80' 30));
Magic Number,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Redraw,The following statement contains a magic number: fps_rect = new Rectangle (new Point (10' 10)' new Size (80' 30));
Magic Number,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Redraw,The following statement contains a magic number: fps = 1.0 / (after - last_time).TotalSeconds * 50;
Magic Number,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Redraw,The following statement contains a magic number: frame_count == 50
Magic Number,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Redraw,The following statement contains a magic number: paintingSurface.Blit (fps_surface' new Point (10'10));
Magic Number,SCSharp.UI,Painter,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Painter.cs,Redraw,The following statement contains a magic number: paintingSurface.Blit (fps_surface' new Point (10'10));
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: stream.Position += 48;
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: stream.Position += 54;
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: bpp != 8 || numplanes != 1
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: stream.Position = stream.Length - 256 * 3;
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: stream.Position = stream.Length - 256 * 3;
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: palette = new byte[256 * 3];
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: palette = new byte[256 * 3];
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: stream.Read (palette' 0' 256 * 3);
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: stream.Read (palette' 0' 256 * 3);
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: data = new byte[width * height * 4];
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: idx + 4 > data.Length
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: data[idx + 3] = palette [value * 3 + 0];
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: data[idx + 3] = palette [value * 3 + 0];
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: data[idx + 2] = palette [value * 3 + 1];
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: data[idx + 2] = palette [value * 3 + 1];
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: data[idx + 1] = palette [value * 3 + 2];
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: data[idx + 1] = palette [value * 3 + 2];
Magic Number,SCSharp.UI,Pcx,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Pcx.cs,ReadFromStream,The following statement contains a magic number: idx += 4;
Magic Number,SCSharp.UI,PlayCustomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\PlayCustomScreen.cs,InitializePlayerCombo,The following statement contains a magic number: combo.AddItem (GlobalResources.Instance.GluAllTbl.Strings[130]);
Magic Number,SCSharp.UI,PlayCustomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\PlayCustomScreen.cs,InitializePlayerCombo,The following statement contains a magic number: combo.AddItem (GlobalResources.Instance.GluAllTbl.Strings[128]' true);
Magic Number,SCSharp.UI,PlayCustomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\PlayCustomScreen.cs,UpdatePlayersDisplay,The following statement contains a magic number: ((ComboBoxElement)Elements[PLAYER1_COMBOBOX_RACE + i]).SelectedIndex = 3;
Magic Number,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,ResourceLoader,The following statement contains a magic number: Elements[THIRD_CAMPAIGN_ELEMENT_INDEX].Activate +=  				delegate () {  					SelectCampaign (2);  				};
Magic Number,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,ResourceLoader,The following statement contains a magic number: AddMovieElements (FIRST_CAMPAIGN_ELEMENT_INDEX' 0' -40' 0);
Magic Number,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,ResourceLoader,The following statement contains a magic number: AddMovieElements (THIRD_CAMPAIGN_ELEMENT_INDEX' 2' 0' 0);
Magic Number,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,SelectCampaign,The following statement contains a magic number: markup = String.Format ("rez\\Est{0}{1}{2}.txt"'  						Util.RaceChar[(int)Game.Instance.Race]'  						prefix.EndsWith ("tutorial") ? "0t" : prefix.Substring (prefix.Length - 2)'  						Game.Instance.PlayingBroodWar ? "x" : "");
Magic Number,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,AddMovieElements,The following statement contains a magic number: diskElement.X1 = (ushort)(Elements[elementIndex].X1 + ((Elements[elementIndex].Width - diskElement.MovieSize.Width) / 2));
Magic Number,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,AddMovieElements,The following statement contains a magic number: normalElement.X1 = (ushort)(Elements[elementIndex].X1 + ((Elements[elementIndex].Width - normalElement.MovieSize.Width) / 2) + off_x);
Magic Number,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,AddMovieElements,The following statement contains a magic number: onElement.X1 = (ushort)(Elements[elementIndex].X1 + ((Elements[elementIndex].Width - onElement.MovieSize.Width) / 2));
Magic Number,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,AddMovieElements,The following statement contains a magic number: normalElement.Dim (100);
Magic Number,SCSharp.UI,RaceSelectionScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\RaceSelectionScreen.cs,AddMovieElements,The following statement contains a magic number: Elements[elementIndex].MouseLeaveEvent +=   				delegate () {  					normalElement.Dim (100);  					onElement.Visible = false;  				};
Magic Number,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,ResourceLoader,The following statement contains a magic number: TranslucentIndex = 138;
Magic Number,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,ResourceLoader,The following statement contains a magic number: m.X1 += 3;
Magic Number,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,ResourceLoader,The following statement contains a magic number: m.Y1 += 3;
Magic Number,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,ResourceLoader,The following statement contains a magic number: m.Width -= 6;
Magic Number,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,ResourceLoader,The following statement contains a magic number: m.Height -= 6;
Magic Number,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,ResourceLoader,The following statement contains a magic number: i < 4
Magic Number,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,StopBriefing,The following statement contains a magic number: i < 4
Magic Number,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,UnhighlightPortrait,The following statement contains a magic number: portraits[highlightedPortrait].Dim (100);
Magic Number,SCSharp.UI,ReadyRoomScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,ShowPortrait,The following statement contains a magic number: portraits[slot].Dim (100);
Magic Number,SCSharp.UI,BriefingRunner,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,Tick,The following statement contains a magic number: switch (action.Action) {  				case 0: /* no action */  					break;  				case 1:  					sleepUntil = (int)action.Delay;  					return;  				case 2:  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				case 3:  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 4:  					screen.SetObjectives (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 5:  					Console.WriteLine ("show portrait:");  					Console.WriteLine ("location = {0}' textindex = {1}' wavindex = {2}' delay = {3}' group1 = {4}' group2 = {5}' unittype = {6}' action = {7}' switch = {8}' flags = {9}"'  							   action.Location'  							   action.TextIndex'  							   action.WavIndex'  							   action.Delay'  							   action.Group1'  							   action.Group2'  							   action.UnitType'  							   action.Action'  							   action.Switch'  							   action.Flags);  					screen.ShowPortrait ((int)action.UnitType' (int)action.Group1);  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 6:  					screen.HidePortrait ((int)action.Group1);  					break;  				case 7:  					Console.WriteLine ("Display Speaking Portrait(Slot' Time)");  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 8:  					Console.WriteLine ("Transmission(Text' Slot' Time' Modifier' Wave' WavTime)");  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					screen.HighlightPortrait ((int)action.Group1);  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				default:  					break;  				}
Magic Number,SCSharp.UI,BriefingRunner,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,Tick,The following statement contains a magic number: switch (action.Action) {  				case 0: /* no action */  					break;  				case 1:  					sleepUntil = (int)action.Delay;  					return;  				case 2:  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				case 3:  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 4:  					screen.SetObjectives (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 5:  					Console.WriteLine ("show portrait:");  					Console.WriteLine ("location = {0}' textindex = {1}' wavindex = {2}' delay = {3}' group1 = {4}' group2 = {5}' unittype = {6}' action = {7}' switch = {8}' flags = {9}"'  							   action.Location'  							   action.TextIndex'  							   action.WavIndex'  							   action.Delay'  							   action.Group1'  							   action.Group2'  							   action.UnitType'  							   action.Action'  							   action.Switch'  							   action.Flags);  					screen.ShowPortrait ((int)action.UnitType' (int)action.Group1);  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 6:  					screen.HidePortrait ((int)action.Group1);  					break;  				case 7:  					Console.WriteLine ("Display Speaking Portrait(Slot' Time)");  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 8:  					Console.WriteLine ("Transmission(Text' Slot' Time' Modifier' Wave' WavTime)");  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					screen.HighlightPortrait ((int)action.Group1);  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				default:  					break;  				}
Magic Number,SCSharp.UI,BriefingRunner,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,Tick,The following statement contains a magic number: switch (action.Action) {  				case 0: /* no action */  					break;  				case 1:  					sleepUntil = (int)action.Delay;  					return;  				case 2:  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				case 3:  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 4:  					screen.SetObjectives (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 5:  					Console.WriteLine ("show portrait:");  					Console.WriteLine ("location = {0}' textindex = {1}' wavindex = {2}' delay = {3}' group1 = {4}' group2 = {5}' unittype = {6}' action = {7}' switch = {8}' flags = {9}"'  							   action.Location'  							   action.TextIndex'  							   action.WavIndex'  							   action.Delay'  							   action.Group1'  							   action.Group2'  							   action.UnitType'  							   action.Action'  							   action.Switch'  							   action.Flags);  					screen.ShowPortrait ((int)action.UnitType' (int)action.Group1);  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 6:  					screen.HidePortrait ((int)action.Group1);  					break;  				case 7:  					Console.WriteLine ("Display Speaking Portrait(Slot' Time)");  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 8:  					Console.WriteLine ("Transmission(Text' Slot' Time' Modifier' Wave' WavTime)");  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					screen.HighlightPortrait ((int)action.Group1);  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				default:  					break;  				}
Magic Number,SCSharp.UI,BriefingRunner,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,Tick,The following statement contains a magic number: switch (action.Action) {  				case 0: /* no action */  					break;  				case 1:  					sleepUntil = (int)action.Delay;  					return;  				case 2:  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				case 3:  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 4:  					screen.SetObjectives (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 5:  					Console.WriteLine ("show portrait:");  					Console.WriteLine ("location = {0}' textindex = {1}' wavindex = {2}' delay = {3}' group1 = {4}' group2 = {5}' unittype = {6}' action = {7}' switch = {8}' flags = {9}"'  							   action.Location'  							   action.TextIndex'  							   action.WavIndex'  							   action.Delay'  							   action.Group1'  							   action.Group2'  							   action.UnitType'  							   action.Action'  							   action.Switch'  							   action.Flags);  					screen.ShowPortrait ((int)action.UnitType' (int)action.Group1);  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 6:  					screen.HidePortrait ((int)action.Group1);  					break;  				case 7:  					Console.WriteLine ("Display Speaking Portrait(Slot' Time)");  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 8:  					Console.WriteLine ("Transmission(Text' Slot' Time' Modifier' Wave' WavTime)");  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					screen.HighlightPortrait ((int)action.Group1);  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				default:  					break;  				}
Magic Number,SCSharp.UI,BriefingRunner,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,Tick,The following statement contains a magic number: switch (action.Action) {  				case 0: /* no action */  					break;  				case 1:  					sleepUntil = (int)action.Delay;  					return;  				case 2:  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				case 3:  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 4:  					screen.SetObjectives (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 5:  					Console.WriteLine ("show portrait:");  					Console.WriteLine ("location = {0}' textindex = {1}' wavindex = {2}' delay = {3}' group1 = {4}' group2 = {5}' unittype = {6}' action = {7}' switch = {8}' flags = {9}"'  							   action.Location'  							   action.TextIndex'  							   action.WavIndex'  							   action.Delay'  							   action.Group1'  							   action.Group2'  							   action.UnitType'  							   action.Action'  							   action.Switch'  							   action.Flags);  					screen.ShowPortrait ((int)action.UnitType' (int)action.Group1);  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 6:  					screen.HidePortrait ((int)action.Group1);  					break;  				case 7:  					Console.WriteLine ("Display Speaking Portrait(Slot' Time)");  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 8:  					Console.WriteLine ("Transmission(Text' Slot' Time' Modifier' Wave' WavTime)");  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					screen.HighlightPortrait ((int)action.Group1);  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				default:  					break;  				}
Magic Number,SCSharp.UI,BriefingRunner,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,Tick,The following statement contains a magic number: switch (action.Action) {  				case 0: /* no action */  					break;  				case 1:  					sleepUntil = (int)action.Delay;  					return;  				case 2:  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				case 3:  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 4:  					screen.SetObjectives (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 5:  					Console.WriteLine ("show portrait:");  					Console.WriteLine ("location = {0}' textindex = {1}' wavindex = {2}' delay = {3}' group1 = {4}' group2 = {5}' unittype = {6}' action = {7}' switch = {8}' flags = {9}"'  							   action.Location'  							   action.TextIndex'  							   action.WavIndex'  							   action.Delay'  							   action.Group1'  							   action.Group2'  							   action.UnitType'  							   action.Action'  							   action.Switch'  							   action.Flags);  					screen.ShowPortrait ((int)action.UnitType' (int)action.Group1);  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 6:  					screen.HidePortrait ((int)action.Group1);  					break;  				case 7:  					Console.WriteLine ("Display Speaking Portrait(Slot' Time)");  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 8:  					Console.WriteLine ("Transmission(Text' Slot' Time' Modifier' Wave' WavTime)");  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					screen.HighlightPortrait ((int)action.Group1);  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				default:  					break;  				}
Magic Number,SCSharp.UI,BriefingRunner,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\ReadyRoomScreen.cs,Tick,The following statement contains a magic number: switch (action.Action) {  				case 0: /* no action */  					break;  				case 1:  					sleepUntil = (int)action.Delay;  					return;  				case 2:  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				case 3:  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 4:  					screen.SetObjectives (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 5:  					Console.WriteLine ("show portrait:");  					Console.WriteLine ("location = {0}' textindex = {1}' wavindex = {2}' delay = {3}' group1 = {4}' group2 = {5}' unittype = {6}' action = {7}' switch = {8}' flags = {9}"'  							   action.Location'  							   action.TextIndex'  							   action.WavIndex'  							   action.Delay'  							   action.Group1'  							   action.Group2'  							   action.UnitType'  							   action.Action'  							   action.Switch'  							   action.Flags);  					screen.ShowPortrait ((int)action.UnitType' (int)action.Group1);  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 6:  					screen.HidePortrait ((int)action.Group1);  					break;  				case 7:  					Console.WriteLine ("Display Speaking Portrait(Slot' Time)");  					Console.WriteLine (scenario.GetMapString ((int)action.TextIndex));  					break;  				case 8:  					Console.WriteLine ("Transmission(Text' Slot' Time' Modifier' Wave' WavTime)");  					screen.SetTransmissionText (scenario.GetMapString ((int)action.TextIndex));  					screen.HighlightPortrait ((int)action.Group1);  					GuiUtil.PlaySound (screen.Mpq' prefix + "\\" + scenario.GetMapString ((int)action.WavIndex));  					sleepUntil = (int)action.Delay;  					return;  				default:  					break;  				}
Magic Number,SCSharp.UI,SmackerPlayer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\SmackerPlayer.cs,Events_Tick,The following statement contains a magic number: surf = GuiUtil.CreateSurface (rgbData' (ushort)file.Header.Width' (ushort)file.Header.Height'  								      32' (int)file.Header.Width * 4'  								      (int)0x00ff0000'  								      (int)0x0000ff00'  								      (int)0x000000ff'  								      unchecked ((int)0xff000000));
Magic Number,SCSharp.UI,SmackerPlayer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\SmackerPlayer.cs,Events_Tick,The following statement contains a magic number: surf = GuiUtil.CreateSurface (rgbData' (ushort)file.Header.Width' (ushort)file.Header.Height'  								      32' (int)file.Header.Width * 4'  								      (int)0x00ff0000'  								      (int)0x0000ff00'  								      (int)0x000000ff'  								      unchecked ((int)0xff000000));
Magic Number,SCSharp.UI,SmackerPlayer,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\SmackerPlayer.cs,Events_Tick,The following statement contains a magic number: frameQueue.Count < (buffered_frames / 2) + 1
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,GetTopLeftPosition,The following statement contains a magic number: xo -= sprite_surface.Width / 2;
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,GetTopLeftPosition,The following statement contains a magic number: yo -= sprite_surface.Height / 2;
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,RunScript,The following statement contains a magic number: int offset_to_script_type = (4 /* "SCEP" */ + 1 /* the script entry "type" */ + 3 /* the spacers */ +  						     (int)animationType * 2);
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,RunScript,The following statement contains a magic number: int offset_to_script_type = (4 /* "SCEP" */ + 1 /* the script entry "type" */ + 3 /* the spacers */ +  						     (int)animationType * 2);
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,RunScript,The following statement contains a magic number: int offset_to_script_type = (4 /* "SCEP" */ + 1 /* the script entry "type" */ + 3 /* the spacers */ +  						     (int)animationType * 2);
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,ReadWord,The following statement contains a magic number: pc += 2;
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The following statement contains a magic number: Painter.Blit (sprite_surface'  						      new Point (x - SpriteManager.X - sprite_surface.Width / 2'  								 y - SpriteManager.Y - sprite_surface.Height / 2));
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The following statement contains a magic number: Painter.Blit (sprite_surface'  						      new Point (x - SpriteManager.X - sprite_surface.Width / 2'  								 y - SpriteManager.Y - sprite_surface.Height / 2));
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The following statement contains a magic number: Painter.DrawBox (new Rectangle (new Point (x - SpriteManager.X - sprite_surface.Width / 2'  											   y - SpriteManager.Y - sprite_surface.Height / 2)'  										new Size (sprite_surface.Width - 1'  											  sprite_surface.Height - 1))'  								 Color.Green);
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The following statement contains a magic number: Painter.DrawBox (new Rectangle (new Point (x - SpriteManager.X - sprite_surface.Width / 2'  											   y - SpriteManager.Y - sprite_surface.Height / 2)'  										new Size (sprite_surface.Width - 1'  											  sprite_surface.Height - 1))'  								 Color.Green);
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The following statement contains a magic number: (x > SpriteManager.X - sprite_surface.Width / 2) && (x - sprite_surface.Width / 2 <= SpriteManager.X + Painter.SCREEN_RES_X)  				    && (y > SpriteManager.Y - sprite_surface.Height / 2) && (y - sprite_surface.Height / 2 <= SpriteManager.Y + 375)
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The following statement contains a magic number: (x > SpriteManager.X - sprite_surface.Width / 2) && (x - sprite_surface.Width / 2 <= SpriteManager.X + Painter.SCREEN_RES_X)  				    && (y > SpriteManager.Y - sprite_surface.Height / 2) && (y - sprite_surface.Height / 2 <= SpriteManager.Y + 375)
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The following statement contains a magic number: (x > SpriteManager.X - sprite_surface.Width / 2) && (x - sprite_surface.Width / 2 <= SpriteManager.X + Painter.SCREEN_RES_X)  				    && (y > SpriteManager.Y - sprite_surface.Height / 2) && (y - sprite_surface.Height / 2 <= SpriteManager.Y + 375)
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The following statement contains a magic number: (x > SpriteManager.X - sprite_surface.Width / 2) && (x - sprite_surface.Width / 2 <= SpriteManager.X + Painter.SCREEN_RES_X)  				    && (y > SpriteManager.Y - sprite_surface.Height / 2) && (y - sprite_surface.Height / 2 <= SpriteManager.Y + 375)
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,PaintSprite,The following statement contains a magic number: (x > SpriteManager.X - sprite_surface.Width / 2) && (x - sprite_surface.Width / 2 <= SpriteManager.X + Painter.SCREEN_RES_X)  				    && (y > SpriteManager.Y - sprite_surface.Height / 2) && (y - sprite_surface.Height / 2 <= SpriteManager.Y + 375)
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Invalidate,The following statement contains a magic number: Painter.Invalidate (new Rectangle (new Point (x - SpriteManager.X - sprite_surface.Width / 2'  								      y - SpriteManager.Y - sprite_surface.Height / 2)'  							   sprite_surface.Size));
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Invalidate,The following statement contains a magic number: Painter.Invalidate (new Rectangle (new Point (x - SpriteManager.X - sprite_surface.Width / 2'  								      y - SpriteManager.Y - sprite_surface.Height / 2)'  							   sprite_surface.Size));
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The following statement contains a magic number: switch ((IScriptOpcode)buf[pc++]) {  			case IScriptOpcode.playfram:  				warg1 = ReadWord (ref pc);  				TraceLine ("playfram: {0}"' warg1);  				DoPlayFrame (warg1 + facing % 16);  				break;  			case IScriptOpcode.playframtile:  				warg1 = ReadWord (ref pc);  				TraceLine ("playframetile: {0}"' warg1);  				break;  			case IScriptOpcode.sethorpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("sethorpos: {0}"' barg1);  				break;  			case IScriptOpcode.setpos:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("setpos: {0} {1}"' barg1' barg2);  				break;  			case IScriptOpcode.setvertpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("setvertpos: {0}"' barg1);  				break;  			case IScriptOpcode.wait:  				barg1 = ReadByte (ref pc);  				TraceLine ("wait: {0}"' barg1);  				waiting = barg1;  				break;  			case IScriptOpcode.waitrand:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("waitrand: {0} {1}"' barg1' barg2);  				waiting = rng.Next(255) > 127 ? barg1 : barg2;  				break;  			case IScriptOpcode._goto:  				warg1 = ReadWord (ref pc);  				TraceLine ("goto: {0}"' warg1);  				pc = warg1;  				break;  			case IScriptOpcode.imgol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imgul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgul: {0} {1} {2}"' warg1' barg1' barg2);  				Sprite dependent_sprite = SpriteManager.CreateSprite (this' warg1' palette);  				dependent_sprite.RunScript (AnimationType.Init);  				break;  			case IScriptOpcode.imgolorig:  				warg1 = ReadWord (ref pc);  				TraceLine ("imgolorig: {0}"' warg1);  				break;  			case IScriptOpcode.switchul:  				warg1 = ReadWord (ref pc);  				TraceLine ("switchul: {0}"' warg1);  				break;  			// __0c unknown  			case IScriptOpcode.imgoluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgoluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imguluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imguluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.highsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("highsprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.lowsprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} ({1}'{2})"' warg1' barg1' barg2);   				Sprite s = SpriteManager.CreateSprite (warg1' palette' x' y);   				s.RunScript (AnimationType.Init);  				dependentSprite = s;  				break;    				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.uflunstable:  				warg1 = ReadWord (ref pc);  				TraceLine ("uflunstable: {0}"' warg1);  				break;  			case IScriptOpcode.spruluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("spruluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sproluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sproleuselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.end:  				TraceLine ("end");  				return false;  			case IScriptOpcode.setflipstate:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflipstate: {0}"' barg1);  				break;  			case IScriptOpcode.playsnd:  				warg1 = ReadWord (ref pc);  				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]);  				break;  			case IScriptOpcode.playsndrand: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("playsndrand: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.playsndbtwn:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("playsndbtwn: {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.domissiledmg:  				TraceLine ("domissiledmg: unknown args");  				break;  			case IScriptOpcode.attackmelee: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("attackmelee: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.followmaingraphic:  				TraceLine ("followmaingraphic:");  				if (parent_sprite != null)  					DoPlayFrame (parent_sprite.CurrentFrame);  				break;  			case IScriptOpcode.randcondjmp:  				barg1 = ReadByte (ref pc);  				warg1 = ReadWord (ref pc);  				TraceLine ("randcondjmp: {0} {1}"' barg1' warg1);  				int rand = rng.Next(255);  				if (rand > barg1) {  					TraceLine ("+ choosing goto branch");  					pc = warg1;  				}  				break;  			case IScriptOpcode.turnccwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turnccwise: {0}"' barg1);  				if (facing - barg1 < 0)  					facing = 15 - barg1;  				else  					facing -= barg1;  				break;  			case IScriptOpcode.turncwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turncwise: {0}"' barg1);  				if (facing + barg1 > 15)  					facing = facing + barg1 - 15;  				else  					facing += barg1;  				break;  			case IScriptOpcode.turnlcwise:  				TraceLine ("turnlcwise: unknown args");  				break;  			case IScriptOpcode.turnrand:  				TraceLine ("turnrand:");  				if (rng.Next(255) > 127)  					goto case IScriptOpcode.turnccwise;  				else  					goto case IScriptOpcode.turncwise;  				break;  			case IScriptOpcode.setspawnframe:  				barg1 = ReadByte (ref pc);  				TraceLine ("setspawnframe {0}"' barg1);  				break;  			case IScriptOpcode.sigorder:  				barg1 = ReadByte (ref pc);  				TraceLine ("sigorder {0}"' barg1);  				break;  			case IScriptOpcode.attackwith:  				barg1 = ReadByte (ref pc);  				TraceLine ("attackwith {0}"' barg1);  				break;  			case IScriptOpcode.attack:  				TraceLine ("attack:");  				break;  			case IScriptOpcode.castspell:  				TraceLine ("castspell:");  				break;  			case IScriptOpcode.useweapon:  				barg1 = ReadByte (ref pc);  				TraceLine ("useweapon: {0}"' barg1);  				break;  			case IScriptOpcode.move:  				barg1 = ReadByte (ref pc);  				TraceLine ("move: {0}"' barg1);  				break;  			case IScriptOpcode.gotorepeatattk:  				TraceLine ("gotorepeatattk");  				break;  			case IScriptOpcode.engframe:  				warg1 = ReadWord (ref pc);  				TraceLine ("engframe: {0}"' warg1);  				break;  			case IScriptOpcode.engset:  				warg1 = ReadWord (ref pc);  				TraceLine ("engset: {0}"' warg1);  				break;  			// __2d unknown  			case IScriptOpcode.nobrkcodestart:  				TraceLine ("nobrkcodestart:");  				break;  			case IScriptOpcode.nobrkcodeend:  				TraceLine ("nobrkcodeend:");  				break;  			case IScriptOpcode.ignorerest:  				TraceLine ("ignorerest");  				break;  			case IScriptOpcode.attkshiftproj:  				barg1 = ReadByte (ref pc);  				TraceLine ("attkshiftproj: {0}"' barg1);  				break;  			case IScriptOpcode.tmprmgraphicstart:  				TraceLine ("tmprmgraphicstart:");  				break;  			case IScriptOpcode.tmprmgraphicend:  				TraceLine ("tmprmgraphicend:");  				break;  			case IScriptOpcode.setfldirect:  				barg1 = ReadByte (ref pc);  				TraceLine ("setfldirect: {0}"' barg1);  				DoPlayFrame (barg1);  				break;  			case IScriptOpcode.call:  				warg1 = ReadWord (ref pc);  				TraceLine ("call: {0}"' warg1);  				break;  			case IScriptOpcode._return:  				TraceLine ("return:");  				break;  			case IScriptOpcode.setflspeed:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflspeed: {0}"' barg1);  				break;  			case IScriptOpcode.creategasoverlays:  				barg1 = ReadByte (ref pc);  				TraceLine ("creategasoverlays: {0}"' barg1);  				break;  			case IScriptOpcode.pwrupcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("pwrupcondjmp: {0}"' warg1);  				break;  			case IScriptOpcode.trgtrangecondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("trgtrangecondjmp {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.trgtarccondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("trgtarccondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.curdirectcondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("curdirectcondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.imgulnextid:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgulnextid {0} {1}"' barg1' barg2);  				break;  			// __3e unknown  			case IScriptOpcode.liftoffcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("liftoffcondjmp {0}"' warg1);  				break;  			case IScriptOpcode.warpoverlay:  				warg1 = ReadWord (ref pc);  				TraceLine ("warpoverlay {0}"' warg1);  				break;  			case IScriptOpcode.orderdone:  				barg1 = ReadByte (ref pc);  				TraceLine ("orderdone {0}"' barg1);  				break;  			case IScriptOpcode.grdsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("grdsprol {0} {1} {2}"' warg1' barg1' barg2);  				break;  			// __43 unknown  			case IScriptOpcode.dogrddamage:  				TraceLine ("dogrddamage");  				break;  			default:  				Console.WriteLine ("Unknown iscript opcode: 0x{0:x}"' buf[pc-1]);  				break;  			}
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The following statement contains a magic number: switch ((IScriptOpcode)buf[pc++]) {  			case IScriptOpcode.playfram:  				warg1 = ReadWord (ref pc);  				TraceLine ("playfram: {0}"' warg1);  				DoPlayFrame (warg1 + facing % 16);  				break;  			case IScriptOpcode.playframtile:  				warg1 = ReadWord (ref pc);  				TraceLine ("playframetile: {0}"' warg1);  				break;  			case IScriptOpcode.sethorpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("sethorpos: {0}"' barg1);  				break;  			case IScriptOpcode.setpos:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("setpos: {0} {1}"' barg1' barg2);  				break;  			case IScriptOpcode.setvertpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("setvertpos: {0}"' barg1);  				break;  			case IScriptOpcode.wait:  				barg1 = ReadByte (ref pc);  				TraceLine ("wait: {0}"' barg1);  				waiting = barg1;  				break;  			case IScriptOpcode.waitrand:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("waitrand: {0} {1}"' barg1' barg2);  				waiting = rng.Next(255) > 127 ? barg1 : barg2;  				break;  			case IScriptOpcode._goto:  				warg1 = ReadWord (ref pc);  				TraceLine ("goto: {0}"' warg1);  				pc = warg1;  				break;  			case IScriptOpcode.imgol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imgul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgul: {0} {1} {2}"' warg1' barg1' barg2);  				Sprite dependent_sprite = SpriteManager.CreateSprite (this' warg1' palette);  				dependent_sprite.RunScript (AnimationType.Init);  				break;  			case IScriptOpcode.imgolorig:  				warg1 = ReadWord (ref pc);  				TraceLine ("imgolorig: {0}"' warg1);  				break;  			case IScriptOpcode.switchul:  				warg1 = ReadWord (ref pc);  				TraceLine ("switchul: {0}"' warg1);  				break;  			// __0c unknown  			case IScriptOpcode.imgoluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgoluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imguluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imguluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.highsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("highsprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.lowsprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} ({1}'{2})"' warg1' barg1' barg2);   				Sprite s = SpriteManager.CreateSprite (warg1' palette' x' y);   				s.RunScript (AnimationType.Init);  				dependentSprite = s;  				break;    				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.uflunstable:  				warg1 = ReadWord (ref pc);  				TraceLine ("uflunstable: {0}"' warg1);  				break;  			case IScriptOpcode.spruluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("spruluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sproluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sproleuselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.end:  				TraceLine ("end");  				return false;  			case IScriptOpcode.setflipstate:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflipstate: {0}"' barg1);  				break;  			case IScriptOpcode.playsnd:  				warg1 = ReadWord (ref pc);  				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]);  				break;  			case IScriptOpcode.playsndrand: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("playsndrand: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.playsndbtwn:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("playsndbtwn: {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.domissiledmg:  				TraceLine ("domissiledmg: unknown args");  				break;  			case IScriptOpcode.attackmelee: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("attackmelee: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.followmaingraphic:  				TraceLine ("followmaingraphic:");  				if (parent_sprite != null)  					DoPlayFrame (parent_sprite.CurrentFrame);  				break;  			case IScriptOpcode.randcondjmp:  				barg1 = ReadByte (ref pc);  				warg1 = ReadWord (ref pc);  				TraceLine ("randcondjmp: {0} {1}"' barg1' warg1);  				int rand = rng.Next(255);  				if (rand > barg1) {  					TraceLine ("+ choosing goto branch");  					pc = warg1;  				}  				break;  			case IScriptOpcode.turnccwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turnccwise: {0}"' barg1);  				if (facing - barg1 < 0)  					facing = 15 - barg1;  				else  					facing -= barg1;  				break;  			case IScriptOpcode.turncwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turncwise: {0}"' barg1);  				if (facing + barg1 > 15)  					facing = facing + barg1 - 15;  				else  					facing += barg1;  				break;  			case IScriptOpcode.turnlcwise:  				TraceLine ("turnlcwise: unknown args");  				break;  			case IScriptOpcode.turnrand:  				TraceLine ("turnrand:");  				if (rng.Next(255) > 127)  					goto case IScriptOpcode.turnccwise;  				else  					goto case IScriptOpcode.turncwise;  				break;  			case IScriptOpcode.setspawnframe:  				barg1 = ReadByte (ref pc);  				TraceLine ("setspawnframe {0}"' barg1);  				break;  			case IScriptOpcode.sigorder:  				barg1 = ReadByte (ref pc);  				TraceLine ("sigorder {0}"' barg1);  				break;  			case IScriptOpcode.attackwith:  				barg1 = ReadByte (ref pc);  				TraceLine ("attackwith {0}"' barg1);  				break;  			case IScriptOpcode.attack:  				TraceLine ("attack:");  				break;  			case IScriptOpcode.castspell:  				TraceLine ("castspell:");  				break;  			case IScriptOpcode.useweapon:  				barg1 = ReadByte (ref pc);  				TraceLine ("useweapon: {0}"' barg1);  				break;  			case IScriptOpcode.move:  				barg1 = ReadByte (ref pc);  				TraceLine ("move: {0}"' barg1);  				break;  			case IScriptOpcode.gotorepeatattk:  				TraceLine ("gotorepeatattk");  				break;  			case IScriptOpcode.engframe:  				warg1 = ReadWord (ref pc);  				TraceLine ("engframe: {0}"' warg1);  				break;  			case IScriptOpcode.engset:  				warg1 = ReadWord (ref pc);  				TraceLine ("engset: {0}"' warg1);  				break;  			// __2d unknown  			case IScriptOpcode.nobrkcodestart:  				TraceLine ("nobrkcodestart:");  				break;  			case IScriptOpcode.nobrkcodeend:  				TraceLine ("nobrkcodeend:");  				break;  			case IScriptOpcode.ignorerest:  				TraceLine ("ignorerest");  				break;  			case IScriptOpcode.attkshiftproj:  				barg1 = ReadByte (ref pc);  				TraceLine ("attkshiftproj: {0}"' barg1);  				break;  			case IScriptOpcode.tmprmgraphicstart:  				TraceLine ("tmprmgraphicstart:");  				break;  			case IScriptOpcode.tmprmgraphicend:  				TraceLine ("tmprmgraphicend:");  				break;  			case IScriptOpcode.setfldirect:  				barg1 = ReadByte (ref pc);  				TraceLine ("setfldirect: {0}"' barg1);  				DoPlayFrame (barg1);  				break;  			case IScriptOpcode.call:  				warg1 = ReadWord (ref pc);  				TraceLine ("call: {0}"' warg1);  				break;  			case IScriptOpcode._return:  				TraceLine ("return:");  				break;  			case IScriptOpcode.setflspeed:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflspeed: {0}"' barg1);  				break;  			case IScriptOpcode.creategasoverlays:  				barg1 = ReadByte (ref pc);  				TraceLine ("creategasoverlays: {0}"' barg1);  				break;  			case IScriptOpcode.pwrupcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("pwrupcondjmp: {0}"' warg1);  				break;  			case IScriptOpcode.trgtrangecondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("trgtrangecondjmp {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.trgtarccondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("trgtarccondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.curdirectcondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("curdirectcondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.imgulnextid:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgulnextid {0} {1}"' barg1' barg2);  				break;  			// __3e unknown  			case IScriptOpcode.liftoffcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("liftoffcondjmp {0}"' warg1);  				break;  			case IScriptOpcode.warpoverlay:  				warg1 = ReadWord (ref pc);  				TraceLine ("warpoverlay {0}"' warg1);  				break;  			case IScriptOpcode.orderdone:  				barg1 = ReadByte (ref pc);  				TraceLine ("orderdone {0}"' barg1);  				break;  			case IScriptOpcode.grdsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("grdsprol {0} {1} {2}"' warg1' barg1' barg2);  				break;  			// __43 unknown  			case IScriptOpcode.dogrddamage:  				TraceLine ("dogrddamage");  				break;  			default:  				Console.WriteLine ("Unknown iscript opcode: 0x{0:x}"' buf[pc-1]);  				break;  			}
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The following statement contains a magic number: switch ((IScriptOpcode)buf[pc++]) {  			case IScriptOpcode.playfram:  				warg1 = ReadWord (ref pc);  				TraceLine ("playfram: {0}"' warg1);  				DoPlayFrame (warg1 + facing % 16);  				break;  			case IScriptOpcode.playframtile:  				warg1 = ReadWord (ref pc);  				TraceLine ("playframetile: {0}"' warg1);  				break;  			case IScriptOpcode.sethorpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("sethorpos: {0}"' barg1);  				break;  			case IScriptOpcode.setpos:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("setpos: {0} {1}"' barg1' barg2);  				break;  			case IScriptOpcode.setvertpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("setvertpos: {0}"' barg1);  				break;  			case IScriptOpcode.wait:  				barg1 = ReadByte (ref pc);  				TraceLine ("wait: {0}"' barg1);  				waiting = barg1;  				break;  			case IScriptOpcode.waitrand:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("waitrand: {0} {1}"' barg1' barg2);  				waiting = rng.Next(255) > 127 ? barg1 : barg2;  				break;  			case IScriptOpcode._goto:  				warg1 = ReadWord (ref pc);  				TraceLine ("goto: {0}"' warg1);  				pc = warg1;  				break;  			case IScriptOpcode.imgol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imgul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgul: {0} {1} {2}"' warg1' barg1' barg2);  				Sprite dependent_sprite = SpriteManager.CreateSprite (this' warg1' palette);  				dependent_sprite.RunScript (AnimationType.Init);  				break;  			case IScriptOpcode.imgolorig:  				warg1 = ReadWord (ref pc);  				TraceLine ("imgolorig: {0}"' warg1);  				break;  			case IScriptOpcode.switchul:  				warg1 = ReadWord (ref pc);  				TraceLine ("switchul: {0}"' warg1);  				break;  			// __0c unknown  			case IScriptOpcode.imgoluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgoluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imguluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imguluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.highsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("highsprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.lowsprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} ({1}'{2})"' warg1' barg1' barg2);   				Sprite s = SpriteManager.CreateSprite (warg1' palette' x' y);   				s.RunScript (AnimationType.Init);  				dependentSprite = s;  				break;    				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.uflunstable:  				warg1 = ReadWord (ref pc);  				TraceLine ("uflunstable: {0}"' warg1);  				break;  			case IScriptOpcode.spruluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("spruluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sproluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sproleuselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.end:  				TraceLine ("end");  				return false;  			case IScriptOpcode.setflipstate:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflipstate: {0}"' barg1);  				break;  			case IScriptOpcode.playsnd:  				warg1 = ReadWord (ref pc);  				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]);  				break;  			case IScriptOpcode.playsndrand: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("playsndrand: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.playsndbtwn:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("playsndbtwn: {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.domissiledmg:  				TraceLine ("domissiledmg: unknown args");  				break;  			case IScriptOpcode.attackmelee: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("attackmelee: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.followmaingraphic:  				TraceLine ("followmaingraphic:");  				if (parent_sprite != null)  					DoPlayFrame (parent_sprite.CurrentFrame);  				break;  			case IScriptOpcode.randcondjmp:  				barg1 = ReadByte (ref pc);  				warg1 = ReadWord (ref pc);  				TraceLine ("randcondjmp: {0} {1}"' barg1' warg1);  				int rand = rng.Next(255);  				if (rand > barg1) {  					TraceLine ("+ choosing goto branch");  					pc = warg1;  				}  				break;  			case IScriptOpcode.turnccwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turnccwise: {0}"' barg1);  				if (facing - barg1 < 0)  					facing = 15 - barg1;  				else  					facing -= barg1;  				break;  			case IScriptOpcode.turncwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turncwise: {0}"' barg1);  				if (facing + barg1 > 15)  					facing = facing + barg1 - 15;  				else  					facing += barg1;  				break;  			case IScriptOpcode.turnlcwise:  				TraceLine ("turnlcwise: unknown args");  				break;  			case IScriptOpcode.turnrand:  				TraceLine ("turnrand:");  				if (rng.Next(255) > 127)  					goto case IScriptOpcode.turnccwise;  				else  					goto case IScriptOpcode.turncwise;  				break;  			case IScriptOpcode.setspawnframe:  				barg1 = ReadByte (ref pc);  				TraceLine ("setspawnframe {0}"' barg1);  				break;  			case IScriptOpcode.sigorder:  				barg1 = ReadByte (ref pc);  				TraceLine ("sigorder {0}"' barg1);  				break;  			case IScriptOpcode.attackwith:  				barg1 = ReadByte (ref pc);  				TraceLine ("attackwith {0}"' barg1);  				break;  			case IScriptOpcode.attack:  				TraceLine ("attack:");  				break;  			case IScriptOpcode.castspell:  				TraceLine ("castspell:");  				break;  			case IScriptOpcode.useweapon:  				barg1 = ReadByte (ref pc);  				TraceLine ("useweapon: {0}"' barg1);  				break;  			case IScriptOpcode.move:  				barg1 = ReadByte (ref pc);  				TraceLine ("move: {0}"' barg1);  				break;  			case IScriptOpcode.gotorepeatattk:  				TraceLine ("gotorepeatattk");  				break;  			case IScriptOpcode.engframe:  				warg1 = ReadWord (ref pc);  				TraceLine ("engframe: {0}"' warg1);  				break;  			case IScriptOpcode.engset:  				warg1 = ReadWord (ref pc);  				TraceLine ("engset: {0}"' warg1);  				break;  			// __2d unknown  			case IScriptOpcode.nobrkcodestart:  				TraceLine ("nobrkcodestart:");  				break;  			case IScriptOpcode.nobrkcodeend:  				TraceLine ("nobrkcodeend:");  				break;  			case IScriptOpcode.ignorerest:  				TraceLine ("ignorerest");  				break;  			case IScriptOpcode.attkshiftproj:  				barg1 = ReadByte (ref pc);  				TraceLine ("attkshiftproj: {0}"' barg1);  				break;  			case IScriptOpcode.tmprmgraphicstart:  				TraceLine ("tmprmgraphicstart:");  				break;  			case IScriptOpcode.tmprmgraphicend:  				TraceLine ("tmprmgraphicend:");  				break;  			case IScriptOpcode.setfldirect:  				barg1 = ReadByte (ref pc);  				TraceLine ("setfldirect: {0}"' barg1);  				DoPlayFrame (barg1);  				break;  			case IScriptOpcode.call:  				warg1 = ReadWord (ref pc);  				TraceLine ("call: {0}"' warg1);  				break;  			case IScriptOpcode._return:  				TraceLine ("return:");  				break;  			case IScriptOpcode.setflspeed:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflspeed: {0}"' barg1);  				break;  			case IScriptOpcode.creategasoverlays:  				barg1 = ReadByte (ref pc);  				TraceLine ("creategasoverlays: {0}"' barg1);  				break;  			case IScriptOpcode.pwrupcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("pwrupcondjmp: {0}"' warg1);  				break;  			case IScriptOpcode.trgtrangecondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("trgtrangecondjmp {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.trgtarccondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("trgtarccondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.curdirectcondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("curdirectcondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.imgulnextid:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgulnextid {0} {1}"' barg1' barg2);  				break;  			// __3e unknown  			case IScriptOpcode.liftoffcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("liftoffcondjmp {0}"' warg1);  				break;  			case IScriptOpcode.warpoverlay:  				warg1 = ReadWord (ref pc);  				TraceLine ("warpoverlay {0}"' warg1);  				break;  			case IScriptOpcode.orderdone:  				barg1 = ReadByte (ref pc);  				TraceLine ("orderdone {0}"' barg1);  				break;  			case IScriptOpcode.grdsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("grdsprol {0} {1} {2}"' warg1' barg1' barg2);  				break;  			// __43 unknown  			case IScriptOpcode.dogrddamage:  				TraceLine ("dogrddamage");  				break;  			default:  				Console.WriteLine ("Unknown iscript opcode: 0x{0:x}"' buf[pc-1]);  				break;  			}
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The following statement contains a magic number: switch ((IScriptOpcode)buf[pc++]) {  			case IScriptOpcode.playfram:  				warg1 = ReadWord (ref pc);  				TraceLine ("playfram: {0}"' warg1);  				DoPlayFrame (warg1 + facing % 16);  				break;  			case IScriptOpcode.playframtile:  				warg1 = ReadWord (ref pc);  				TraceLine ("playframetile: {0}"' warg1);  				break;  			case IScriptOpcode.sethorpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("sethorpos: {0}"' barg1);  				break;  			case IScriptOpcode.setpos:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("setpos: {0} {1}"' barg1' barg2);  				break;  			case IScriptOpcode.setvertpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("setvertpos: {0}"' barg1);  				break;  			case IScriptOpcode.wait:  				barg1 = ReadByte (ref pc);  				TraceLine ("wait: {0}"' barg1);  				waiting = barg1;  				break;  			case IScriptOpcode.waitrand:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("waitrand: {0} {1}"' barg1' barg2);  				waiting = rng.Next(255) > 127 ? barg1 : barg2;  				break;  			case IScriptOpcode._goto:  				warg1 = ReadWord (ref pc);  				TraceLine ("goto: {0}"' warg1);  				pc = warg1;  				break;  			case IScriptOpcode.imgol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imgul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgul: {0} {1} {2}"' warg1' barg1' barg2);  				Sprite dependent_sprite = SpriteManager.CreateSprite (this' warg1' palette);  				dependent_sprite.RunScript (AnimationType.Init);  				break;  			case IScriptOpcode.imgolorig:  				warg1 = ReadWord (ref pc);  				TraceLine ("imgolorig: {0}"' warg1);  				break;  			case IScriptOpcode.switchul:  				warg1 = ReadWord (ref pc);  				TraceLine ("switchul: {0}"' warg1);  				break;  			// __0c unknown  			case IScriptOpcode.imgoluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgoluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imguluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imguluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.highsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("highsprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.lowsprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} ({1}'{2})"' warg1' barg1' barg2);   				Sprite s = SpriteManager.CreateSprite (warg1' palette' x' y);   				s.RunScript (AnimationType.Init);  				dependentSprite = s;  				break;    				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.uflunstable:  				warg1 = ReadWord (ref pc);  				TraceLine ("uflunstable: {0}"' warg1);  				break;  			case IScriptOpcode.spruluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("spruluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sproluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sproleuselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.end:  				TraceLine ("end");  				return false;  			case IScriptOpcode.setflipstate:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflipstate: {0}"' barg1);  				break;  			case IScriptOpcode.playsnd:  				warg1 = ReadWord (ref pc);  				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]);  				break;  			case IScriptOpcode.playsndrand: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("playsndrand: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.playsndbtwn:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("playsndbtwn: {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.domissiledmg:  				TraceLine ("domissiledmg: unknown args");  				break;  			case IScriptOpcode.attackmelee: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("attackmelee: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.followmaingraphic:  				TraceLine ("followmaingraphic:");  				if (parent_sprite != null)  					DoPlayFrame (parent_sprite.CurrentFrame);  				break;  			case IScriptOpcode.randcondjmp:  				barg1 = ReadByte (ref pc);  				warg1 = ReadWord (ref pc);  				TraceLine ("randcondjmp: {0} {1}"' barg1' warg1);  				int rand = rng.Next(255);  				if (rand > barg1) {  					TraceLine ("+ choosing goto branch");  					pc = warg1;  				}  				break;  			case IScriptOpcode.turnccwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turnccwise: {0}"' barg1);  				if (facing - barg1 < 0)  					facing = 15 - barg1;  				else  					facing -= barg1;  				break;  			case IScriptOpcode.turncwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turncwise: {0}"' barg1);  				if (facing + barg1 > 15)  					facing = facing + barg1 - 15;  				else  					facing += barg1;  				break;  			case IScriptOpcode.turnlcwise:  				TraceLine ("turnlcwise: unknown args");  				break;  			case IScriptOpcode.turnrand:  				TraceLine ("turnrand:");  				if (rng.Next(255) > 127)  					goto case IScriptOpcode.turnccwise;  				else  					goto case IScriptOpcode.turncwise;  				break;  			case IScriptOpcode.setspawnframe:  				barg1 = ReadByte (ref pc);  				TraceLine ("setspawnframe {0}"' barg1);  				break;  			case IScriptOpcode.sigorder:  				barg1 = ReadByte (ref pc);  				TraceLine ("sigorder {0}"' barg1);  				break;  			case IScriptOpcode.attackwith:  				barg1 = ReadByte (ref pc);  				TraceLine ("attackwith {0}"' barg1);  				break;  			case IScriptOpcode.attack:  				TraceLine ("attack:");  				break;  			case IScriptOpcode.castspell:  				TraceLine ("castspell:");  				break;  			case IScriptOpcode.useweapon:  				barg1 = ReadByte (ref pc);  				TraceLine ("useweapon: {0}"' barg1);  				break;  			case IScriptOpcode.move:  				barg1 = ReadByte (ref pc);  				TraceLine ("move: {0}"' barg1);  				break;  			case IScriptOpcode.gotorepeatattk:  				TraceLine ("gotorepeatattk");  				break;  			case IScriptOpcode.engframe:  				warg1 = ReadWord (ref pc);  				TraceLine ("engframe: {0}"' warg1);  				break;  			case IScriptOpcode.engset:  				warg1 = ReadWord (ref pc);  				TraceLine ("engset: {0}"' warg1);  				break;  			// __2d unknown  			case IScriptOpcode.nobrkcodestart:  				TraceLine ("nobrkcodestart:");  				break;  			case IScriptOpcode.nobrkcodeend:  				TraceLine ("nobrkcodeend:");  				break;  			case IScriptOpcode.ignorerest:  				TraceLine ("ignorerest");  				break;  			case IScriptOpcode.attkshiftproj:  				barg1 = ReadByte (ref pc);  				TraceLine ("attkshiftproj: {0}"' barg1);  				break;  			case IScriptOpcode.tmprmgraphicstart:  				TraceLine ("tmprmgraphicstart:");  				break;  			case IScriptOpcode.tmprmgraphicend:  				TraceLine ("tmprmgraphicend:");  				break;  			case IScriptOpcode.setfldirect:  				barg1 = ReadByte (ref pc);  				TraceLine ("setfldirect: {0}"' barg1);  				DoPlayFrame (barg1);  				break;  			case IScriptOpcode.call:  				warg1 = ReadWord (ref pc);  				TraceLine ("call: {0}"' warg1);  				break;  			case IScriptOpcode._return:  				TraceLine ("return:");  				break;  			case IScriptOpcode.setflspeed:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflspeed: {0}"' barg1);  				break;  			case IScriptOpcode.creategasoverlays:  				barg1 = ReadByte (ref pc);  				TraceLine ("creategasoverlays: {0}"' barg1);  				break;  			case IScriptOpcode.pwrupcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("pwrupcondjmp: {0}"' warg1);  				break;  			case IScriptOpcode.trgtrangecondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("trgtrangecondjmp {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.trgtarccondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("trgtarccondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.curdirectcondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("curdirectcondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.imgulnextid:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgulnextid {0} {1}"' barg1' barg2);  				break;  			// __3e unknown  			case IScriptOpcode.liftoffcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("liftoffcondjmp {0}"' warg1);  				break;  			case IScriptOpcode.warpoverlay:  				warg1 = ReadWord (ref pc);  				TraceLine ("warpoverlay {0}"' warg1);  				break;  			case IScriptOpcode.orderdone:  				barg1 = ReadByte (ref pc);  				TraceLine ("orderdone {0}"' barg1);  				break;  			case IScriptOpcode.grdsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("grdsprol {0} {1} {2}"' warg1' barg1' barg2);  				break;  			// __43 unknown  			case IScriptOpcode.dogrddamage:  				TraceLine ("dogrddamage");  				break;  			default:  				Console.WriteLine ("Unknown iscript opcode: 0x{0:x}"' buf[pc-1]);  				break;  			}
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The following statement contains a magic number: switch ((IScriptOpcode)buf[pc++]) {  			case IScriptOpcode.playfram:  				warg1 = ReadWord (ref pc);  				TraceLine ("playfram: {0}"' warg1);  				DoPlayFrame (warg1 + facing % 16);  				break;  			case IScriptOpcode.playframtile:  				warg1 = ReadWord (ref pc);  				TraceLine ("playframetile: {0}"' warg1);  				break;  			case IScriptOpcode.sethorpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("sethorpos: {0}"' barg1);  				break;  			case IScriptOpcode.setpos:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("setpos: {0} {1}"' barg1' barg2);  				break;  			case IScriptOpcode.setvertpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("setvertpos: {0}"' barg1);  				break;  			case IScriptOpcode.wait:  				barg1 = ReadByte (ref pc);  				TraceLine ("wait: {0}"' barg1);  				waiting = barg1;  				break;  			case IScriptOpcode.waitrand:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("waitrand: {0} {1}"' barg1' barg2);  				waiting = rng.Next(255) > 127 ? barg1 : barg2;  				break;  			case IScriptOpcode._goto:  				warg1 = ReadWord (ref pc);  				TraceLine ("goto: {0}"' warg1);  				pc = warg1;  				break;  			case IScriptOpcode.imgol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imgul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgul: {0} {1} {2}"' warg1' barg1' barg2);  				Sprite dependent_sprite = SpriteManager.CreateSprite (this' warg1' palette);  				dependent_sprite.RunScript (AnimationType.Init);  				break;  			case IScriptOpcode.imgolorig:  				warg1 = ReadWord (ref pc);  				TraceLine ("imgolorig: {0}"' warg1);  				break;  			case IScriptOpcode.switchul:  				warg1 = ReadWord (ref pc);  				TraceLine ("switchul: {0}"' warg1);  				break;  			// __0c unknown  			case IScriptOpcode.imgoluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgoluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imguluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imguluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.highsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("highsprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.lowsprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} ({1}'{2})"' warg1' barg1' barg2);   				Sprite s = SpriteManager.CreateSprite (warg1' palette' x' y);   				s.RunScript (AnimationType.Init);  				dependentSprite = s;  				break;    				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.uflunstable:  				warg1 = ReadWord (ref pc);  				TraceLine ("uflunstable: {0}"' warg1);  				break;  			case IScriptOpcode.spruluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("spruluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sproluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sproleuselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.end:  				TraceLine ("end");  				return false;  			case IScriptOpcode.setflipstate:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflipstate: {0}"' barg1);  				break;  			case IScriptOpcode.playsnd:  				warg1 = ReadWord (ref pc);  				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]);  				break;  			case IScriptOpcode.playsndrand: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("playsndrand: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.playsndbtwn:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("playsndbtwn: {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.domissiledmg:  				TraceLine ("domissiledmg: unknown args");  				break;  			case IScriptOpcode.attackmelee: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("attackmelee: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.followmaingraphic:  				TraceLine ("followmaingraphic:");  				if (parent_sprite != null)  					DoPlayFrame (parent_sprite.CurrentFrame);  				break;  			case IScriptOpcode.randcondjmp:  				barg1 = ReadByte (ref pc);  				warg1 = ReadWord (ref pc);  				TraceLine ("randcondjmp: {0} {1}"' barg1' warg1);  				int rand = rng.Next(255);  				if (rand > barg1) {  					TraceLine ("+ choosing goto branch");  					pc = warg1;  				}  				break;  			case IScriptOpcode.turnccwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turnccwise: {0}"' barg1);  				if (facing - barg1 < 0)  					facing = 15 - barg1;  				else  					facing -= barg1;  				break;  			case IScriptOpcode.turncwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turncwise: {0}"' barg1);  				if (facing + barg1 > 15)  					facing = facing + barg1 - 15;  				else  					facing += barg1;  				break;  			case IScriptOpcode.turnlcwise:  				TraceLine ("turnlcwise: unknown args");  				break;  			case IScriptOpcode.turnrand:  				TraceLine ("turnrand:");  				if (rng.Next(255) > 127)  					goto case IScriptOpcode.turnccwise;  				else  					goto case IScriptOpcode.turncwise;  				break;  			case IScriptOpcode.setspawnframe:  				barg1 = ReadByte (ref pc);  				TraceLine ("setspawnframe {0}"' barg1);  				break;  			case IScriptOpcode.sigorder:  				barg1 = ReadByte (ref pc);  				TraceLine ("sigorder {0}"' barg1);  				break;  			case IScriptOpcode.attackwith:  				barg1 = ReadByte (ref pc);  				TraceLine ("attackwith {0}"' barg1);  				break;  			case IScriptOpcode.attack:  				TraceLine ("attack:");  				break;  			case IScriptOpcode.castspell:  				TraceLine ("castspell:");  				break;  			case IScriptOpcode.useweapon:  				barg1 = ReadByte (ref pc);  				TraceLine ("useweapon: {0}"' barg1);  				break;  			case IScriptOpcode.move:  				barg1 = ReadByte (ref pc);  				TraceLine ("move: {0}"' barg1);  				break;  			case IScriptOpcode.gotorepeatattk:  				TraceLine ("gotorepeatattk");  				break;  			case IScriptOpcode.engframe:  				warg1 = ReadWord (ref pc);  				TraceLine ("engframe: {0}"' warg1);  				break;  			case IScriptOpcode.engset:  				warg1 = ReadWord (ref pc);  				TraceLine ("engset: {0}"' warg1);  				break;  			// __2d unknown  			case IScriptOpcode.nobrkcodestart:  				TraceLine ("nobrkcodestart:");  				break;  			case IScriptOpcode.nobrkcodeend:  				TraceLine ("nobrkcodeend:");  				break;  			case IScriptOpcode.ignorerest:  				TraceLine ("ignorerest");  				break;  			case IScriptOpcode.attkshiftproj:  				barg1 = ReadByte (ref pc);  				TraceLine ("attkshiftproj: {0}"' barg1);  				break;  			case IScriptOpcode.tmprmgraphicstart:  				TraceLine ("tmprmgraphicstart:");  				break;  			case IScriptOpcode.tmprmgraphicend:  				TraceLine ("tmprmgraphicend:");  				break;  			case IScriptOpcode.setfldirect:  				barg1 = ReadByte (ref pc);  				TraceLine ("setfldirect: {0}"' barg1);  				DoPlayFrame (barg1);  				break;  			case IScriptOpcode.call:  				warg1 = ReadWord (ref pc);  				TraceLine ("call: {0}"' warg1);  				break;  			case IScriptOpcode._return:  				TraceLine ("return:");  				break;  			case IScriptOpcode.setflspeed:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflspeed: {0}"' barg1);  				break;  			case IScriptOpcode.creategasoverlays:  				barg1 = ReadByte (ref pc);  				TraceLine ("creategasoverlays: {0}"' barg1);  				break;  			case IScriptOpcode.pwrupcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("pwrupcondjmp: {0}"' warg1);  				break;  			case IScriptOpcode.trgtrangecondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("trgtrangecondjmp {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.trgtarccondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("trgtarccondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.curdirectcondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("curdirectcondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.imgulnextid:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgulnextid {0} {1}"' barg1' barg2);  				break;  			// __3e unknown  			case IScriptOpcode.liftoffcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("liftoffcondjmp {0}"' warg1);  				break;  			case IScriptOpcode.warpoverlay:  				warg1 = ReadWord (ref pc);  				TraceLine ("warpoverlay {0}"' warg1);  				break;  			case IScriptOpcode.orderdone:  				barg1 = ReadByte (ref pc);  				TraceLine ("orderdone {0}"' barg1);  				break;  			case IScriptOpcode.grdsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("grdsprol {0} {1} {2}"' warg1' barg1' barg2);  				break;  			// __43 unknown  			case IScriptOpcode.dogrddamage:  				TraceLine ("dogrddamage");  				break;  			default:  				Console.WriteLine ("Unknown iscript opcode: 0x{0:x}"' buf[pc-1]);  				break;  			}
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The following statement contains a magic number: switch ((IScriptOpcode)buf[pc++]) {  			case IScriptOpcode.playfram:  				warg1 = ReadWord (ref pc);  				TraceLine ("playfram: {0}"' warg1);  				DoPlayFrame (warg1 + facing % 16);  				break;  			case IScriptOpcode.playframtile:  				warg1 = ReadWord (ref pc);  				TraceLine ("playframetile: {0}"' warg1);  				break;  			case IScriptOpcode.sethorpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("sethorpos: {0}"' barg1);  				break;  			case IScriptOpcode.setpos:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("setpos: {0} {1}"' barg1' barg2);  				break;  			case IScriptOpcode.setvertpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("setvertpos: {0}"' barg1);  				break;  			case IScriptOpcode.wait:  				barg1 = ReadByte (ref pc);  				TraceLine ("wait: {0}"' barg1);  				waiting = barg1;  				break;  			case IScriptOpcode.waitrand:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("waitrand: {0} {1}"' barg1' barg2);  				waiting = rng.Next(255) > 127 ? barg1 : barg2;  				break;  			case IScriptOpcode._goto:  				warg1 = ReadWord (ref pc);  				TraceLine ("goto: {0}"' warg1);  				pc = warg1;  				break;  			case IScriptOpcode.imgol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imgul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgul: {0} {1} {2}"' warg1' barg1' barg2);  				Sprite dependent_sprite = SpriteManager.CreateSprite (this' warg1' palette);  				dependent_sprite.RunScript (AnimationType.Init);  				break;  			case IScriptOpcode.imgolorig:  				warg1 = ReadWord (ref pc);  				TraceLine ("imgolorig: {0}"' warg1);  				break;  			case IScriptOpcode.switchul:  				warg1 = ReadWord (ref pc);  				TraceLine ("switchul: {0}"' warg1);  				break;  			// __0c unknown  			case IScriptOpcode.imgoluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgoluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imguluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imguluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.highsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("highsprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.lowsprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} ({1}'{2})"' warg1' barg1' barg2);   				Sprite s = SpriteManager.CreateSprite (warg1' palette' x' y);   				s.RunScript (AnimationType.Init);  				dependentSprite = s;  				break;    				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.uflunstable:  				warg1 = ReadWord (ref pc);  				TraceLine ("uflunstable: {0}"' warg1);  				break;  			case IScriptOpcode.spruluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("spruluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sproluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sproleuselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.end:  				TraceLine ("end");  				return false;  			case IScriptOpcode.setflipstate:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflipstate: {0}"' barg1);  				break;  			case IScriptOpcode.playsnd:  				warg1 = ReadWord (ref pc);  				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]);  				break;  			case IScriptOpcode.playsndrand: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("playsndrand: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.playsndbtwn:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("playsndbtwn: {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.domissiledmg:  				TraceLine ("domissiledmg: unknown args");  				break;  			case IScriptOpcode.attackmelee: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("attackmelee: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.followmaingraphic:  				TraceLine ("followmaingraphic:");  				if (parent_sprite != null)  					DoPlayFrame (parent_sprite.CurrentFrame);  				break;  			case IScriptOpcode.randcondjmp:  				barg1 = ReadByte (ref pc);  				warg1 = ReadWord (ref pc);  				TraceLine ("randcondjmp: {0} {1}"' barg1' warg1);  				int rand = rng.Next(255);  				if (rand > barg1) {  					TraceLine ("+ choosing goto branch");  					pc = warg1;  				}  				break;  			case IScriptOpcode.turnccwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turnccwise: {0}"' barg1);  				if (facing - barg1 < 0)  					facing = 15 - barg1;  				else  					facing -= barg1;  				break;  			case IScriptOpcode.turncwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turncwise: {0}"' barg1);  				if (facing + barg1 > 15)  					facing = facing + barg1 - 15;  				else  					facing += barg1;  				break;  			case IScriptOpcode.turnlcwise:  				TraceLine ("turnlcwise: unknown args");  				break;  			case IScriptOpcode.turnrand:  				TraceLine ("turnrand:");  				if (rng.Next(255) > 127)  					goto case IScriptOpcode.turnccwise;  				else  					goto case IScriptOpcode.turncwise;  				break;  			case IScriptOpcode.setspawnframe:  				barg1 = ReadByte (ref pc);  				TraceLine ("setspawnframe {0}"' barg1);  				break;  			case IScriptOpcode.sigorder:  				barg1 = ReadByte (ref pc);  				TraceLine ("sigorder {0}"' barg1);  				break;  			case IScriptOpcode.attackwith:  				barg1 = ReadByte (ref pc);  				TraceLine ("attackwith {0}"' barg1);  				break;  			case IScriptOpcode.attack:  				TraceLine ("attack:");  				break;  			case IScriptOpcode.castspell:  				TraceLine ("castspell:");  				break;  			case IScriptOpcode.useweapon:  				barg1 = ReadByte (ref pc);  				TraceLine ("useweapon: {0}"' barg1);  				break;  			case IScriptOpcode.move:  				barg1 = ReadByte (ref pc);  				TraceLine ("move: {0}"' barg1);  				break;  			case IScriptOpcode.gotorepeatattk:  				TraceLine ("gotorepeatattk");  				break;  			case IScriptOpcode.engframe:  				warg1 = ReadWord (ref pc);  				TraceLine ("engframe: {0}"' warg1);  				break;  			case IScriptOpcode.engset:  				warg1 = ReadWord (ref pc);  				TraceLine ("engset: {0}"' warg1);  				break;  			// __2d unknown  			case IScriptOpcode.nobrkcodestart:  				TraceLine ("nobrkcodestart:");  				break;  			case IScriptOpcode.nobrkcodeend:  				TraceLine ("nobrkcodeend:");  				break;  			case IScriptOpcode.ignorerest:  				TraceLine ("ignorerest");  				break;  			case IScriptOpcode.attkshiftproj:  				barg1 = ReadByte (ref pc);  				TraceLine ("attkshiftproj: {0}"' barg1);  				break;  			case IScriptOpcode.tmprmgraphicstart:  				TraceLine ("tmprmgraphicstart:");  				break;  			case IScriptOpcode.tmprmgraphicend:  				TraceLine ("tmprmgraphicend:");  				break;  			case IScriptOpcode.setfldirect:  				barg1 = ReadByte (ref pc);  				TraceLine ("setfldirect: {0}"' barg1);  				DoPlayFrame (barg1);  				break;  			case IScriptOpcode.call:  				warg1 = ReadWord (ref pc);  				TraceLine ("call: {0}"' warg1);  				break;  			case IScriptOpcode._return:  				TraceLine ("return:");  				break;  			case IScriptOpcode.setflspeed:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflspeed: {0}"' barg1);  				break;  			case IScriptOpcode.creategasoverlays:  				barg1 = ReadByte (ref pc);  				TraceLine ("creategasoverlays: {0}"' barg1);  				break;  			case IScriptOpcode.pwrupcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("pwrupcondjmp: {0}"' warg1);  				break;  			case IScriptOpcode.trgtrangecondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("trgtrangecondjmp {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.trgtarccondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("trgtarccondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.curdirectcondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("curdirectcondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.imgulnextid:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgulnextid {0} {1}"' barg1' barg2);  				break;  			// __3e unknown  			case IScriptOpcode.liftoffcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("liftoffcondjmp {0}"' warg1);  				break;  			case IScriptOpcode.warpoverlay:  				warg1 = ReadWord (ref pc);  				TraceLine ("warpoverlay {0}"' warg1);  				break;  			case IScriptOpcode.orderdone:  				barg1 = ReadByte (ref pc);  				TraceLine ("orderdone {0}"' barg1);  				break;  			case IScriptOpcode.grdsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("grdsprol {0} {1} {2}"' warg1' barg1' barg2);  				break;  			// __43 unknown  			case IScriptOpcode.dogrddamage:  				TraceLine ("dogrddamage");  				break;  			default:  				Console.WriteLine ("Unknown iscript opcode: 0x{0:x}"' buf[pc-1]);  				break;  			}
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The following statement contains a magic number: switch ((IScriptOpcode)buf[pc++]) {  			case IScriptOpcode.playfram:  				warg1 = ReadWord (ref pc);  				TraceLine ("playfram: {0}"' warg1);  				DoPlayFrame (warg1 + facing % 16);  				break;  			case IScriptOpcode.playframtile:  				warg1 = ReadWord (ref pc);  				TraceLine ("playframetile: {0}"' warg1);  				break;  			case IScriptOpcode.sethorpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("sethorpos: {0}"' barg1);  				break;  			case IScriptOpcode.setpos:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("setpos: {0} {1}"' barg1' barg2);  				break;  			case IScriptOpcode.setvertpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("setvertpos: {0}"' barg1);  				break;  			case IScriptOpcode.wait:  				barg1 = ReadByte (ref pc);  				TraceLine ("wait: {0}"' barg1);  				waiting = barg1;  				break;  			case IScriptOpcode.waitrand:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("waitrand: {0} {1}"' barg1' barg2);  				waiting = rng.Next(255) > 127 ? barg1 : barg2;  				break;  			case IScriptOpcode._goto:  				warg1 = ReadWord (ref pc);  				TraceLine ("goto: {0}"' warg1);  				pc = warg1;  				break;  			case IScriptOpcode.imgol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imgul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgul: {0} {1} {2}"' warg1' barg1' barg2);  				Sprite dependent_sprite = SpriteManager.CreateSprite (this' warg1' palette);  				dependent_sprite.RunScript (AnimationType.Init);  				break;  			case IScriptOpcode.imgolorig:  				warg1 = ReadWord (ref pc);  				TraceLine ("imgolorig: {0}"' warg1);  				break;  			case IScriptOpcode.switchul:  				warg1 = ReadWord (ref pc);  				TraceLine ("switchul: {0}"' warg1);  				break;  			// __0c unknown  			case IScriptOpcode.imgoluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgoluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imguluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imguluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.highsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("highsprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.lowsprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} ({1}'{2})"' warg1' barg1' barg2);   				Sprite s = SpriteManager.CreateSprite (warg1' palette' x' y);   				s.RunScript (AnimationType.Init);  				dependentSprite = s;  				break;    				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.uflunstable:  				warg1 = ReadWord (ref pc);  				TraceLine ("uflunstable: {0}"' warg1);  				break;  			case IScriptOpcode.spruluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("spruluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sproluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sproleuselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.end:  				TraceLine ("end");  				return false;  			case IScriptOpcode.setflipstate:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflipstate: {0}"' barg1);  				break;  			case IScriptOpcode.playsnd:  				warg1 = ReadWord (ref pc);  				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]);  				break;  			case IScriptOpcode.playsndrand: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("playsndrand: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.playsndbtwn:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("playsndbtwn: {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.domissiledmg:  				TraceLine ("domissiledmg: unknown args");  				break;  			case IScriptOpcode.attackmelee: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("attackmelee: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.followmaingraphic:  				TraceLine ("followmaingraphic:");  				if (parent_sprite != null)  					DoPlayFrame (parent_sprite.CurrentFrame);  				break;  			case IScriptOpcode.randcondjmp:  				barg1 = ReadByte (ref pc);  				warg1 = ReadWord (ref pc);  				TraceLine ("randcondjmp: {0} {1}"' barg1' warg1);  				int rand = rng.Next(255);  				if (rand > barg1) {  					TraceLine ("+ choosing goto branch");  					pc = warg1;  				}  				break;  			case IScriptOpcode.turnccwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turnccwise: {0}"' barg1);  				if (facing - barg1 < 0)  					facing = 15 - barg1;  				else  					facing -= barg1;  				break;  			case IScriptOpcode.turncwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turncwise: {0}"' barg1);  				if (facing + barg1 > 15)  					facing = facing + barg1 - 15;  				else  					facing += barg1;  				break;  			case IScriptOpcode.turnlcwise:  				TraceLine ("turnlcwise: unknown args");  				break;  			case IScriptOpcode.turnrand:  				TraceLine ("turnrand:");  				if (rng.Next(255) > 127)  					goto case IScriptOpcode.turnccwise;  				else  					goto case IScriptOpcode.turncwise;  				break;  			case IScriptOpcode.setspawnframe:  				barg1 = ReadByte (ref pc);  				TraceLine ("setspawnframe {0}"' barg1);  				break;  			case IScriptOpcode.sigorder:  				barg1 = ReadByte (ref pc);  				TraceLine ("sigorder {0}"' barg1);  				break;  			case IScriptOpcode.attackwith:  				barg1 = ReadByte (ref pc);  				TraceLine ("attackwith {0}"' barg1);  				break;  			case IScriptOpcode.attack:  				TraceLine ("attack:");  				break;  			case IScriptOpcode.castspell:  				TraceLine ("castspell:");  				break;  			case IScriptOpcode.useweapon:  				barg1 = ReadByte (ref pc);  				TraceLine ("useweapon: {0}"' barg1);  				break;  			case IScriptOpcode.move:  				barg1 = ReadByte (ref pc);  				TraceLine ("move: {0}"' barg1);  				break;  			case IScriptOpcode.gotorepeatattk:  				TraceLine ("gotorepeatattk");  				break;  			case IScriptOpcode.engframe:  				warg1 = ReadWord (ref pc);  				TraceLine ("engframe: {0}"' warg1);  				break;  			case IScriptOpcode.engset:  				warg1 = ReadWord (ref pc);  				TraceLine ("engset: {0}"' warg1);  				break;  			// __2d unknown  			case IScriptOpcode.nobrkcodestart:  				TraceLine ("nobrkcodestart:");  				break;  			case IScriptOpcode.nobrkcodeend:  				TraceLine ("nobrkcodeend:");  				break;  			case IScriptOpcode.ignorerest:  				TraceLine ("ignorerest");  				break;  			case IScriptOpcode.attkshiftproj:  				barg1 = ReadByte (ref pc);  				TraceLine ("attkshiftproj: {0}"' barg1);  				break;  			case IScriptOpcode.tmprmgraphicstart:  				TraceLine ("tmprmgraphicstart:");  				break;  			case IScriptOpcode.tmprmgraphicend:  				TraceLine ("tmprmgraphicend:");  				break;  			case IScriptOpcode.setfldirect:  				barg1 = ReadByte (ref pc);  				TraceLine ("setfldirect: {0}"' barg1);  				DoPlayFrame (barg1);  				break;  			case IScriptOpcode.call:  				warg1 = ReadWord (ref pc);  				TraceLine ("call: {0}"' warg1);  				break;  			case IScriptOpcode._return:  				TraceLine ("return:");  				break;  			case IScriptOpcode.setflspeed:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflspeed: {0}"' barg1);  				break;  			case IScriptOpcode.creategasoverlays:  				barg1 = ReadByte (ref pc);  				TraceLine ("creategasoverlays: {0}"' barg1);  				break;  			case IScriptOpcode.pwrupcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("pwrupcondjmp: {0}"' warg1);  				break;  			case IScriptOpcode.trgtrangecondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("trgtrangecondjmp {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.trgtarccondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("trgtarccondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.curdirectcondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("curdirectcondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.imgulnextid:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgulnextid {0} {1}"' barg1' barg2);  				break;  			// __3e unknown  			case IScriptOpcode.liftoffcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("liftoffcondjmp {0}"' warg1);  				break;  			case IScriptOpcode.warpoverlay:  				warg1 = ReadWord (ref pc);  				TraceLine ("warpoverlay {0}"' warg1);  				break;  			case IScriptOpcode.orderdone:  				barg1 = ReadByte (ref pc);  				TraceLine ("orderdone {0}"' barg1);  				break;  			case IScriptOpcode.grdsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("grdsprol {0} {1} {2}"' warg1' barg1' barg2);  				break;  			// __43 unknown  			case IScriptOpcode.dogrddamage:  				TraceLine ("dogrddamage");  				break;  			default:  				Console.WriteLine ("Unknown iscript opcode: 0x{0:x}"' buf[pc-1]);  				break;  			}
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The following statement contains a magic number: switch ((IScriptOpcode)buf[pc++]) {  			case IScriptOpcode.playfram:  				warg1 = ReadWord (ref pc);  				TraceLine ("playfram: {0}"' warg1);  				DoPlayFrame (warg1 + facing % 16);  				break;  			case IScriptOpcode.playframtile:  				warg1 = ReadWord (ref pc);  				TraceLine ("playframetile: {0}"' warg1);  				break;  			case IScriptOpcode.sethorpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("sethorpos: {0}"' barg1);  				break;  			case IScriptOpcode.setpos:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("setpos: {0} {1}"' barg1' barg2);  				break;  			case IScriptOpcode.setvertpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("setvertpos: {0}"' barg1);  				break;  			case IScriptOpcode.wait:  				barg1 = ReadByte (ref pc);  				TraceLine ("wait: {0}"' barg1);  				waiting = barg1;  				break;  			case IScriptOpcode.waitrand:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("waitrand: {0} {1}"' barg1' barg2);  				waiting = rng.Next(255) > 127 ? barg1 : barg2;  				break;  			case IScriptOpcode._goto:  				warg1 = ReadWord (ref pc);  				TraceLine ("goto: {0}"' warg1);  				pc = warg1;  				break;  			case IScriptOpcode.imgol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imgul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgul: {0} {1} {2}"' warg1' barg1' barg2);  				Sprite dependent_sprite = SpriteManager.CreateSprite (this' warg1' palette);  				dependent_sprite.RunScript (AnimationType.Init);  				break;  			case IScriptOpcode.imgolorig:  				warg1 = ReadWord (ref pc);  				TraceLine ("imgolorig: {0}"' warg1);  				break;  			case IScriptOpcode.switchul:  				warg1 = ReadWord (ref pc);  				TraceLine ("switchul: {0}"' warg1);  				break;  			// __0c unknown  			case IScriptOpcode.imgoluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgoluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imguluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imguluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.highsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("highsprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.lowsprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} ({1}'{2})"' warg1' barg1' barg2);   				Sprite s = SpriteManager.CreateSprite (warg1' palette' x' y);   				s.RunScript (AnimationType.Init);  				dependentSprite = s;  				break;    				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.uflunstable:  				warg1 = ReadWord (ref pc);  				TraceLine ("uflunstable: {0}"' warg1);  				break;  			case IScriptOpcode.spruluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("spruluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sproluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sproleuselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.end:  				TraceLine ("end");  				return false;  			case IScriptOpcode.setflipstate:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflipstate: {0}"' barg1);  				break;  			case IScriptOpcode.playsnd:  				warg1 = ReadWord (ref pc);  				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]);  				break;  			case IScriptOpcode.playsndrand: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("playsndrand: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.playsndbtwn:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("playsndbtwn: {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.domissiledmg:  				TraceLine ("domissiledmg: unknown args");  				break;  			case IScriptOpcode.attackmelee: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("attackmelee: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.followmaingraphic:  				TraceLine ("followmaingraphic:");  				if (parent_sprite != null)  					DoPlayFrame (parent_sprite.CurrentFrame);  				break;  			case IScriptOpcode.randcondjmp:  				barg1 = ReadByte (ref pc);  				warg1 = ReadWord (ref pc);  				TraceLine ("randcondjmp: {0} {1}"' barg1' warg1);  				int rand = rng.Next(255);  				if (rand > barg1) {  					TraceLine ("+ choosing goto branch");  					pc = warg1;  				}  				break;  			case IScriptOpcode.turnccwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turnccwise: {0}"' barg1);  				if (facing - barg1 < 0)  					facing = 15 - barg1;  				else  					facing -= barg1;  				break;  			case IScriptOpcode.turncwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turncwise: {0}"' barg1);  				if (facing + barg1 > 15)  					facing = facing + barg1 - 15;  				else  					facing += barg1;  				break;  			case IScriptOpcode.turnlcwise:  				TraceLine ("turnlcwise: unknown args");  				break;  			case IScriptOpcode.turnrand:  				TraceLine ("turnrand:");  				if (rng.Next(255) > 127)  					goto case IScriptOpcode.turnccwise;  				else  					goto case IScriptOpcode.turncwise;  				break;  			case IScriptOpcode.setspawnframe:  				barg1 = ReadByte (ref pc);  				TraceLine ("setspawnframe {0}"' barg1);  				break;  			case IScriptOpcode.sigorder:  				barg1 = ReadByte (ref pc);  				TraceLine ("sigorder {0}"' barg1);  				break;  			case IScriptOpcode.attackwith:  				barg1 = ReadByte (ref pc);  				TraceLine ("attackwith {0}"' barg1);  				break;  			case IScriptOpcode.attack:  				TraceLine ("attack:");  				break;  			case IScriptOpcode.castspell:  				TraceLine ("castspell:");  				break;  			case IScriptOpcode.useweapon:  				barg1 = ReadByte (ref pc);  				TraceLine ("useweapon: {0}"' barg1);  				break;  			case IScriptOpcode.move:  				barg1 = ReadByte (ref pc);  				TraceLine ("move: {0}"' barg1);  				break;  			case IScriptOpcode.gotorepeatattk:  				TraceLine ("gotorepeatattk");  				break;  			case IScriptOpcode.engframe:  				warg1 = ReadWord (ref pc);  				TraceLine ("engframe: {0}"' warg1);  				break;  			case IScriptOpcode.engset:  				warg1 = ReadWord (ref pc);  				TraceLine ("engset: {0}"' warg1);  				break;  			// __2d unknown  			case IScriptOpcode.nobrkcodestart:  				TraceLine ("nobrkcodestart:");  				break;  			case IScriptOpcode.nobrkcodeend:  				TraceLine ("nobrkcodeend:");  				break;  			case IScriptOpcode.ignorerest:  				TraceLine ("ignorerest");  				break;  			case IScriptOpcode.attkshiftproj:  				barg1 = ReadByte (ref pc);  				TraceLine ("attkshiftproj: {0}"' barg1);  				break;  			case IScriptOpcode.tmprmgraphicstart:  				TraceLine ("tmprmgraphicstart:");  				break;  			case IScriptOpcode.tmprmgraphicend:  				TraceLine ("tmprmgraphicend:");  				break;  			case IScriptOpcode.setfldirect:  				barg1 = ReadByte (ref pc);  				TraceLine ("setfldirect: {0}"' barg1);  				DoPlayFrame (barg1);  				break;  			case IScriptOpcode.call:  				warg1 = ReadWord (ref pc);  				TraceLine ("call: {0}"' warg1);  				break;  			case IScriptOpcode._return:  				TraceLine ("return:");  				break;  			case IScriptOpcode.setflspeed:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflspeed: {0}"' barg1);  				break;  			case IScriptOpcode.creategasoverlays:  				barg1 = ReadByte (ref pc);  				TraceLine ("creategasoverlays: {0}"' barg1);  				break;  			case IScriptOpcode.pwrupcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("pwrupcondjmp: {0}"' warg1);  				break;  			case IScriptOpcode.trgtrangecondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("trgtrangecondjmp {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.trgtarccondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("trgtarccondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.curdirectcondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("curdirectcondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.imgulnextid:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgulnextid {0} {1}"' barg1' barg2);  				break;  			// __3e unknown  			case IScriptOpcode.liftoffcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("liftoffcondjmp {0}"' warg1);  				break;  			case IScriptOpcode.warpoverlay:  				warg1 = ReadWord (ref pc);  				TraceLine ("warpoverlay {0}"' warg1);  				break;  			case IScriptOpcode.orderdone:  				barg1 = ReadByte (ref pc);  				TraceLine ("orderdone {0}"' barg1);  				break;  			case IScriptOpcode.grdsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("grdsprol {0} {1} {2}"' warg1' barg1' barg2);  				break;  			// __43 unknown  			case IScriptOpcode.dogrddamage:  				TraceLine ("dogrddamage");  				break;  			default:  				Console.WriteLine ("Unknown iscript opcode: 0x{0:x}"' buf[pc-1]);  				break;  			}
Magic Number,SCSharp.UI,Sprite,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Sprite.cs,Tick,The following statement contains a magic number: switch ((IScriptOpcode)buf[pc++]) {  			case IScriptOpcode.playfram:  				warg1 = ReadWord (ref pc);  				TraceLine ("playfram: {0}"' warg1);  				DoPlayFrame (warg1 + facing % 16);  				break;  			case IScriptOpcode.playframtile:  				warg1 = ReadWord (ref pc);  				TraceLine ("playframetile: {0}"' warg1);  				break;  			case IScriptOpcode.sethorpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("sethorpos: {0}"' barg1);  				break;  			case IScriptOpcode.setpos:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("setpos: {0} {1}"' barg1' barg2);  				break;  			case IScriptOpcode.setvertpos:  				barg1 = ReadByte (ref pc);  				TraceLine ("setvertpos: {0}"' barg1);  				break;  			case IScriptOpcode.wait:  				barg1 = ReadByte (ref pc);  				TraceLine ("wait: {0}"' barg1);  				waiting = barg1;  				break;  			case IScriptOpcode.waitrand:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("waitrand: {0} {1}"' barg1' barg2);  				waiting = rng.Next(255) > 127 ? barg1 : barg2;  				break;  			case IScriptOpcode._goto:  				warg1 = ReadWord (ref pc);  				TraceLine ("goto: {0}"' warg1);  				pc = warg1;  				break;  			case IScriptOpcode.imgol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imgul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgul: {0} {1} {2}"' warg1' barg1' barg2);  				Sprite dependent_sprite = SpriteManager.CreateSprite (this' warg1' palette);  				dependent_sprite.RunScript (AnimationType.Init);  				break;  			case IScriptOpcode.imgolorig:  				warg1 = ReadWord (ref pc);  				TraceLine ("imgolorig: {0}"' warg1);  				break;  			case IScriptOpcode.switchul:  				warg1 = ReadWord (ref pc);  				TraceLine ("switchul: {0}"' warg1);  				break;  			// __0c unknown  			case IScriptOpcode.imgoluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgoluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.imguluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imguluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.highsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("highsprol: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.lowsprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} ({1}'{2})"' warg1' barg1' barg2);   				Sprite s = SpriteManager.CreateSprite (warg1' palette' x' y);   				s.RunScript (AnimationType.Init);  				dependentSprite = s;  				break;    				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("lowsprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.uflunstable:  				warg1 = ReadWord (ref pc);  				TraceLine ("uflunstable: {0}"' warg1);  				break;  			case IScriptOpcode.spruluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("spruluselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sprul:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sprul: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.sproluselo:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("sproleuselo: {0} {1} {2}"' warg1' barg1' barg2);  				break;  			case IScriptOpcode.end:  				TraceLine ("end");  				return false;  			case IScriptOpcode.setflipstate:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflipstate: {0}"' barg1);  				break;  			case IScriptOpcode.playsnd:  				warg1 = ReadWord (ref pc);  				TraceLine ("playsnd: {0} ({1})"' warg1 - 1' GlobalResources.Instance.SfxDataTbl[(int)GlobalResources.Instance.SfxDataDat.FileIndexes [warg1 - 1]]);  				break;  			case IScriptOpcode.playsndrand: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("playsndrand: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.playsndbtwn:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("playsndbtwn: {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.domissiledmg:  				TraceLine ("domissiledmg: unknown args");  				break;  			case IScriptOpcode.attackmelee: {  				barg1 = ReadByte (ref pc);  				ushort[] wargs = new ushort[barg1];  				for (byte b = 0; b < barg1; b ++) {  					wargs[b] = ReadWord (ref pc);  				}  				Trace ("attackmelee: {0} (");  				for (int i = 0; i < wargs.Length; i ++) {  					Trace ("{0}"' wargs[i]);  					if (i < wargs.Length - 1)  						Trace ("' ");  				}  				TraceLine (")");  				break;  			}  			case IScriptOpcode.followmaingraphic:  				TraceLine ("followmaingraphic:");  				if (parent_sprite != null)  					DoPlayFrame (parent_sprite.CurrentFrame);  				break;  			case IScriptOpcode.randcondjmp:  				barg1 = ReadByte (ref pc);  				warg1 = ReadWord (ref pc);  				TraceLine ("randcondjmp: {0} {1}"' barg1' warg1);  				int rand = rng.Next(255);  				if (rand > barg1) {  					TraceLine ("+ choosing goto branch");  					pc = warg1;  				}  				break;  			case IScriptOpcode.turnccwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turnccwise: {0}"' barg1);  				if (facing - barg1 < 0)  					facing = 15 - barg1;  				else  					facing -= barg1;  				break;  			case IScriptOpcode.turncwise:  				barg1 = ReadByte (ref pc);  				TraceLine ("turncwise: {0}"' barg1);  				if (facing + barg1 > 15)  					facing = facing + barg1 - 15;  				else  					facing += barg1;  				break;  			case IScriptOpcode.turnlcwise:  				TraceLine ("turnlcwise: unknown args");  				break;  			case IScriptOpcode.turnrand:  				TraceLine ("turnrand:");  				if (rng.Next(255) > 127)  					goto case IScriptOpcode.turnccwise;  				else  					goto case IScriptOpcode.turncwise;  				break;  			case IScriptOpcode.setspawnframe:  				barg1 = ReadByte (ref pc);  				TraceLine ("setspawnframe {0}"' barg1);  				break;  			case IScriptOpcode.sigorder:  				barg1 = ReadByte (ref pc);  				TraceLine ("sigorder {0}"' barg1);  				break;  			case IScriptOpcode.attackwith:  				barg1 = ReadByte (ref pc);  				TraceLine ("attackwith {0}"' barg1);  				break;  			case IScriptOpcode.attack:  				TraceLine ("attack:");  				break;  			case IScriptOpcode.castspell:  				TraceLine ("castspell:");  				break;  			case IScriptOpcode.useweapon:  				barg1 = ReadByte (ref pc);  				TraceLine ("useweapon: {0}"' barg1);  				break;  			case IScriptOpcode.move:  				barg1 = ReadByte (ref pc);  				TraceLine ("move: {0}"' barg1);  				break;  			case IScriptOpcode.gotorepeatattk:  				TraceLine ("gotorepeatattk");  				break;  			case IScriptOpcode.engframe:  				warg1 = ReadWord (ref pc);  				TraceLine ("engframe: {0}"' warg1);  				break;  			case IScriptOpcode.engset:  				warg1 = ReadWord (ref pc);  				TraceLine ("engset: {0}"' warg1);  				break;  			// __2d unknown  			case IScriptOpcode.nobrkcodestart:  				TraceLine ("nobrkcodestart:");  				break;  			case IScriptOpcode.nobrkcodeend:  				TraceLine ("nobrkcodeend:");  				break;  			case IScriptOpcode.ignorerest:  				TraceLine ("ignorerest");  				break;  			case IScriptOpcode.attkshiftproj:  				barg1 = ReadByte (ref pc);  				TraceLine ("attkshiftproj: {0}"' barg1);  				break;  			case IScriptOpcode.tmprmgraphicstart:  				TraceLine ("tmprmgraphicstart:");  				break;  			case IScriptOpcode.tmprmgraphicend:  				TraceLine ("tmprmgraphicend:");  				break;  			case IScriptOpcode.setfldirect:  				barg1 = ReadByte (ref pc);  				TraceLine ("setfldirect: {0}"' barg1);  				DoPlayFrame (barg1);  				break;  			case IScriptOpcode.call:  				warg1 = ReadWord (ref pc);  				TraceLine ("call: {0}"' warg1);  				break;  			case IScriptOpcode._return:  				TraceLine ("return:");  				break;  			case IScriptOpcode.setflspeed:  				barg1 = ReadByte (ref pc);  				TraceLine ("setflspeed: {0}"' barg1);  				break;  			case IScriptOpcode.creategasoverlays:  				barg1 = ReadByte (ref pc);  				TraceLine ("creategasoverlays: {0}"' barg1);  				break;  			case IScriptOpcode.pwrupcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("pwrupcondjmp: {0}"' warg1);  				break;  			case IScriptOpcode.trgtrangecondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				TraceLine ("trgtrangecondjmp {0} {1}"' warg1' warg2);  				break;  			case IScriptOpcode.trgtarccondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("trgtarccondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.curdirectcondjmp:  				warg1 = ReadWord (ref pc);  				warg2 = ReadWord (ref pc);  				warg3 = ReadWord (ref pc);  				TraceLine ("curdirectcondjmp {0} {1} {2}"' warg1' warg2' warg3);  				break;  			case IScriptOpcode.imgulnextid:  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("imgulnextid {0} {1}"' barg1' barg2);  				break;  			// __3e unknown  			case IScriptOpcode.liftoffcondjmp:  				warg1 = ReadWord (ref pc);  				TraceLine ("liftoffcondjmp {0}"' warg1);  				break;  			case IScriptOpcode.warpoverlay:  				warg1 = ReadWord (ref pc);  				TraceLine ("warpoverlay {0}"' warg1);  				break;  			case IScriptOpcode.orderdone:  				barg1 = ReadByte (ref pc);  				TraceLine ("orderdone {0}"' barg1);  				break;  			case IScriptOpcode.grdsprol:  				warg1 = ReadWord (ref pc);  				barg1 = ReadByte (ref pc);  				barg2 = ReadByte (ref pc);  				TraceLine ("grdsprol {0} {1} {2}"' warg1' barg1' barg2);  				break;  			// __43 unknown  			case IScriptOpcode.dogrddamage:  				TraceLine ("dogrddamage");  				break;  			default:  				Console.WriteLine ("Unknown iscript opcode: 0x{0:x}"' buf[pc-1]);  				break;  			}
Magic Number,SCSharp.UI,TextBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\TextBoxElement.cs,CreateSurface,The following statement contains a magic number: return GuiUtil.ComposeText (Text' Font' Palette' Width' Height'  						    Sensitive ? 4 : 24);
Magic Number,SCSharp.UI,TextBoxElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\TextBoxElement.cs,CreateSurface,The following statement contains a magic number: return GuiUtil.ComposeText (Text' Font' Palette' Width' Height'  						    Sensitive ? 4 : 24);
Magic Number,SCSharp.UI,UIDialog,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIDialog.cs,UIDialog,The following statement contains a magic number: background_translucent = 254;
Magic Number,SCSharp.UI,UIDialog,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIDialog.cs,UIDialog,The following statement contains a magic number: dimScreenSurface.Alpha = 100;
Magic Number,SCSharp.UI,UIDialog,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIDialog.cs,ResourceLoader,The following statement contains a magic number: baseX = (Painter.SCREEN_RES_X - Background.Width) / 2;
Magic Number,SCSharp.UI,UIDialog,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIDialog.cs,ResourceLoader,The following statement contains a magic number: baseY = (Painter.SCREEN_RES_Y - Background.Height) / 2;
Magic Number,SCSharp.UI,UIElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIElement.cs,CreateSurface,The following statement contains a magic number: switch (Type) {  			case ElementType.DefaultButton:  			case ElementType.Button:  			case ElementType.ButtonWithoutBorder:  				return GuiUtil.ComposeText (Text' Font' palette' Width' Height'  							    sensitive ? 4 : 24);  			default:  				return null;  			}
Magic Number,SCSharp.UI,UIElement,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIElement.cs,CreateSurface,The following statement contains a magic number: switch (Type) {  			case ElementType.DefaultButton:  			case ElementType.Button:  			case ElementType.ButtonWithoutBorder:  				return GuiUtil.ComposeText (Text' Font' palette' Width' Height'  							    sensitive ? 4 : 24);  			default:  				return null;  			}
Magic Number,SCSharp.UI,UIScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIScreen.cs,UIScreen,The following statement contains a magic number: background_translucent = 254;
Magic Number,SCSharp.UI,UIScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIScreen.cs,BackgroundPainter,The following statement contains a magic number: int background_x = (Painter.Width - background.Width) / 2;
Magic Number,SCSharp.UI,UIScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIScreen.cs,BackgroundPainter,The following statement contains a magic number: int background_y = (Painter.Height - background.Height) / 2;
Magic Number,SCSharp.UI,UIScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIScreen.cs,ResourceLoader,The following statement contains a magic number: Cursor.SetHotSpot (64' 64);
Magic Number,SCSharp.UI,UIScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\UIScreen.cs,ResourceLoader,The following statement contains a magic number: Cursor.SetHotSpot (64' 64);
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,ClassifyDirection,The following statement contains a magic number: return 5;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateTick,The following statement contains a magic number: dest_pixel_x - pixel_x < 2
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateTick,The following statement contains a magic number: dest_pixel_y - pixel_y < 2
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateTick,The following statement contains a magic number: x = pixel_x << 2;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateTick,The following statement contains a magic number: y = pixel_y << 2;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateAlongPath,The following statement contains a magic number: int start_pixel_x = X * 4 + 4;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateAlongPath,The following statement contains a magic number: int start_pixel_x = X * 4 + 4;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateAlongPath,The following statement contains a magic number: int start_pixel_y = X * 4 + 4;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateAlongPath,The following statement contains a magic number: int start_pixel_y = X * 4 + 4;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateAlongPath,The following statement contains a magic number: dest_pixel_x = endCurrentSegment.X * 4 + 4;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateAlongPath,The following statement contains a magic number: dest_pixel_x = endCurrentSegment.X * 4 + 4;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateAlongPath,The following statement contains a magic number: dest_pixel_y = endCurrentSegment.Y * 4 + 4;
Magic Number,SCSharp.UI,Unit,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\Unit.cs,NavigateAlongPath,The following statement contains a magic number: dest_pixel_y = endCurrentSegment.Y * 4 + 4;
Missing Default,SCSharp.UI,GameScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\GameScreen.cs,KeyboardDown,The following switch statement is missing a default case: switch (args.Key) {  			case Key.F10:  				GameMenuDialog d = new GameMenuDialog (this' mpq);    				d.ReturnToGame += delegate () { DismissDialog (); };  				ShowDialog (d);  				break;    			case Key.RightArrow:  				horiz_delta = SCROLL_DELTA;  				break;  			case Key.LeftArrow:  				horiz_delta = -SCROLL_DELTA;  				break;  			case Key.DownArrow:  				vert_delta = SCROLL_DELTA;  				break;  			case Key.UpArrow:  				vert_delta = -SCROLL_DELTA;  				break;  			}
Missing Default,SCSharp.UI,MarkupScreen,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,KeyboardDown,The following switch statement is missing a default case: switch (args.Key)  			{  			case Key.Escape:  				Events.Tick -= FlipPage;  				MarkupFinished ();  				break;  			case Key.Space:  			case Key.Return:  				totalElapsed = 0;  				AdvanceToNextPage ();  				break;  			}
Missing Default,SCSharp.UI,MarkupPage,D:\research\architectureSmells\repos1\toshok_scsharp\SCSharp\SCSharp.UI\MarkupScreen.cs,Paint,The following switch statement is missing a default case: switch (location) {  				case PageLocation.Top:  					y = Y_OFFSET;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.Bottom:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Left:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else   							y += fnt.LineSize;  					}  					break;  				case PageLocation.LowerLeft:  					y = Painter.Height - Y_OFFSET - fnt.LineSize * lines.Count;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Right:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point (Painter.Width - s.Width - X_OFFSET' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				case PageLocation.Center:  					y = (Painter.Height - fnt.LineSize * lines.Count) / 2;  					foreach (Surface s in lineSurfaces) {  						if (s != null) {  							Painter.Blit (s' new Point ((Painter.Width - s.Width) / 2' y));  							y += s.Height;  						}  						else  							y += fnt.LineSize;  					}  					break;  				}
