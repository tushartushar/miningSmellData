Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Oatc.OpenMI.Gui.Core,AssemblyLoader,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\AssemblySupport.cs,FindAssemblies,Cyclomatic complexity of the method is 10
Complex Method,Oatc.OpenMI.Gui.Core,CompositionManager,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionManager.cs,AddConnection,Cyclomatic complexity of the method is 9
Complex Method,Oatc.OpenMI.Gui.Core,CompositionRun,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionRun.cs,DoRun,Cyclomatic complexity of the method is 12
Complex Method,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,Save,Cyclomatic complexity of the method is 10
Complex Method,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,DeserializeConnectionsV2,Cyclomatic complexity of the method is 11
Complex Method,Oatc.OpenMI.Gui.Core,Utils,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Utils.cs,OmiDeserializeAndInitialize,Cyclomatic complexity of the method is 11
Long Parameter List,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,GetFormattedValue,The method has 6 parameters.
Long Parameter List,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The method has 11 parameters.
Long Parameter List,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,BuildOutputItemChain,The method has 7 parameters.
Long Parameter List,Oatc.OpenMI.Gui.Controls,PropertyManager,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\PropertyManager.cs,SetProperty,The method has 5 parameters.
Long Statement,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The length of the statement  "		base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground)); " is 184.
Long Statement,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The length of the statement  "			g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4); " is 176.
Long Statement,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The length of the statement  "			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2); " is 138.
Long Statement,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The length of the statement  "				g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2); " is 144.
Long Statement,Oatc.OpenMI.Gui.Core,AssemblyLoader,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\AssemblySupport.cs,FindAssemblies,The length of the statement  "					Trace.TraceInformation (string.Format ("FindAssemblies({0}) =\r\n\t{1}\r\n\t{2}"' name' assembly.FullName' assembly.Location)); " is 127.
Long Statement,Oatc.OpenMI.Gui.Core,AssemblyLoader,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\AssemblySupport.cs,FindAssemblies,The length of the statement  "				Trace.TraceInformation (string.Format ("FindAssemblies({0}) =\r\n\t{1}\r\n\t{2}"' name' assembly.FullName' assembly.Location)); " is 127.
Long Statement,Oatc.OpenMI.Gui.Core,AssemblySupport,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\AssemblySupport.cs,LoadAssembly,The length of the statement  "			throw (new Exception ("Assembly cannot be loaded (CurrentDirectory='" + Directory.GetCurrentDirectory () + "'' Name='" + filename + "')"' e)); " is 142.
Long Statement,Oatc.OpenMI.Gui.Core,AssemblySupport,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\AssemblySupport.cs,GetNewInstance,The length of the statement  "		throw (new Exception ("Class type " + typeName + " not found neither in loaded assemblies nor in application context.")); " is 121.
Long Statement,Oatc.OpenMI.Gui.Core,CompositionRun,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionRun.cs,DoRun,The length of the statement  "		model.LinkableComponent.StatusChanged += new EventHandler<LinkableComponentStatusChangeEventArgs> (LinkableComponent_StatusChanged); " is 132.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,Links,The length of the statement  "			source_item_adpatedoutput_index = source is UIAdaptedOutputItem ? allAdaptersInConnection.IndexOf (source as UIAdaptedOutputItem) : -1' " is 135.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,Links,The length of the statement  "				source_item_adpatedoutput_index = source is UIAdaptedOutputItem ? allAdaptersInConnection.IndexOf (source as UIAdaptedOutputItem) : -1' " is 135.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,Links,The length of the statement  "				source_item_adpatedoutput_index = source is UIAdaptedOutputItem ? allAdaptersInConnection.IndexOf (source as UIAdaptedOutputItem) : -1' " is 135.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,Links,The length of the statement  "					source_item_adpatedoutput_index = source is UIAdaptedOutputItem ? allAdaptersInConnection.IndexOf (source as UIAdaptedOutputItem) : -1' " is 135.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,Decorated,The length of the statement  "	while (outputs [outputs.Count - 1].Parent != null && outputs [outputs.Count - 1].Parent != outputs [outputs.Count - 1]) { " is 121.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,Load,The length of the statement  "			XmlSerializer serializer = sXML.Contains ("guiComposition") ? new XmlSerializer (typeof(guiComposition)) : new XmlSerializer (typeof(opr)); " is 139.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,DeserializeConnectionsV2,The length of the statement  "			UIOutputItem source = BuildOutputItemChain (uiSourceModel.LinkableComponent' srcItem' connection.decorators' sources' adaptedOutputs' oprPath' target); " is 151.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,DeserializeConnectionsV2,The length of the statement  "				UIOutputItem tempSrc = BuildOutputItemChain (uiSourceModel.LinkableComponent' item' connection.decorators' sources' adaptedOutputs' oprPath' target); " is 149.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,BuildOutputItemChain,The length of the statement  "			//    factory.Initialise(oprFactories[srcItem.source_item_adpatedoutput_index]' uiSourceModel.LinkableComponent' oprPath); " is 122.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,BuildOutputItemChain,The length of the statement  "			//        factory.Initialise(oprFactories[parentItem.source_item_adpatedoutput_index]' uiSourceModel.LinkableComponent' oprPath); " is 129.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,BuildOutputItemChain,The length of the statement  "			//        parentSource = factory.NewAdaptedUIOutputItem(ids[parentItem.source_item_adpatedoutput_index]' source' target); " is 121.
Long Statement,Oatc.OpenMI.Gui.Core,Opr,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Opr.cs,BuildOutputItemChain,The length of the statement  "			//        SetArguments(oprArguments[parentItem.source_item_adpatedoutput_index]' (ITimeSpaceAdaptedOutput)parentSource.Output); " is 127.
Long Statement,Oatc.OpenMI.Gui.Core,UIAdaptedFactory,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIAdaptedFactory.cs,InitialiseAsNative,The length of the statement  "	throw new ArgumentException (string.Format ("Cannot find adapter factory \"{0}\" in model \"{1}\""' id' source.Caption)); " is 121.
Long Statement,Oatc.OpenMI.Gui.Core,UIAdaptedFactory,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIAdaptedFactory.cs,ToString,The length of the statement  "	return _modelCaption == string.Empty ? string.Format ("{0} ({1})"' _factory.Caption' _factory.GetType ().ToString ()) : string.Format ("\"{0}\"' {1}"' _modelCaption' _factory.Caption); " is 184.
Long Statement,Oatc.OpenMI.Gui.Core,UIConnection,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,Draw,The length of the statement  "		g.FillPolygon (selected ? Brushes.Red : Brushes.Blue' windowTrianglePoints' System.Drawing.Drawing2D.FillMode.Alternate); " is 121.
Long Statement,Oatc.OpenMI.Gui.Core,UIConnection,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,IsOnConnectionLine,The length of the statement  "		if (0 < (point.X - _trianglePoints [i].X) * (_trianglePoints [m].Y - _trianglePoints [i].Y) - (_trianglePoints [m].X - _trianglePoints [i].X) * (point.Y - _trianglePoints [i].Y)) " is 178.
Long Statement,Oatc.OpenMI.Gui.Core,Utils,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Utils.cs,OmiDeserializeAndInitialize,The length of the statement  "	// serializer.Serialize(new StreamWriter("C:\\Users\\Caleb\\Desktop\\Projects\\OpenMI\\1.4.0\\Oatc\\src\\csharp\\Examples\\ModelComponents\\SpatialModels\\UnitTest\\test.xml")' comp); " is 183.
Long Statement,Oatc.OpenMI.Gui.Core,Utils,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Utils.cs,Parse,The length of the statement  "		if (mi.Name == "Parse" && mi.IsStatic && mi.GetParameters ().Length == 1 && mi.GetParameters () [0].ParameterType == typeof(string)) { " is 134.
Long Statement,Oatc.OpenMI.Gui.Core,Utils,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Utils.cs,Parse,The length of the statement  "	throw new NotImplementedException (string.Format ("Reflection could not find a {0}.Parse(string) method to invoke"' type.FullName)); " is 132.
Complex Conditional,Oatc.OpenMI.Gui.Core,Link,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,CheckOutputItemEqual,The conditional expression  "item1 != null && item2 != null && item1 == item2 || item1.ExchangeItem == item2.ExchangeItem"  is complex.
Complex Conditional,Oatc.OpenMI.Gui.Core,Utils,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Utils.cs,Parse,The conditional expression  "mi.Name == "Parse" && mi.IsStatic && mi.GetParameters ().Length == 1 && mi.GetParameters () [0].ParameterType == typeof(string)"  is complex.
Empty Catch Block,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The method has an empty catch block.
Empty Catch Block,Oatc.OpenMI.Gui.Core,Utils,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Utils.cs,RelativePath,The method has an empty catch block.
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (ProgressBarForeGroundColor)' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (this.DataGridView.CurrentRow.Index == rowIndex)  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  else  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (this.DataGridView.CurrentRow.Index == rowIndex)  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  else  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (this.DataGridView.CurrentRow.Index == rowIndex)  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  else  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: if (this.DataGridView.CurrentRow.Index == rowIndex)  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  else  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core.Additional,DataGridViewProgressCell,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Additional\DatagridViewProgressItems.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,Oatc.OpenMI.Gui.Core,CompositionManager,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionManager.cs,Initialize,The following statement contains a magic number: _triggerInvokeTime = new DateTime (1900' 1' 1);  
Magic Number,Oatc.OpenMI.Gui.Core,CompositionManager,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionManager.cs,ModelAdd,The following statement contains a magic number: foreach (UIModel uiModel in _models) {  	if (model.Rect.X == uiModel.Rect.X && model.Rect.Y == uiModel.Rect.Y) {  		model.Rect.X = model.Rect.X + model.Rect.Width + 50;  		model.Rect.Y = model.Rect.Y + model.Rect.Height + 50;  	}  }  
Magic Number,Oatc.OpenMI.Gui.Core,CompositionManager,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionManager.cs,ModelAdd,The following statement contains a magic number: foreach (UIModel uiModel in _models) {  	if (model.Rect.X == uiModel.Rect.X && model.Rect.Y == uiModel.Rect.Y) {  		model.Rect.X = model.Rect.X + model.Rect.Width + 50;  		model.Rect.Y = model.Rect.Y + model.Rect.Height + 50;  	}  }  
Magic Number,Oatc.OpenMI.Gui.Core,CompositionManager,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionManager.cs,ModelAdd,The following statement contains a magic number: if (model.Rect.X == uiModel.Rect.X && model.Rect.Y == uiModel.Rect.Y) {  	model.Rect.X = model.Rect.X + model.Rect.Width + 50;  	model.Rect.Y = model.Rect.Y + model.Rect.Height + 50;  }  
Magic Number,Oatc.OpenMI.Gui.Core,CompositionManager,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionManager.cs,ModelAdd,The following statement contains a magic number: if (model.Rect.X == uiModel.Rect.X && model.Rect.Y == uiModel.Rect.Y) {  	model.Rect.X = model.Rect.X + model.Rect.Width + 50;  	model.Rect.Y = model.Rect.Y + model.Rect.Height + 50;  }  
Magic Number,Oatc.OpenMI.Gui.Core,CompositionManager,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionManager.cs,ModelAdd,The following statement contains a magic number: model.Rect.X = model.Rect.X + model.Rect.Width + 50;  
Magic Number,Oatc.OpenMI.Gui.Core,CompositionManager,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\CompositionManager.cs,ModelAdd,The following statement contains a magic number: model.Rect.Y = model.Rect.Y + model.Rect.Height + 50;  
Magic Number,Oatc.OpenMI.Gui.Core,Trigger,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Trigger.cs,Trigger,The following statement contains a magic number: _timeHorizon = new Time (new DateTime (1800' 1' 1)' new DateTime (2200' 1' 1));  
Magic Number,Oatc.OpenMI.Gui.Core,Trigger,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\Trigger.cs,Trigger,The following statement contains a magic number: _timeHorizon = new Time (new DateTime (1800' 1' 1)' new DateTime (2200' 1' 1));  
Magic Number,Oatc.OpenMI.Gui.Core,UIConnection,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,UIConnection,The following statement contains a magic number: _trianglePoints = new Point[3];  
Magic Number,Oatc.OpenMI.Gui.Core,UIConnection,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,Draw,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	windowTrianglePoints [i].X = _trianglePoints [i].X - windowPosition.X;  	windowTrianglePoints [i].Y = _trianglePoints [i].Y - windowPosition.Y;  }  
Magic Number,Oatc.OpenMI.Gui.Core,UIConnection,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,Draw,The following statement contains a magic number: if (Math.Abs (startX - endX) + Math.Abs (startY - endY) > 10) {  	g.FillPolygon (selected ? Brushes.Red : Brushes.Blue' windowTrianglePoints' System.Drawing.Drawing2D.FillMode.Alternate);  	g.DrawPolygon (selected ? Pens.Red : Pens.Blue' windowTrianglePoints);  }  
Magic Number,Oatc.OpenMI.Gui.Core,UIConnection,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,GetTrianglePoints,The following statement contains a magic number: trianglePoints [2] = new Point ((int)t2X' (int)t2Y);  
Magic Number,Oatc.OpenMI.Gui.Core,UIConnection,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,IsOnConnectionLine,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	m = i + 1;  	if (m == 3)  		m = 0;  	if (0 < (point.X - _trianglePoints [i].X) * (_trianglePoints [m].Y - _trianglePoints [i].Y) - (_trianglePoints [m].X - _trianglePoints [i].X) * (point.Y - _trianglePoints [i].Y))  		isOnConnectionLine = false;  }  
Magic Number,Oatc.OpenMI.Gui.Core,UIConnection,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,IsOnConnectionLine,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	m = i + 1;  	if (m == 3)  		m = 0;  	if (0 < (point.X - _trianglePoints [i].X) * (_trianglePoints [m].Y - _trianglePoints [i].Y) - (_trianglePoints [m].X - _trianglePoints [i].X) * (point.Y - _trianglePoints [i].Y))  		isOnConnectionLine = false;  }  
Magic Number,Oatc.OpenMI.Gui.Core,UIConnection,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIConnection.cs,IsOnConnectionLine,The following statement contains a magic number: if (m == 3)  	m = 0;  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,UIModel,The following statement contains a magic number: try {  	_font = new Font ("Arial"' 11);  }  catch (ArithmeticException) {  	Utils.ResetFPU ();  	_font = new Font ("Arial"' 11);  }  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,UIModel,The following statement contains a magic number: try {  	_font = new Font ("Arial"' 11);  }  catch (ArithmeticException) {  	Utils.ResetFPU ();  	_font = new Font ("Arial"' 11);  }  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,UIModel,The following statement contains a magic number: _font = new Font ("Arial"' 11);  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,UIModel,The following statement contains a magic number: _font = new Font ("Arial"' 11);  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,UIModel,The following statement contains a magic number: Rect = new Rectangle (30' 30' 100' 3 * _font.Height);  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,UIModel,The following statement contains a magic number: Rect = new Rectangle (30' 30' 100' 3 * _font.Height);  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,UIModel,The following statement contains a magic number: Rect = new Rectangle (30' 30' 100' 3 * _font.Height);  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,UIModel,The following statement contains a magic number: Rect = new Rectangle (30' 30' 100' 3 * _font.Height);  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,Draw,The following statement contains a magic number: Rect.Width = (int)(size.Width + size.Width * .60);  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,Draw,The following statement contains a magic number: rectToDraw.Width -= 2 * buffx;  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,Draw,The following statement contains a magic number: rectToDraw.Height -= 2 * buffy;  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,GetMidPoint,The following statement contains a magic number: return new Point (Rect.X + Rect.Width / 2' Rect.Y + Rect.Height / 2);  
Magic Number,Oatc.OpenMI.Gui.Core,UIModel,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Gui\Core\UIModel.cs,GetMidPoint,The following statement contains a magic number: return new Point (Rect.X + Rect.Width / 2' Rect.Y + Rect.Height / 2);  
