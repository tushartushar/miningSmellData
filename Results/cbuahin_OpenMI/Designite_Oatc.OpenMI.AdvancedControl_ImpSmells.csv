Implementation smell,Namespace,Class,File,Method,Description
Complex Method,org.OpenMI.Utilities.AdvancedControl,IterationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\IterationController.cs,GetValues,Cyclomatic complexity of the method is 10
Complex Method,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,Cyclomatic complexity of the method is 14
Long Parameter List,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,Solution,The method has 5 parameters.
Magic Number,org.OpenMI.Utilities.AdvancedControl,IterationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\IterationController.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	string ID = (i + 1).ToString ();  	Quantity quantity = new Quantity (new Unit ("Unit"' 1.0' 0.0' "Unit")' "Quantity"' "Quantity");  	ElementSet elementSet = new ElementSet (ID' ID' ElementType.IDBased' new SpatialReference ());  	Element element = new Element (ID);  	elementSet.AddElement (element);  	InputExchangeItem exchangeItem = new InputExchangeItem ();  	exchangeItem.ElementSet = elementSet;  	exchangeItem.Quantity = quantity;  	AddInputExchangeItem (exchangeItem);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,IterationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\IterationController.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	string ID = (i + 1).ToString ();  	Quantity quantity = new Quantity (new Unit ("Unit"' 1.0' 0.0' "Unit")' "Quantity"' "Quantity");  	ElementSet elementSet = new ElementSet (ID' ID' ElementType.IDBased' new SpatialReference ());  	Element element = new Element (ID);  	elementSet.AddElement (element);  	OutputExchangeItem exchangeItem = new OutputExchangeItem ();  	exchangeItem.ElementSet = elementSet;  	exchangeItem.Quantity = quantity;  	AddOutputExchangeItem (exchangeItem);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,IterationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\IterationController.cs,GetValues,The following statement contains a magic number: if (!isComputing) {  	isComputing = true;  	KeepAllStates ();  	int iterCount;  	for (iterCount = 0; iterCount < maxIter; iterCount++) {  		RestoreAllStates ();  		ILink[] links = GetAcceptingLinks ();  		double change = 0.0;  		for (int i = 0; i < links.Length; i++) {  			ILink link = links [i];  			IValueSet valueSet = link.SourceComponent.GetValues (time' link.ID);  			string targetID = link.TargetElementSet.ID;  			if (valueSet != null && valueSet.Count > 0) {  				IValueSet bufferSet = buffer.Get (targetID);  				if (bufferSet == null) {  					buffer.Add (targetID' valueSet);  					change = 10;  				}  				else {  					double[] values = new double[bufferSet.Count];  					for (int j = 0; j < bufferSet.Count; j++) {  						values [j] = ((IScalarSet)bufferSet).GetScalar (j);  					}  					double[] newValues = new double[valueSet.Count];  					for (int j = 0; j < valueSet.Count; j++) {  						newValues [j] = ((IScalarSet)valueSet).GetScalar (j);  					}  					for (int j = 0; j < values.Length; j++) {  						double diff = values [j] - newValues [j];  						change += diff * diff;  						values [j] = relaxation * values [j] + (1 - relaxation) * newValues [j];  					}  					buffer.Add (targetID' new ScalarSet (values));  				}  			}  		}  		if (change < eps)  			break;  	}  	isComputing = false;  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,IterationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\IterationController.cs,GetValues,The following statement contains a magic number: for (iterCount = 0; iterCount < maxIter; iterCount++) {  	RestoreAllStates ();  	ILink[] links = GetAcceptingLinks ();  	double change = 0.0;  	for (int i = 0; i < links.Length; i++) {  		ILink link = links [i];  		IValueSet valueSet = link.SourceComponent.GetValues (time' link.ID);  		string targetID = link.TargetElementSet.ID;  		if (valueSet != null && valueSet.Count > 0) {  			IValueSet bufferSet = buffer.Get (targetID);  			if (bufferSet == null) {  				buffer.Add (targetID' valueSet);  				change = 10;  			}  			else {  				double[] values = new double[bufferSet.Count];  				for (int j = 0; j < bufferSet.Count; j++) {  					values [j] = ((IScalarSet)bufferSet).GetScalar (j);  				}  				double[] newValues = new double[valueSet.Count];  				for (int j = 0; j < valueSet.Count; j++) {  					newValues [j] = ((IScalarSet)valueSet).GetScalar (j);  				}  				for (int j = 0; j < values.Length; j++) {  					double diff = values [j] - newValues [j];  					change += diff * diff;  					values [j] = relaxation * values [j] + (1 - relaxation) * newValues [j];  				}  				buffer.Add (targetID' new ScalarSet (values));  			}  		}  	}  	if (change < eps)  		break;  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,IterationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\IterationController.cs,GetValues,The following statement contains a magic number: for (int i = 0; i < links.Length; i++) {  	ILink link = links [i];  	IValueSet valueSet = link.SourceComponent.GetValues (time' link.ID);  	string targetID = link.TargetElementSet.ID;  	if (valueSet != null && valueSet.Count > 0) {  		IValueSet bufferSet = buffer.Get (targetID);  		if (bufferSet == null) {  			buffer.Add (targetID' valueSet);  			change = 10;  		}  		else {  			double[] values = new double[bufferSet.Count];  			for (int j = 0; j < bufferSet.Count; j++) {  				values [j] = ((IScalarSet)bufferSet).GetScalar (j);  			}  			double[] newValues = new double[valueSet.Count];  			for (int j = 0; j < valueSet.Count; j++) {  				newValues [j] = ((IScalarSet)valueSet).GetScalar (j);  			}  			for (int j = 0; j < values.Length; j++) {  				double diff = values [j] - newValues [j];  				change += diff * diff;  				values [j] = relaxation * values [j] + (1 - relaxation) * newValues [j];  			}  			buffer.Add (targetID' new ScalarSet (values));  		}  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,IterationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\IterationController.cs,GetValues,The following statement contains a magic number: if (valueSet != null && valueSet.Count > 0) {  	IValueSet bufferSet = buffer.Get (targetID);  	if (bufferSet == null) {  		buffer.Add (targetID' valueSet);  		change = 10;  	}  	else {  		double[] values = new double[bufferSet.Count];  		for (int j = 0; j < bufferSet.Count; j++) {  			values [j] = ((IScalarSet)bufferSet).GetScalar (j);  		}  		double[] newValues = new double[valueSet.Count];  		for (int j = 0; j < valueSet.Count; j++) {  			newValues [j] = ((IScalarSet)valueSet).GetScalar (j);  		}  		for (int j = 0; j < values.Length; j++) {  			double diff = values [j] - newValues [j];  			change += diff * diff;  			values [j] = relaxation * values [j] + (1 - relaxation) * newValues [j];  		}  		buffer.Add (targetID' new ScalarSet (values));  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,IterationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\IterationController.cs,GetValues,The following statement contains a magic number: if (bufferSet == null) {  	buffer.Add (targetID' valueSet);  	change = 10;  }  else {  	double[] values = new double[bufferSet.Count];  	for (int j = 0; j < bufferSet.Count; j++) {  		values [j] = ((IScalarSet)bufferSet).GetScalar (j);  	}  	double[] newValues = new double[valueSet.Count];  	for (int j = 0; j < valueSet.Count; j++) {  		newValues [j] = ((IScalarSet)valueSet).GetScalar (j);  	}  	for (int j = 0; j < values.Length; j++) {  		double diff = values [j] - newValues [j];  		change += diff * diff;  		values [j] = relaxation * values [j] + (1 - relaxation) * newValues [j];  	}  	buffer.Add (targetID' new ScalarSet (values));  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,IterationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\IterationController.cs,GetValues,The following statement contains a magic number: change = 10;  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,Initialize,The following statement contains a magic number: foreach (IArgument argument in properties) {  	if (argument.Key.Equals ("Parameter")) {  		string paramstring = argument.Value;  		char[] delimiter = new char[1];  		delimiter [0] = ''';  		string[] substring = paramstring.Split (delimiter);  		string ID = substring [0];  		double minimum = Double.Parse (substring [1]);  		double maximum = Double.Parse (substring [2]);  		double currentValue = Double.Parse (substring [3]);  		ParameterDescriptor descriptor = new ParameterDescriptor (ID' minimum' maximum' currentValue);  		AddParameter (descriptor);  		Quantity quantity = new Quantity (new Unit ("Unit"' 1.0' 0.0' "Unit")' "Quantity"' "Quantity");  		ElementSet elementSet = new ElementSet (ID' ID' ElementType.IDBased' new SpatialReference ());  		OutputExchangeItem exchangeItem = new OutputExchangeItem ();  		exchangeItem.ElementSet = elementSet;  		exchangeItem.Quantity = quantity;  		AddOutputExchangeItem (exchangeItem);  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,Initialize,The following statement contains a magic number: foreach (IArgument argument in properties) {  	if (argument.Key.Equals ("Parameter")) {  		string paramstring = argument.Value;  		char[] delimiter = new char[1];  		delimiter [0] = ''';  		string[] substring = paramstring.Split (delimiter);  		string ID = substring [0];  		double minimum = Double.Parse (substring [1]);  		double maximum = Double.Parse (substring [2]);  		double currentValue = Double.Parse (substring [3]);  		ParameterDescriptor descriptor = new ParameterDescriptor (ID' minimum' maximum' currentValue);  		AddParameter (descriptor);  		Quantity quantity = new Quantity (new Unit ("Unit"' 1.0' 0.0' "Unit")' "Quantity"' "Quantity");  		ElementSet elementSet = new ElementSet (ID' ID' ElementType.IDBased' new SpatialReference ());  		OutputExchangeItem exchangeItem = new OutputExchangeItem ();  		exchangeItem.ElementSet = elementSet;  		exchangeItem.Quantity = quantity;  		AddOutputExchangeItem (exchangeItem);  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,Initialize,The following statement contains a magic number: if (argument.Key.Equals ("Parameter")) {  	string paramstring = argument.Value;  	char[] delimiter = new char[1];  	delimiter [0] = ''';  	string[] substring = paramstring.Split (delimiter);  	string ID = substring [0];  	double minimum = Double.Parse (substring [1]);  	double maximum = Double.Parse (substring [2]);  	double currentValue = Double.Parse (substring [3]);  	ParameterDescriptor descriptor = new ParameterDescriptor (ID' minimum' maximum' currentValue);  	AddParameter (descriptor);  	Quantity quantity = new Quantity (new Unit ("Unit"' 1.0' 0.0' "Unit")' "Quantity"' "Quantity");  	ElementSet elementSet = new ElementSet (ID' ID' ElementType.IDBased' new SpatialReference ());  	OutputExchangeItem exchangeItem = new OutputExchangeItem ();  	exchangeItem.ElementSet = elementSet;  	exchangeItem.Quantity = quantity;  	AddOutputExchangeItem (exchangeItem);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,Initialize,The following statement contains a magic number: if (argument.Key.Equals ("Parameter")) {  	string paramstring = argument.Value;  	char[] delimiter = new char[1];  	delimiter [0] = ''';  	string[] substring = paramstring.Split (delimiter);  	string ID = substring [0];  	double minimum = Double.Parse (substring [1]);  	double maximum = Double.Parse (substring [2]);  	double currentValue = Double.Parse (substring [3]);  	ParameterDescriptor descriptor = new ParameterDescriptor (ID' minimum' maximum' currentValue);  	AddParameter (descriptor);  	Quantity quantity = new Quantity (new Unit ("Unit"' 1.0' 0.0' "Unit")' "Quantity"' "Quantity");  	ElementSet elementSet = new ElementSet (ID' ID' ElementType.IDBased' new SpatialReference ());  	OutputExchangeItem exchangeItem = new OutputExchangeItem ();  	exchangeItem.ElementSet = elementSet;  	exchangeItem.Quantity = quantity;  	AddOutputExchangeItem (exchangeItem);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: if (!isComputing) {  	isComputing = true;  	int populationSize = 20;  	int nParam = parameters.Count;  	ArrayList solutions = new ArrayList ();  	for (int i = 0; i < populationSize; i++) {  		double[] minimum = new double[nParam];  		double[] maximum = new double[nParam];  		double[] values = new double[nParam];  		for (int j = 0; j < nParam; j++) {  			ParameterDescriptor descriptor = (ParameterDescriptor)parameters [j];  			minimum [j] = descriptor.Minimum;  			maximum [j] = descriptor.Maximum;  			values [j] = descriptor.CurrentValue;  		}  		Solution solution = new Solution (values' minimum' maximum' 0.0' random);  		solution.randomize ();  		solution._cost = EvaluateCostFunction (time' solution);  		solutions.Add (solution);  	}  	while (true) {  		if (evaluationCount % 1000 == 0) {  			int bestIndex = 0;  			for (int i = 0; i < solutions.Count; i++) {  				if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  					bestIndex = i;  			}  			Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  			Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  			for (int i = 0; i < parameters.Count; i++) {  				Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  			}  		}  		if (evaluationCount == 10000)  			break;  		ArrayList tournament = new ArrayList ();  		for (int i = 0; i < 4; i++) {  			Solution solution;  			do {  				solution = (Solution)solutions [random.Next (solutions.Count)];  			}  			while (tournament.Contains (solution));  			tournament.Add (solution);  		}  		tournament.Sort ();  		solutions.Remove (tournament [2]);  		solutions.Remove (tournament [3]);  		Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		child1._cost = EvaluateCostFunction (time' child1);  		child2._cost = EvaluateCostFunction (time' child2);  		solutions.Add (child1);  		solutions.Add (child2);  	}  	double[] result = new double[nParam];  	for (int i = 0; i < nParam; i++)  		result [i] = ((Solution)solutions [0])._values [i];  	return new ScalarSet (result);  }  else {  	ILink outputLink = GetLink (LinkID);  	return buffer.Get (outputLink.SourceElementSet.ID);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: if (!isComputing) {  	isComputing = true;  	int populationSize = 20;  	int nParam = parameters.Count;  	ArrayList solutions = new ArrayList ();  	for (int i = 0; i < populationSize; i++) {  		double[] minimum = new double[nParam];  		double[] maximum = new double[nParam];  		double[] values = new double[nParam];  		for (int j = 0; j < nParam; j++) {  			ParameterDescriptor descriptor = (ParameterDescriptor)parameters [j];  			minimum [j] = descriptor.Minimum;  			maximum [j] = descriptor.Maximum;  			values [j] = descriptor.CurrentValue;  		}  		Solution solution = new Solution (values' minimum' maximum' 0.0' random);  		solution.randomize ();  		solution._cost = EvaluateCostFunction (time' solution);  		solutions.Add (solution);  	}  	while (true) {  		if (evaluationCount % 1000 == 0) {  			int bestIndex = 0;  			for (int i = 0; i < solutions.Count; i++) {  				if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  					bestIndex = i;  			}  			Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  			Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  			for (int i = 0; i < parameters.Count; i++) {  				Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  			}  		}  		if (evaluationCount == 10000)  			break;  		ArrayList tournament = new ArrayList ();  		for (int i = 0; i < 4; i++) {  			Solution solution;  			do {  				solution = (Solution)solutions [random.Next (solutions.Count)];  			}  			while (tournament.Contains (solution));  			tournament.Add (solution);  		}  		tournament.Sort ();  		solutions.Remove (tournament [2]);  		solutions.Remove (tournament [3]);  		Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		child1._cost = EvaluateCostFunction (time' child1);  		child2._cost = EvaluateCostFunction (time' child2);  		solutions.Add (child1);  		solutions.Add (child2);  	}  	double[] result = new double[nParam];  	for (int i = 0; i < nParam; i++)  		result [i] = ((Solution)solutions [0])._values [i];  	return new ScalarSet (result);  }  else {  	ILink outputLink = GetLink (LinkID);  	return buffer.Get (outputLink.SourceElementSet.ID);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: if (!isComputing) {  	isComputing = true;  	int populationSize = 20;  	int nParam = parameters.Count;  	ArrayList solutions = new ArrayList ();  	for (int i = 0; i < populationSize; i++) {  		double[] minimum = new double[nParam];  		double[] maximum = new double[nParam];  		double[] values = new double[nParam];  		for (int j = 0; j < nParam; j++) {  			ParameterDescriptor descriptor = (ParameterDescriptor)parameters [j];  			minimum [j] = descriptor.Minimum;  			maximum [j] = descriptor.Maximum;  			values [j] = descriptor.CurrentValue;  		}  		Solution solution = new Solution (values' minimum' maximum' 0.0' random);  		solution.randomize ();  		solution._cost = EvaluateCostFunction (time' solution);  		solutions.Add (solution);  	}  	while (true) {  		if (evaluationCount % 1000 == 0) {  			int bestIndex = 0;  			for (int i = 0; i < solutions.Count; i++) {  				if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  					bestIndex = i;  			}  			Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  			Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  			for (int i = 0; i < parameters.Count; i++) {  				Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  			}  		}  		if (evaluationCount == 10000)  			break;  		ArrayList tournament = new ArrayList ();  		for (int i = 0; i < 4; i++) {  			Solution solution;  			do {  				solution = (Solution)solutions [random.Next (solutions.Count)];  			}  			while (tournament.Contains (solution));  			tournament.Add (solution);  		}  		tournament.Sort ();  		solutions.Remove (tournament [2]);  		solutions.Remove (tournament [3]);  		Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		child1._cost = EvaluateCostFunction (time' child1);  		child2._cost = EvaluateCostFunction (time' child2);  		solutions.Add (child1);  		solutions.Add (child2);  	}  	double[] result = new double[nParam];  	for (int i = 0; i < nParam; i++)  		result [i] = ((Solution)solutions [0])._values [i];  	return new ScalarSet (result);  }  else {  	ILink outputLink = GetLink (LinkID);  	return buffer.Get (outputLink.SourceElementSet.ID);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: if (!isComputing) {  	isComputing = true;  	int populationSize = 20;  	int nParam = parameters.Count;  	ArrayList solutions = new ArrayList ();  	for (int i = 0; i < populationSize; i++) {  		double[] minimum = new double[nParam];  		double[] maximum = new double[nParam];  		double[] values = new double[nParam];  		for (int j = 0; j < nParam; j++) {  			ParameterDescriptor descriptor = (ParameterDescriptor)parameters [j];  			minimum [j] = descriptor.Minimum;  			maximum [j] = descriptor.Maximum;  			values [j] = descriptor.CurrentValue;  		}  		Solution solution = new Solution (values' minimum' maximum' 0.0' random);  		solution.randomize ();  		solution._cost = EvaluateCostFunction (time' solution);  		solutions.Add (solution);  	}  	while (true) {  		if (evaluationCount % 1000 == 0) {  			int bestIndex = 0;  			for (int i = 0; i < solutions.Count; i++) {  				if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  					bestIndex = i;  			}  			Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  			Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  			for (int i = 0; i < parameters.Count; i++) {  				Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  			}  		}  		if (evaluationCount == 10000)  			break;  		ArrayList tournament = new ArrayList ();  		for (int i = 0; i < 4; i++) {  			Solution solution;  			do {  				solution = (Solution)solutions [random.Next (solutions.Count)];  			}  			while (tournament.Contains (solution));  			tournament.Add (solution);  		}  		tournament.Sort ();  		solutions.Remove (tournament [2]);  		solutions.Remove (tournament [3]);  		Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		child1._cost = EvaluateCostFunction (time' child1);  		child2._cost = EvaluateCostFunction (time' child2);  		solutions.Add (child1);  		solutions.Add (child2);  	}  	double[] result = new double[nParam];  	for (int i = 0; i < nParam; i++)  		result [i] = ((Solution)solutions [0])._values [i];  	return new ScalarSet (result);  }  else {  	ILink outputLink = GetLink (LinkID);  	return buffer.Get (outputLink.SourceElementSet.ID);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: if (!isComputing) {  	isComputing = true;  	int populationSize = 20;  	int nParam = parameters.Count;  	ArrayList solutions = new ArrayList ();  	for (int i = 0; i < populationSize; i++) {  		double[] minimum = new double[nParam];  		double[] maximum = new double[nParam];  		double[] values = new double[nParam];  		for (int j = 0; j < nParam; j++) {  			ParameterDescriptor descriptor = (ParameterDescriptor)parameters [j];  			minimum [j] = descriptor.Minimum;  			maximum [j] = descriptor.Maximum;  			values [j] = descriptor.CurrentValue;  		}  		Solution solution = new Solution (values' minimum' maximum' 0.0' random);  		solution.randomize ();  		solution._cost = EvaluateCostFunction (time' solution);  		solutions.Add (solution);  	}  	while (true) {  		if (evaluationCount % 1000 == 0) {  			int bestIndex = 0;  			for (int i = 0; i < solutions.Count; i++) {  				if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  					bestIndex = i;  			}  			Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  			Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  			for (int i = 0; i < parameters.Count; i++) {  				Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  			}  		}  		if (evaluationCount == 10000)  			break;  		ArrayList tournament = new ArrayList ();  		for (int i = 0; i < 4; i++) {  			Solution solution;  			do {  				solution = (Solution)solutions [random.Next (solutions.Count)];  			}  			while (tournament.Contains (solution));  			tournament.Add (solution);  		}  		tournament.Sort ();  		solutions.Remove (tournament [2]);  		solutions.Remove (tournament [3]);  		Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		child1._cost = EvaluateCostFunction (time' child1);  		child2._cost = EvaluateCostFunction (time' child2);  		solutions.Add (child1);  		solutions.Add (child2);  	}  	double[] result = new double[nParam];  	for (int i = 0; i < nParam; i++)  		result [i] = ((Solution)solutions [0])._values [i];  	return new ScalarSet (result);  }  else {  	ILink outputLink = GetLink (LinkID);  	return buffer.Get (outputLink.SourceElementSet.ID);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: if (!isComputing) {  	isComputing = true;  	int populationSize = 20;  	int nParam = parameters.Count;  	ArrayList solutions = new ArrayList ();  	for (int i = 0; i < populationSize; i++) {  		double[] minimum = new double[nParam];  		double[] maximum = new double[nParam];  		double[] values = new double[nParam];  		for (int j = 0; j < nParam; j++) {  			ParameterDescriptor descriptor = (ParameterDescriptor)parameters [j];  			minimum [j] = descriptor.Minimum;  			maximum [j] = descriptor.Maximum;  			values [j] = descriptor.CurrentValue;  		}  		Solution solution = new Solution (values' minimum' maximum' 0.0' random);  		solution.randomize ();  		solution._cost = EvaluateCostFunction (time' solution);  		solutions.Add (solution);  	}  	while (true) {  		if (evaluationCount % 1000 == 0) {  			int bestIndex = 0;  			for (int i = 0; i < solutions.Count; i++) {  				if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  					bestIndex = i;  			}  			Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  			Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  			for (int i = 0; i < parameters.Count; i++) {  				Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  			}  		}  		if (evaluationCount == 10000)  			break;  		ArrayList tournament = new ArrayList ();  		for (int i = 0; i < 4; i++) {  			Solution solution;  			do {  				solution = (Solution)solutions [random.Next (solutions.Count)];  			}  			while (tournament.Contains (solution));  			tournament.Add (solution);  		}  		tournament.Sort ();  		solutions.Remove (tournament [2]);  		solutions.Remove (tournament [3]);  		Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  		child1._cost = EvaluateCostFunction (time' child1);  		child2._cost = EvaluateCostFunction (time' child2);  		solutions.Add (child1);  		solutions.Add (child2);  	}  	double[] result = new double[nParam];  	for (int i = 0; i < nParam; i++)  		result [i] = ((Solution)solutions [0])._values [i];  	return new ScalarSet (result);  }  else {  	ILink outputLink = GetLink (LinkID);  	return buffer.Get (outputLink.SourceElementSet.ID);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: while (true) {  	if (evaluationCount % 1000 == 0) {  		int bestIndex = 0;  		for (int i = 0; i < solutions.Count; i++) {  			if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  				bestIndex = i;  		}  		Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  		Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  		for (int i = 0; i < parameters.Count; i++) {  			Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  		}  	}  	if (evaluationCount == 10000)  		break;  	ArrayList tournament = new ArrayList ();  	for (int i = 0; i < 4; i++) {  		Solution solution;  		do {  			solution = (Solution)solutions [random.Next (solutions.Count)];  		}  		while (tournament.Contains (solution));  		tournament.Add (solution);  	}  	tournament.Sort ();  	solutions.Remove (tournament [2]);  	solutions.Remove (tournament [3]);  	Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	child1._cost = EvaluateCostFunction (time' child1);  	child2._cost = EvaluateCostFunction (time' child2);  	solutions.Add (child1);  	solutions.Add (child2);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: while (true) {  	if (evaluationCount % 1000 == 0) {  		int bestIndex = 0;  		for (int i = 0; i < solutions.Count; i++) {  			if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  				bestIndex = i;  		}  		Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  		Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  		for (int i = 0; i < parameters.Count; i++) {  			Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  		}  	}  	if (evaluationCount == 10000)  		break;  	ArrayList tournament = new ArrayList ();  	for (int i = 0; i < 4; i++) {  		Solution solution;  		do {  			solution = (Solution)solutions [random.Next (solutions.Count)];  		}  		while (tournament.Contains (solution));  		tournament.Add (solution);  	}  	tournament.Sort ();  	solutions.Remove (tournament [2]);  	solutions.Remove (tournament [3]);  	Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	child1._cost = EvaluateCostFunction (time' child1);  	child2._cost = EvaluateCostFunction (time' child2);  	solutions.Add (child1);  	solutions.Add (child2);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: while (true) {  	if (evaluationCount % 1000 == 0) {  		int bestIndex = 0;  		for (int i = 0; i < solutions.Count; i++) {  			if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  				bestIndex = i;  		}  		Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  		Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  		for (int i = 0; i < parameters.Count; i++) {  			Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  		}  	}  	if (evaluationCount == 10000)  		break;  	ArrayList tournament = new ArrayList ();  	for (int i = 0; i < 4; i++) {  		Solution solution;  		do {  			solution = (Solution)solutions [random.Next (solutions.Count)];  		}  		while (tournament.Contains (solution));  		tournament.Add (solution);  	}  	tournament.Sort ();  	solutions.Remove (tournament [2]);  	solutions.Remove (tournament [3]);  	Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	child1._cost = EvaluateCostFunction (time' child1);  	child2._cost = EvaluateCostFunction (time' child2);  	solutions.Add (child1);  	solutions.Add (child2);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: while (true) {  	if (evaluationCount % 1000 == 0) {  		int bestIndex = 0;  		for (int i = 0; i < solutions.Count; i++) {  			if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  				bestIndex = i;  		}  		Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  		Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  		for (int i = 0; i < parameters.Count; i++) {  			Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  		}  	}  	if (evaluationCount == 10000)  		break;  	ArrayList tournament = new ArrayList ();  	for (int i = 0; i < 4; i++) {  		Solution solution;  		do {  			solution = (Solution)solutions [random.Next (solutions.Count)];  		}  		while (tournament.Contains (solution));  		tournament.Add (solution);  	}  	tournament.Sort ();  	solutions.Remove (tournament [2]);  	solutions.Remove (tournament [3]);  	Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	child1._cost = EvaluateCostFunction (time' child1);  	child2._cost = EvaluateCostFunction (time' child2);  	solutions.Add (child1);  	solutions.Add (child2);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: while (true) {  	if (evaluationCount % 1000 == 0) {  		int bestIndex = 0;  		for (int i = 0; i < solutions.Count; i++) {  			if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  				bestIndex = i;  		}  		Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  		Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  		for (int i = 0; i < parameters.Count; i++) {  			Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  		}  	}  	if (evaluationCount == 10000)  		break;  	ArrayList tournament = new ArrayList ();  	for (int i = 0; i < 4; i++) {  		Solution solution;  		do {  			solution = (Solution)solutions [random.Next (solutions.Count)];  		}  		while (tournament.Contains (solution));  		tournament.Add (solution);  	}  	tournament.Sort ();  	solutions.Remove (tournament [2]);  	solutions.Remove (tournament [3]);  	Solution child1 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	Solution child2 = new Solution ((Solution)tournament [0]' (Solution)tournament [1]' random);  	child1._cost = EvaluateCostFunction (time' child1);  	child2._cost = EvaluateCostFunction (time' child2);  	solutions.Add (child1);  	solutions.Add (child2);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: if (evaluationCount % 1000 == 0) {  	int bestIndex = 0;  	for (int i = 0; i < solutions.Count; i++) {  		if (((Solution)solutions [i])._cost < ((Solution)solutions [bestIndex])._cost)  			bestIndex = i;  	}  	Debug.WriteLine ("Best solution after " + evaluationCount + " evaluations:");  	Debug.WriteLine ("(Cost=" + ((Solution)solutions [bestIndex])._cost + ")");  	for (int i = 0; i < parameters.Count; i++) {  		Debug.WriteLine (((ParameterDescriptor)parameters [i]).ID + "=" + ((Solution)solutions [bestIndex])._values [i]);  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: if (evaluationCount == 10000)  	break;  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Solution solution;  	do {  		solution = (Solution)solutions [random.Next (solutions.Count)];  	}  	while (tournament.Contains (solution));  	tournament.Add (solution);  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: solutions.Remove (tournament [2]);  
Magic Number,org.OpenMI.Utilities.AdvancedControl,OptimizationController,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,GetValues,The following statement contains a magic number: solutions.Remove (tournament [3]);  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,Solution,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	double a = random.NextDouble () * 1.5 - 0.25;  	_values [i] = a * parent1._values [i] + (1 - a) * parent2._values [i];  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,Solution,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	double a = random.NextDouble () * 1.5 - 0.25;  	_values [i] = a * parent1._values [i] + (1 - a) * parent2._values [i];  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: for (int i = 0; i < _values.Length; i++) {  	if (random.NextDouble () < 1.0 / _values.Length) {  		double s = 2.0 * (random.NextDouble () - 0.5);  		double r = 0.1 * (_maximum [i] - _minimum [i]);  		double k = 4;  		double u = random.NextDouble ();  		double a = Math.Pow (2.0' -k * u);  		_values [i] = _values [i] + s * r * a;  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: for (int i = 0; i < _values.Length; i++) {  	if (random.NextDouble () < 1.0 / _values.Length) {  		double s = 2.0 * (random.NextDouble () - 0.5);  		double r = 0.1 * (_maximum [i] - _minimum [i]);  		double k = 4;  		double u = random.NextDouble ();  		double a = Math.Pow (2.0' -k * u);  		_values [i] = _values [i] + s * r * a;  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: for (int i = 0; i < _values.Length; i++) {  	if (random.NextDouble () < 1.0 / _values.Length) {  		double s = 2.0 * (random.NextDouble () - 0.5);  		double r = 0.1 * (_maximum [i] - _minimum [i]);  		double k = 4;  		double u = random.NextDouble ();  		double a = Math.Pow (2.0' -k * u);  		_values [i] = _values [i] + s * r * a;  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: for (int i = 0; i < _values.Length; i++) {  	if (random.NextDouble () < 1.0 / _values.Length) {  		double s = 2.0 * (random.NextDouble () - 0.5);  		double r = 0.1 * (_maximum [i] - _minimum [i]);  		double k = 4;  		double u = random.NextDouble ();  		double a = Math.Pow (2.0' -k * u);  		_values [i] = _values [i] + s * r * a;  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: for (int i = 0; i < _values.Length; i++) {  	if (random.NextDouble () < 1.0 / _values.Length) {  		double s = 2.0 * (random.NextDouble () - 0.5);  		double r = 0.1 * (_maximum [i] - _minimum [i]);  		double k = 4;  		double u = random.NextDouble ();  		double a = Math.Pow (2.0' -k * u);  		_values [i] = _values [i] + s * r * a;  	}  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: if (random.NextDouble () < 1.0 / _values.Length) {  	double s = 2.0 * (random.NextDouble () - 0.5);  	double r = 0.1 * (_maximum [i] - _minimum [i]);  	double k = 4;  	double u = random.NextDouble ();  	double a = Math.Pow (2.0' -k * u);  	_values [i] = _values [i] + s * r * a;  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: if (random.NextDouble () < 1.0 / _values.Length) {  	double s = 2.0 * (random.NextDouble () - 0.5);  	double r = 0.1 * (_maximum [i] - _minimum [i]);  	double k = 4;  	double u = random.NextDouble ();  	double a = Math.Pow (2.0' -k * u);  	_values [i] = _values [i] + s * r * a;  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: if (random.NextDouble () < 1.0 / _values.Length) {  	double s = 2.0 * (random.NextDouble () - 0.5);  	double r = 0.1 * (_maximum [i] - _minimum [i]);  	double k = 4;  	double u = random.NextDouble ();  	double a = Math.Pow (2.0' -k * u);  	_values [i] = _values [i] + s * r * a;  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: if (random.NextDouble () < 1.0 / _values.Length) {  	double s = 2.0 * (random.NextDouble () - 0.5);  	double r = 0.1 * (_maximum [i] - _minimum [i]);  	double k = 4;  	double u = random.NextDouble ();  	double a = Math.Pow (2.0' -k * u);  	_values [i] = _values [i] + s * r * a;  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,Solution,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\OptimizationController.cs,mutate,The following statement contains a magic number: if (random.NextDouble () < 1.0 / _values.Length) {  	double s = 2.0 * (random.NextDouble () - 0.5);  	double r = 0.1 * (_maximum [i] - _minimum [i]);  	double k = 4;  	double u = random.NextDouble ();  	double a = Math.Pow (2.0' -k * u);  	_values [i] = _values [i] + s * r * a;  }  
Magic Number,org.OpenMI.Utilities.AdvancedControl,SumSquaredDifference,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AdvancedControl\SumSquaredDifference.cs,GetValues,The following statement contains a magic number: if (links.Length < 2)  	throw new Exception ("Sum of squared differences should have 2 inputs");  
