Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,Cyclomatic complexity of the method is 12
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,AsciiFileDataComponent,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	Arguments.Add (new ArgumentString (string.Format ("File{0}"' i)));  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("IdBased"' StringComparison.InvariantCultureIgnoreCase)) {  	var idelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.IdBased' "");  	for (int i = 1; i < elements.Length; i++) {  		idelementSet.AddElement (new Element (elements [i].Trim ('"')));  	}  	elementSet = idelementSet;  }  else if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("IdBased"' StringComparison.InvariantCultureIgnoreCase)) {  	var idelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.IdBased' "");  	for (int i = 1; i < elements.Length; i++) {  		idelementSet.AddElement (new Element (elements [i].Trim ('"')));  	}  	elementSet = idelementSet;  }  else if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("IdBased"' StringComparison.InvariantCultureIgnoreCase)) {  	var idelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.IdBased' "");  	for (int i = 1; i < elements.Length; i++) {  		idelementSet.AddElement (new Element (elements [i].Trim ('"')));  	}  	elementSet = idelementSet;  }  else if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("IdBased"' StringComparison.InvariantCultureIgnoreCase)) {  	var idelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.IdBased' "");  	for (int i = 1; i < elements.Length; i++) {  		idelementSet.AddElement (new Element (elements [i].Trim ('"')));  	}  	elementSet = idelementSet;  }  else if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("IdBased"' StringComparison.InvariantCultureIgnoreCase)) {  	var idelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.IdBased' "");  	for (int i = 1; i < elements.Length; i++) {  		idelementSet.AddElement (new Element (elements [i].Trim ('"')));  	}  	elementSet = idelementSet;  }  else if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("IdBased"' StringComparison.InvariantCultureIgnoreCase)) {  	var idelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.IdBased' "");  	for (int i = 1; i < elements.Length; i++) {  		idelementSet.AddElement (new Element (elements [i].Trim ('"')));  	}  	elementSet = idelementSet;  }  else if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("IdBased"' StringComparison.InvariantCultureIgnoreCase)) {  	var idelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.IdBased' "");  	for (int i = 1; i < elements.Length; i++) {  		idelementSet.AddElement (new Element (elements [i].Trim ('"')));  	}  	elementSet = idelementSet;  }  else if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("Points"' StringComparison.InvariantCultureIgnoreCase)) {  	var pelementSet = new ElementSet (inputFile + "-" + quantity.Caption' inputFile' ElementType.Point' "");  	for (int i = 1; i < elements.Length; i++) {  		string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  		if (coordinates.Length < 2)  			throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  		Element element = new Element ();  		double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  		double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  		Coordinate elmtCoor = new Coordinate (x' y);  		element.Vertices = new Coordinate[] {  			elmtCoor  		};  		pelementSet.AddElement (element);  	}  	elementSet = pelementSet;  }  else if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: for (int i = 1; i < elements.Length; i++) {  	string[] coordinates = elements [i].Trim ('"'' '('' ')').Split (''');  	if (coordinates.Length < 2)  		throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  	Element element = new Element ();  	double x = Double.Parse (coordinates [0]' NumberFormatInfo.InvariantInfo);  	double y = Double.Parse (coordinates [1]' NumberFormatInfo.InvariantInfo);  	Coordinate elmtCoor = new Coordinate (x' y);  	element.Vertices = new Coordinate[] {  		elmtCoor  	};  	pelementSet.AddElement (element);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (coordinates.Length < 2)  	throw new InvalidDataException ("Invalid file format: only one coordinate for point: " + inputFile);  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: if (elementTypeString.Equals ("RegularGrid"' StringComparison.InvariantCultureIgnoreCase)) {  	Spatial2DRegularGrid grid = new Spatial2DRegularGrid ();  	grid.IsNodeBased = false;  	string[] parts = elements [1].Trim ('"'' '('' ')').Split (''');  	grid.X0 = Double.Parse (parts [0]' NumberFormatInfo.InvariantInfo);  	grid.Y0 = Double.Parse (parts [1]' NumberFormatInfo.InvariantInfo);  	grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  	grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  	grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  	grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  	grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  	elementSet = new Spatial2DGridWrapper (grid);  }  else {  	throw new InvalidDataException ("Invalid file format: Element type not reckognized: " + inputFile);  }  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: grid.Dx = Double.Parse (parts [2]' NumberFormatInfo.InvariantInfo);  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: grid.Dy = Double.Parse (parts [3]' NumberFormatInfo.InvariantInfo);  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: grid.XCount = Int32.Parse (parts [4]' NumberFormatInfo.InvariantInfo);  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: grid.YCount = Int32.Parse (parts [5]' NumberFormatInfo.InvariantInfo);  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  
Magic Number,Oatc.OpenMI.Examples.AsciiFileReader,AsciiFileDataComponent,C:\repos\cbuahin_OpenMI\Source\csharp\Oatc.OpenMI\Examples\AsciiFileReader\AsciiFileDataComponent.cs,ReadFile,The following statement contains a magic number: grid.Orientation = (parts.Length < 5) ? 0 : Int32.Parse (parts [6]' NumberFormatInfo.InvariantInfo);  
