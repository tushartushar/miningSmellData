Implementation smell,Namespace,Class,File,Method,Description
Long Method,kOS,Term,C:\repos\Nivekk_KOS\Preprocessor\ExpressionTerm.cs,processSymbols,The method has 153 lines of code.
Complex Method,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessMathStatement,Cyclomatic complexity of the method is 14
Complex Method,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessComparison,Cyclomatic complexity of the method is 8
Complex Method,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessBoolean,Cyclomatic complexity of the method is 8
Complex Method,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,Cyclomatic complexity of the method is 15
Complex Method,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,Cyclomatic complexity of the method is 11
Complex Method,kOS,Term,C:\repos\Nivekk_KOS\Preprocessor\ExpressionTerm.cs,processSymbols,Cyclomatic complexity of the method is 17
Complex Method,kOS,InputManager,C:\repos\Nivekk_KOS\InputManager.cs,Keydown,Cyclomatic complexity of the method is 24
Complex Method,kOS,LockableControl,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,OnFlyByWire,Cyclomatic complexity of the method is 12
Complex Method,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TryOperation,Cyclomatic complexity of the method is 17
Complex Method,kOS,VesselTarget,C:\repos\Nivekk_KOS\Structures\VesselTarget.cs,GetSuffix,Cyclomatic complexity of the method is 28
Complex Method,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Keydown,Cyclomatic complexity of the method is 24
Complex Method,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,Cyclomatic complexity of the method is 16
Complex Method,kOS,CPU,C:\repos\Nivekk_KOS\CPU.cs,CallExternalFunction,Cyclomatic complexity of the method is 8
Complex Method,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetCommRange,Cyclomatic complexity of the method is 10
Long Parameter List,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,ShowCharacterByXY,The method has 5 parameters. Parameters: x' y' tx' ty' textColor
Long Statement,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,AddTo,The length of the statement  "            manager.AddGetter("ALT:RADAR"'      delegate(CPU cpu) { return Mathf.Min(0' cpu.Vessel.heightFromTerrain' (float)cpu.Vessel.altitude); }); " is 138.
Long Statement,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,AddTo,The length of the statement  "            manager.AddGetter("AV"'             delegate(CPU cpu) { return cpu.Vessel.transform.InverseTransformDirection(cpu.Vessel.rigidbody.angularVelocity); }); " is 152.
Long Statement,kOS,CommandDeclareParameter,C:\repos\Nivekk_KOS\Commands\CommandBasicIO.cs,Evaluate,The length of the statement  "            if (!(ParentContext is ContextRunProgram)) throw new kOSException("DECLARE PARAMETERS can only be used within a program."' this); " is 129.
Long Statement,kOS,CommandRename,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The length of the statement  "                if (int.TryParse(newName.Substring(0' 1)' out intTry)) throw new kOSException("Volume name cannot start with numeral"' this); " is 125.
Long Statement,kOS,CommandRename,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The length of the statement  "                if (int.TryParse(newName.Substring(0' 1)' out intTry)) throw new kOSException("Filename cannot start with numeral"' this); " is 122.
Long Statement,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The length of the statement  "                            StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8)); " is 132.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,GetValueOfTerm,The length of the statement  "            if (term.Type == Term.TermTypes.FINAL) // 'Final' terms can't be boiled down further' they should always be constants or variables " is 130.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,RecognizeConstant,The length of the statement  "            NumberStyles styles = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint; " is 152.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessMathStatement,The length of the statement  "                    if (resultValue == null) throw new kOSException("Can't use exponents with " + GetFriendlyNameOfItem(c1.Value) + " and " + GetFriendlyNameOfItem(c2.Value)' executionContext); " is 173.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessMathStatement,The length of the statement  "                    if (resultValue == null) throw new kOSException("Can't multiply " + GetFriendlyNameOfItem(c1.Value) + " by " + GetFriendlyNameOfItem(c2.Value)' executionContext); " is 162.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessMathStatement,The length of the statement  "                    if (resultValue == null) throw new kOSException("Can't divide " + GetFriendlyNameOfItem(c1.Value) + " by " + GetFriendlyNameOfItem(c2.Value)' executionContext); " is 160.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessMathStatement,The length of the statement  "                    if (resultValue == null) throw new kOSException("Can't add " + GetFriendlyNameOfItem(c1.Value) + " and " + GetFriendlyNameOfItem(c2.Value)' executionContext); " is 158.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessMathStatement,The length of the statement  "                    if (resultValue == null) throw new kOSException("Can't subtract " + GetFriendlyNameOfItem(c2.Value) + " from " + GetFriendlyNameOfItem(c1.Value)' executionContext); " is 164.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessStructure,The length of the statement  "                    throw new kOSException("Values of type " + GetFriendlyNameOfItem(baseTermValue) + " cannot have suffixes"' executionContext); " is 125.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessComparison,The length of the statement  "                if (resultValue == null) throw new kOSException("Can't compare " + GetFriendlyNameOfItem(c1.Value) + " to " + GetFriendlyNameOfItem(c2.Value) + " using " + c1.Opr' executionContext); " is 182.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessBoolean,The length of the statement  "                if (resultValue == null) throw new kOSException("Can't compare " + GetFriendlyNameOfItem(c1.Value) + " to " + GetFriendlyNameOfItem(c2.Value) + " using " + c1.Opr' executionContext); " is 182.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The length of the statement  "            if (name == "R") { double[] dp = GetParamsAsT<double>(p' 3); return new Direction(new Vector3d(dp[0]' dp[1]' dp[2])' true); } " is 125.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The length of the statement  "            if (name == "Q") { double[] dp = GetParamsAsT<double>(p' 4); return new Direction(new UnityEngine.Quaternion((float)dp[0]' (float)dp[1]' (float)dp[2]' (float)dp[3])); } " is 168.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The length of the statement  "            if (name == "LATLNG") { double[] dp = GetParamsAsT<double>(p' 2); return new GeoCoordinates(executionContext.Vessel' dp[0]' dp[1]); } " is 133.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The length of the statement  "            if (name == "VESSEL") { String[] sp = GetParamsAsT<String>(p' 1); return new VesselTarget(VesselUtils.GetVesselByName(sp[0]' executionContext.Vessel)' executionContext); } " is 171.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The length of the statement  "                if (pCount < 2 || pCount > 3) throw new kOSException("Wrong number of arguments supplied' expected 2 or 3"' executionContext); " is 126.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The length of the statement  "                var q = UnityEngine.Quaternion.LookRotation(VesselUtils.GetNorthVector(executionContext.Vessel)' executionContext.Vessel.upAxis); " is 129.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The length of the statement  "                q *= UnityEngine.Quaternion.Euler(new UnityEngine.Vector3((float)-dp[0]' (float)dp[1]' (float)(dp.Count() > 2 ? dp[2] : 0))); " is 125.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,GetParamAsT,The length of the statement  "            if (typeof(T) == typeof(double)) throw new kOSException("Supplied parameter '" + input.Text + "' is not a number"' executionContext); " is 133.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,GetParamAsT,The length of the statement  "            if (typeof(T) == typeof(String)) throw new kOSException("Supplied parameter '" + input.Text + "' is not a string"' executionContext); " is 133.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,GetParamAsT,The length of the statement  "            if (typeof(T) == typeof(bool)) throw new kOSException("Supplied parameter '" + input.Text + "' is not a boolean"' executionContext); " is 132.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptMultiply,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 * (double)val2; } " is 145.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptDivide,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 / (double)val2; } " is 145.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptAdd,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 + (double)val2; } " is 145.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptSubtract,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 - (double)val2; } " is 145.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptPow,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return Math.Pow((double)val1' (double)val2); } " is 154.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptEq,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 == (double)val2; } " is 146.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptNotEq,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 != (double)val2; } " is 146.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptGT,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 > (double)val2; } " is 145.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptLT,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 < (double)val2; } " is 145.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptGTE,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 >= (double)val2; } " is 146.
Long Statement,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptLTE,The length of the statement  "            if ((val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)) { return (double)val1 <= (double)val2; } " is 146.
Long Statement,kOS,Term,C:\repos\Nivekk_KOS\Preprocessor\ExpressionTerm.cs,processSymbols,The length of the statement  "            Text = Regex.Replace(Text' "HEADING ([ :@A-Za-z0-9\\.\\-\\+\\*/]+) BY ([ :@A-Za-z0-9\\.\\-\\+\\*/]+)"' "HEADING($2'$1)"' RegexOptions.IgnoreCase); " is 146.
Long Statement,kOS,GeoCoordinates,C:\repos\Nivekk_KOS\Structures\GeoCoordinates.cs,GetHeadingFromVessel,The length of the statement  "            var headingQ = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(Quaternion.LookRotation(vector' up)) * Quaternion.LookRotation(north' up)); " is 157.
Long Statement,kOS,kOSInternalDisplay,C:\repos\Nivekk_KOS\InternalDisplay.cs,Start,The length of the statement  "            m.vertices = new Vector3[] { new Vector3(size' -size' 0.01f)' new Vector3(size' size' 0.01f)' new Vector3(-size' size' 0.01f)' new Vector3(-size' -size' 0.01f) }; " is 162.
Long Statement,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The length of the statement  "            Graphics.DrawTexture(new Rect(0' 0' 512' 512)' TermWindow.TerminalImage' new Rect(0.02f' 0.86f' 0.02f' 0.02f)' 0' 0' 0' 0); " is 123.
Long Statement,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The length of the statement  "                    Graphics.DrawTexture(new Rect(x * TermWindow.CHARSIZE' y * TermWindow.CHARSIZE' TermWindow.CHARSIZE' TermWindow.CHARSIZE)' " is 122.
Long Statement,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The length of the statement  "                Graphics.DrawTexture(new Rect(x * TermWindow.CHARSIZE' y * TermWindow.CHARSIZE' TermWindow.CHARSIZE' TermWindow.CHARSIZE)' " is 122.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            //manager.AddSetter("SAS"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.SAS' (bool)val); }); " is 127.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("GEAR"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Gear' (bool)val); }); " is 127.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("LIGHTS"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Light' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("BRAKES"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes' (bool)val); }); " is 131.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("RCS"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.RCS' (bool)val); }); " is 125.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("ABORT"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Abort' (bool)val); }); " is 129.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG1"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom01' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG2"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom02' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG3"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom03' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG4"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom04' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG5"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom05' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG6"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom06' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG7"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom07' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG8"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom08' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG9"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom09' (bool)val); }); " is 130.
Long Statement,kOS,BindingActionGroups,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,AddTo,The length of the statement  "            manager.AddSetter("AG10"' delegate(CPU cpu' object val) { cpu.Vessel.ActionGroups.SetGroup(KSPActionGroup.Custom10' (bool)val); }); " is 131.
Long Statement,kOS,Node,C:\repos\Nivekk_KOS\Structures\Node.cs,SetSuffix,The length of the statement  "            if (suffixName == "BURNVECTOR" || suffixName == "ETA" || suffixName == "DELTAV") throw new kOSReadOnlyException(suffixName); " is 124.
Long Statement,kOS,SteeringHelper,C:\repos\Nivekk_KOS\SteeringHelper.cs,GetThrustTorque,The length of the statement  "                        return Math.Sin(Math.Abs(((LiquidEngine)p).gimbalRange) * Math.PI / 180) * ((LiquidEngine)p).maxThrust * (p.Rigidbody.worldCenterOfMass - CoM).magnitude; " is 153.
Long Statement,kOS,SteeringHelper,C:\repos\Nivekk_KOS\SteeringHelper.cs,GetThrustTorque,The length of the statement  "                        return Math.Sin(Math.Abs(((LiquidFuelEngine)p).gimbalRange) * Math.PI / 180) * ((LiquidFuelEngine)p).maxThrust * (p.Rigidbody.worldCenterOfMass - CoM).magnitude; " is 161.
Long Statement,kOS,SteeringHelper,C:\repos\Nivekk_KOS\SteeringHelper.cs,GetThrustTorque,The length of the statement  "                        return Math.Sin(Math.Abs(((AtmosphericEngine)p).gimbalRange) * Math.PI / 180) * ((AtmosphericEngine)p).maximumEnginePower * ((AtmosphericEngine)p).totalEfficiency * (p.Rigidbody.worldCenterOfMass - CoM).magnitude; " is 213.
Long Statement,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TryOperation,The length of the statement  "               if (other is double && op == "/") return (double)other / this; // Can't imagine why the heck you'd want to do this but here it is " is 129.
Long Statement,kOS,VesselTarget,C:\repos\Nivekk_KOS\Structures\VesselTarget.cs,GetSuffix,The length of the statement  "            if (suffixName == "AIRSPEED") return (target.orbit.GetVel() - FlightGlobals.currentMainBody.getRFrmVel(target.GetWorldPos3D())).magnitude; //the velocity of the vessel relative to the air); " is 189.
Long Statement,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The length of the statement  "                           "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there."); " is 128.
Long Statement,kOS,Utils,C:\repos\Nivekk_KOS\Preprocessor\Utils.cs,ProspectForResource,The length of the statement  "                        && attachNode.nodeType == AttachNode.NodeType.Stack             //and the attached part is stacked (rather than surface mounted) " is 128.
Long Statement,kOS,Utils,C:\repos\Nivekk_KOS\Preprocessor\Utils.cs,BuildInnerRegex,The length of the statement  "                        output += @"\(" + string.Join("'"' Enumerable.Repeat("([ :@A-Za-z0-9\\.\\-\\+\\*/\"]+)"' paramcount).ToArray()) + @"\)"; " is 120.
Long Statement,kOS,VesselVelocity,C:\repos\Nivekk_KOS\Structures\VesselVelocity.cs,GetSuffix,The length of the statement  "            // I created this one for debugging purposes only' at some point I'll make a function to transform vectors to headings in a more eloquent way " is 141.
Long Statement,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,TryGetResource,The length of the statement  "        PartResourceDefinition resourceDefinition = PartResourceLibrary.Instance.resourceDefinitions.FirstOrDefault(rd => rd.name.Equals(resourceName' StringComparison.OrdinalIgnoreCase)); " is 180.
Long Statement,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,TryGetResource,The length of the statement  "        // Ensure the built-in resource types never produce an error' even if the particular vessel is incapable of carrying them " is 121.
Long Statement,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetDistanceToKerbinSurface,The length of the statement  "        if (body.name.ToUpper() == "KERBIN") return Vector3d.Distance(body.position' vessel.GetWorldPos3D()) - 600000; // Kerbin radius = 600'000 " is 137.
Long Statement,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetHeading,The length of the statement  "      var headingQ = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(vessel.GetTransform().rotation) * Quaternion.LookRotation(north' up)); " is 152.
Long Statement,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetVelocityHeading,The length of the statement  "      var headingQ = Quaternion.Inverse(Quaternion.Inverse(Quaternion.LookRotation(vessel.srf_velocity' up)) * Quaternion.LookRotation(north' up)); " is 141.
Long Statement,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetTargetHeading,The length of the statement  "      var headingQ = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(Quaternion.LookRotation(vector' up)) * Quaternion.LookRotation(north' up)); " is 157.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptMultiply,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptDivide,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptAdd,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptSubtract,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptPow,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptEq,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptNotEq,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptGT,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptLT,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptGTE,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,AttemptLTE,The conditional expression  "(val1 is double || val1 is float || val1 is int) && (val2 is double || val2 is float || val2 is int)"  is complex.
Complex Conditional,kOS,Term,C:\repos\Nivekk_KOS\Preprocessor\ExpressionTerm.cs,processSymbols,The conditional expression  "buffer.Trim() != "" ||                           (SubTerms.Count > 0 && SubTerms.Last().Type != TermTypes.MATH_OPERATOR                           && SubTerms.Last().Type != TermTypes.COMPARISON_OPERATOR)"  is complex.
Complex Conditional,kOS,Core,C:\repos\Nivekk_KOS\Core.cs,InjectModules,The conditional expression  "d.url == "Squad/SPP/Mk2CockpitStandard/part/mk2Cockpit_Standard" ||                      d.url == "Squad/SPP/mk2Cockpit_Inline/part/mk2Cockpit_Inline" ||                      d.url == "Squad/Parts/Command/mk2CockpitStandard/mk2CockpitStandard/mk2Cockpit_Standard" ||                      d.url == "Squad/Parts/Command/mk2CockpitInline/mk2CockpitInline/mk2Cockpit_Inline""  is complex.
Complex Conditional,kOS,Utils,C:\repos\Nivekk_KOS\Preprocessor\Utils.cs,ProspectForResource,The conditional expression  "attachNode.attachedPart != null                                 //if there is a part attached here                                      && attachNode.nodeType == AttachNode.NodeType.Stack             //and the attached part is stacked (rather than surface mounted)                          && (attachNode.attachedPart.fuelCrossFeed                       //and the attached part allows fuel flow                              )                          && !(part.NoCrossFeedNodeKey.Length > 0                       //and this part does not forbid fuel flow                                  && attachNode.id.Contains(part.NoCrossFeedNodeKey))"  is complex.
Virtual Method Call from Constructor,kOS,BindingManager,C:\repos\Nivekk_KOS\Bindings\Binding.cs,BindingManager,The constructor "BindingManager" calls a virtual method "AddTo".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Body,C:\repos\Nivekk_KOS\Structures\BodyTarget.cs,Body,The constructor "Body" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,InterpreterEdit,The constructor "InterpreterEdit" calls a virtual method "GetByName".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,OrbitInfo,C:\repos\Nivekk_KOS\Structures\Orbit.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TerminalButton,C:\repos\Nivekk_KOS\Structures\TerminalButton.cs,TerminalButton,The constructor "TerminalButton" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TerminalButton,C:\repos\Nivekk_KOS\Structures\TerminalButton.cs,TerminalButton,The constructor "TerminalButton" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TimeSpan,The constructor "TimeSpan" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TimeSpan,The constructor "TimeSpan" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TimeSpan,The constructor "TimeSpan" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TimeSpan,The constructor "TimeSpan" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TimeSpan,The constructor "TimeSpan" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TimeSpan,The constructor "TimeSpan" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TimeSpan,The constructor "TimeSpan" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,TimeSpan,The constructor "TimeSpan" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Atmosphere,C:\repos\Nivekk_KOS\Structures\Atmosphere.cs,Atmosphere,The constructor "Atmosphere" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Atmosphere,C:\repos\Nivekk_KOS\Structures\Atmosphere.cs,Atmosphere,The constructor "Atmosphere" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,Atmosphere,C:\repos\Nivekk_KOS\Structures\Atmosphere.cs,Atmosphere,The constructor "Atmosphere" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,VersionInfo,C:\repos\Nivekk_KOS\Structures\VersionInfo.cs,VersionInfo,The constructor "VersionInfo" calls a virtual method "AddSuffix".
Virtual Method Call from Constructor,kOS,VersionInfo,C:\repos\Nivekk_KOS\Structures\VersionInfo.cs,VersionInfo,The constructor "VersionInfo" calls a virtual method "AddSuffix".
Empty Catch Block,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Unlock,The method has an empty catch block.
Empty Catch Block,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,OnGUI,The method has an empty catch block.
Empty Catch Block,kOS,Archive,C:\repos\Nivekk_KOS\Volume.cs,GetFileList,The method has an empty catch block.
Magic Number,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,getLattitude,The following statement contains a magic number: if (retVal > 90) return 90;
Magic Number,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,getLattitude,The following statement contains a magic number: if (retVal > 90) return 90;
Magic Number,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,getLattitude,The following statement contains a magic number: if (retVal < -90) return -90;
Magic Number,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,getLattitude,The following statement contains a magic number: if (retVal < -90) return -90;
Magic Number,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,getLongitude,The following statement contains a magic number: while (retVal > 180) retVal -= 360;
Magic Number,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,getLongitude,The following statement contains a magic number: while (retVal > 180) retVal -= 360;
Magic Number,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,getLongitude,The following statement contains a magic number: while (retVal < -180) retVal += 360;
Magic Number,kOS,BindingsFlightStats,C:\repos\Nivekk_KOS\Bindings\BindingsFlightStats.cs,getLongitude,The following statement contains a magic number: while (retVal < -180) retVal += 360;
Magic Number,kOS,BindingsTerminalSettings,C:\repos\Nivekk_KOS\Bindings\BindingsTerminalSettings.cs,AddTo,The following statement contains a magic number: manager.AddGetter(buttonVarName + "3"' delegate(CPU cpu) { return cpu.ButtonStates[2]; });
Magic Number,kOS,BindingsTerminalSettings,C:\repos\Nivekk_KOS\Bindings\BindingsTerminalSettings.cs,AddTo,The following statement contains a magic number: manager.AddGetter(buttonVarName + "4"' delegate(CPU cpu) { return cpu.ButtonStates[3]; });
Magic Number,kOS,BindingsTerminalSettings,C:\repos\Nivekk_KOS\Bindings\BindingsTerminalSettings.cs,AddTo,The following statement contains a magic number: manager.AddGetter(buttonVarName + "5"' delegate(CPU cpu) { return cpu.ButtonStates[4]; });
Magic Number,kOS,BindingsTerminalSettings,C:\repos\Nivekk_KOS\Bindings\BindingsTerminalSettings.cs,AddTo,The following statement contains a magic number: manager.AddGetter(buttonVarName + "6"' delegate(CPU cpu) { return cpu.ButtonStates[5]; });
Magic Number,kOS,BindingsTerminalSettings,C:\repos\Nivekk_KOS\Bindings\BindingsTerminalSettings.cs,AddTo,The following statement contains a magic number: manager.AddGetter(buttonVarName + "7"' delegate(CPU cpu) { return cpu.ButtonStates[6]; });
Magic Number,kOS,CommandPrintAt,C:\repos\Nivekk_KOS\Commands\CommandBasicIO.cs,Evaluate,The following statement contains a magic number: Expression ex = new Expression(RegexMatch.Groups[2].Value' ParentContext);
Magic Number,kOS,CommandPrintAt,C:\repos\Nivekk_KOS\Commands\CommandBasicIO.cs,Evaluate,The following statement contains a magic number: Expression ey = new Expression(RegexMatch.Groups[3].Value' ParentContext);
Magic Number,kOS,CommandSet,C:\repos\Nivekk_KOS\Commands\CommandBasicIO.cs,Evaluate,The following statement contains a magic number: Expression e = new Expression(RegexMatch.Groups[2].Value' ParentContext);
Magic Number,kOS,CommandRunFile,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: if (RegexMatch.Groups.Count > 1)              {                  String paramString = RegexMatch.Groups[3].Value;                  foreach (String param in Utils.ProcessParams(paramString))                  {                      Expression subEx = new Expression(param' this);                      parameters.Add(subEx);                  }              }
Magic Number,kOS,CommandRename,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: String identifier = RegexMatch.Groups[2].Value.Trim();
Magic Number,kOS,CommandRename,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: String newName = RegexMatch.Groups[3].Value.Trim();
Magic Number,kOS,CommandLog,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: String targetFile = RegexMatch.Groups[2].Value.Trim();
Magic Number,kOS,CommandCopy,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: String volumeName = RegexMatch.Groups[4].Value.Trim();
Magic Number,kOS,CommandCopy,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: String operation = RegexMatch.Groups[2].Value.Trim().ToUpper();
Magic Number,kOS,CommandDelete,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: String volumeName = RegexMatch.Groups[3].Value.Trim();
Magic Number,kOS,CommandList,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: if (listType == "FILES" || String.IsNullOrEmpty(listType))              {                  StdOut("");                    StdOut("Volume " + GetVolumeBestIdentifier(SelectedVolume));                  StdOut("-------------------------------------");                                    foreach (FileInfo fileInfo in SelectedVolume.GetFileList())                  {                      StdOut(fileInfo.Name.PadRight(30' ' ') + fileInfo.Size.ToString());                  }                                    int freeSpace = SelectedVolume.GetFreeSpace();                  StdOut("Free space remaining: " + (freeSpace > -1 ? freeSpace.ToString() : " infinite"));                    StdOut("");                    State = ExecutionState.DONE;                  return;              }              else if (listType == "VOLUMES")              {                  StdOut("");                  StdOut("ID    Name                    Size");                  StdOut("-------------------------------------");                    int i = 0;                    foreach (Volume volume in Volumes)                  {                      String id = i.ToString();                      if (volume == SelectedVolume) id = "*" + id;                        String line = id.PadLeft(2).PadRight(6' ' ');                      line += volume.Name.PadRight(24' ' ');                        String size = volume.CheckRange() ? (volume.Capacity > -1 ? volume.Capacity.ToString() : "Inf") : "Disc";                      line += size;                        StdOut(line);                        i++;                  }                    StdOut("");                    State = ExecutionState.DONE;                  return;              }
Magic Number,kOS,CommandList,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: if (listType == "FILES" || String.IsNullOrEmpty(listType))              {                  StdOut("");                    StdOut("Volume " + GetVolumeBestIdentifier(SelectedVolume));                  StdOut("-------------------------------------");                                    foreach (FileInfo fileInfo in SelectedVolume.GetFileList())                  {                      StdOut(fileInfo.Name.PadRight(30' ' ') + fileInfo.Size.ToString());                  }                                    int freeSpace = SelectedVolume.GetFreeSpace();                  StdOut("Free space remaining: " + (freeSpace > -1 ? freeSpace.ToString() : " infinite"));                    StdOut("");                    State = ExecutionState.DONE;                  return;              }              else if (listType == "VOLUMES")              {                  StdOut("");                  StdOut("ID    Name                    Size");                  StdOut("-------------------------------------");                    int i = 0;                    foreach (Volume volume in Volumes)                  {                      String id = i.ToString();                      if (volume == SelectedVolume) id = "*" + id;                        String line = id.PadLeft(2).PadRight(6' ' ');                      line += volume.Name.PadRight(24' ' ');                        String size = volume.CheckRange() ? (volume.Capacity > -1 ? volume.Capacity.ToString() : "Inf") : "Disc";                      line += size;                        StdOut(line);                        i++;                  }                    StdOut("");                    State = ExecutionState.DONE;                  return;              }
Magic Number,kOS,CommandList,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: if (listType == "FILES" || String.IsNullOrEmpty(listType))              {                  StdOut("");                    StdOut("Volume " + GetVolumeBestIdentifier(SelectedVolume));                  StdOut("-------------------------------------");                                    foreach (FileInfo fileInfo in SelectedVolume.GetFileList())                  {                      StdOut(fileInfo.Name.PadRight(30' ' ') + fileInfo.Size.ToString());                  }                                    int freeSpace = SelectedVolume.GetFreeSpace();                  StdOut("Free space remaining: " + (freeSpace > -1 ? freeSpace.ToString() : " infinite"));                    StdOut("");                    State = ExecutionState.DONE;                  return;              }              else if (listType == "VOLUMES")              {                  StdOut("");                  StdOut("ID    Name                    Size");                  StdOut("-------------------------------------");                    int i = 0;                    foreach (Volume volume in Volumes)                  {                      String id = i.ToString();                      if (volume == SelectedVolume) id = "*" + id;                        String line = id.PadLeft(2).PadRight(6' ' ');                      line += volume.Name.PadRight(24' ' ');                        String size = volume.CheckRange() ? (volume.Capacity > -1 ? volume.Capacity.ToString() : "Inf") : "Disc";                      line += size;                        StdOut(line);                        i++;                  }                    StdOut("");                    State = ExecutionState.DONE;                  return;              }
Magic Number,kOS,CommandList,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following statement contains a magic number: if (listType == "FILES" || String.IsNullOrEmpty(listType))              {                  StdOut("");                    StdOut("Volume " + GetVolumeBestIdentifier(SelectedVolume));                  StdOut("-------------------------------------");                                    foreach (FileInfo fileInfo in SelectedVolume.GetFileList())                  {                      StdOut(fileInfo.Name.PadRight(30' ' ') + fileInfo.Size.ToString());                  }                                    int freeSpace = SelectedVolume.GetFreeSpace();                  StdOut("Free space remaining: " + (freeSpace > -1 ? freeSpace.ToString() : " infinite"));                    StdOut("");                    State = ExecutionState.DONE;                  return;              }              else if (listType == "VOLUMES")              {                  StdOut("");                  StdOut("ID    Name                    Size");                  StdOut("-------------------------------------");                    int i = 0;                    foreach (Volume volume in Volumes)                  {                      String id = i.ToString();                      if (volume == SelectedVolume) id = "*" + id;                        String line = id.PadLeft(2).PadRight(6' ' ');                      line += volume.Name.PadRight(24' ' ');                        String size = volume.CheckRange() ? (volume.Capacity > -1 ? volume.Capacity.ToString() : "Inf") : "Disc";                      line += size;                        StdOut(line);                        i++;                  }                    StdOut("");                    State = ExecutionState.DONE;                  return;              }
Magic Number,kOS,CommandIf,C:\repos\Nivekk_KOS\Commands\CommandFlowControl.cs,Evaluate,The following statement contains a magic number: int numLinesChild = Utils.NewLineCount(Input.Substring(0' RegexMatch.Groups[2].Index));
Magic Number,kOS,CommandIf,C:\repos\Nivekk_KOS\Commands\CommandFlowControl.cs,Evaluate,The following statement contains a magic number: targetCommand = Command.Get(RegexMatch.Groups[2].Value' this' Line + numLinesChild);
Magic Number,kOS,CommandUntilLoop,C:\repos\Nivekk_KOS\Commands\CommandFlowControl.cs,Evaluate,The following statement contains a magic number: int numLinesChild = Utils.NewLineCount(Input.Substring(0' RegexMatch.Groups[2].Index));
Magic Number,kOS,CommandUntilLoop,C:\repos\Nivekk_KOS\Commands\CommandFlowControl.cs,Evaluate,The following statement contains a magic number: targetCommand = Command.Get(RegexMatch.Groups[2].Value' this' Line + numLinesChild);
Magic Number,kOS,CommandWait,C:\repos\Nivekk_KOS\Commands\CommandTemporal.cs,Evaluate,The following statement contains a magic number: Expression e = new Expression(RegexMatch.Groups[2].Value' ParentContext);
Magic Number,kOS,CommandOnEvent,C:\repos\Nivekk_KOS\Commands\CommandTemporal.cs,Evaluate,The following statement contains a magic number: targetCommand = Command.Get(RegexMatch.Groups[2].Value' ParentContext);
Magic Number,kOS,CommandLock,C:\repos\Nivekk_KOS\Commands\CommandTemporal.cs,Evaluate,The following statement contains a magic number: Expression expression = new Expression(RegexMatch.Groups[2].Value' ParentContext);
Magic Number,kOS,CommandWhen,C:\repos\Nivekk_KOS\Commands\CommandTemporal.cs,Evaluate,The following statement contains a magic number: targetCommand = Command.Get(RegexMatch.Groups[2].Value' ParentContext);
Magic Number,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The following statement contains a magic number: switch (RegexMatch.Groups[1].Value.ToUpper())              {                  case "BODIES":                      StdOut("");                      StdOut("Name           Distance");                      StdOut("-------------------------------------");                      foreach (var body in FlightGlobals.fetch.bodies)                      {                          StdOut(body.bodyName.PadLeft(14) + " " + Vector3d.Distance(body.position' Vessel.GetWorldPos3D()));                      }                      StdOut("");                        break;                                      case "TARGETS":                      StdOut("");                      StdOut("Vessel Name              Distance");                      StdOut("-------------------------------------");                        double commRange = VesselUtils.GetCommRange(Vessel);                        foreach (Vessel vessel in FlightGlobals.Vessels)                      {                          if (vessel != Vessel)                          {                              var vT = new VesselTarget(vessel' this);                              if (vT.IsInRange(commRange))                              {                                  StdOut(vT.target.vesselName.PadRight(24) + " " + vT.GetDistance().ToString("0.0").PadLeft(8));                              }                          }                      }                        StdOut("");                        break;                    case "RESOURCES":                      StdOut("");                      StdOut("Stage      Resource Name               Amount");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          String stageStr = part.inverseStage.ToString();                            foreach (PartResource resource in part.Resources)                          {                              StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8));                          }                      }                      break;                    case "PARTS":                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          StdOut(part.partInfo.name);                      }                        break;                    case "ENGINES":                      StdOut("------------------------------------------------");                        foreach (Part part in VesselUtils.GetListOfActivatedEngines(Vessel))                      {                          foreach (PartModule module in part.Modules)                          {                              if (module is ModuleEngines)                              {                                  var engineMod = (ModuleEngines)module;                                                                    StdOut(part.inverseStage.ToString() + " " + engineMod.moduleName);                              }                          }                      }                        break;                    case "SENSORS":                      StdOut("");                      StdOut("Part Name                             Sensor Type");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          foreach (PartModule module in part.Modules)                          {                              ModuleEnviroSensor sensor = module as ModuleEnviroSensor;                              if (sensor != null)                              {                                  if (part.partInfo.name.Length > 37)                                      StdOut(part.partInfo.title.PadRight(34) + "... " + sensor.sensorType);                                  else                                      StdOut(part.partInfo.title.PadRight(37) + " " + sensor.sensorType);                              }                          }                      }                        break;              }
Magic Number,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The following statement contains a magic number: switch (RegexMatch.Groups[1].Value.ToUpper())              {                  case "BODIES":                      StdOut("");                      StdOut("Name           Distance");                      StdOut("-------------------------------------");                      foreach (var body in FlightGlobals.fetch.bodies)                      {                          StdOut(body.bodyName.PadLeft(14) + " " + Vector3d.Distance(body.position' Vessel.GetWorldPos3D()));                      }                      StdOut("");                        break;                                      case "TARGETS":                      StdOut("");                      StdOut("Vessel Name              Distance");                      StdOut("-------------------------------------");                        double commRange = VesselUtils.GetCommRange(Vessel);                        foreach (Vessel vessel in FlightGlobals.Vessels)                      {                          if (vessel != Vessel)                          {                              var vT = new VesselTarget(vessel' this);                              if (vT.IsInRange(commRange))                              {                                  StdOut(vT.target.vesselName.PadRight(24) + " " + vT.GetDistance().ToString("0.0").PadLeft(8));                              }                          }                      }                        StdOut("");                        break;                    case "RESOURCES":                      StdOut("");                      StdOut("Stage      Resource Name               Amount");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          String stageStr = part.inverseStage.ToString();                            foreach (PartResource resource in part.Resources)                          {                              StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8));                          }                      }                      break;                    case "PARTS":                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          StdOut(part.partInfo.name);                      }                        break;                    case "ENGINES":                      StdOut("------------------------------------------------");                        foreach (Part part in VesselUtils.GetListOfActivatedEngines(Vessel))                      {                          foreach (PartModule module in part.Modules)                          {                              if (module is ModuleEngines)                              {                                  var engineMod = (ModuleEngines)module;                                                                    StdOut(part.inverseStage.ToString() + " " + engineMod.moduleName);                              }                          }                      }                        break;                    case "SENSORS":                      StdOut("");                      StdOut("Part Name                             Sensor Type");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          foreach (PartModule module in part.Modules)                          {                              ModuleEnviroSensor sensor = module as ModuleEnviroSensor;                              if (sensor != null)                              {                                  if (part.partInfo.name.Length > 37)                                      StdOut(part.partInfo.title.PadRight(34) + "... " + sensor.sensorType);                                  else                                      StdOut(part.partInfo.title.PadRight(37) + " " + sensor.sensorType);                              }                          }                      }                        break;              }
Magic Number,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The following statement contains a magic number: switch (RegexMatch.Groups[1].Value.ToUpper())              {                  case "BODIES":                      StdOut("");                      StdOut("Name           Distance");                      StdOut("-------------------------------------");                      foreach (var body in FlightGlobals.fetch.bodies)                      {                          StdOut(body.bodyName.PadLeft(14) + " " + Vector3d.Distance(body.position' Vessel.GetWorldPos3D()));                      }                      StdOut("");                        break;                                      case "TARGETS":                      StdOut("");                      StdOut("Vessel Name              Distance");                      StdOut("-------------------------------------");                        double commRange = VesselUtils.GetCommRange(Vessel);                        foreach (Vessel vessel in FlightGlobals.Vessels)                      {                          if (vessel != Vessel)                          {                              var vT = new VesselTarget(vessel' this);                              if (vT.IsInRange(commRange))                              {                                  StdOut(vT.target.vesselName.PadRight(24) + " " + vT.GetDistance().ToString("0.0").PadLeft(8));                              }                          }                      }                        StdOut("");                        break;                    case "RESOURCES":                      StdOut("");                      StdOut("Stage      Resource Name               Amount");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          String stageStr = part.inverseStage.ToString();                            foreach (PartResource resource in part.Resources)                          {                              StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8));                          }                      }                      break;                    case "PARTS":                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          StdOut(part.partInfo.name);                      }                        break;                    case "ENGINES":                      StdOut("------------------------------------------------");                        foreach (Part part in VesselUtils.GetListOfActivatedEngines(Vessel))                      {                          foreach (PartModule module in part.Modules)                          {                              if (module is ModuleEngines)                              {                                  var engineMod = (ModuleEngines)module;                                                                    StdOut(part.inverseStage.ToString() + " " + engineMod.moduleName);                              }                          }                      }                        break;                    case "SENSORS":                      StdOut("");                      StdOut("Part Name                             Sensor Type");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          foreach (PartModule module in part.Modules)                          {                              ModuleEnviroSensor sensor = module as ModuleEnviroSensor;                              if (sensor != null)                              {                                  if (part.partInfo.name.Length > 37)                                      StdOut(part.partInfo.title.PadRight(34) + "... " + sensor.sensorType);                                  else                                      StdOut(part.partInfo.title.PadRight(37) + " " + sensor.sensorType);                              }                          }                      }                        break;              }
Magic Number,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The following statement contains a magic number: switch (RegexMatch.Groups[1].Value.ToUpper())              {                  case "BODIES":                      StdOut("");                      StdOut("Name           Distance");                      StdOut("-------------------------------------");                      foreach (var body in FlightGlobals.fetch.bodies)                      {                          StdOut(body.bodyName.PadLeft(14) + " " + Vector3d.Distance(body.position' Vessel.GetWorldPos3D()));                      }                      StdOut("");                        break;                                      case "TARGETS":                      StdOut("");                      StdOut("Vessel Name              Distance");                      StdOut("-------------------------------------");                        double commRange = VesselUtils.GetCommRange(Vessel);                        foreach (Vessel vessel in FlightGlobals.Vessels)                      {                          if (vessel != Vessel)                          {                              var vT = new VesselTarget(vessel' this);                              if (vT.IsInRange(commRange))                              {                                  StdOut(vT.target.vesselName.PadRight(24) + " " + vT.GetDistance().ToString("0.0").PadLeft(8));                              }                          }                      }                        StdOut("");                        break;                    case "RESOURCES":                      StdOut("");                      StdOut("Stage      Resource Name               Amount");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          String stageStr = part.inverseStage.ToString();                            foreach (PartResource resource in part.Resources)                          {                              StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8));                          }                      }                      break;                    case "PARTS":                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          StdOut(part.partInfo.name);                      }                        break;                    case "ENGINES":                      StdOut("------------------------------------------------");                        foreach (Part part in VesselUtils.GetListOfActivatedEngines(Vessel))                      {                          foreach (PartModule module in part.Modules)                          {                              if (module is ModuleEngines)                              {                                  var engineMod = (ModuleEngines)module;                                                                    StdOut(part.inverseStage.ToString() + " " + engineMod.moduleName);                              }                          }                      }                        break;                    case "SENSORS":                      StdOut("");                      StdOut("Part Name                             Sensor Type");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          foreach (PartModule module in part.Modules)                          {                              ModuleEnviroSensor sensor = module as ModuleEnviroSensor;                              if (sensor != null)                              {                                  if (part.partInfo.name.Length > 37)                                      StdOut(part.partInfo.title.PadRight(34) + "... " + sensor.sensorType);                                  else                                      StdOut(part.partInfo.title.PadRight(37) + " " + sensor.sensorType);                              }                          }                      }                        break;              }
Magic Number,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The following statement contains a magic number: switch (RegexMatch.Groups[1].Value.ToUpper())              {                  case "BODIES":                      StdOut("");                      StdOut("Name           Distance");                      StdOut("-------------------------------------");                      foreach (var body in FlightGlobals.fetch.bodies)                      {                          StdOut(body.bodyName.PadLeft(14) + " " + Vector3d.Distance(body.position' Vessel.GetWorldPos3D()));                      }                      StdOut("");                        break;                                      case "TARGETS":                      StdOut("");                      StdOut("Vessel Name              Distance");                      StdOut("-------------------------------------");                        double commRange = VesselUtils.GetCommRange(Vessel);                        foreach (Vessel vessel in FlightGlobals.Vessels)                      {                          if (vessel != Vessel)                          {                              var vT = new VesselTarget(vessel' this);                              if (vT.IsInRange(commRange))                              {                                  StdOut(vT.target.vesselName.PadRight(24) + " " + vT.GetDistance().ToString("0.0").PadLeft(8));                              }                          }                      }                        StdOut("");                        break;                    case "RESOURCES":                      StdOut("");                      StdOut("Stage      Resource Name               Amount");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          String stageStr = part.inverseStage.ToString();                            foreach (PartResource resource in part.Resources)                          {                              StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8));                          }                      }                      break;                    case "PARTS":                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          StdOut(part.partInfo.name);                      }                        break;                    case "ENGINES":                      StdOut("------------------------------------------------");                        foreach (Part part in VesselUtils.GetListOfActivatedEngines(Vessel))                      {                          foreach (PartModule module in part.Modules)                          {                              if (module is ModuleEngines)                              {                                  var engineMod = (ModuleEngines)module;                                                                    StdOut(part.inverseStage.ToString() + " " + engineMod.moduleName);                              }                          }                      }                        break;                    case "SENSORS":                      StdOut("");                      StdOut("Part Name                             Sensor Type");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          foreach (PartModule module in part.Modules)                          {                              ModuleEnviroSensor sensor = module as ModuleEnviroSensor;                              if (sensor != null)                              {                                  if (part.partInfo.name.Length > 37)                                      StdOut(part.partInfo.title.PadRight(34) + "... " + sensor.sensorType);                                  else                                      StdOut(part.partInfo.title.PadRight(37) + " " + sensor.sensorType);                              }                          }                      }                        break;              }
Magic Number,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The following statement contains a magic number: switch (RegexMatch.Groups[1].Value.ToUpper())              {                  case "BODIES":                      StdOut("");                      StdOut("Name           Distance");                      StdOut("-------------------------------------");                      foreach (var body in FlightGlobals.fetch.bodies)                      {                          StdOut(body.bodyName.PadLeft(14) + " " + Vector3d.Distance(body.position' Vessel.GetWorldPos3D()));                      }                      StdOut("");                        break;                                      case "TARGETS":                      StdOut("");                      StdOut("Vessel Name              Distance");                      StdOut("-------------------------------------");                        double commRange = VesselUtils.GetCommRange(Vessel);                        foreach (Vessel vessel in FlightGlobals.Vessels)                      {                          if (vessel != Vessel)                          {                              var vT = new VesselTarget(vessel' this);                              if (vT.IsInRange(commRange))                              {                                  StdOut(vT.target.vesselName.PadRight(24) + " " + vT.GetDistance().ToString("0.0").PadLeft(8));                              }                          }                      }                        StdOut("");                        break;                    case "RESOURCES":                      StdOut("");                      StdOut("Stage      Resource Name               Amount");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          String stageStr = part.inverseStage.ToString();                            foreach (PartResource resource in part.Resources)                          {                              StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8));                          }                      }                      break;                    case "PARTS":                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          StdOut(part.partInfo.name);                      }                        break;                    case "ENGINES":                      StdOut("------------------------------------------------");                        foreach (Part part in VesselUtils.GetListOfActivatedEngines(Vessel))                      {                          foreach (PartModule module in part.Modules)                          {                              if (module is ModuleEngines)                              {                                  var engineMod = (ModuleEngines)module;                                                                    StdOut(part.inverseStage.ToString() + " " + engineMod.moduleName);                              }                          }                      }                        break;                    case "SENSORS":                      StdOut("");                      StdOut("Part Name                             Sensor Type");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          foreach (PartModule module in part.Modules)                          {                              ModuleEnviroSensor sensor = module as ModuleEnviroSensor;                              if (sensor != null)                              {                                  if (part.partInfo.name.Length > 37)                                      StdOut(part.partInfo.title.PadRight(34) + "... " + sensor.sensorType);                                  else                                      StdOut(part.partInfo.title.PadRight(37) + " " + sensor.sensorType);                              }                          }                      }                        break;              }
Magic Number,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The following statement contains a magic number: switch (RegexMatch.Groups[1].Value.ToUpper())              {                  case "BODIES":                      StdOut("");                      StdOut("Name           Distance");                      StdOut("-------------------------------------");                      foreach (var body in FlightGlobals.fetch.bodies)                      {                          StdOut(body.bodyName.PadLeft(14) + " " + Vector3d.Distance(body.position' Vessel.GetWorldPos3D()));                      }                      StdOut("");                        break;                                      case "TARGETS":                      StdOut("");                      StdOut("Vessel Name              Distance");                      StdOut("-------------------------------------");                        double commRange = VesselUtils.GetCommRange(Vessel);                        foreach (Vessel vessel in FlightGlobals.Vessels)                      {                          if (vessel != Vessel)                          {                              var vT = new VesselTarget(vessel' this);                              if (vT.IsInRange(commRange))                              {                                  StdOut(vT.target.vesselName.PadRight(24) + " " + vT.GetDistance().ToString("0.0").PadLeft(8));                              }                          }                      }                        StdOut("");                        break;                    case "RESOURCES":                      StdOut("");                      StdOut("Stage      Resource Name               Amount");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          String stageStr = part.inverseStage.ToString();                            foreach (PartResource resource in part.Resources)                          {                              StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8));                          }                      }                      break;                    case "PARTS":                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          StdOut(part.partInfo.name);                      }                        break;                    case "ENGINES":                      StdOut("------------------------------------------------");                        foreach (Part part in VesselUtils.GetListOfActivatedEngines(Vessel))                      {                          foreach (PartModule module in part.Modules)                          {                              if (module is ModuleEngines)                              {                                  var engineMod = (ModuleEngines)module;                                                                    StdOut(part.inverseStage.ToString() + " " + engineMod.moduleName);                              }                          }                      }                        break;                    case "SENSORS":                      StdOut("");                      StdOut("Part Name                             Sensor Type");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          foreach (PartModule module in part.Modules)                          {                              ModuleEnviroSensor sensor = module as ModuleEnviroSensor;                              if (sensor != null)                              {                                  if (part.partInfo.name.Length > 37)                                      StdOut(part.partInfo.title.PadRight(34) + "... " + sensor.sensorType);                                  else                                      StdOut(part.partInfo.title.PadRight(37) + " " + sensor.sensorType);                              }                          }                      }                        break;              }
Magic Number,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The following statement contains a magic number: switch (RegexMatch.Groups[1].Value.ToUpper())              {                  case "BODIES":                      StdOut("");                      StdOut("Name           Distance");                      StdOut("-------------------------------------");                      foreach (var body in FlightGlobals.fetch.bodies)                      {                          StdOut(body.bodyName.PadLeft(14) + " " + Vector3d.Distance(body.position' Vessel.GetWorldPos3D()));                      }                      StdOut("");                        break;                                      case "TARGETS":                      StdOut("");                      StdOut("Vessel Name              Distance");                      StdOut("-------------------------------------");                        double commRange = VesselUtils.GetCommRange(Vessel);                        foreach (Vessel vessel in FlightGlobals.Vessels)                      {                          if (vessel != Vessel)                          {                              var vT = new VesselTarget(vessel' this);                              if (vT.IsInRange(commRange))                              {                                  StdOut(vT.target.vesselName.PadRight(24) + " " + vT.GetDistance().ToString("0.0").PadLeft(8));                              }                          }                      }                        StdOut("");                        break;                    case "RESOURCES":                      StdOut("");                      StdOut("Stage      Resource Name               Amount");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          String stageStr = part.inverseStage.ToString();                            foreach (PartResource resource in part.Resources)                          {                              StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8));                          }                      }                      break;                    case "PARTS":                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          StdOut(part.partInfo.name);                      }                        break;                    case "ENGINES":                      StdOut("------------------------------------------------");                        foreach (Part part in VesselUtils.GetListOfActivatedEngines(Vessel))                      {                          foreach (PartModule module in part.Modules)                          {                              if (module is ModuleEngines)                              {                                  var engineMod = (ModuleEngines)module;                                                                    StdOut(part.inverseStage.ToString() + " " + engineMod.moduleName);                              }                          }                      }                        break;                    case "SENSORS":                      StdOut("");                      StdOut("Part Name                             Sensor Type");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          foreach (PartModule module in part.Modules)                          {                              ModuleEnviroSensor sensor = module as ModuleEnviroSensor;                              if (sensor != null)                              {                                  if (part.partInfo.name.Length > 37)                                      StdOut(part.partInfo.title.PadRight(34) + "... " + sensor.sensorType);                                  else                                      StdOut(part.partInfo.title.PadRight(37) + " " + sensor.sensorType);                              }                          }                      }                        break;              }
Magic Number,kOS,ContextRunProgram,C:\repos\Nivekk_KOS\ContextRunProgram.cs,stripComment,The following statement contains a magic number: for (var i=0; i<line.Length; i++)              {                  if (line[i] == '\"')                  {                      i = Utils.FindEndOfString(line' i + 1);                      if (i == -1) break;                  }                  else if (i < line.Length - 1 && line.Substring(i' 2) == "//")                  {                      return line.Substring(0' i);                  }              }
Magic Number,kOS,Direction,C:\repos\Nivekk_KOS\Structures\Direction.cs,ToString,The following statement contains a magic number: return "R(" + Math.Round(euler.x' 3) + "'" + Math.Round(euler.y' 3) + "'" + Math.Round(euler.z' 3) + ")";
Magic Number,kOS,Direction,C:\repos\Nivekk_KOS\Structures\Direction.cs,ToString,The following statement contains a magic number: return "R(" + Math.Round(euler.x' 3) + "'" + Math.Round(euler.y' 3) + "'" + Math.Round(euler.z' 3) + ")";
Magic Number,kOS,Direction,C:\repos\Nivekk_KOS\Structures\Direction.cs,ToString,The following statement contains a magic number: return "R(" + Math.Round(euler.x' 3) + "'" + Math.Round(euler.y' 3) + "'" + Math.Round(euler.z' 3) + ")";
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,RecognizeConstant,The following statement contains a magic number: if (text.StartsWith("\""))              {                  var end = Utils.FindEndOfString(text' 1);                  if (end == text.Length - 1) return text.Substring(1' text.Length - 2);              }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,ReplaceChunkPairAt,The following statement contains a magic number: chunks.RemoveRange(index' 2);
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessMathStatement,The following statement contains a magic number: for (int i = 0; i < input.SubTerms.Count; i += 2)              {                  object termValue = GetValueOfTerm(input.SubTerms[i]);                    if (i + 1 < input.SubTerms.Count)                  {                      Term opTerm = input.SubTerms[i + 1];                      if (opTerm.Type == Term.TermTypes.MATH_OPERATOR)                      {                          chunks.Add(new StatementChunk(termValue' opTerm.Text));                      }                      else                      {                          throw new kOSException("Expression error processing statement '" + input.ToString() + "'"' executionContext);                      }                  }                  else                  {                      chunks.Add(new StatementChunk(termValue' ""));                  }              }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessComparison,The following statement contains a magic number: for (int i = 0; i < input.SubTerms.Count; i += 2)              {                  object termValue = GetValueOfTerm(input.SubTerms[i]);                    if (i + 1 < input.SubTerms.Count)                  {                      Term opTerm = input.SubTerms[i + 1];                      if (opTerm.Type == Term.TermTypes.COMPARISON_OPERATOR)                      {                          chunks.Add(new StatementChunk(termValue' opTerm.Text));                      }                      else                      {                          throw new kOSException("Expression error processing comparison '" + input.ToString() + "'"' executionContext);                      }                  }                  else                  {                      chunks.Add(new StatementChunk(termValue' ""));                  }              }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryProcessBoolean,The following statement contains a magic number: for (int i = 0; i < input.SubTerms.Count; i += 2)              {                  object termValue = GetValueOfTerm(input.SubTerms[i]);                    if (i + 1 < input.SubTerms.Count)                  {                      Term opTerm = input.SubTerms[i + 1];                      if (opTerm.Type == Term.TermTypes.BOOLEAN_OPERATOR)                      {                          chunks.Add(new StatementChunk(termValue' opTerm.Text));                      }                      else                      {                          throw new kOSException("Expression error processing boolean operation '" + input.ToString() + "'"' executionContext);                      }                  }                  else                  {                      chunks.Add(new StatementChunk(termValue' ""));                  }              }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "SIN") { double[] dp = GetParamsAsT<double>(p' 1); return Math.Sin(dp[0] * (Math.PI / 180)); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "COS") { double[] dp = GetParamsAsT<double>(p' 1); return Math.Cos(dp[0] * (Math.PI / 180)); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "TAN") { double[] dp = GetParamsAsT<double>(p' 1); return Math.Tan(dp[0] * (Math.PI / 180)); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "ARCSIN") { double[] dp = GetParamsAsT<double>(p' 1); return Math.Asin(dp[0]) * (180 / Math.PI); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "ARCCOS") { double[] dp = GetParamsAsT<double>(p' 1); return Math.Acos(dp[0]) * (180 / Math.PI); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "ARCTAN") { double[] dp = GetParamsAsT<double>(p' 1); return Math.Atan(dp[0]) * (180 / Math.PI); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "ARCTAN2") { double[] dp = GetParamsAsT<double>(p' 2); return Math.Atan2(dp[0]' dp[1]) * (180 / Math.PI); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "ARCTAN2") { double[] dp = GetParamsAsT<double>(p' 2); return Math.Atan2(dp[0]' dp[1]) * (180 / Math.PI); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "MOD") { double[] dp = GetParamsAsT<double>(p' 2); return dp[0] % dp[1]; }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "ROUND")              {                  if (p.Count() == 1)                  {                      double[] dp = GetParamsAsT<double>(p' 1);                      return Math.Round(dp[0]);                  }                  else if (p.Count() == 2)                  {                      double[] dp = GetParamsAsT<double>(p' 2);                      return Math.Round(dp[0]' (int)dp[1]);                  }              }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryMathFunction,The following statement contains a magic number: if (name == "ROUND")              {                  if (p.Count() == 1)                  {                      double[] dp = GetParamsAsT<double>(p' 1);                      return Math.Round(dp[0]);                  }                  else if (p.Count() == 2)                  {                      double[] dp = GetParamsAsT<double>(p' 2);                      return Math.Round(dp[0]' (int)dp[1]);                  }              }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "NODE") { double[] dp = GetParamsAsT<double>(p' 4); return new Node(dp[0]' dp[1]' dp[2]' dp[3]); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "NODE") { double[] dp = GetParamsAsT<double>(p' 4); return new Node(dp[0]' dp[1]' dp[2]' dp[3]); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "NODE") { double[] dp = GetParamsAsT<double>(p' 4); return new Node(dp[0]' dp[1]' dp[2]' dp[3]); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "V") { double[] dp = GetParamsAsT<double>(p' 3); return new Vector(dp[0]' dp[1]' dp[2]); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "V") { double[] dp = GetParamsAsT<double>(p' 3); return new Vector(dp[0]' dp[1]' dp[2]); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "R") { double[] dp = GetParamsAsT<double>(p' 3); return new Direction(new Vector3d(dp[0]' dp[1]' dp[2])' true); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "R") { double[] dp = GetParamsAsT<double>(p' 3); return new Direction(new Vector3d(dp[0]' dp[1]' dp[2])' true); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "Q") { double[] dp = GetParamsAsT<double>(p' 4); return new Direction(new UnityEngine.Quaternion((float)dp[0]' (float)dp[1]' (float)dp[2]' (float)dp[3])); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "Q") { double[] dp = GetParamsAsT<double>(p' 4); return new Direction(new UnityEngine.Quaternion((float)dp[0]' (float)dp[1]' (float)dp[2]' (float)dp[3])); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "Q") { double[] dp = GetParamsAsT<double>(p' 4); return new Direction(new UnityEngine.Quaternion((float)dp[0]' (float)dp[1]' (float)dp[2]' (float)dp[3])); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "LATLNG") { double[] dp = GetParamsAsT<double>(p' 2); return new GeoCoordinates(executionContext.Vessel' dp[0]' dp[1]); }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "HEADING")              {                  int pCount = p.Count();                  if (pCount < 2 || pCount > 3) throw new kOSException("Wrong number of arguments supplied' expected 2 or 3"' executionContext);                    double[] dp = GetParamsAsT<double>(p' pCount);                  var q = UnityEngine.Quaternion.LookRotation(VesselUtils.GetNorthVector(executionContext.Vessel)' executionContext.Vessel.upAxis);                  q *= UnityEngine.Quaternion.Euler(new UnityEngine.Vector3((float)-dp[0]' (float)dp[1]' (float)(dp.Count() > 2 ? dp[2] : 0)));                    return new Direction(q);              }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "HEADING")              {                  int pCount = p.Count();                  if (pCount < 2 || pCount > 3) throw new kOSException("Wrong number of arguments supplied' expected 2 or 3"' executionContext);                    double[] dp = GetParamsAsT<double>(p' pCount);                  var q = UnityEngine.Quaternion.LookRotation(VesselUtils.GetNorthVector(executionContext.Vessel)' executionContext.Vessel.upAxis);                  q *= UnityEngine.Quaternion.Euler(new UnityEngine.Vector3((float)-dp[0]' (float)dp[1]' (float)(dp.Count() > 2 ? dp[2] : 0)));                    return new Direction(q);              }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "HEADING")              {                  int pCount = p.Count();                  if (pCount < 2 || pCount > 3) throw new kOSException("Wrong number of arguments supplied' expected 2 or 3"' executionContext);                    double[] dp = GetParamsAsT<double>(p' pCount);                  var q = UnityEngine.Quaternion.LookRotation(VesselUtils.GetNorthVector(executionContext.Vessel)' executionContext.Vessel.upAxis);                  q *= UnityEngine.Quaternion.Euler(new UnityEngine.Vector3((float)-dp[0]' (float)dp[1]' (float)(dp.Count() > 2 ? dp[2] : 0)));                    return new Direction(q);              }
Magic Number,kOS,Expression,C:\repos\Nivekk_KOS\Preprocessor\Expression.cs,TryCreateSV,The following statement contains a magic number: if (name == "HEADING")              {                  int pCount = p.Count();                  if (pCount < 2 || pCount > 3) throw new kOSException("Wrong number of arguments supplied' expected 2 or 3"' executionContext);                    double[] dp = GetParamsAsT<double>(p' pCount);                  var q = UnityEngine.Quaternion.LookRotation(VesselUtils.GetNorthVector(executionContext.Vessel)' executionContext.Vessel.upAxis);                  q *= UnityEngine.Quaternion.Euler(new UnityEngine.Vector3((float)-dp[0]' (float)dp[1]' (float)(dp.Count() > 2 ? dp[2] : 0)));                    return new Direction(q);              }
Magic Number,kOS,Term,C:\repos\Nivekk_KOS\Preprocessor\ExpressionTerm.cs,Demo,The following statement contains a magic number: String retString = new String(' '' tabIndent * 4);
Magic Number,kOS,GeoCoordinates,C:\repos\Nivekk_KOS\Structures\GeoCoordinates.cs,GetHeadingFromVessel,The following statement contains a magic number: var headingQ = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(Quaternion.LookRotation(vector' up)) * Quaternion.LookRotation(north' up));
Magic Number,kOS,Harddisk,C:\repos\Nivekk_KOS\Harddisk.cs,Harddisk,The following statement contains a magic number: Capacity = 10000;
Magic Number,kOS,InputManager,C:\repos\Nivekk_KOS\InputManager.cs,ProcessKeyStrokes,The following statement contains a magic number: if (Event.current.type == EventType.KeyDown)              {                  if (Event.current.character == '\n')                  {                      Type((char)13);                  }                  else if (Event.current.character != 0 && Event.current.character != 13 && Event.current.character != 10)                  {                      Type(Event.current.character);                        Event.current = null;                  }                  else if (Event.current.keyCode != KeyCode.None)                  {                      Keydown(Event.current.keyCode);                  }              }
Magic Number,kOS,InputManager,C:\repos\Nivekk_KOS\InputManager.cs,ProcessKeyStrokes,The following statement contains a magic number: if (Event.current.type == EventType.KeyDown)              {                  if (Event.current.character == '\n')                  {                      Type((char)13);                  }                  else if (Event.current.character != 0 && Event.current.character != 13 && Event.current.character != 10)                  {                      Type(Event.current.character);                        Event.current = null;                  }                  else if (Event.current.keyCode != KeyCode.None)                  {                      Keydown(Event.current.keyCode);                  }              }
Magic Number,kOS,InputManager,C:\repos\Nivekk_KOS\InputManager.cs,ProcessKeyStrokes,The following statement contains a magic number: if (Event.current.type == EventType.KeyDown)              {                  if (Event.current.character == '\n')                  {                      Type((char)13);                  }                  else if (Event.current.character != 0 && Event.current.character != 13 && Event.current.character != 10)                  {                      Type(Event.current.character);                        Event.current = null;                  }                  else if (Event.current.keyCode != KeyCode.None)                  {                      Keydown(Event.current.keyCode);                  }              }
Magic Number,kOS,InputManager,C:\repos\Nivekk_KOS\InputManager.cs,Keydown,The following statement contains a magic number: if (code == (KeyCode.Backspace)) { Type((char)8); return; }
Magic Number,kOS,InputManager,C:\repos\Nivekk_KOS\InputManager.cs,Keydown,The following statement contains a magic number: if (code == (KeyCode.Return) || code == (KeyCode.KeypadEnter)) { Type((char)13); return; }
Magic Number,kOS,kOSInternalDisplay,C:\repos\Nivekk_KOS\InternalDisplay.cs,Start,The following statement contains a magic number: m.triangles = new int[] { 0' 1' 2' 0' 2' 3 };
Magic Number,kOS,kOSInternalDisplay,C:\repos\Nivekk_KOS\InternalDisplay.cs,Start,The following statement contains a magic number: m.triangles = new int[] { 0' 1' 2' 0' 2' 3 };
Magic Number,kOS,kOSInternalDisplay,C:\repos\Nivekk_KOS\InternalDisplay.cs,Start,The following statement contains a magic number: m.triangles = new int[] { 0' 1' 2' 0' 2' 3 };
Magic Number,kOS,kOSInternalDisplay,C:\repos\Nivekk_KOS\InternalDisplay.cs,LockCamera,The following statement contains a magic number: unlockWait = 3;
Magic Number,kOS,kOSInternalDisplay,C:\repos\Nivekk_KOS\InternalDisplay.cs,Update,The following statement contains a magic number: if (lockState == true)              {                  if (unlockWait > 0) unlockWait --;                    if (unlockWait == 0 && Event.current.type == EventType.MouseDown)                  {                      UnlockCamera();                  }                  else                  {                       InternalCamera.Instance.camera.transform.LookAt(screenGo.transform.position' screenGo.transform.up);                      InternalCamera.Instance.camera.fieldOfView = 18;                      InternalCamera.Instance.UnlockMouse();                      FlightCamera.fetch.transform.localRotation = InternalCamera.Instance.camera.transform.localRotation;                        InputManager.ProcessKeyStrokes();                  }              }
Magic Number,kOS,InterpreterBootup,C:\repos\Nivekk_KOS\InterpreterBootup.cs,InterpreterBootup,The following statement contains a magic number: PrintAt("BOOTING UP..."' 22' 20);
Magic Number,kOS,InterpreterBootup,C:\repos\Nivekk_KOS\InterpreterBootup.cs,InterpreterBootup,The following statement contains a magic number: PrintAt("BOOTING UP..."' 22' 20);
Magic Number,kOS,InterpreterBootup,C:\repos\Nivekk_KOS\InterpreterBootup.cs,ShowAnimationFrame,The following statement contains a magic number: var tX = 25;
Magic Number,kOS,InterpreterBootup,C:\repos\Nivekk_KOS\InterpreterBootup.cs,ShowAnimationFrame,The following statement contains a magic number: var tY = 14;
Magic Number,kOS,InterpreterBootup,C:\repos\Nivekk_KOS\InterpreterBootup.cs,ShowAnimationFrame,The following statement contains a magic number: for (var y = 0; y < 6; y++)              {                  for (var x = 0; x < 4; x++)                  {                      var sY = y + 11;                      var sX = x + (frame * 4);                        char c = (char)(sY * 16 + sX);                        buffer[tX + x' tY + y] = c;                  }              }
Magic Number,kOS,InterpreterBootup,C:\repos\Nivekk_KOS\InterpreterBootup.cs,ShowAnimationFrame,The following statement contains a magic number: for (var y = 0; y < 6; y++)              {                  for (var x = 0; x < 4; x++)                  {                      var sY = y + 11;                      var sX = x + (frame * 4);                        char c = (char)(sY * 16 + sX);                        buffer[tX + x' tY + y] = c;                  }              }
Magic Number,kOS,InterpreterBootup,C:\repos\Nivekk_KOS\InterpreterBootup.cs,ShowAnimationFrame,The following statement contains a magic number: for (var y = 0; y < 6; y++)              {                  for (var x = 0; x < 4; x++)                  {                      var sY = y + 11;                      var sX = x + (frame * 4);                        char c = (char)(sY * 16 + sX);                        buffer[tX + x' tY + y] = c;                  }              }
Magic Number,kOS,InterpreterBootup,C:\repos\Nivekk_KOS\InterpreterBootup.cs,ShowAnimationFrame,The following statement contains a magic number: for (var y = 0; y < 6; y++)              {                  for (var x = 0; x < 4; x++)                  {                      var sY = y + 11;                      var sX = x + (frame * 4);                        char c = (char)(sY * 16 + sX);                        buffer[tX + x' tY + y] = c;                  }              }
Magic Number,kOS,InterpreterBootup,C:\repos\Nivekk_KOS\InterpreterBootup.cs,ShowAnimationFrame,The following statement contains a magic number: for (var y = 0; y < 6; y++)              {                  for (var x = 0; x < 4; x++)                  {                      var sY = y + 11;                      var sX = x + (frame * 4);                        char c = (char)(sY * 16 + sX);                        buffer[tX + x' tY + y] = c;                  }              }
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,InterpreterEdit,The following statement contains a magic number: CursorY = 2;
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,Update,The following statement contains a magic number: Print(0' 0' File.Filename' 20);
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,Update,The following statement contains a magic number: PrintBorder(BufferHeight - 2);
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,Update,The following statement contains a magic number: if (CursorLine > ScrollY + (BufferHeight - 5)) ScrollY = CursorLine - (BufferHeight - 5);              else if (CursorLine < ScrollY) ScrollY = CursorLine;
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,Update,The following statement contains a magic number: if (CursorLine > ScrollY + (BufferHeight - 5)) ScrollY = CursorLine - (BufferHeight - 5);              else if (CursorLine < ScrollY) ScrollY = CursorLine;
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,Update,The following statement contains a magic number: CursorY = CursorLine - ScrollY + 2;
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,Update,The following statement contains a magic number: if (StatusAnimActive)              {                  StatusAnimProg += time;                  if (StatusAnimProg > 3) StatusAnimActive = false;                    int charsToDisp = (int)(StatusAnimProg * 20);                    Print(0' BufferHeight - 1' StatusAnimString' charsToDisp);              }              else              {                  String MenuOptions = "[F5:Save] [F10:Exit]";                  Print(0' BufferHeight - 1' MenuOptions);              }
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,Update,The following statement contains a magic number: if (StatusAnimActive)              {                  StatusAnimProg += time;                  if (StatusAnimProg > 3) StatusAnimActive = false;                    int charsToDisp = (int)(StatusAnimProg * 20);                    Print(0' BufferHeight - 1' StatusAnimString' charsToDisp);              }              else              {                  String MenuOptions = "[F5:Save] [F10:Exit]";                  Print(0' BufferHeight - 1' MenuOptions);              }
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,UpdateBuffer,The following statement contains a magic number: for (int y = 2; y < BufferHeight - 2; y++)              {                  int row = (y - 2) + ScrollY;                    if (row < File.Count())                  {                      if (ScrollX < File[row].Length)                      {                          Print(0' y' File[row].Substring(ScrollX));                      }                  }              }
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,UpdateBuffer,The following statement contains a magic number: for (int y = 2; y < BufferHeight - 2; y++)              {                  int row = (y - 2) + ScrollY;                    if (row < File.Count())                  {                      if (ScrollX < File[row].Length)                      {                          Print(0' y' File[row].Substring(ScrollX));                      }                  }              }
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,UpdateBuffer,The following statement contains a magic number: for (int y = 2; y < BufferHeight - 2; y++)              {                  int row = (y - 2) + ScrollY;                    if (row < File.Count())                  {                      if (ScrollX < File[row].Length)                      {                          Print(0' y' File[row].Substring(ScrollX));                      }                  }              }
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,Type,The following statement contains a magic number: switch (ch)              {                  case (char)8:                      Backspace();                      break;                    case (char)13:                      Enter();                      break;                    default:                      File[CursorLine] = File[CursorLine].Insert(LocalCursorCol' new String(ch' 1));                      CursorCol = LocalCursorCol + 1;                      break;              }
Magic Number,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,Type,The following statement contains a magic number: switch (ch)              {                  case (char)8:                      Backspace();                      break;                    case (char)13:                      Enter();                      break;                    default:                      File[CursorLine] = File[CursorLine].Insert(LocalCursorCol' new String(ch' 1));                      CursorCol = LocalCursorCol + 1;                      break;              }
Magic Number,kOS,ImmediateMode,C:\repos\Nivekk_KOS\InterpreterImmediate.cs,ImmediateMode,The following statement contains a magic number: for (var y = 13; y < 16; y++)              {                   string output = "";                  for (var x = 11; x < 16; x++)                  {                      output += ((char)((y*16) + x)).ToString();                  }                    if (y == 15) output += " v" + Core.VersionInfo.ToString();                    StdOut(output);              }
Magic Number,kOS,ImmediateMode,C:\repos\Nivekk_KOS\InterpreterImmediate.cs,ImmediateMode,The following statement contains a magic number: for (var y = 13; y < 16; y++)              {                   string output = "";                  for (var x = 11; x < 16; x++)                  {                      output += ((char)((y*16) + x)).ToString();                  }                    if (y == 15) output += " v" + Core.VersionInfo.ToString();                    StdOut(output);              }
Magic Number,kOS,ImmediateMode,C:\repos\Nivekk_KOS\InterpreterImmediate.cs,ImmediateMode,The following statement contains a magic number: for (var y = 13; y < 16; y++)              {                   string output = "";                  for (var x = 11; x < 16; x++)                  {                      output += ((char)((y*16) + x)).ToString();                  }                    if (y == 15) output += " v" + Core.VersionInfo.ToString();                    StdOut(output);              }
Magic Number,kOS,ImmediateMode,C:\repos\Nivekk_KOS\InterpreterImmediate.cs,ImmediateMode,The following statement contains a magic number: for (var y = 13; y < 16; y++)              {                   string output = "";                  for (var x = 11; x < 16; x++)                  {                      output += ((char)((y*16) + x)).ToString();                  }                    if (y == 15) output += " v" + Core.VersionInfo.ToString();                    StdOut(output);              }
Magic Number,kOS,ImmediateMode,C:\repos\Nivekk_KOS\InterpreterImmediate.cs,ImmediateMode,The following statement contains a magic number: for (var y = 13; y < 16; y++)              {                   string output = "";                  for (var x = 11; x < 16; x++)                  {                      output += ((char)((y*16) + x)).ToString();                  }                    if (y == 15) output += " v" + Core.VersionInfo.ToString();                    StdOut(output);              }
Magic Number,kOS,ImmediateMode,C:\repos\Nivekk_KOS\InterpreterImmediate.cs,ImmediateMode,The following statement contains a magic number: for (var y = 13; y < 16; y++)              {                   string output = "";                  for (var x = 11; x < 16; x++)                  {                      output += ((char)((y*16) + x)).ToString();                  }                    if (y == 15) output += " v" + Core.VersionInfo.ToString();                    StdOut(output);              }
Magic Number,kOS,ImmediateMode,C:\repos\Nivekk_KOS\InterpreterImmediate.cs,Type,The following statement contains a magic number: switch (ch)              {                  case (char)8:                      if (cursor > 0)                      {                          inputBuffer = inputBuffer.Remove(cursor - 1' 1);                          cursor--;                      }                      break;                    case (char)13:                      Enter();                      break;                    default:                      inputBuffer = inputBuffer.Insert(cursor' new String(ch' 1));                      cursor++;                      break;              }
Magic Number,kOS,ImmediateMode,C:\repos\Nivekk_KOS\InterpreterImmediate.cs,Type,The following statement contains a magic number: switch (ch)              {                  case (char)8:                      if (cursor > 0)                      {                          inputBuffer = inputBuffer.Remove(cursor - 1' 1);                          cursor--;                      }                      break;                    case (char)13:                      Enter();                      break;                    default:                      inputBuffer = inputBuffer.Insert(cursor' new String(ch' 1));                      cursor++;                      break;              }
Magic Number,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The following statement contains a magic number: GL.LoadPixelMatrix(0' 512' 512' 0);
Magic Number,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The following statement contains a magic number: GL.LoadPixelMatrix(0' 512' 512' 0);
Magic Number,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The following statement contains a magic number: Graphics.DrawTexture(new Rect(0' 0' 512' 512)' TermWindow.TerminalImage' new Rect(0.02f' 0.86f' 0.02f' 0.02f)' 0' 0' 0' 0);
Magic Number,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The following statement contains a magic number: Graphics.DrawTexture(new Rect(0' 0' 512' 512)' TermWindow.TerminalImage' new Rect(0.02f' 0.86f' 0.02f' 0.02f)' 0' 0' 0' 0);
Magic Number,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The following statement contains a magic number: for (var x = 0; x < buffer.GetLength(0); x++)              for (var y = 0; y < buffer.GetLength(1); y++)              {                  char ch = buffer[x' y];                           if (ch != 0 && ch != 9 && ch != 32)                  {                      float tx = ch % TermWindow.CHARS_PER_ROW;                      float ty = ch / TermWindow.CHARS_PER_ROW;                        Graphics.DrawTexture(new Rect(x * TermWindow.CHARSIZE' y * TermWindow.CHARSIZE' TermWindow.CHARSIZE' TermWindow.CHARSIZE)'                                      TermWindow.FontImage'                                      new Rect(tx * uvC' ((15 - ty) * uvC)' uvC' uvC)' 0' 0' 0' 0' TermWindow.TEXTCOLOR);                                        }               }
Magic Number,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The following statement contains a magic number: for (var x = 0; x < buffer.GetLength(0); x++)              for (var y = 0; y < buffer.GetLength(1); y++)              {                  char ch = buffer[x' y];                           if (ch != 0 && ch != 9 && ch != 32)                  {                      float tx = ch % TermWindow.CHARS_PER_ROW;                      float ty = ch / TermWindow.CHARS_PER_ROW;                        Graphics.DrawTexture(new Rect(x * TermWindow.CHARSIZE' y * TermWindow.CHARSIZE' TermWindow.CHARSIZE' TermWindow.CHARSIZE)'                                      TermWindow.FontImage'                                      new Rect(tx * uvC' ((15 - ty) * uvC)' uvC' uvC)' 0' 0' 0' 0' TermWindow.TEXTCOLOR);                                        }               }
Magic Number,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The following statement contains a magic number: for (var x = 0; x < buffer.GetLength(0); x++)              for (var y = 0; y < buffer.GetLength(1); y++)              {                  char ch = buffer[x' y];                           if (ch != 0 && ch != 9 && ch != 32)                  {                      float tx = ch % TermWindow.CHARS_PER_ROW;                      float ty = ch / TermWindow.CHARS_PER_ROW;                        Graphics.DrawTexture(new Rect(x * TermWindow.CHARSIZE' y * TermWindow.CHARSIZE' TermWindow.CHARSIZE' TermWindow.CHARSIZE)'                                      TermWindow.FontImage'                                      new Rect(tx * uvC' ((15 - ty) * uvC)' uvC' uvC)' 0' 0' 0' 0' TermWindow.TEXTCOLOR);                                        }               }
Magic Number,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The following statement contains a magic number: if (cpu.CursorBlinkTime > 0.5)              {                  int x = cpu.GetCursorX();                  int y = cpu.GetCursorY();                    float tx = 1 % TermWindow.CHARS_PER_ROW;                  float ty = 1 / TermWindow.CHARS_PER_ROW;                    Graphics.DrawTexture(new Rect(x * TermWindow.CHARSIZE' y * TermWindow.CHARSIZE' TermWindow.CHARSIZE' TermWindow.CHARSIZE)'                                  TermWindow.FontImage'                                  new Rect(tx * uvC' ((15 - ty) * uvC)' uvC' uvC)' 0' 0' 0' 0' TermWindow.TEXTCOLOR);              }
Magic Number,kOS,kOSProcessor,C:\repos\Nivekk_KOS\kOSProcessor.cs,RenderInternalDisplay,The following statement contains a magic number: if (cpu.CursorBlinkTime > 0.5)              {                  int x = cpu.GetCursorX();                  int y = cpu.GetCursorY();                    float tx = 1 % TermWindow.CHARS_PER_ROW;                  float ty = 1 / TermWindow.CHARS_PER_ROW;                    Graphics.DrawTexture(new Rect(x * TermWindow.CHARSIZE' y * TermWindow.CHARSIZE' TermWindow.CHARSIZE' TermWindow.CHARSIZE)'                                  TermWindow.FontImage'                                  new Rect(tx * uvC' ((15 - ty) * uvC)' uvC' uvC)' 0' 0' 0' 0' TermWindow.TEXTCOLOR);              }
Magic Number,kOS,LockableControl,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,OnFlyByWire,The following statement contains a magic number: if (e != null)                  {                      Value = e.GetValue();                        if (propertyName == "throttle")                      {                          float t = (float)e.Double();                            c.mainThrottle = t;                          if (vessel == FlightGlobals.ActiveVessel)                           {                              FlightInputHandler.state.mainThrottle = t;                              TermWindow.ThrottleLock = t;                          }                      }                        if (propertyName == "wheelthrottle")                      {                          c.wheelThrottle = (float)Utils.Clamp(e.Double()' -1' 1);                      }                        if (propertyName == "steering")                      {                          if (Value is String && ((string)Value).ToUpper() == "KILL")                          {                              SteeringHelper.KillRotation(c' vessel);                          }                          else if (Value is Direction)                          {                              SteeringHelper.SteerShipToward((Direction)Value' c' vessel);                          }                          else if (Value is Vector)                          {                              SteeringHelper.SteerShipToward(((Vector)Value).ToDirection()' c' vessel);                          }                          else if (Value is Node)                          {                              SteeringHelper.SteerShipToward(((Node)Value).GetBurnVector().ToDirection()' c' vessel);                          }                      }                        if (propertyName == "wheelsteering")                      {                          float bearing = 0;                            if (Value is VesselTarget)                          {                              bearing = VesselUtils.GetTargetBearing(vessel' ((VesselTarget)Value).target);                          }                          else if (Value is GeoCoordinates)                          {                              bearing = ((GeoCoordinates)Value).GetBearing(vessel);                          }                          else if (Value is double)                          {                              bearing = (float)(Math.Round((double)Value) - Mathf.Round(FlightGlobals.ship_heading));                          }                            if (vessel.horizontalSrfSpeed > 0.1f)                          {                               if (Mathf.Abs(VesselUtils.AngleDelta(VesselUtils.GetHeading(vessel)' VesselUtils.GetVelocityHeading(vessel))) <= 90)                              {                                  c.wheelSteer = Mathf.Clamp(bearing / -10' -1' 1);                              }                              else                              {                                  c.wheelSteer = -Mathf.Clamp(bearing / -10' -1' 1);                              }                          }                      }                        if (cpu.GetLock(name) == null)                      {                          locked = false;                      }                  }
Magic Number,kOS,LockableControl,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,OnFlyByWire,The following statement contains a magic number: if (e != null)                  {                      Value = e.GetValue();                        if (propertyName == "throttle")                      {                          float t = (float)e.Double();                            c.mainThrottle = t;                          if (vessel == FlightGlobals.ActiveVessel)                           {                              FlightInputHandler.state.mainThrottle = t;                              TermWindow.ThrottleLock = t;                          }                      }                        if (propertyName == "wheelthrottle")                      {                          c.wheelThrottle = (float)Utils.Clamp(e.Double()' -1' 1);                      }                        if (propertyName == "steering")                      {                          if (Value is String && ((string)Value).ToUpper() == "KILL")                          {                              SteeringHelper.KillRotation(c' vessel);                          }                          else if (Value is Direction)                          {                              SteeringHelper.SteerShipToward((Direction)Value' c' vessel);                          }                          else if (Value is Vector)                          {                              SteeringHelper.SteerShipToward(((Vector)Value).ToDirection()' c' vessel);                          }                          else if (Value is Node)                          {                              SteeringHelper.SteerShipToward(((Node)Value).GetBurnVector().ToDirection()' c' vessel);                          }                      }                        if (propertyName == "wheelsteering")                      {                          float bearing = 0;                            if (Value is VesselTarget)                          {                              bearing = VesselUtils.GetTargetBearing(vessel' ((VesselTarget)Value).target);                          }                          else if (Value is GeoCoordinates)                          {                              bearing = ((GeoCoordinates)Value).GetBearing(vessel);                          }                          else if (Value is double)                          {                              bearing = (float)(Math.Round((double)Value) - Mathf.Round(FlightGlobals.ship_heading));                          }                            if (vessel.horizontalSrfSpeed > 0.1f)                          {                               if (Mathf.Abs(VesselUtils.AngleDelta(VesselUtils.GetHeading(vessel)' VesselUtils.GetVelocityHeading(vessel))) <= 90)                              {                                  c.wheelSteer = Mathf.Clamp(bearing / -10' -1' 1);                              }                              else                              {                                  c.wheelSteer = -Mathf.Clamp(bearing / -10' -1' 1);                              }                          }                      }                        if (cpu.GetLock(name) == null)                      {                          locked = false;                      }                  }
Magic Number,kOS,LockableControl,C:\repos\Nivekk_KOS\Bindings\BindingsFlightControl.cs,OnFlyByWire,The following statement contains a magic number: if (e != null)                  {                      Value = e.GetValue();                        if (propertyName == "throttle")                      {                          float t = (float)e.Double();                            c.mainThrottle = t;                          if (vessel == FlightGlobals.ActiveVessel)                           {                              FlightInputHandler.state.mainThrottle = t;                              TermWindow.ThrottleLock = t;                          }                      }                        if (propertyName == "wheelthrottle")                      {                          c.wheelThrottle = (float)Utils.Clamp(e.Double()' -1' 1);                      }                        if (propertyName == "steering")                      {                          if (Value is String && ((string)Value).ToUpper() == "KILL")                          {                              SteeringHelper.KillRotation(c' vessel);                          }                          else if (Value is Direction)                          {                              SteeringHelper.SteerShipToward((Direction)Value' c' vessel);                          }                          else if (Value is Vector)                          {                              SteeringHelper.SteerShipToward(((Vector)Value).ToDirection()' c' vessel);                          }                          else if (Value is Node)                          {                              SteeringHelper.SteerShipToward(((Node)Value).GetBurnVector().ToDirection()' c' vessel);                          }                      }                        if (propertyName == "wheelsteering")                      {                          float bearing = 0;                            if (Value is VesselTarget)                          {                              bearing = VesselUtils.GetTargetBearing(vessel' ((VesselTarget)Value).target);                          }                          else if (Value is GeoCoordinates)                          {                              bearing = ((GeoCoordinates)Value).GetBearing(vessel);                          }                          else if (Value is double)                          {                              bearing = (float)(Math.Round((double)Value) - Mathf.Round(FlightGlobals.ship_heading));                          }                            if (vessel.horizontalSrfSpeed > 0.1f)                          {                               if (Mathf.Abs(VesselUtils.AngleDelta(VesselUtils.GetHeading(vessel)' VesselUtils.GetVelocityHeading(vessel))) <= 90)                              {                                  c.wheelSteer = Mathf.Clamp(bearing / -10' -1' 1);                              }                              else                              {                                  c.wheelSteer = -Mathf.Clamp(bearing / -10' -1' 1);                              }                          }                      }                        if (cpu.GetLock(name) == null)                      {                          locked = false;                      }                  }
Magic Number,kOS,SteeringHelper,C:\repos\Nivekk_KOS\SteeringHelper.cs,SteerShipToward,The following statement contains a magic number: delta = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(vesselR) * target);
Magic Number,kOS,SteeringHelper,C:\repos\Nivekk_KOS\SteeringHelper.cs,GetEffectiveInertia,The following statement contains a magic number: var retVar = Vector3d.Scale              (                  Sign(angularMomentum) * 2.0f'                  Vector3d.Scale(Pow(angularMomentum' 2)' Inverse(Vector3d.Scale(torque' MoI)))              );
Magic Number,kOS,SteeringHelper,C:\repos\Nivekk_KOS\SteeringHelper.cs,GetEffectiveInertia,The following statement contains a magic number: retVar.y *= 10;
Magic Number,kOS,SteeringHelper,C:\repos\Nivekk_KOS\SteeringHelper.cs,GetThrustTorque,The following statement contains a magic number: if (p.State == PartStates.ACTIVE)              {                  if (p is LiquidEngine)                  {                      if (((LiquidEngine)p).thrustVectoringCapable)                      {                          return Math.Sin(Math.Abs(((LiquidEngine)p).gimbalRange) * Math.PI / 180) * ((LiquidEngine)p).maxThrust * (p.Rigidbody.worldCenterOfMass - CoM).magnitude;                      }                  }                  else if (p is LiquidFuelEngine)                  {                      if (((LiquidFuelEngine)p).thrustVectoringCapable)                      {                          return Math.Sin(Math.Abs(((LiquidFuelEngine)p).gimbalRange) * Math.PI / 180) * ((LiquidFuelEngine)p).maxThrust * (p.Rigidbody.worldCenterOfMass - CoM).magnitude;                      }                  }                  else if (p is AtmosphericEngine)                  {                      if (((AtmosphericEngine)p).thrustVectoringCapable)                      {                          return Math.Sin(Math.Abs(((AtmosphericEngine)p).gimbalRange) * Math.PI / 180) * ((AtmosphericEngine)p).maximumEnginePower * ((AtmosphericEngine)p).totalEfficiency * (p.Rigidbody.worldCenterOfMass - CoM).magnitude;                      }                  }              }
Magic Number,kOS,SteeringHelper,C:\repos\Nivekk_KOS\SteeringHelper.cs,GetThrustTorque,The following statement contains a magic number: if (p.State == PartStates.ACTIVE)              {                  if (p is LiquidEngine)                  {                      if (((LiquidEngine)p).thrustVectoringCapable)                      {                          return Math.Sin(Math.Abs(((LiquidEngine)p).gimbalRange) * Math.PI / 180) * ((LiquidEngine)p).maxThrust * (p.Rigidbody.worldCenterOfMass - CoM).magnitude;                      }                  }                  else if (p is LiquidFuelEngine)                  {                      if (((LiquidFuelEngine)p).thrustVectoringCapable)                      {                          return Math.Sin(Math.Abs(((LiquidFuelEngine)p).gimbalRange) * Math.PI / 180) * ((LiquidFuelEngine)p).maxThrust * (p.Rigidbody.worldCenterOfMass - CoM).magnitude;                      }                  }                  else if (p is AtmosphericEngine)                  {                      if (((AtmosphericEngine)p).thrustVectoringCapable)                      {                          return Math.Sin(Math.Abs(((AtmosphericEngine)p).gimbalRange) * Math.PI / 180) * ((AtmosphericEngine)p).maximumEnginePower * ((AtmosphericEngine)p).totalEfficiency * (p.Rigidbody.worldCenterOfMass - CoM).magnitude;                      }                  }              }
Magic Number,kOS,SteeringHelper,C:\repos\Nivekk_KOS\SteeringHelper.cs,GetThrustTorque,The following statement contains a magic number: if (p.State == PartStates.ACTIVE)              {                  if (p is LiquidEngine)                  {                      if (((LiquidEngine)p).thrustVectoringCapable)                      {                          return Math.Sin(Math.Abs(((LiquidEngine)p).gimbalRange) * Math.PI / 180) * ((LiquidEngine)p).maxThrust * (p.Rigidbody.worldCenterOfMass - CoM).magnitude;                      }                  }                  else if (p is LiquidFuelEngine)                  {                      if (((LiquidFuelEngine)p).thrustVectoringCapable)                      {                          return Math.Sin(Math.Abs(((LiquidFuelEngine)p).gimbalRange) * Math.PI / 180) * ((LiquidFuelEngine)p).maxThrust * (p.Rigidbody.worldCenterOfMass - CoM).magnitude;                      }                  }                  else if (p is AtmosphericEngine)                  {                      if (((AtmosphericEngine)p).thrustVectoringCapable)                      {                          return Math.Sin(Math.Abs(((AtmosphericEngine)p).gimbalRange) * Math.PI / 180) * ((AtmosphericEngine)p).maximumEnginePower * ((AtmosphericEngine)p).totalEfficiency * (p.Rigidbody.worldCenterOfMass - CoM).magnitude;                      }                  }              }
Magic Number,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,Year,The following statement contains a magic number: return (int)Math.Floor(span.Days / 365.0) + 1;
Magic Number,kOS,TimeSpan,C:\repos\Nivekk_KOS\Structures\Timespan.cs,Day,The following statement contains a magic number: return (span.Days % 365) + 1;
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Awake,The following statement contains a magic number: for (var i = 0; i < CPU.FUNCTION_BUTTON_COUNT; i++)              {                  FunctionButtonDrawInfo state = new FunctionButtonDrawInfo();                  state.Bounds = new Rect(19 + i * 30' 362' 28' 28);                  state.VisBounds = new Rect(19 - 5 + i * 30' 362 - 5' 28 + 10' 28 + 10);                  state.Number = i;                    if (i == 3) state.Onstate = true;                    ButtonDrawInfos.Add(state);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,ProcessKeyStrokes,The following statement contains a magic number: if (Event.current.type == EventType.KeyDown)              {                  if (Event.current.character != 0 && Event.current.character != 13 && Event.current.character != 10)                  {                      Type(Event.current.character);                        Event.current = null;                                        }                  else if (Event.current.keyCode != KeyCode.None)                   {                      Keydown(Event.current.keyCode);                  }                    cursorBlinkTime = 0.0f;              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,ProcessKeyStrokes,The following statement contains a magic number: if (Event.current.type == EventType.KeyDown)              {                  if (Event.current.character != 0 && Event.current.character != 13 && Event.current.character != 10)                  {                      Type(Event.current.character);                        Event.current = null;                                        }                  else if (Event.current.keyCode != KeyCode.None)                   {                      Keydown(Event.current.keyCode);                  }                    cursorBlinkTime = 0.0f;              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Keydown,The following statement contains a magic number: if (code == (KeyCode.Backspace)) { Type((char)8); return; }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,Keydown,The following statement contains a magic number: if (code == (KeyCode.Return) || code == (KeyCode.KeypadEnter)) { Type((char)13); return; }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    GUI.Label(CLOSEBUTTON_RECT' "Close");                    return;              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    GUI.Label(CLOSEBUTTON_RECT' "Close");                    return;              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    GUI.Label(CLOSEBUTTON_RECT' "Close");                    return;              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    GUI.Label(CLOSEBUTTON_RECT' "Close");                    return;              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.DrawTexture(new Rect(10' 10' TerminalImage.width' TerminalImage.height)' TerminalImage);
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.DrawTexture(new Rect(10' 10' TerminalImage.width' TerminalImage.height)' TerminalImage);
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.DragWindow(new Rect(0' 0' 10000' 500));
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.DragWindow(new Rect(0' 0' 10000' 500));
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (Cpu != null && Cpu.Mode == CPU.Modes.READY && Cpu.IsAlive())              {                  Color textColor = isLocked ? TEXTCOLOR : TEXTCOLOR_ALPHA;                    GUI.BeginGroup(new Rect(31' 38' 420' 340));                    if (Cpu != null)                  {                      char['] buffer = Cpu.GetBuffer();                        for (var x = 0; x < buffer.GetLength(0); x++)                          for (var y = 0; y < buffer.GetLength(1); y++)                          {                              char c = buffer[x' y];                                if (c != 0 && c != 9 && c != 32) ShowCharacterByAscii(buffer[x' y]' x' y' textColor);                          }                        bool blinkOn = cursorBlinkTime < 0.5f;                      if (blinkOn && Cpu.GetCursorX() > -1)                      {                          ShowCharacterByAscii((char)1' Cpu.GetCursorX()' Cpu.GetCursorY()' textColor);                      }                  }                    GUI.EndGroup();              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (Cpu != null && Cpu.Mode == CPU.Modes.READY && Cpu.IsAlive())              {                  Color textColor = isLocked ? TEXTCOLOR : TEXTCOLOR_ALPHA;                    GUI.BeginGroup(new Rect(31' 38' 420' 340));                    if (Cpu != null)                  {                      char['] buffer = Cpu.GetBuffer();                        for (var x = 0; x < buffer.GetLength(0); x++)                          for (var y = 0; y < buffer.GetLength(1); y++)                          {                              char c = buffer[x' y];                                if (c != 0 && c != 9 && c != 32) ShowCharacterByAscii(buffer[x' y]' x' y' textColor);                          }                        bool blinkOn = cursorBlinkTime < 0.5f;                      if (blinkOn && Cpu.GetCursorX() > -1)                      {                          ShowCharacterByAscii((char)1' Cpu.GetCursorX()' Cpu.GetCursorY()' textColor);                      }                  }                    GUI.EndGroup();              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (Cpu != null && Cpu.Mode == CPU.Modes.READY && Cpu.IsAlive())              {                  Color textColor = isLocked ? TEXTCOLOR : TEXTCOLOR_ALPHA;                    GUI.BeginGroup(new Rect(31' 38' 420' 340));                    if (Cpu != null)                  {                      char['] buffer = Cpu.GetBuffer();                        for (var x = 0; x < buffer.GetLength(0); x++)                          for (var y = 0; y < buffer.GetLength(1); y++)                          {                              char c = buffer[x' y];                                if (c != 0 && c != 9 && c != 32) ShowCharacterByAscii(buffer[x' y]' x' y' textColor);                          }                        bool blinkOn = cursorBlinkTime < 0.5f;                      if (blinkOn && Cpu.GetCursorX() > -1)                      {                          ShowCharacterByAscii((char)1' Cpu.GetCursorX()' Cpu.GetCursorY()' textColor);                      }                  }                    GUI.EndGroup();              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (Cpu != null && Cpu.Mode == CPU.Modes.READY && Cpu.IsAlive())              {                  Color textColor = isLocked ? TEXTCOLOR : TEXTCOLOR_ALPHA;                    GUI.BeginGroup(new Rect(31' 38' 420' 340));                    if (Cpu != null)                  {                      char['] buffer = Cpu.GetBuffer();                        for (var x = 0; x < buffer.GetLength(0); x++)                          for (var y = 0; y < buffer.GetLength(1); y++)                          {                              char c = buffer[x' y];                                if (c != 0 && c != 9 && c != 32) ShowCharacterByAscii(buffer[x' y]' x' y' textColor);                          }                        bool blinkOn = cursorBlinkTime < 0.5f;                      if (blinkOn && Cpu.GetCursorX() > -1)                      {                          ShowCharacterByAscii((char)1' Cpu.GetCursorX()' Cpu.GetCursorY()' textColor);                      }                  }                    GUI.EndGroup();              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (Cpu != null && Cpu.Mode == CPU.Modes.READY && Cpu.IsAlive())              {                  Color textColor = isLocked ? TEXTCOLOR : TEXTCOLOR_ALPHA;                    GUI.BeginGroup(new Rect(31' 38' 420' 340));                    if (Cpu != null)                  {                      char['] buffer = Cpu.GetBuffer();                        for (var x = 0; x < buffer.GetLength(0); x++)                          for (var y = 0; y < buffer.GetLength(1); y++)                          {                              char c = buffer[x' y];                                if (c != 0 && c != 9 && c != 32) ShowCharacterByAscii(buffer[x' y]' x' y' textColor);                          }                        bool blinkOn = cursorBlinkTime < 0.5f;                      if (blinkOn && Cpu.GetCursorX() > -1)                      {                          ShowCharacterByAscii((char)1' Cpu.GetCursorX()' Cpu.GetCursorY()' textColor);                      }                  }                    GUI.EndGroup();              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (Cpu != null && Cpu.Mode == CPU.Modes.READY && Cpu.IsAlive())              {                  Color textColor = isLocked ? TEXTCOLOR : TEXTCOLOR_ALPHA;                    GUI.BeginGroup(new Rect(31' 38' 420' 340));                    if (Cpu != null)                  {                      char['] buffer = Cpu.GetBuffer();                        for (var x = 0; x < buffer.GetLength(0); x++)                          for (var y = 0; y < buffer.GetLength(1); y++)                          {                              char c = buffer[x' y];                                if (c != 0 && c != 9 && c != 32) ShowCharacterByAscii(buffer[x' y]' x' y' textColor);                          }                        bool blinkOn = cursorBlinkTime < 0.5f;                      if (blinkOn && Cpu.GetCursorX() > -1)                      {                          ShowCharacterByAscii((char)1' Cpu.GetCursorX()' Cpu.GetCursorY()' textColor);                      }                  }                    GUI.EndGroup();              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: x = isDown ? -37 : 0;
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: GUI.DrawTexture(new Rect(x' -54' ButtonImage.width' ButtonImage.height)' ButtonImage);
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: try              {                   if (Cpu.ButtonStates[drawInfo.Number].LightState == true)                  {                      GUI.BeginGroup(drawInfo.VisBounds);                        GUI.color = isLocked ? BUTTON_GLOW_GREEN : BUTTON_GLOW_GREEN_ALPHA;                      GUI.DrawTexture(new Rect(x' -91' ButtonImage.width' ButtonImage.height)' ButtonImage);                      GUI.color = isLocked ? COLOR : COLOR_ALPHA;                        GUI.EndGroup();                  }              }              catch (Exception e)              {                  throw new Exception(e.ToString() + " while tring to draw button " + drawInfo.Number);              }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: GUI.BeginGroup(new Rect(drawInfo.VisBounds.xMin + 8 + downOffset' drawInfo.VisBounds.yMin + 8 + downOffset' 20' 20));
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: GUI.BeginGroup(new Rect(drawInfo.VisBounds.xMin + 8 + downOffset' drawInfo.VisBounds.yMin + 8 + downOffset' 20' 20));
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: GUI.BeginGroup(new Rect(drawInfo.VisBounds.xMin + 8 + downOffset' drawInfo.VisBounds.yMin + 8 + downOffset' 20' 20));
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: GUI.BeginGroup(new Rect(drawInfo.VisBounds.xMin + 8 + downOffset' drawInfo.VisBounds.yMin + 8 + downOffset' 20' 20));
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: if (drawnNumber < 5) { x = 88; y = drawnNumber * 20; }              else { x = 108; y = (drawnNumber - 5) * 20; }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: if (drawnNumber < 5) { x = 88; y = drawnNumber * 20; }              else { x = 108; y = (drawnNumber - 5) * 20; }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: if (drawnNumber < 5) { x = 88; y = drawnNumber * 20; }              else { x = 108; y = (drawnNumber - 5) * 20; }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: if (drawnNumber < 5) { x = 88; y = drawnNumber * 20; }              else { x = 108; y = (drawnNumber - 5) * 20; }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: if (drawnNumber < 5) { x = 88; y = drawnNumber * 20; }              else { x = 108; y = (drawnNumber - 5) * 20; }
Magic Number,kOS,TermWindow,C:\repos\Nivekk_KOS\TermWindow.cs,drawButton,The following statement contains a magic number: if (drawnNumber < 5) { x = 88; y = drawnNumber * 20; }              else { x = 108; y = (drawnNumber - 5) * 20; }
Magic Number,kOS,CPU,C:\repos\Nivekk_KOS\CPU.cs,RegisterkOSExternalFunction,The following statement contains a magic number: if (parameters.Count() == 4)              {                  var name = (String)parameters[0];                  var parent = parameters[1];                  var methodName = (String)parameters[2];                  var parameterCount = (int)parameters[3];                    RegisterkOSExternalFunction(name' parent' methodName' parameterCount);              }
Magic Number,kOS,CPU,C:\repos\Nivekk_KOS\CPU.cs,RegisterkOSExternalFunction,The following statement contains a magic number: if (parameters.Count() == 4)              {                  var name = (String)parameters[0];                  var parent = parameters[1];                  var methodName = (String)parameters[2];                  var parameterCount = (int)parameters[3];                    RegisterkOSExternalFunction(name' parent' methodName' parameterCount);              }
Magic Number,kOS,CPU,C:\repos\Nivekk_KOS\CPU.cs,RegisterkOSExternalFunction,The following statement contains a magic number: if (parameters.Count() == 4)              {                  var name = (String)parameters[0];                  var parent = parameters[1];                  var methodName = (String)parameters[2];                  var parameterCount = (int)parameters[3];                    RegisterkOSExternalFunction(name' parent' methodName' parameterCount);              }
Magic Number,kOS,Archive,C:\repos\Nivekk_KOS\Volume.cs,GetFileList,The following statement contains a magic number: try              {                  foreach (var file in Directory.GetFiles(ArchiveFolder' "*.txt"))                  {                      var sysFileInfo = new System.IO.FileInfo(file);                      var fileInfo = new kOS.FileInfo(sysFileInfo.Name.Substring(0' sysFileInfo.Name.Length - 4)' (int)sysFileInfo.Length);                        retList.Add(fileInfo);                  }              }              catch (DirectoryNotFoundException e)              {              }
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetCommRange,The following statement contains a magic number: double range = 100000;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetCommRange,The following statement contains a magic number: foreach (Part part in vessel.parts)        {          if (part.partInfo.name == "longAntenna")          {            String status = ((ModuleAnimateGeneric)part.Modules["ModuleAnimateGeneric"]).status;              if (status == "Fixed" || status == "Locked")            {              range += 1000000;            }          }        }
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetCommRange,The following statement contains a magic number: foreach (Part part in vessel.parts)        {          if (part.partInfo.name == "mediumDishAntenna")          {               String status = ((ModuleAnimateGeneric)part.Modules["ModuleAnimateGeneric"]).status;              if (status == "Fixed" || status == "Locked")            {              range *= 100;            }          }        }
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetCommRange,The following statement contains a magic number: foreach (Part part in vessel.parts)        {          if (part.partInfo.name == "commDish")          {            String status = ((ModuleAnimateGeneric)part.Modules["ModuleAnimateGeneric"]).status;              if (status == "Fixed" || status == "Locked")            {              range *= 200;            }          }        }
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetDistanceToKerbinSurface,The following statement contains a magic number: foreach (var body in FlightGlobals.fetch.bodies)        {          if (body.name.ToUpper() == "KERBIN") return Vector3d.Distance(body.position' vessel.GetWorldPos3D()) - 600000; // Kerbin radius = 600'000        }
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,AngleDelta,The following statement contains a magic number: while (delta > 180) delta -= 360;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,AngleDelta,The following statement contains a magic number: while (delta > 180) delta -= 360;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,AngleDelta,The following statement contains a magic number: while (delta < -180) delta += 360;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,AngleDelta,The following statement contains a magic number: while (delta < -180) delta += 360;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetHeading,The following statement contains a magic number: var headingQ = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(vessel.GetTransform().rotation) * Quaternion.LookRotation(north' up));
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetTargetHeading,The following statement contains a magic number: var headingQ = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(Quaternion.LookRotation(vector' up)) * Quaternion.LookRotation(north' up));
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetVesselLattitude,The following statement contains a magic number: if (retVal > 90) return 90;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetVesselLattitude,The following statement contains a magic number: if (retVal > 90) return 90;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetVesselLattitude,The following statement contains a magic number: if (retVal < -90) return -90;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetVesselLattitude,The following statement contains a magic number: if (retVal < -90) return -90;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetVesselLongitude,The following statement contains a magic number: while (retVal > 180) retVal -= 360;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetVesselLongitude,The following statement contains a magic number: while (retVal > 180) retVal -= 360;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetVesselLongitude,The following statement contains a magic number: while (retVal < -180) retVal += 360;
Magic Number,kOS,VesselUtils,C:\repos\Nivekk_KOS\VesselUtils.cs,GetVesselLongitude,The following statement contains a magic number: while (retVal < -180) retVal += 360;
Missing Default,kOS,CommandCopy,C:\repos\Nivekk_KOS\Commands\CommandFileIO.cs,Evaluate,The following switch statement is missing a default case: switch (operation)              {                  case "FROM":                      file = targetVolume.GetByName(targetFile);                      if (file == null) throw new kOSException("File '" + targetFile + "' not found"' this);                      if (!SelectedVolume.SaveFile(new File(file))) throw new kOSException("File copy failed"' this);                      break;                    case "TO":                      file = SelectedVolume.GetByName(targetFile);                      if (file == null) throw new kOSException("File '" + targetFile + "' not found"' this);                      if (!targetVolume.SaveFile(new File(file))) throw new kOSException("File copy failed"' this);                      break;              }
Missing Default,kOS,CommandBlock,C:\repos\Nivekk_KOS\Commands\CommandFlowControl.cs,Update,The following switch statement is missing a default case: switch (command.State)                  {                      case ExecutionState.NEW:                          command.Evaluate();                          ChildContext = command;                          return;                        case ExecutionState.WAIT:                          command.Update(time);                          return;                  }
Missing Default,kOS,CommandVesselListings,C:\repos\Nivekk_KOS\Commands\CommandVessel.cs,Evaluate,The following switch statement is missing a default case: switch (RegexMatch.Groups[1].Value.ToUpper())              {                  case "BODIES":                      StdOut("");                      StdOut("Name           Distance");                      StdOut("-------------------------------------");                      foreach (var body in FlightGlobals.fetch.bodies)                      {                          StdOut(body.bodyName.PadLeft(14) + " " + Vector3d.Distance(body.position' Vessel.GetWorldPos3D()));                      }                      StdOut("");                        break;                                      case "TARGETS":                      StdOut("");                      StdOut("Vessel Name              Distance");                      StdOut("-------------------------------------");                        double commRange = VesselUtils.GetCommRange(Vessel);                        foreach (Vessel vessel in FlightGlobals.Vessels)                      {                          if (vessel != Vessel)                          {                              var vT = new VesselTarget(vessel' this);                              if (vT.IsInRange(commRange))                              {                                  StdOut(vT.target.vesselName.PadRight(24) + " " + vT.GetDistance().ToString("0.0").PadLeft(8));                              }                          }                      }                        StdOut("");                        break;                    case "RESOURCES":                      StdOut("");                      StdOut("Stage      Resource Name               Amount");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          String stageStr = part.inverseStage.ToString();                            foreach (PartResource resource in part.Resources)                          {                              StdOut(part.inverseStage.ToString() + " " + resource.resourceName.PadRight(20) + " " + resource.amount.ToString("0.00").PadLeft(8));                          }                      }                      break;                    case "PARTS":                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          StdOut(part.partInfo.name);                      }                        break;                    case "ENGINES":                      StdOut("------------------------------------------------");                        foreach (Part part in VesselUtils.GetListOfActivatedEngines(Vessel))                      {                          foreach (PartModule module in part.Modules)                          {                              if (module is ModuleEngines)                              {                                  var engineMod = (ModuleEngines)module;                                                                    StdOut(part.inverseStage.ToString() + " " + engineMod.moduleName);                              }                          }                      }                        break;                    case "SENSORS":                      StdOut("");                      StdOut("Part Name                             Sensor Type");                      StdOut("------------------------------------------------");                        foreach (Part part in Vessel.Parts)                      {                          foreach (PartModule module in part.Modules)                          {                              ModuleEnviroSensor sensor = module as ModuleEnviroSensor;                              if (sensor != null)                              {                                  if (part.partInfo.name.Length > 37)                                      StdOut(part.partInfo.title.PadRight(34) + "... " + sensor.sensorType);                                  else                                      StdOut(part.partInfo.title.PadRight(37) + " " + sensor.sensorType);                              }                          }                      }                        break;              }
Missing Default,kOS,InterpreterEdit,C:\repos\Nivekk_KOS\InterpreterEdit.cs,SpecialKey,The following switch statement is missing a default case: switch (key)              {                  case kOSKeys.F5:                      Save();                      return true;                    case kOSKeys.F10:                      Exit();                      return true;                    case kOSKeys.HOME:                      CursorCol = 0;                      return true;                    case kOSKeys.END:                      CursorCol = CurrentLine.Length;                      return true;                                        case kOSKeys.DEL:                      Delete();                      return true;                    case kOSKeys.UP:                  case kOSKeys.LEFT:                  case kOSKeys.RIGHT:                  case kOSKeys.DOWN:                      ArrowKey(key);                      return true;              }
Missing Default,kOS,ImmediateMode,C:\repos\Nivekk_KOS\InterpreterImmediate.cs,SpecialKey,The following switch statement is missing a default case: switch (key)              {                  case kOSKeys.UP:                      PreviousCommand(1);                      return true;                    case kOSKeys.DOWN:                      PreviousCommand(-1);                      return true;                    case kOSKeys.LEFT:                      if (cursor > 0)                      {                          cursor--;                          UpdateCursorXY();                      }                      return true;                    case kOSKeys.RIGHT:                      if (cursor < inputBuffer.Length)                      {                          cursor++;                          UpdateCursorXY();                      }                      return true;              }
Missing Default,kOS,VesselSensors,C:\repos\Nivekk_KOS\Structures\VesselSensors.cs,VesselSensors,The following switch statement is missing a default case: switch (module.Fields.GetValue("sensorType").ToString())                              {                                  case "ACC":                                      acceleration = new Vector(FlightGlobals.getGeeForceAtPosition(part.transform.position) - target.acceleration);                                      break;                                  case "PRES":                                      pressure = (Single)FlightGlobals.getStaticPressure();                                      break;                                  case "TEMP":                                      temperature = (float)part.temperature;                                      break;                                  case "GRAV":                                      geeForce = new Vector(FlightGlobals.getGeeForceAtPosition(part.transform.position));                                      break;                              }
