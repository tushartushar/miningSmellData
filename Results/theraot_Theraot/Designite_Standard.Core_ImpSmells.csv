Implementation smell,Namespace,Class,File,Method,Description
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 109 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 119 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 129 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 139 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 149 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 159 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 169 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 100 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 107 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 114 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 121 lines of code.
Long Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 128 lines of code.
Long Method,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsImplicitNumericConversion,The method has 117 lines of code.
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 8
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 9
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 10
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 11
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 12
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 13
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 14
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 15
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 16
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,Cyclomatic complexity of the method is 17
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 8
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 9
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 10
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 11
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 12
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 13
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 14
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 15
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 16
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 17
Complex Method,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,Cyclomatic complexity of the method is 18
Complex Method,Theraot.Collections.Specialized,AVLNode,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\AVLTree.AVLNode.cs,EnumerateFrom,Cyclomatic complexity of the method is 8
Complex Method,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GCD,Cyclomatic complexity of the method is 8
Complex Method,Theraot.Core,RamStream,C:\repos\theraot_Theraot\Core\Theraot\Core\RamStream.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,Theraot.Core,StringProcessor,C:\repos\theraot_Theraot\Core\Theraot\Core\StringProcessor.cs,SkipUntil,Cyclomatic complexity of the method is 8
Complex Method,Theraot.Core,StringProcessor,C:\repos\theraot_Theraot\Core\Theraot\Core\StringProcessor.cs,SkipUntil,Cyclomatic complexity of the method is 8
Complex Method,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetConstructorDeconstructPair,Cyclomatic complexity of the method is 13
Complex Method,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetTypeCode,Cyclomatic complexity of the method is 19
Complex Method,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,HasReferenceConversion,Cyclomatic complexity of the method is 9
Complex Method,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsLegalExplicitVariantDelegateConversion,Cyclomatic complexity of the method is 10
Complex Method,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsValidInstanceType,Cyclomatic complexity of the method is 10
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,GroupProgressiveBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,CreateGroupByIterator,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Interleave,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The method has 17 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' resultSelector
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,IndexOf,The method has 5 parameters. Parameters: source' item' index' count' comparer
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,LastIndexOf,The method has 5 parameters. Parameters: source' item' index' count' comparer
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,TryFind,The method has 5 parameters. Parameters: source' index' count' predicate' founT
Long Parameter List,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,TryFindLast,The method has 5 parameters. Parameters: source' index' count' predicate' foundItem
Long Parameter List,Theraot.Collections.Specialized,AVLNode,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\AVLTree.AVLNode.cs,Bound,The method has 5 parameters. Parameters: node' key' comparison' lower' upper
Long Parameter List,Theraot.Collections.Specialized,AVLNode,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\AVLTree.AVLNode.cs,GetOrAdd,The method has 5 parameters. Parameters: node' key' factory' comparison' isNew
Long Parameter List,Theraot.Collections.Specialized,AVLNode,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\AVLTree.AVLNode.cs,AddNonDuplicateExtracted,The method has 5 parameters. Parameters: node' key' value' comparison' created
Long Parameter List,Theraot.Collections.Specialized,AVLNode,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\AVLTree.AVLNode.cs,GetOrAddExtracted,The method has 6 parameters. Parameters: node' key' factory' comparison' created' isNew
Long Parameter List,Theraot.Collections.ThreadSafe,BucketCore,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketCore.cs,DoMayIncrement,The method has 5 parameters. Parameters: use' first' second' factory' callback
Long Parameter List,Theraot.Collections.ThreadSafe,BucketHelper,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketHelper.cs,InsertOrUpdate,The method has 5 parameters. Parameters: bucket' index' item' itemUpdateFactory' check
Long Parameter List,Theraot.Collections.ThreadSafe,BucketHelper,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketHelper.cs,InsertOrUpdate,The method has 6 parameters. Parameters: bucket' index' item' itemUpdateFactory' check' isNew
Long Parameter List,Theraot.Collections.ThreadSafe,BucketHelper,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketHelper.cs,InsertOrUpdate,The method has 5 parameters. Parameters: bucket' index' item' itemUpdateFactory' isNew
Long Parameter List,Theraot.Collections.ThreadSafe,BucketHelper,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketHelper.cs,InsertOrUpdate,The method has 5 parameters. Parameters: bucket' index' item' check' isNew
Long Parameter List,Theraot.Collections.ThreadSafe,BucketHelper,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketHelper.cs,InsertOrUpdate,The method has 5 parameters. Parameters: bucket' index' itemFactory' itemUpdateFactory' check
Long Parameter List,Theraot.Collections.ThreadSafe,BucketHelper,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketHelper.cs,InsertOrUpdate,The method has 6 parameters. Parameters: bucket' index' itemFactory' itemUpdateFactory' check' isNew
Long Parameter List,Theraot.Collections.ThreadSafe,BucketHelper,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketHelper.cs,InsertOrUpdate,The method has 5 parameters. Parameters: bucket' index' itemFactory' itemUpdateFactory' isNew
Long Parameter List,Theraot.Collections.ThreadSafe,BucketHelper,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketHelper.cs,InsertOrUpdate,The method has 5 parameters. Parameters: bucket' index' itemFactory' check' isNew
Long Parameter List,Theraot.Collections.ThreadSafe,BucketHelper,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketHelper.cs,Update,The method has 5 parameters. Parameters: bucket' index' item' check' isEmpty
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7;T8;T9>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,HelperNullAction<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16>,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,NullAction,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 5 parameters. Parameters: method' x' y' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 5 parameters. Parameters: method' arg1' arg2' arg3' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 5 parameters. Parameters: method' arg1' arg2' arg3' arg4
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 6 parameters. Parameters: method' arg1' arg2' arg3' arg4' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 7 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 8 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 9 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 10 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 11 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 12 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 13 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 14 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 15 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 16 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 17 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 18 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' alternative
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 5 parameters. Parameters: method' arg1' arg2' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 5 parameters. Parameters: method' arg1' arg2' arg3' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 6 parameters. Parameters: method' arg1' arg2' arg3' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 6 parameters. Parameters: method' arg1' arg2' arg3' arg4' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 7 parameters. Parameters: method' arg1' arg2' arg3' arg4' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 7 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 8 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 8 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 9 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 9 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 10 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 10 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 11 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 11 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 12 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 12 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 13 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 13 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 14 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 14 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 15 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 15 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 16 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 16 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 17 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 17 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 18 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' alternative' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 18 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' def
Long Parameter List,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The method has 19 parameters. Parameters: method' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16' alternative' def
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;T8;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,HelperDefaultFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,DefaultFunc,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,HelperFallacyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,FallacyFunc,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,HelperTautologyFunc<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16>,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,TautologyFunc,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleParts,The method has 5 parameters. Parameters: dbl' sign' exp' man' fFinite
Long Parameter List,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The method has 5 parameters. Parameters: value' sign' mantissa' exponent' finite
Long Parameter List,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The method has 5 parameters. Parameters: value' sign' mantissa' exponent' finite
Long Parameter List,Theraot.Core,StringHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\StringHelper.cs,Implode,The method has 5 parameters. Parameters: separator' values' converter' start' end
Long Parameter List,Theraot.Core,StringHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\StringHelper.cs,Match,The method has 5 parameters. Parameters: text' regexPattern' regexOptions' startAt' length
Long Parameter List,Theraot.Core,StringHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\StringHelper.cs,Match,The method has 5 parameters. Parameters: text' regexPattern' ignoreCase' startAt' length
Long Parameter List,Theraot.Core,StringHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\StringHelper.cs,ImplodeExtractedExtracted,The method has 5 parameters. Parameters: separator' array' startIndex' maxIndex' length
Long Parameter List,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,TupleEqualityComparer,The method has 5 parameters. Parameters: comparer1' comparer2' comparer3' comparer4' comparer5
Long Parameter List,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,TupleEqualityComparer,The method has 6 parameters. Parameters: comparer1' comparer2' comparer3' comparer4' comparer5' comparer6
Long Parameter List,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,TupleEqualityComparer,The method has 7 parameters. Parameters: comparer1' comparer2' comparer3' comparer4' comparer5' comparer6' comparer7
Long Parameter List,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,TupleEqualityComparer,The method has 8 parameters. Parameters: comparer1' comparer2' comparer3' comparer4' comparer5' comparer6' comparer7' comparer8
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 6 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 7 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 8 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 9 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 10 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 11 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 12 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 13 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 14 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 15 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The method has 16 parameters. Parameters: arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 5 parameters. Parameters: target' arg1' arg2' arg3' arg4
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 6 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 7 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 8 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 9 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 10 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 11 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 12 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 13 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 14 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 15 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 16 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,ValueActionClosure,The method has 17 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 5 parameters. Parameters: target' arg1' arg2' arg3' arg4
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 6 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 7 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 8 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 9 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 10 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 11 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 12 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 13 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 14 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 15 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 16 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15
Long Parameter List,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,ValueFuncClosure,The method has 17 parameters. Parameters: target' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSet,The method has 5 parameters. Parameters: check' value' comparand' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSet,The method has 5 parameters. Parameters: check' value' comparand' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSet,The method has 5 parameters. Parameters: check' value' comparand' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchange,The method has 5 parameters. Parameters: check' value' result' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchange,The method has 5 parameters. Parameters: check' value' result' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchange,The method has 5 parameters. Parameters: check' value' result' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSetUnless,The method has 5 parameters. Parameters: check' value' comparand' unless' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSetUnless,The method has 5 parameters. Parameters: check' value' comparand' unless' milliseconds
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSetUnless,The method has 6 parameters. Parameters: check' value' comparand' unless' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSetUnless,The method has 5 parameters. Parameters: check' value' comparand' unless' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSetUnless,The method has 6 parameters. Parameters: check' value' comparand' unless' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSetUnless,The method has 5 parameters. Parameters: check' value' comparand' unless' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitSetUnless,The method has 6 parameters. Parameters: check' value' comparand' unless' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetUnless,The method has 5 parameters. Parameters: check' value' unless' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetUnless,The method has 5 parameters. Parameters: check' value' unless' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetUnless,The method has 5 parameters. Parameters: check' value' unless' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnless,The method has 5 parameters. Parameters: check' value' unless' result' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnless,The method has 5 parameters. Parameters: check' value' unless' result' milliseconds
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnless,The method has 6 parameters. Parameters: check' value' unless' result' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnless,The method has 5 parameters. Parameters: check' value' unless' result' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnless,The method has 6 parameters. Parameters: check' value' unless' result' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnless,The method has 5 parameters. Parameters: check' value' unless' result' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnless,The method has 6 parameters. Parameters: check' value' unless' result' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessNegative,The method has 5 parameters. Parameters: check' value' lastValue' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessNegative,The method has 5 parameters. Parameters: check' value' lastValue' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessNegative,The method has 5 parameters. Parameters: check' value' lastValue' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetUnlessExcess,The method has 5 parameters. Parameters: check' value' maxValue' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetUnlessExcess,The method has 5 parameters. Parameters: check' value' maxValue' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetUnlessExcess,The method has 5 parameters. Parameters: check' value' maxValue' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessExcess,The method has 5 parameters. Parameters: check' value' maxValue' lastValue' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessExcess,The method has 5 parameters. Parameters: check' value' maxValue' lastValue' milliseconds
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessExcess,The method has 6 parameters. Parameters: check' value' maxValue' lastValue' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessExcess,The method has 5 parameters. Parameters: check' value' maxValue' lastValue' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessExcess,The method has 6 parameters. Parameters: check' value' maxValue' lastValue' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessExcess,The method has 5 parameters. Parameters: check' value' maxValue' lastValue' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeUnlessExcess,The method has 6 parameters. Parameters: check' value' maxValue' lastValue' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The method has 5 parameters. Parameters: check' value' minValue' maxValue' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The method has 5 parameters. Parameters: check' value' minValue' maxValue' milliseconds
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The method has 6 parameters. Parameters: check' value' minValue' maxValue' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The method has 5 parameters. Parameters: check' value' minValue' maxValue' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The method has 6 parameters. Parameters: check' value' minValue' maxValue' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The method has 5 parameters. Parameters: check' value' minValue' maxValue' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The method has 6 parameters. Parameters: check' value' minValue' maxValue' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The method has 5 parameters. Parameters: check' value' minValue' maxValue' lastValue
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The method has 6 parameters. Parameters: check' value' minValue' maxValue' lastValue' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The method has 6 parameters. Parameters: check' value' minValue' maxValue' lastValue' milliseconds
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The method has 7 parameters. Parameters: check' value' minValue' maxValue' lastValue' milliseconds' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The method has 6 parameters. Parameters: check' value' minValue' maxValue' lastValue' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The method has 7 parameters. Parameters: check' value' minValue' maxValue' lastValue' timeout' cancellationToken
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The method has 6 parameters. Parameters: check' value' minValue' maxValue' lastValue' timeout
Long Parameter List,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The method has 7 parameters. Parameters: check' value' minValue' maxValue' lastValue' timeout' cancellationToken
Long Identifier,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsGenericImplementationOf,The length of the parameter interfaceGenericTypeDefinition is 30.
Long Identifier,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsGenericImplementationOf,The length of the parameter interfaceGenericTypeDefinitions is 31.
Long Identifier,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsGenericImplementationOf,The length of the parameter interfaceGenericTypeDefinition is 30.
Long Identifier,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsGenericImplementationOf,The length of the parameter interfaceGenericTypeDefinitions is 31.
Long Statement,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,SkipItems,The length of the statement  "            return predicateCount == null ? SkipItemsExtracted(source' skipCount) : SkipItemsExtracted(source' predicateCount' skipCount); " is 126.
Long Statement,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,TakeItems,The length of the statement  "            return predicateCount == null ? TakeItemsExtracted(source' takeCount) : TakeItemsExtracted(source' predicateCount' takeCount); " is 126.
Long Statement,Theraot.Collections,ProgressiveLookup<TKey;T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ProgressiveLookup.cs,Create,The length of the statement  "            return new ProgressiveLookup<TKey' T>(source.GroupProgressiveBy(keySelector' elementSelector' keyComparer)' keyComparer); " is 121.
Long Statement,Theraot.Collections,ProgressiveLookup<TKey;T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ProgressiveLookup.cs,Create,The length of the statement  "            return new ProgressiveLookup<TKey' T>(source.GroupProgressiveBy(item => item.Key' item => item.Value' keyComparer)' keyComparer); " is 129.
Long Statement,Theraot.Collections.ThreadSafe,SafeDictionary<TKey;TValue>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\SafeDictionary.cs,GetOrAdd,The length of the statement  "                if (_bucket.TryGetOrInsert(hashCode + attempts' () => new KeyValuePair<TKey' TValue>(key' valueFactory(key))' out storedPair)) " is 126.
Long Statement,Theraot.Collections.ThreadSafe,SafeDictionary<TKey;TValue>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\SafeDictionary.cs,TryGetOrAdd,The length of the statement  "                if (_bucket.TryGetOrInsert(hashCode + attempts' () => new KeyValuePair<TKey' TValue>(key' valueFactory(key))' out storedPair)) " is 126.
Long Statement,Theraot.Collections.ThreadSafe,SafeDictionary<TKey;TValue>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\SafeDictionary.cs,Set,The length of the statement  "                Predicate<KeyValuePair<TKey' TValue>> check = found => _keyComparer.Equals(found.Key' key) || keyOverwriteCheck(found.Key); " is 123.
Long Statement,Theraot.Collections.ThreadSafe,SafeDictionary<TKey;TValue>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\SafeDictionary.cs,Set,The length of the statement  "                Predicate<KeyValuePair<TKey' TValue>> check = found => _keyComparer.Equals(found.Key' key) || keyOverwriteCheck(found.Key); " is 123.
Long Statement,Theraot.Collections.ThreadSafe,WeakDictionary<TKey;TValue>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\WeakDictionary.cs,GetOrAdd,The length of the statement  "            Func<WeakNeedle<TKey>' TValue' TValue> factory = (pairKey' foundValue) => result = valueFactory(PrivateTryGetValue(pairKey' out foundKey) ? foundKey : key); " is 156.
Long Statement,Theraot.Collections.ThreadSafe,WeakDictionary<TKey;TValue>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\WeakDictionary.cs,TryGetOrAdd,The length of the statement  "            Func<WeakNeedle<TKey>' TValue' TValue> factory = (pairKey' foundValue) => valueFactory(PrivateTryGetValue(pairKey' out foundKey) ? foundKey : key); " is 147.
Long Statement,Theraot.Core,ActionHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,GetThrowAction,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12) => " is 124.
Long Statement,Theraot.Core,ActionHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,GetThrowAction,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13) => " is 135.
Long Statement,Theraot.Core,ActionHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,GetThrowAction,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13' T14 arg14) => " is 146.
Long Statement,Theraot.Core,ActionHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,GetThrowAction,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13' T14 arg14' T15 arg15) => " is 157.
Long Statement,Theraot.Core,ActionHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\ActionHelper.cs,GetThrowAction,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13' T14 arg14' T15 arg15' T16 arg16) => " is 168.
Long Statement,Theraot.Core,AggregateExceptionHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\AggregateExceptionHelper.cs,AddException,The length of the statement  "            target = ReferenceEquals(target' null) ? new AggregateException(source) : (new AggregateException(source' target)).Flatten(); " is 125.
Long Statement,Theraot.Core,AggregateExceptionHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\AggregateExceptionHelper.cs,AddException,The length of the statement  "            target = ReferenceEquals(target' null) ? new AggregateException(source) : (new AggregateException(source' target)).Flatten(); " is 125.
Long Statement,Theraot.Core,CancellationTokenHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\CancellationTokenHelper.cs,ThrowIfSourceDisposed,The length of the statement  "            //CancellationToken.WaitHandle is documented to throw ObjectDispodesException if the source of the CancellationToken is disposed. " is 129.
Long Statement,Theraot.Core,ComparerExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\ComparerExtensions.cs,Reverse,The length of the statement  "            return ReferenceEquals(originalAsReverse' null) ? new ReverseComparer<T>(comparer ?? Comparer<T>.Default) : originalAsReverse.Wrapped; " is 134.
Long Statement,Theraot.Core,DelegateEqualityComparer,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateEqualityComparer.cs,GetHashCode,The length of the statement  "            return ReferenceEquals(obj' null) ? 0 : ReferenceEquals(obj.Target' null) ? obj.GetMethodInfo().GetHashCode() : obj.GetMethodInfo().GetHashCode() ^ obj.Target.GetHashCode(); " is 173.
Long Statement,Theraot.Core,DelegateEqualityComparer,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateEqualityComparer.cs,CompareInternal,The length of the statement  "            return ReferenceEquals(x' null) ? ReferenceEquals(y' null) : !ReferenceEquals(y' null) && ReferenceEquals(x.Target' y.Target) && x.GetMethodInfo() == y.GetMethodInfo(); " is 168.
Long Statement,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The length of the statement  "                return method.Invoke(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16); " is 124.
Long Statement,Theraot.Core,DelegateExtensions,C:\repos\theraot_Theraot\Core\Theraot\Core\DelegateExtensions.cs,SafeInvoke,The length of the statement  "                return method.Invoke(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16); " is 124.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetReturnFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12) => " is 124.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetReturnFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13) => " is 135.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetReturnFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13' T14 arg14) => " is 146.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetReturnFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13' T14 arg14' T15 arg15) => " is 157.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetReturnFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13' T14 arg14' T15 arg15' T16 arg16) => " is 168.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetThrowFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12) => " is 124.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetThrowFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13) => " is 135.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetThrowFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13' T14 arg14) => " is 146.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetThrowFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13' T14 arg14' T15 arg15) => " is 157.
Long Statement,Theraot.Core,FuncHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\FuncHelper.cs,GetThrowFunc,The length of the statement  "            return (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8' T9 arg9' T10 arg10' T11 arg11' T12 arg12' T13 arg13' T14 arg14' T15 arg15' T16 arg16) => " is 168.
Long Statement,Theraot.Core,PathHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PathHelper.cs,Combine,The length of the statement  "            if (HasInvalidPathChars(path1) || HasInvalidPathChars(path2) || HasInvalidPathChars(path3) || HasInvalidPathChars(path4)) " is 121.
Long Statement,Theraot.Core,RamStream,C:\repos\theraot_Theraot\Core\Theraot\Core\RamStream.cs,Add,The length of the statement  "            return bytes.Insert((int)(_position >> _sectorBits)' new KeyValuePair<long' byte[]>((_position >> _sectorBits) << _sectorBits' left)' out previous); " is 148.
Long Statement,Theraot.Core,Range,C:\repos\theraot_Theraot\Core\Theraot\Core\Range.cs,IsContiguousWith,The length of the statement  "            return Overlaps(range' comparer) || range.Overlaps(this' comparer) || range.Contains(this' comparer) || Contains(range' comparer) || Touches(range' comparer); " is 158.
Long Statement,Theraot.Core,Range,C:\repos\theraot_Theraot\Core\Theraot\Core\Range.cs,Overlaps,The length of the statement  "            return Contains(range._minimun' comparer) || Contains(range._maximun' comparer) || range.Contains(_minimun' comparer) || range.Contains(_maximun' comparer); " is 156.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with no type arguments."' typeof(TReturn))); " is 157.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with no type arguments."' typeof(TReturn))); " is 157.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type argument {1}"' typeof(TReturn)' typeof(T).Name)); " is 176.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type argument {1}"' typeof(TReturn)' typeof(T).Name)); " is 176.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name)); " is 200.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name)); " is 200.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name)); " is 222.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name)); " is 222.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name)); " is 244.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name)); " is 244.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name)); " is 266.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name)); " is 266.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name)); " is 288.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name)); " is 288.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7); " is 122.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name)); " is 310.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7); " is 127.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7); " is 124.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name)); " is 310.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8); " is 132.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name)); " is 332.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8); " is 138.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8); " is 135.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name)); " is 332.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9); " is 142.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name)); " is 354.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9); " is 149.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9); " is 146.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name)); " is 354.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10); " is 154.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name)); " is 378.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10); " is 162.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10); " is 159.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name)); " is 378.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11); " is 166.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name)); " is 402.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11); " is 175.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11); " is 172.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name)); " is 402.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12); " is 178.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name)); " is 426.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12); " is 188.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12); " is 185.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name)); " is 426.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13); " is 190.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name)); " is 450.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12'  arg13); " is 201.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12'  arg13); " is 198.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name)); " is 450.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14); " is 202.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}' {14}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name' typeof(T14).Name)); " is 474.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12'  arg13'  arg14); " is 214.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12'  arg13'  arg14); " is 211.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}' {14}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name' typeof(T14).Name)); " is 474.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' T15' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15); " is 214.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}' {14}' {15}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name' typeof(T14).Name' typeof(T15).Name)); " is 498.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' T15' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12'  arg13'  arg14'  arg15); " is 227.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' T15' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12'  arg13'  arg14'  arg15); " is 224.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}' {14}' {15}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name' typeof(T14).Name' typeof(T15).Name)); " is 498.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' T15' T16' TReturn>.InvokeConstructor(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16); " is 226.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,Create,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}' {14}' {15}' {16}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name' typeof(T14).Name' typeof(T15).Name' typeof(T16).Name)); " is 522.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' T15' T16' TReturn>.CreateOrDefault( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12'  arg13'  arg14'  arg15'  arg16); " is 240.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,CreateOrFail,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' T15' T16' TReturn>.CreateOrFail( arg1'  arg2'  arg3'  arg4'  arg5'  arg6'  arg7'  arg8'  arg9'  arg10'  arg11'  arg12'  arg13'  arg14'  arg15'  arg16); " is 237.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreate,The length of the statement  "                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}' {14}' {15}' {16}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name' typeof(T14).Name' typeof(T15).Name' typeof(T16).Name)); " is 522.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,GetCreateOrDefault,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' T15' T16' TReturn>.CreateOrDefault; " is 121.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,HasConstructor,The length of the statement  "            return ConstructorHelper<T1' T2' T3' T4' T5' T6' T7' T8' T9' T10' T11' T12' T13' T14' T15' T16' TReturn>.HasConstructor; " is 120.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsBinaryPortableExtracted,The length of the statement  "                var property = typeof(BinaryPortableInfo<>).MakeGenericType(type).GetProperty("Result"' BindingFlags.Public | BindingFlags.Static); " is 131.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsBlittableExtracted,The length of the statement  "                var property = typeof(BlittableInfo<>).MakeGenericType(type).GetProperty("Result"' BindingFlags.Public | BindingFlags.Static); " is 126.
Long Statement,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsValueTypeRecursiveExtracted,The length of the statement  "                var property = typeof(ValueTypeRecursiveInfo<>).MakeGenericType(type).GetProperty("Result"' BindingFlags.Public | BindingFlags.Static); " is 135.
Long Statement,Theraot.Core,ConstructorHelper<TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with no type arguments."' typeof(TReturn))); " is 157.
Long Statement,Theraot.Core,ConstructorHelper<T;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type argument {1}"' typeof(TReturn)' typeof(T).Name)); " is 176.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name)); " is 200.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name)); " is 222.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name)); " is 244.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name)); " is 266.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name)); " is 288.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name)); " is 310.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name)); " is 332.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name)); " is 354.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name)); " is 378.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name)); " is 402.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    return (TReturn)_constructorInfo.Invoke(new object[]{arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11}); " is 122.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name)); " is 426.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    return (TReturn)_constructorInfo.Invoke(new object[]{arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12}); " is 129.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name)); " is 450.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    return (TReturn)_constructorInfo.Invoke(new object[]{arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13}); " is 136.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}' {14}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name' typeof(T14).Name)); " is 474.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    return (TReturn)_constructorInfo.Invoke(new object[]{arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14}); " is 143.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}' {14}' {15}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name' typeof(T14).Name' typeof(T15).Name)); " is 498.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    return (TReturn)_constructorInfo.Invoke(new object[]{arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15}); " is 150.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture' "There is no constructor for {0} with the type arguments {1}' {2}' {3}' {4}' {5}' {6}' {7}' {8}' {9}' {10}' {11}' {12}' {13}' {14}' {15}' {16}"' typeof(TReturn)' typeof(T1).Name' typeof(T2).Name' typeof(T3).Name' typeof(T4).Name' typeof(T5).Name' typeof(T6).Name' typeof(T7).Name' typeof(T8).Name' typeof(T9).Name' typeof(T10).Name' typeof(T11).Name' typeof(T12).Name' typeof(T13).Name' typeof(T14).Name' typeof(T15).Name' typeof(T16).Name)); " is 522.
Long Statement,Theraot.Core,ConstructorHelper<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,InvokeConstructor,The length of the statement  "                    return (TReturn)_constructorInfo.Invoke(new object[]{arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16}); " is 157.
Long Statement,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,Invoke,The length of the statement  "            _target.Invoke(_arg1' _arg2' _arg3' _arg4' _arg5' _arg6' _arg7' _arg8' _arg9' _arg10' _arg11' _arg12' _arg13' _arg14' _arg15); " is 126.
Long Statement,Theraot.Core,ValueActionClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueActionClosure.cs,Invoke,The length of the statement  "            _target.Invoke(_arg1' _arg2' _arg3' _arg4' _arg5' _arg6' _arg7' _arg8' _arg9' _arg10' _arg11' _arg12' _arg13' _arg14' _arg15' _arg16); " is 134.
Long Statement,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,Invoke,The length of the statement  "            _result = _target.Invoke(_arg1' _arg2' _arg3' _arg4' _arg5' _arg6' _arg7' _arg8' _arg9' _arg10' _arg11' _arg12' _arg13); " is 120.
Long Statement,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,Invoke,The length of the statement  "            _result = _target.Invoke(_arg1' _arg2' _arg3' _arg4' _arg5' _arg6' _arg7' _arg8' _arg9' _arg10' _arg11' _arg12' _arg13' _arg14); " is 128.
Long Statement,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,InvokeReturn,The length of the statement  "            return _target.Invoke(_arg1' _arg2' _arg3' _arg4' _arg5' _arg6' _arg7' _arg8' _arg9' _arg10' _arg11' _arg12' _arg13' _arg14); " is 125.
Long Statement,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,Invoke,The length of the statement  "            _result = _target.Invoke(_arg1' _arg2' _arg3' _arg4' _arg5' _arg6' _arg7' _arg8' _arg9' _arg10' _arg11' _arg12' _arg13' _arg14' _arg15); " is 136.
Long Statement,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,InvokeReturn,The length of the statement  "            return _target.Invoke(_arg1' _arg2' _arg3' _arg4' _arg5' _arg6' _arg7' _arg8' _arg9' _arg10' _arg11' _arg12' _arg13' _arg14' _arg15); " is 133.
Long Statement,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,Invoke,The length of the statement  "            _result = _target.Invoke(_arg1' _arg2' _arg3' _arg4' _arg5' _arg6' _arg7' _arg8' _arg9' _arg10' _arg11' _arg12' _arg13' _arg14' _arg15' _arg16); " is 144.
Long Statement,Theraot.Core,ValueFuncClosure<T1;T2;T3;T4;T5;T6;T7;T8;T9;T10;T11;T12;T13;T14;T15;T16;TReturn>,C:\repos\theraot_Theraot\Core\Theraot\Core\ValueFuncClosure.cs,InvokeReturn,The length of the statement  "            return _target.Invoke(_arg1' _arg2' _arg3' _arg4' _arg5' _arg6' _arg7' _arg8' _arg9' _arg10' _arg11' _arg12' _arg13' _arg14' _arg15' _arg16); " is 141.
Long Statement,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,CanUpgrade,The length of the statement  "                if (Volatile.Read(ref _readCount) <= _currentReadingCount.Value && Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null) == null) " is 149.
Long Statement,Theraot.Threading,TrackingThreadLocal<T>,C:\repos\theraot_Theraot\Core\Theraot\Threading\TrackingThreadLocal.cs,ToString,The length of the statement  "            return string.Format(System.Globalization.CultureInfo.InvariantCulture' "[ThreadLocal: IsValueCreated={0}' Value={1}]"' IsValueCreated' Value); " is 143.
Long Statement,Theraot.Threading.Needles,LockableNeedle<T>,C:\repos\theraot_Theraot\Core\Theraot\Threading\Needles\LockableNeedle.cs,CaptureAndWait,The length of the statement  "            // If another thread changed _needleLock.Value after the check but before the starting to wait' the wait will not finish. " is 121.
Long Statement,Theraot.Threading.Needles,Transact,C:\repos\theraot_Theraot\Core\Theraot\Threading\Needles\Transact.cs,Release,The length of the statement  "            for (var currentTransaction = _currentTransaction; currentTransaction != null && currentTransaction != this; currentTransaction = currentTransaction._parentTransaction) " is 168.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()                      && enumerator8.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()                      && enumerator8.MoveNext()                      && enumerator9.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()                      && enumerator8.MoveNext()                      && enumerator9.MoveNext()                      && enumerator10.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()                      && enumerator8.MoveNext()                      && enumerator9.MoveNext()                      && enumerator10.MoveNext()                      && enumerator11.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()                      && enumerator8.MoveNext()                      && enumerator9.MoveNext()                      && enumerator10.MoveNext()                      && enumerator11.MoveNext()                      && enumerator12.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()                      && enumerator8.MoveNext()                      && enumerator9.MoveNext()                      && enumerator10.MoveNext()                      && enumerator11.MoveNext()                      && enumerator12.MoveNext()                      && enumerator13.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()                      && enumerator8.MoveNext()                      && enumerator9.MoveNext()                      && enumerator10.MoveNext()                      && enumerator11.MoveNext()                      && enumerator12.MoveNext()                      && enumerator13.MoveNext()                      && enumerator14.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()                      && enumerator8.MoveNext()                      && enumerator9.MoveNext()                      && enumerator10.MoveNext()                      && enumerator11.MoveNext()                      && enumerator12.MoveNext()                      && enumerator13.MoveNext()                      && enumerator14.MoveNext()                      && enumerator15.MoveNext()"  is complex.
Complex Conditional,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,Zip,The conditional expression  "enumerator1.MoveNext()                      && enumerator2.MoveNext()                      && enumerator3.MoveNext()                      && enumerator4.MoveNext()                      && enumerator5.MoveNext()                      && enumerator6.MoveNext()                      && enumerator7.MoveNext()                      && enumerator8.MoveNext()                      && enumerator9.MoveNext()                      && enumerator10.MoveNext()                      && enumerator11.MoveNext()                      && enumerator12.MoveNext()                      && enumerator13.MoveNext()                      && enumerator14.MoveNext()                      && enumerator15.MoveNext()                      && enumerator16.MoveNext()"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsPrimitiveInteger,The conditional expression  "type == typeof(sbyte)                      || type == typeof(byte)                      || type == typeof(short)                      || type == typeof(int)                      || type == typeof(long)                      || type == typeof(ushort)                      || type == typeof(uint)                      || type == typeof(ulong)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsArithmetic,The conditional expression  "type == typeof(short)                      || type == typeof(int)                      || type == typeof(long)                      || type == typeof(double)                      || type == typeof(float)                      || type == typeof(ushort)                      || type == typeof(uint)                      || type == typeof(ulong)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsConvertible,The conditional expression  "type == typeof(bool)                      || type == typeof(byte)                      || type == typeof(sbyte)                      || type == typeof(short)                      || type == typeof(int)                      || type == typeof(long)                      || type == typeof(ushort)                      || type == typeof(uint)                      || type == typeof(ulong)                      || type == typeof(float)                      || type == typeof(double)                      || type == typeof(char)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsImplicitNumericConversion,The conditional expression  "target == typeof(short)                      || target == typeof(int)                      || target == typeof(long)                      || target == typeof(float)                      || target == typeof(double)                      || target == typeof(decimal)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsImplicitNumericConversion,The conditional expression  "target == typeof(short)                      || target == typeof(ushort)                      || target == typeof(int)                      || target == typeof(uint)                      || target == typeof(long)                      || target == typeof(ulong)                      || target == typeof(float)                      || target == typeof(double)                      || target == typeof(decimal)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsImplicitNumericConversion,The conditional expression  "target == typeof(int)                      || target == typeof(long)                      || target == typeof(float)                      || target == typeof(double)                      || target == typeof(decimal)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsImplicitNumericConversion,The conditional expression  "target == typeof(int)                      || target == typeof(uint)                      || target == typeof(long)                      || target == typeof(ulong)                      || target == typeof(float)                      || target == typeof(double)                      || target == typeof(decimal)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsImplicitNumericConversion,The conditional expression  "target == typeof(long)                      || target == typeof(float)                      || target == typeof(double)                      || target == typeof(decimal)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsImplicitNumericConversion,The conditional expression  "target == typeof(ulong)                      || target == typeof(float)                      || target == typeof(double)                      || target == typeof(decimal)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsImplicitNumericConversion,The conditional expression  "target == typeof(ushort)                      || target == typeof(int)                      || target == typeof(uint)                      || target == typeof(long)                      || target == typeof(ulong)                      || target == typeof(float)                      || target == typeof(double)                      || target == typeof(decimal)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsIntegerOrBool,The conditional expression  "type == typeof(bool)                      || type == typeof(sbyte)                      || type == typeof(byte)                      || type == typeof(short)                      || type == typeof(int)                      || type == typeof(long)                      || type == typeof(ushort)                      || type == typeof(uint)                      || type == typeof(ulong)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsLegalExplicitVariantDelegateConversion,The conditional expression  "!PrivateIsDelegate(source) || !PrivateIsDelegate(target) || !sourceInfo.IsGenericType || !targetInfo.IsGenericType"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsNumeric,The conditional expression  "type == typeof(char)                      || type == typeof(sbyte)                      || type == typeof(byte)                      || type == typeof(short)                      || type == typeof(int)                      || type == typeof(long)                      || type == typeof(double)                      || type == typeof(float)                      || type == typeof(ushort)                      || type == typeof(uint)                      || type == typeof(ulong)"  is complex.
Complex Conditional,Theraot.Core,TypeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\TypeHelper.ConstructorHelper.cs,IsUnsigned,The conditional expression  "type == typeof(byte)                      || type == typeof(char)                      || type == typeof(ushort)                      || type == typeof(uint)                      || type == typeof(ulong)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeSetBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Complex Conditional,Theraot.Threading,ThreadingHelper,C:\repos\theraot_Theraot\Core\Theraot\Threading\ThreadingHelper.cs,SpinWaitRelativeExchangeBounded,The conditional expression  "(lastValue < minValue || lastValue > maxValue) || (lastValue + value < minValue || lastValue > maxValue - value)"  is complex.
Empty Catch Block,Theraot.Collections.ThreadSafe,WeakDelegateCollection,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\WeakDelegateCollection.cs,InvokeExtracted,The method has an empty catch block.
Empty Catch Block,Theraot.Collections.ThreadSafe,WeakEvent<TEventArgs>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\WeakEvent.cs,Add,The method has an empty catch block.
Empty Catch Block,Theraot.Collections.ThreadSafe,WeakEvent<TEventArgs>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\WeakEvent.cs,Add,The method has an empty catch block.
Empty Catch Block,Theraot.Collections.ThreadSafe,WeakEvent<TEventArgs>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\WeakEvent.cs,Remove,The method has an empty catch block.
Empty Catch Block,Theraot.Collections.ThreadSafe,WeakEvent<TEventArgs>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\WeakEvent.cs,Remove,The method has an empty catch block.
Empty Catch Block,Theraot.Core,FolderEnumeration,C:\repos\theraot_Theraot\Core\Theraot\Core\FolderEnumeration.cs,GetFiles,The method has an empty catch block.
Empty Catch Block,Theraot.Core,FolderEnumeration,C:\repos\theraot_Theraot\Core\Theraot\Core\FolderEnumeration.cs,GetFiles,The method has an empty catch block.
Empty Catch Block,Theraot.Threading.Needles,Needle<T>,C:\repos\theraot_Theraot\Core\Theraot\Threading\Needles\Needle.cs,SetTargetValue,The method has an empty catch block.
Empty Catch Block,Theraot.Threading.Needles,WeakNeedle<T>,C:\repos\theraot_Theraot\Core\Theraot\Threading\Needles\WeakNeedle.cs,ReleaseExtracted,The method has an empty catch block.
Empty Catch Block,Theraot.Threading.Needles,WeakNeedle<T>,C:\repos\theraot_Theraot\Core\Theraot\Threading\Needles\WeakNeedle.cs,WriteTarget,The method has an empty catch block.
Magic Number,Theraot.Collections,Extensions,C:\repos\theraot_Theraot\Core\Theraot\Collections\Extensions.add.cs,SortExtracted,The following statement contains a magic number: var pivot = list[low + ((high - low) / 2)];
Magic Number,Theraot.Collections,KeyValuePairEqualityComparer<TKey;TValue>,C:\repos\theraot_Theraot\Core\Theraot\Collections\KeyValuePairEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (_keyComparer.GetHashCode(obj.Key) * 13) + _valueComparer.GetHashCode(obj.Value);
Magic Number,Theraot.Collections,Progressor<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\Progressor.cs,Progressor,The following statement contains a magic number: _tryTake = (out T value) =>              {                  value = default(T);                  if (Volatile.Read(ref guard) == 0)                  {                      bool result;                      // We need a lock' there is no way around it. IEnumerator is just awful. Use another overload if possible.                      lock (enumerator)                      {                          result = enumerator.MoveNext();                          if (result)                          {                              value = enumerator.Current;                          }                      }                      if (result)                      {                          _proxy.OnNext(value);                          return true;                      }                      enumerator.Dispose();                      Interlocked.CompareExchange(ref guard' 1' 0);                  }                  if (Interlocked.CompareExchange(ref guard' 2' 1) == 1)                  {                      _tryTake = tryTakeReplacement;                      Volatile.Write(ref guard' 3);                  }                  else                  {                      ThreadingHelper.SpinWaitUntil(ref guard' 3);                  }                  var tryTake = _tryTake;                  return tryTake(out value);              };
Magic Number,Theraot.Collections,Progressor<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\Progressor.cs,Progressor,The following statement contains a magic number: _tryTake = (out T value) =>              {                  value = default(T);                  if (Volatile.Read(ref guard) == 0)                  {                      bool result;                      // We need a lock' there is no way around it. IEnumerator is just awful. Use another overload if possible.                      lock (enumerator)                      {                          result = enumerator.MoveNext();                          if (result)                          {                              value = enumerator.Current;                          }                      }                      if (result)                      {                          _proxy.OnNext(value);                          return true;                      }                      enumerator.Dispose();                      Interlocked.CompareExchange(ref guard' 1' 0);                  }                  if (Interlocked.CompareExchange(ref guard' 2' 1) == 1)                  {                      _tryTake = tryTakeReplacement;                      Volatile.Write(ref guard' 3);                  }                  else                  {                      ThreadingHelper.SpinWaitUntil(ref guard' 3);                  }                  var tryTake = _tryTake;                  return tryTake(out value);              };
Magic Number,Theraot.Collections,Progressor<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\Progressor.cs,Progressor,The following statement contains a magic number: _tryTake = (out T value) =>              {                  value = default(T);                  if (Volatile.Read(ref guard) == 0)                  {                      bool result;                      // We need a lock' there is no way around it. IEnumerator is just awful. Use another overload if possible.                      lock (enumerator)                      {                          result = enumerator.MoveNext();                          if (result)                          {                              value = enumerator.Current;                          }                      }                      if (result)                      {                          _proxy.OnNext(value);                          return true;                      }                      enumerator.Dispose();                      Interlocked.CompareExchange(ref guard' 1' 0);                  }                  if (Interlocked.CompareExchange(ref guard' 2' 1) == 1)                  {                      _tryTake = tryTakeReplacement;                      Volatile.Write(ref guard' 3);                  }                  else                  {                      ThreadingHelper.SpinWaitUntil(ref guard' 3);                  }                  var tryTake = _tryTake;                  return tryTake(out value);              };
Magic Number,Theraot.Collections,Progressor<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\Progressor.cs,Progressor,The following statement contains a magic number: _tryTake = (out T value) =>              {                  value = default(T);                  if (Volatile.Read(ref guard) == 0)                  {                      var currentIndex = Interlocked.Increment(ref index);                      if (currentIndex < wrapped.Length)                      {                          value = wrapped[currentIndex];                          _proxy.OnNext(value);                          return true;                      }                      Interlocked.CompareExchange(ref guard' 1' 0);                  }                  if (Interlocked.CompareExchange(ref guard' 2' 1) == 1)                  {                      _tryTake = tryTakeReplacement;                  }                  return false;              };
Magic Number,Theraot.Collections,Progressor<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\Progressor.cs,Progressor,The following statement contains a magic number: _tryTake = (out T value) =>              {                  if (Volatile.Read(ref guard) == 0)                  {                      var currentIndex = Interlocked.Increment(ref index);                      if (currentIndex < preface.Length)                      {                          value = preface[currentIndex];                          _proxy.OnNext(value);                          return true;                      }                      Interlocked.CompareExchange(ref guard' 1' 0);                  }                  if (Interlocked.CompareExchange(ref guard' 2' 1) == 1)                  {                      _tryTake = tryTakeReplacement;                      Volatile.Write(ref guard' 3);                  }                  else                  {                      ThreadingHelper.SpinWaitUntil(ref guard' 3);                  }                  var tryTake = _tryTake;                  return tryTake(out value);              };
Magic Number,Theraot.Collections,Progressor<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\Progressor.cs,Progressor,The following statement contains a magic number: _tryTake = (out T value) =>              {                  if (Volatile.Read(ref guard) == 0)                  {                      var currentIndex = Interlocked.Increment(ref index);                      if (currentIndex < preface.Length)                      {                          value = preface[currentIndex];                          _proxy.OnNext(value);                          return true;                      }                      Interlocked.CompareExchange(ref guard' 1' 0);                  }                  if (Interlocked.CompareExchange(ref guard' 2' 1) == 1)                  {                      _tryTake = tryTakeReplacement;                      Volatile.Write(ref guard' 3);                  }                  else                  {                      ThreadingHelper.SpinWaitUntil(ref guard' 3);                  }                  var tryTake = _tryTake;                  return tryTake(out value);              };
Magic Number,Theraot.Collections,Progressor<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\Progressor.cs,Progressor,The following statement contains a magic number: _tryTake = (out T value) =>              {                  if (Volatile.Read(ref guard) == 0)                  {                      var currentIndex = Interlocked.Increment(ref index);                      if (currentIndex < preface.Length)                      {                          value = preface[currentIndex];                          _proxy.OnNext(value);                          return true;                      }                      Interlocked.CompareExchange(ref guard' 1' 0);                  }                  if (Interlocked.CompareExchange(ref guard' 2' 1) == 1)                  {                      _tryTake = tryTakeReplacement;                      Volatile.Write(ref guard' 3);                  }                  else                  {                      ThreadingHelper.SpinWaitUntil(ref guard' 3);                  }                  var tryTake = _tryTake;                  return tryTake(out value);              };
Magic Number,Theraot.Collections,Progressor<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\Progressor.cs,Progressor,The following statement contains a magic number: _tryTake = (out T value) =>              {                  value = default(T);                  if (Volatile.Read(ref guard) == 0)                  {                      bool result;                      // We need a lock' there is no way around it. IEnumerator is just awful. Use another overload if possible.                      lock (enumerator)                      {                          result = enumerator.MoveNext();                          if (result)                          {                              value = enumerator.Current;                          }                      }                      if (result)                      {                          _proxy.OnNext(value);                          return true;                      }                      enumerator.Dispose();                      Interlocked.CompareExchange(ref guard' 1' 0);                  }                  if (Interlocked.CompareExchange(ref guard' 2' 1) == 1)                  {                      _tryTake = tryTakeReplacement;                  }                  return false;              };
Magic Number,Theraot.Collections.Specialized,AVLNode,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\AVLTree.AVLNode.cs,MakeBalanced,The following statement contains a magic number: do                  {                      current = node;                      Update(node);                      if (node._balance >= 2)                      {                          if (node._right._balance <= 1)                          {                              DoubleLeft(ref node);                          }                          else                          {                              RotateLeft(ref node);                          }                      }                      else if (node._balance <= -2)                      {                          if (node._left._balance >= 1)                          {                              DoubleRight(ref node);                          }                          else                          {                              RotateRight(ref node);                          }                      }                  } while (node != current);
Magic Number,Theraot.Collections.Specialized,AVLNode,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\AVLTree.AVLNode.cs,MakeBalanced,The following statement contains a magic number: do                  {                      current = node;                      Update(node);                      if (node._balance >= 2)                      {                          if (node._right._balance <= 1)                          {                              DoubleLeft(ref node);                          }                          else                          {                              RotateLeft(ref node);                          }                      }                      else if (node._balance <= -2)                      {                          if (node._left._balance >= 1)                          {                              DoubleRight(ref node);                          }                          else                          {                              RotateRight(ref node);                          }                      }                  } while (node != current);
Magic Number,Theraot.Collections.Specialized,FlagArray,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\FlagArray.cs,Contains,The following statement contains a magic number: foreach (var entry in _entries)              {                  newindex += 32;                  if (newindex <= _capacity)                  {                      if (entry != check)                      {                          return true;                      }                      index = newindex;                  }                  else                  {                      foreach (var bit in entry.BinaryReverse().BitsBinary())                      {                          if ((bit == 1) == item)                          {                              return true;                          }                          index++;                          if (index == _capacity)                          {                              break;                          }                      }                      break;                  }              }
Magic Number,Theraot.Collections.Specialized,FlagArray,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\FlagArray.cs,GetLength,The following statement contains a magic number: return (length >> 5) + ((length & 31) == 0 ? 0 : 1);
Magic Number,Theraot.Collections.Specialized,FlagArray,C:\repos\theraot_Theraot\Core\Theraot\Collections\Specialized\FlagArray.cs,GetLength,The following statement contains a magic number: return (length >> 5) + ((length & 31) == 0 ? 0 : 1);
Magic Number,Theraot.Collections.ThreadSafe,Bucket<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\Bucket.cs,Bucket,The following statement contains a magic number: _bucketCore = new BucketCore(7);
Magic Number,Theraot.Collections.ThreadSafe,Bucket<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\Bucket.cs,Bucket,The following statement contains a magic number: _bucketCore = new BucketCore(7);
Magic Number,Theraot.Collections.ThreadSafe,BucketCore,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketCore.cs,BucketCore,The following statement contains a magic number: if (level < 0 || level > 7)              {                  throw new ArgumentOutOfRangeException("level"' "level < 0 || level > 7");              }
Magic Number,Theraot.Collections.ThreadSafe,BucketCore,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\BucketCore.cs,SubIndex,The following statement contains a magic number: var result = (index >> (5 * (_level - 1))) & 0x1F;
Magic Number,Theraot.Collections.ThreadSafe,FixedSizeBucket<T>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\FixedSizeBucket.cs,FixedSizeBucket,The following statement contains a magic number: _entries = ArrayReservoir<object>.GetArray(collection == null ? 64 : collection.Count);
Magic Number,Theraot.Collections.ThreadSafe,NeedleReservoir<T;TNeedle>,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\NeedleReservoir.cs,NeedleReservoir,The following statement contains a magic number: _pool = new Pool<TNeedle>(64' Recycle);
Magic Number,Theraot.Collections.ThreadSafe,Node,C:\repos\theraot_Theraot\Core\Theraot\Collections\ThreadSafe\SafeQueue.cs,Node,The following statement contains a magic number: Queue = new FixedSizeQueue<T>(64);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BinaryReverse,The following statement contains a magic number: value = ((value & 0xcccccccc) >> 2) | ((value & 0x33333333) << 2);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BinaryReverse,The following statement contains a magic number: value = ((value & 0xcccccccc) >> 2) | ((value & 0x33333333) << 2);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BinaryReverse,The following statement contains a magic number: value = ((value & 0xf0f0f0f0) >> 4) | ((value & 0x0f0f0f0f) << 4);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BinaryReverse,The following statement contains a magic number: value = ((value & 0xf0f0f0f0) >> 4) | ((value & 0x0f0f0f0f) << 4);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BinaryReverse,The following statement contains a magic number: value = ((value & 0xff00ff00) >> 8) | ((value & 0x00ff00ff) << 8);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BinaryReverse,The following statement contains a magic number: value = ((value & 0xff00ff00) >> 8) | ((value & 0x00ff00ff) << 8);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BinaryReverse,The following statement contains a magic number: return (value >> 16) | (value << 16);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BinaryReverse,The following statement contains a magic number: return (value >> 16) | (value << 16);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  var tmp = (byte)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return (sbyte)check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  var tmp = (byte)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return (sbyte)check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  var tmp = (ushort)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return (short)check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  var tmp = (ushort)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return (short)check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  var tmp = (uint)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return (int)check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  var tmp = (uint)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return (int)check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  var tmp = (ulong)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return (long)check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  var tmp = (ulong)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return (long)check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  do                  {                      if ((value & check) != 0)                      {                          yield return check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  do                  {                      if ((value & check) != 0)                      {                          yield return check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  do                  {                      if ((value & check) != 0)                      {                          yield return check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  do                  {                      if ((value & check) != 0)                      {                          yield return check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  do                  {                      if ((value & check) != 0)                      {                          yield return check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  do                  {                      if ((value & check) != 0)                      {                          yield return check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  do                  {                      if ((value & check) != 0)                      {                          yield return check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Bits,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  do                  {                      if ((value & check) != 0)                      {                          yield return check;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  var tmp = (byte)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  var tmp = (byte)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  var tmp = (ushort)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  var tmp = (ushort)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  var tmp = (uint)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  var tmp = (uint)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  var tmp = (ulong)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  var tmp = (ulong)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  do                  {                      if ((value & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  do                  {                      if ((value & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  do                  {                      if ((value & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  do                  {                      if ((value & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  do                  {                      if ((value & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  do                  {                      if ((value & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  do                  {                      if ((value & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsBinary,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  do                  {                      if ((value & check) != 0)                      {                          yield return 1;                      }                      else                      {                          yield return 0;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  var tmp = (byte)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  var tmp = (byte)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  var tmp = (ushort)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  var tmp = (ushort)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  var tmp = (uint)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  var tmp = (uint)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  var tmp = (ulong)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  var tmp = (ulong)value;                  do                  {                      if ((tmp & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  do                  {                      if ((value & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  byte check = 1 << 7;                  var log2 = 8;                  do                  {                      if ((value & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  do                  {                      if ((value & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  ushort check = 1 << 15;                  var log2 = 16;                  do                  {                      if ((value & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  do                  {                      if ((value & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  var check = (uint)1 << 31;                  var log2 = 32;                  do                  {                      if ((value & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  do                  {                      if ((value & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BitsLog2,The following statement contains a magic number: unchecked              {                  var check = (ulong)1 << 63;                  var log2 = 64;                  do                  {                      if ((value & check) != 0)                      {                          yield return log2 - 1;                      }                      check >>= 1;                      log2--;                  }                  while (log2 > 0);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: value |= value >> 2;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: value |= value >> 4;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: value |= value >> 8;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: value |= value >> 16;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: return (sizeof(int) * 8) - PopulationCount(value);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: value |= value >> 2;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: value |= value >> 4;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: value |= value >> 8;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: value |= value >> 16;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: value |= value >> 32;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,LeadingZeroCount,The following statement contains a magic number: return (sizeof(long) * 8) - PopulationCount(value);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,PopulationCount,The following statement contains a magic number: value = (value & 0x33333333) + ((value >> 2) & 0x33333333);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,PopulationCount,The following statement contains a magic number: value = (value + (value >> 4)) & 0x0F0F0F0F;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,PopulationCount,The following statement contains a magic number: value += value >> 8;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,PopulationCount,The following statement contains a magic number: value += value >> 16;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,PopulationCount,The following statement contains a magic number: value = (value & 0x3333333333333333UL) + ((value >> 2) & 0x3333333333333333UL);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,PopulationCount,The following statement contains a magic number: value = (value + (value >> 4)) & 0x0f0f0f0f0f0f0f0fUL;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,PopulationCount,The following statement contains a magic number: return (int)((value * 0x0101010101010101UL) >> 56);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BuildInt64,The following statement contains a magic number: return unchecked((long)((ulong)(uint)hi << 32 | (uint)lo));
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BuildInt64,The following statement contains a magic number: return unchecked((long)((ulong)hi << 32 | lo));
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,BuildUInt64,The following statement contains a magic number: return (ulong)hi << 32 | lo;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleFromParts,The following statement contains a magic number: if (man == 0)              {                  du.Uu = 0;              }              else              {                  // Normalize so that 0x0010 0000 0000 0000 is the highest bit set.                  var cbitShift = CbitHighZero(man) - 11;                  if (cbitShift < 0)                  {                      man >>= -cbitShift;                  }                  else                  {                      man <<= cbitShift;                  }                    exp -= cbitShift;                    // Move the point to just behind the leading 1: 0x001.0 0000 0000 0000                  // (52 bits) and skew the exponent (by 0x3FF == 1023).                  exp += 1075;                    if (exp >= 0x7FF)                  {                      // Infinity.                      du.Uu = 0x7FF0000000000000;                  }                  else if (exp <= 0)                  {                      // Denormalized.                      exp--;                      if (exp < -52)                      {                          // Underflow to zero.                          du.Uu = 0;                      }                      else                      {                          du.Uu = man >> -exp;                      }                  }                  else                  {                      // Mask off the implicit high bit.                      du.Uu = (man & 0x000FFFFFFFFFFFFF) | ((ulong)exp << 52);                  }              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleFromParts,The following statement contains a magic number: if (man == 0)              {                  du.Uu = 0;              }              else              {                  // Normalize so that 0x0010 0000 0000 0000 is the highest bit set.                  var cbitShift = CbitHighZero(man) - 11;                  if (cbitShift < 0)                  {                      man >>= -cbitShift;                  }                  else                  {                      man <<= cbitShift;                  }                    exp -= cbitShift;                    // Move the point to just behind the leading 1: 0x001.0 0000 0000 0000                  // (52 bits) and skew the exponent (by 0x3FF == 1023).                  exp += 1075;                    if (exp >= 0x7FF)                  {                      // Infinity.                      du.Uu = 0x7FF0000000000000;                  }                  else if (exp <= 0)                  {                      // Denormalized.                      exp--;                      if (exp < -52)                      {                          // Underflow to zero.                          du.Uu = 0;                      }                      else                      {                          du.Uu = man >> -exp;                      }                  }                  else                  {                      // Mask off the implicit high bit.                      du.Uu = (man & 0x000FFFFFFFFFFFFF) | ((ulong)exp << 52);                  }              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleFromParts,The following statement contains a magic number: if (man == 0)              {                  du.Uu = 0;              }              else              {                  // Normalize so that 0x0010 0000 0000 0000 is the highest bit set.                  var cbitShift = CbitHighZero(man) - 11;                  if (cbitShift < 0)                  {                      man >>= -cbitShift;                  }                  else                  {                      man <<= cbitShift;                  }                    exp -= cbitShift;                    // Move the point to just behind the leading 1: 0x001.0 0000 0000 0000                  // (52 bits) and skew the exponent (by 0x3FF == 1023).                  exp += 1075;                    if (exp >= 0x7FF)                  {                      // Infinity.                      du.Uu = 0x7FF0000000000000;                  }                  else if (exp <= 0)                  {                      // Denormalized.                      exp--;                      if (exp < -52)                      {                          // Underflow to zero.                          du.Uu = 0;                      }                      else                      {                          du.Uu = man >> -exp;                      }                  }                  else                  {                      // Mask off the implicit high bit.                      du.Uu = (man & 0x000FFFFFFFFFFFFF) | ((ulong)exp << 52);                  }              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleFromParts,The following statement contains a magic number: if (man == 0)              {                  du.Uu = 0;              }              else              {                  // Normalize so that 0x0010 0000 0000 0000 is the highest bit set.                  var cbitShift = CbitHighZero(man) - 11;                  if (cbitShift < 0)                  {                      man >>= -cbitShift;                  }                  else                  {                      man <<= cbitShift;                  }                    exp -= cbitShift;                    // Move the point to just behind the leading 1: 0x001.0 0000 0000 0000                  // (52 bits) and skew the exponent (by 0x3FF == 1023).                  exp += 1075;                    if (exp >= 0x7FF)                  {                      // Infinity.                      du.Uu = 0x7FF0000000000000;                  }                  else if (exp <= 0)                  {                      // Denormalized.                      exp--;                      if (exp < -52)                      {                          // Underflow to zero.                          du.Uu = 0;                      }                      else                      {                          du.Uu = man >> -exp;                      }                  }                  else                  {                      // Mask off the implicit high bit.                      du.Uu = (man & 0x000FFFFFFFFFFFFF) | ((ulong)exp << 52);                  }              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleParts,The following statement contains a magic number: sign = 1 - ((int)(du.Uu >> 62) & 2);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleParts,The following statement contains a magic number: sign = 1 - ((int)(du.Uu >> 62) & 2);
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleParts,The following statement contains a magic number: exp = (int)(du.Uu >> 52) & 0x7FF;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleParts,The following statement contains a magic number: if (exp == 0)              {                  // Denormalized number.                  fFinite = true;                  if (man != 0)                  {                      exp = -1074;                  }              }              else if (exp == 0x7FF)              {                  // NaN or Inifite.                  fFinite = false;                  exp = int.MaxValue;              }              else              {                  fFinite = true;                  man |= 0x0010000000000000;                  exp -= 1075;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetDoubleParts,The following statement contains a magic number: if (exp == 0)              {                  // Denormalized number.                  fFinite = true;                  if (man != 0)                  {                      exp = -1074;                  }              }              else if (exp == 0x7FF)              {                  // NaN or Inifite.                  fFinite = false;                  exp = int.MaxValue;              }              else              {                  fFinite = true;                  man |= 0x0010000000000000;                  exp -= 1075;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The following statement contains a magic number: unchecked              {                  lo = (int)value;                  hi = (int)((ulong)value >> 32);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The following statement contains a magic number: unchecked              {                  lo = (short)value;                  hi = (short)(value >> 16);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The following statement contains a magic number: unchecked              {                  lo = (uint)value;                  hi = (uint)(value >> 32);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The following statement contains a magic number: unchecked              {                  lo = (ushort)value;                  hi = (ushort)(value >> 16);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The following statement contains a magic number: if (value.CompareTo(0.0f) == 0)              {                  sign = 0;                  mantissa = 0;                  exponent = 1;                  finite = true;              }              else              {                  var bits = SingleAsInt32(value);                  sign = (bits < 0) ? -1 : 1;                  exponent = (bits >> 23) & 0xff;                  if (exponent == 2047)                  {                      finite = false;                      mantissa = 0;                  }                  else                  {                      finite = true;                      mantissa = bits & 0xffffff;                      if (exponent == 0)                      {                          // Subnormal numbers; exponent is effectively one higher'                          // but there's no extra normalisation bit in the mantissa                          exponent = 1;                      }                      else                      {                          // Normal numbers; leave exponent as it is but add extra                          // bit to the front of the mantissa                          mantissa |= 1 << 23;                      }                      // Bias the exponent. It's actually biased by 127' but we're                      // treating the mantissa as m.0 rather than 0.m' so we need                      // to subtract another 23 from it.                      exponent -= 150;                      if (mantissa != 0)                      {                          while ((mantissa & 1) == 0)                          {                              mantissa >>= 1;                              exponent++;                          }                      }                  }              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The following statement contains a magic number: if (value.CompareTo(0.0f) == 0)              {                  sign = 0;                  mantissa = 0;                  exponent = 1;                  finite = true;              }              else              {                  var bits = SingleAsInt32(value);                  sign = (bits < 0) ? -1 : 1;                  exponent = (bits >> 23) & 0xff;                  if (exponent == 2047)                  {                      finite = false;                      mantissa = 0;                  }                  else                  {                      finite = true;                      mantissa = bits & 0xffffff;                      if (exponent == 0)                      {                          // Subnormal numbers; exponent is effectively one higher'                          // but there's no extra normalisation bit in the mantissa                          exponent = 1;                      }                      else                      {                          // Normal numbers; leave exponent as it is but add extra                          // bit to the front of the mantissa                          mantissa |= 1 << 23;                      }                      // Bias the exponent. It's actually biased by 127' but we're                      // treating the mantissa as m.0 rather than 0.m' so we need                      // to subtract another 23 from it.                      exponent -= 150;                      if (mantissa != 0)                      {                          while ((mantissa & 1) == 0)                          {                              mantissa >>= 1;                              exponent++;                          }                      }                  }              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The following statement contains a magic number: if (value.CompareTo(0.0f) == 0)              {                  sign = 0;                  mantissa = 0;                  exponent = 1;                  finite = true;              }              else              {                  var bits = SingleAsInt32(value);                  sign = (bits < 0) ? -1 : 1;                  exponent = (bits >> 23) & 0xff;                  if (exponent == 2047)                  {                      finite = false;                      mantissa = 0;                  }                  else                  {                      finite = true;                      mantissa = bits & 0xffffff;                      if (exponent == 0)                      {                          // Subnormal numbers; exponent is effectively one higher'                          // but there's no extra normalisation bit in the mantissa                          exponent = 1;                      }                      else                      {                          // Normal numbers; leave exponent as it is but add extra                          // bit to the front of the mantissa                          mantissa |= 1 << 23;                      }                      // Bias the exponent. It's actually biased by 127' but we're                      // treating the mantissa as m.0 rather than 0.m' so we need                      // to subtract another 23 from it.                      exponent -= 150;                      if (mantissa != 0)                      {                          while ((mantissa & 1) == 0)                          {                              mantissa >>= 1;                              exponent++;                          }                      }                  }              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetParts,The following statement contains a magic number: if (value.CompareTo(0.0f) == 0)              {                  sign = 0;                  mantissa = 0;                  exponent = 1;                  finite = true;              }              else              {                  var bits = SingleAsInt32(value);                  sign = (bits < 0) ? -1 : 1;                  exponent = (bits >> 23) & 0xff;                  if (exponent == 2047)                  {                      finite = false;                      mantissa = 0;                  }                  else                  {                      finite = true;                      mantissa = bits & 0xffffff;                      if (exponent == 0)                      {                          // Subnormal numbers; exponent is effectively one higher'                          // but there's no extra normalisation bit in the mantissa                          exponent = 1;                      }                      else                      {                          // Normal numbers; leave exponent as it is but add extra                          // bit to the front of the mantissa                          mantissa |= 1 << 23;                      }                      // Bias the exponent. It's actually biased by 127' but we're                      // treating the mantissa as m.0 rather than 0.m' so we need                      // to subtract another 23 from it.                      exponent -= 150;                      if (mantissa != 0)                      {                          while ((mantissa & 1) == 0)                          {                              mantissa >>= 1;                              exponent++;                          }                      }                  }              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if (u == 0)              {                  return 32;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if ((u & 0xFFFF0000) == 0)              {                  cbit += 16;                  u <<= 16;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if ((u & 0xFFFF0000) == 0)              {                  cbit += 16;                  u <<= 16;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if ((u & 0xFF000000) == 0)              {                  cbit += 8;                  u <<= 8;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if ((u & 0xFF000000) == 0)              {                  cbit += 8;                  u <<= 8;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if ((u & 0xF0000000) == 0)              {                  cbit += 4;                  u <<= 4;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if ((u & 0xF0000000) == 0)              {                  cbit += 4;                  u <<= 4;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if ((u & 0xC0000000) == 0)              {                  cbit += 2;                  u <<= 2;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if ((u & 0xC0000000) == 0)              {                  cbit += 2;                  u <<= 2;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: if ((uu & 0xFFFFFFFF00000000) == 0)              {                  return 32 + CbitHighZero((uint)uu);              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitHighZero,The following statement contains a magic number: return CbitHighZero((uint)(uu >> 32));
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitLowZero,The following statement contains a magic number: if (u == 0)              {                  return 32;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitLowZero,The following statement contains a magic number: if ((u & 0x0000FFFF) == 0)              {                  cbit += 16;                  u >>= 16;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitLowZero,The following statement contains a magic number: if ((u & 0x0000FFFF) == 0)              {                  cbit += 16;                  u >>= 16;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitLowZero,The following statement contains a magic number: if ((u & 0x000000FF) == 0)              {                  cbit += 8;                  u >>= 8;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitLowZero,The following statement contains a magic number: if ((u & 0x000000FF) == 0)              {                  cbit += 8;                  u >>= 8;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitLowZero,The following statement contains a magic number: if ((u & 0x0000000F) == 0)              {                  cbit += 4;                  u >>= 4;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitLowZero,The following statement contains a magic number: if ((u & 0x0000000F) == 0)              {                  cbit += 4;                  u >>= 4;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitLowZero,The following statement contains a magic number: if ((u & 0x00000003) == 0)              {                  cbit += 2;                  u >>= 2;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,CbitLowZero,The following statement contains a magic number: if ((u & 0x00000003) == 0)              {                  cbit += 2;                  u >>= 2;              }
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GCD,The following statement contains a magic number: const int CvMax = 32;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GCD,The following statement contains a magic number: const int CvMax = 32;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Log2,The following statement contains a magic number: number |= number >> 2;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Log2,The following statement contains a magic number: number |= number >> 4;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Log2,The following statement contains a magic number: number |= number >> 8;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Log2,The following statement contains a magic number: number |= number >> 16;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Log2,The following statement contains a magic number: number |= number >> 2;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Log2,The following statement contains a magic number: number |= number >> 4;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Log2,The following statement contains a magic number: number |= number >> 8;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Log2,The following statement contains a magic number: number |= number >> 16;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,Log2,The following statement contains a magic number: number |= number >> 32;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,NextPowerOf2,The following statement contains a magic number: number |= number >> 2;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,NextPowerOf2,The following statement contains a magic number: number |= number >> 4;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,NextPowerOf2,The following statement contains a magic number: number |= number >> 8;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,NextPowerOf2,The following statement contains a magic number: number |= number >> 16;
Magic Number,Theraot.Core,NumericHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\NumericHelper.Binary.cs,GetHi,The following statement contains a magic number: return (uint)(uu >> 32);
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,IsPrime,The following statement contains a magic number: if (number < 0)              {                  return false;              }              else              {                  if (number < _smallPrimes[_smallPrimes.Length - 1])                  {                      return Array.BinarySearch(_smallPrimes' number) >= 0;                  }                  else                  {                      if (number == 2 || number == 3)                      {                          return true;                      }                      if ((number & 1) == 0 || number % 3 == 0)                      {                          return false;                      }                      var max = NumericHelper.Sqrt(number) + 1;                      var index = 2;                      for (; index < _smallPrimes.Length; index++)                      {                          if (number % _smallPrimes[index] == 0)                          {                              return false;                          }                          if (_smallPrimes[index] > max)                          {                              return true;                          }                      }                      var test = index - (index % 6) + 5;                      while (test < max)                      {                          if (number % test == 0 || number % (test += 2) == 0)                          {                              return false;                          }                          test += 4;                      }                      return true;                  }              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,IsPrime,The following statement contains a magic number: if (number < 0)              {                  return false;              }              else              {                  if (number < _smallPrimes[_smallPrimes.Length - 1])                  {                      return Array.BinarySearch(_smallPrimes' number) >= 0;                  }                  else                  {                      if (number == 2 || number == 3)                      {                          return true;                      }                      if ((number & 1) == 0 || number % 3 == 0)                      {                          return false;                      }                      var max = NumericHelper.Sqrt(number) + 1;                      var index = 2;                      for (; index < _smallPrimes.Length; index++)                      {                          if (number % _smallPrimes[index] == 0)                          {                              return false;                          }                          if (_smallPrimes[index] > max)                          {                              return true;                          }                      }                      var test = index - (index % 6) + 5;                      while (test < max)                      {                          if (number % test == 0 || number % (test += 2) == 0)                          {                              return false;                          }                          test += 4;                      }                      return true;                  }              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,IsPrime,The following statement contains a magic number: if (number < 0)              {                  return false;              }              else              {                  if (number < _smallPrimes[_smallPrimes.Length - 1])                  {                      return Array.BinarySearch(_smallPrimes' number) >= 0;                  }                  else                  {                      if (number == 2 || number == 3)                      {                          return true;                      }                      if ((number & 1) == 0 || number % 3 == 0)                      {                          return false;                      }                      var max = NumericHelper.Sqrt(number) + 1;                      var index = 2;                      for (; index < _smallPrimes.Length; index++)                      {                          if (number % _smallPrimes[index] == 0)                          {                              return false;                          }                          if (_smallPrimes[index] > max)                          {                              return true;                          }                      }                      var test = index - (index % 6) + 5;                      while (test < max)                      {                          if (number % test == 0 || number % (test += 2) == 0)                          {                              return false;                          }                          test += 4;                      }                      return true;                  }              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,IsPrime,The following statement contains a magic number: if (number < 0)              {                  return false;              }              else              {                  if (number < _smallPrimes[_smallPrimes.Length - 1])                  {                      return Array.BinarySearch(_smallPrimes' number) >= 0;                  }                  else                  {                      if (number == 2 || number == 3)                      {                          return true;                      }                      if ((number & 1) == 0 || number % 3 == 0)                      {                          return false;                      }                      var max = NumericHelper.Sqrt(number) + 1;                      var index = 2;                      for (; index < _smallPrimes.Length; index++)                      {                          if (number % _smallPrimes[index] == 0)                          {                              return false;                          }                          if (_smallPrimes[index] > max)                          {                              return true;                          }                      }                      var test = index - (index % 6) + 5;                      while (test < max)                      {                          if (number % test == 0 || number % (test += 2) == 0)                          {                              return false;                          }                          test += 4;                      }                      return true;                  }              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,IsPrime,The following statement contains a magic number: if (number < 0)              {                  return false;              }              else              {                  if (number < _smallPrimes[_smallPrimes.Length - 1])                  {                      return Array.BinarySearch(_smallPrimes' number) >= 0;                  }                  else                  {                      if (number == 2 || number == 3)                      {                          return true;                      }                      if ((number & 1) == 0 || number % 3 == 0)                      {                          return false;                      }                      var max = NumericHelper.Sqrt(number) + 1;                      var index = 2;                      for (; index < _smallPrimes.Length; index++)                      {                          if (number % _smallPrimes[index] == 0)                          {                              return false;                          }                          if (_smallPrimes[index] > max)                          {                              return true;                          }                      }                      var test = index - (index % 6) + 5;                      while (test < max)                      {                          if (number % test == 0 || number % (test += 2) == 0)                          {                              return false;                          }                          test += 4;                      }                      return true;                  }              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,IsPrime,The following statement contains a magic number: if (number < 0)              {                  return false;              }              else              {                  if (number < _smallPrimes[_smallPrimes.Length - 1])                  {                      return Array.BinarySearch(_smallPrimes' number) >= 0;                  }                  else                  {                      if (number == 2 || number == 3)                      {                          return true;                      }                      if ((number & 1) == 0 || number % 3 == 0)                      {                          return false;                      }                      var max = NumericHelper.Sqrt(number) + 1;                      var index = 2;                      for (; index < _smallPrimes.Length; index++)                      {                          if (number % _smallPrimes[index] == 0)                          {                              return false;                          }                          if (_smallPrimes[index] > max)                          {                              return true;                          }                      }                      var test = index - (index % 6) + 5;                      while (test < max)                      {                          if (number % test == 0 || number % (test += 2) == 0)                          {                              return false;                          }                          test += 4;                      }                      return true;                  }              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,IsPrime,The following statement contains a magic number: if (number < 0)              {                  return false;              }              else              {                  if (number < _smallPrimes[_smallPrimes.Length - 1])                  {                      return Array.BinarySearch(_smallPrimes' number) >= 0;                  }                  else                  {                      if (number == 2 || number == 3)                      {                          return true;                      }                      if ((number & 1) == 0 || number % 3 == 0)                      {                          return false;                      }                      var max = NumericHelper.Sqrt(number) + 1;                      var index = 2;                      for (; index < _smallPrimes.Length; index++)                      {                          if (number % _smallPrimes[index] == 0)                          {                              return false;                          }                          if (_smallPrimes[index] > max)                          {                              return true;                          }                      }                      var test = index - (index % 6) + 5;                      while (test < max)                      {                          if (number % test == 0 || number % (test += 2) == 0)                          {                              return false;                          }                          test += 4;                      }                      return true;                  }              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,IsPrime,The following statement contains a magic number: if (number < 0)              {                  return false;              }              else              {                  if (number < _smallPrimes[_smallPrimes.Length - 1])                  {                      return Array.BinarySearch(_smallPrimes' number) >= 0;                  }                  else                  {                      if (number == 2 || number == 3)                      {                          return true;                      }                      if ((number & 1) == 0 || number % 3 == 0)                      {                          return false;                      }                      var max = NumericHelper.Sqrt(number) + 1;                      var index = 2;                      for (; index < _smallPrimes.Length; index++)                      {                          if (number % _smallPrimes[index] == 0)                          {                              return false;                          }                          if (_smallPrimes[index] > max)                          {                              return true;                          }                      }                      var test = index - (index % 6) + 5;                      while (test < max)                      {                          if (number % test == 0 || number % (test += 2) == 0)                          {                              return false;                          }                          test += 4;                      }                      return true;                  }              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,NextPrime,The following statement contains a magic number: if (fromNumber < 2)              {                  return 2;              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,NextPrime,The following statement contains a magic number: if (fromNumber < 2)              {                  return 2;              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,NextPrime,The following statement contains a magic number: if (fromNumber >= 2147483629)              {                  throw new OverflowException("2147483629 is the last prime below int.MaxValue");              }              else              {                  fromNumber++;                  return ToPrimeInternal(fromNumber);              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,ToPrime,The following statement contains a magic number: if (fromNumber <= 2)              {                  return 2;              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,ToPrime,The following statement contains a magic number: if (fromNumber <= 2)              {                  return 2;              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,ToPrime,The following statement contains a magic number: if (fromNumber >= 2147483629)              {                  return 2147483629;              }              else              {                  return ToPrimeInternal(fromNumber);              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,ToPrime,The following statement contains a magic number: if (fromNumber >= 2147483629)              {                  return 2147483629;              }              else              {                  return ToPrimeInternal(fromNumber);              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,ToPrimeInternal,The following statement contains a magic number: if (fromNumber < _smallPrimes[_smallPrimes.Length - 1])              {                  var index = Array.BinarySearch(_smallPrimes' fromNumber);                  if (index < 0)                  {                      return _smallPrimes[-index - 1];                  }                  else                  {                      return fromNumber;                  }              }              else              {                  if (fromNumber % 2 == 0)                  {                      fromNumber++;                  }                  for (var index = fromNumber; index < int.MaxValue; index += 2)                  {                      if (IsPrime(index))                      {                          return index;                      }                  }                  return fromNumber;              }
Magic Number,Theraot.Core,PrimeHelper,C:\repos\theraot_Theraot\Core\Theraot\Core\PrimeHelper.array.cs,ToPrimeInternal,The following statement contains a magic number: if (fromNumber < _smallPrimes[_smallPrimes.Length - 1])              {                  var index = Array.BinarySearch(_smallPrimes' fromNumber);                  if (index < 0)                  {                      return _smallPrimes[-index - 1];                  }                  else                  {                      return fromNumber;                  }              }              else              {                  if (fromNumber % 2 == 0)                  {                      fromNumber++;                  }                  for (var index = fromNumber; index < int.MaxValue; index += 2)                  {                      if (IsPrime(index))                      {                          return index;                      }                  }                  return fromNumber;              }
Magic Number,Theraot.Core,RamStream,C:\repos\theraot_Theraot\Core\Theraot\Core\RamStream.cs,RamStream,The following statement contains a magic number: _sectorBits = 6;
Magic Number,Theraot.Core,Range,C:\repos\theraot_Theraot\Core\Theraot\Core\Range.cs,GetHashCode,The following statement contains a magic number: return (_minimun.GetHashCode() * 7) + _maximun.GetHashCode();
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      _comparer2.GetHashCode(obj.Item2);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      _comparer3.GetHashCode(obj.Item3);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      _comparer3.GetHashCode(obj.Item3);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      _comparer4.GetHashCode(obj.Item4);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      _comparer4.GetHashCode(obj.Item4);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      _comparer4.GetHashCode(obj.Item4);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      _comparer5.GetHashCode(obj.Item5);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      _comparer5.GetHashCode(obj.Item5);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      _comparer5.GetHashCode(obj.Item5);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      _comparer5.GetHashCode(obj.Item5);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      _comparer6.GetHashCode(obj.Item6);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      _comparer6.GetHashCode(obj.Item6);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      _comparer6.GetHashCode(obj.Item6);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      _comparer6.GetHashCode(obj.Item6);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      _comparer6.GetHashCode(obj.Item6);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      _comparer7.GetHashCode(obj.Item7);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      _comparer7.GetHashCode(obj.Item7);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      _comparer7.GetHashCode(obj.Item7);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      _comparer7.GetHashCode(obj.Item7);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      _comparer7.GetHashCode(obj.Item7);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      _comparer7.GetHashCode(obj.Item7);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      (_comparer7.GetHashCode(obj.Item7) * 17) +                      _comparer8.GetHashCode(obj.Rest);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      (_comparer7.GetHashCode(obj.Item7) * 17) +                      _comparer8.GetHashCode(obj.Rest);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      (_comparer7.GetHashCode(obj.Item7) * 17) +                      _comparer8.GetHashCode(obj.Rest);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      (_comparer7.GetHashCode(obj.Item7) * 17) +                      _comparer8.GetHashCode(obj.Rest);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      (_comparer7.GetHashCode(obj.Item7) * 17) +                      _comparer8.GetHashCode(obj.Rest);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      (_comparer7.GetHashCode(obj.Item7) * 17) +                      _comparer8.GetHashCode(obj.Rest);              }
Magic Number,Theraot.Core,TupleEqualityComparer<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\theraot_Theraot\Core\Theraot\Core\TupleEqualityComparer.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(null' obj))              {                  return EqualityComparer<object>.Default.GetHashCode(null);              }              else unchecked              {                  return                      (_comparer1.GetHashCode(obj.Item1) * 17) +                      (_comparer2.GetHashCode(obj.Item2) * 17) +                      (_comparer3.GetHashCode(obj.Item3) * 17) +                      (_comparer4.GetHashCode(obj.Item4) * 17) +                      (_comparer5.GetHashCode(obj.Item5) * 17) +                      (_comparer6.GetHashCode(obj.Item6) * 17) +                      (_comparer7.GetHashCode(obj.Item7) * 17) +                      _comparer8.GetHashCode(obj.Rest);              }
Magic Number,Theraot.Threading,NoReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\NoReentrantReadWriteLock.cs,WaitCanRead,The following statement contains a magic number: if (Thread.CurrentThread != Volatile.Read(ref _ownerThread))              {                  var check = Interlocked.CompareExchange(ref _master' 1' 0);                  while (true)                  {                      switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is a writer                              // Go to wait                              _freeToRead.Wait();                              check = Interlocked.CompareExchange(ref _master' 1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToWrite.Reset();                              goto case 1;                            case 1:                              // There are readers currently                              // GO!                              Interlocked.Increment(ref _readCount);                              return;                      }                  }              }
Magic Number,Theraot.Threading,NoReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\NoReentrantReadWriteLock.cs,WaitCanWrite,The following statement contains a magic number: if (Thread.CurrentThread != Volatile.Read(ref _ownerThread))              {                  var check = Interlocked.CompareExchange(ref _master' -1' 0);                  while (true)                  {                      switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is another writer                              // Go to wait                              _freeToWrite.Wait();                              check = Interlocked.CompareExchange(ref _master' -1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToRead.Reset();                              if (Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null) == null)                              {                                  // Success                                  Interlocked.Increment(ref _writeCount);                                  return;                              }                              else                              {                                  // It was reserved by another thread                                  break;                              }                            case 1:                              // There are readers currently                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }                  }              }
Magic Number,Theraot.Threading,NoReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\NoReentrantReadWriteLock.cs,WaitCanWrite,The following statement contains a magic number: if (Thread.CurrentThread != Volatile.Read(ref _ownerThread))              {                  var check = Interlocked.CompareExchange(ref _master' -1' 0);                  while (true)                  {                      switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is another writer                              // Go to wait                              _freeToWrite.Wait();                              check = Interlocked.CompareExchange(ref _master' -1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToRead.Reset();                              if (Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null) == null)                              {                                  // Success                                  Interlocked.Increment(ref _writeCount);                                  return;                              }                              else                              {                                  // It was reserved by another thread                                  break;                              }                            case 1:                              // There are readers currently                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }                  }              }
Magic Number,Theraot.Threading,NoReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\NoReentrantReadWriteLock.cs,WaitCanWrite,The following statement contains a magic number: if (Thread.CurrentThread != Volatile.Read(ref _ownerThread))              {                  var check = Interlocked.CompareExchange(ref _master' -1' 0);                  while (true)                  {                      switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is another writer                              // Go to wait                              _freeToWrite.Wait();                              check = Interlocked.CompareExchange(ref _master' -1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToRead.Reset();                              if (Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null) == null)                              {                                  // Success                                  Interlocked.Increment(ref _writeCount);                                  return;                              }                              else                              {                                  // It was reserved by another thread                                  break;                              }                            case 1:                              // There are readers currently                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }                  }              }
Magic Number,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,CanUpgrade,The following statement contains a magic number: var check = Interlocked.CompareExchange(ref _master' -2' 1);
Magic Number,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitCanRead,The following statement contains a magic number: if (Thread.CurrentThread != Volatile.Read(ref _ownerThread))              {                  var check = Interlocked.CompareExchange(ref _master' 1' 0);                  while (true)                  {                      switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is a writer                              // Go to wait                              _freeToRead.Wait();                              check = Interlocked.CompareExchange(ref _master' 1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToWrite.Reset();                              goto case 1;                            case 1:                              // There are readers currently                              // GO!                              Interlocked.Increment(ref _readCount);                              _currentReadingCount.Value++;                              return;                      }                  }              }
Magic Number,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitCanWrite,The following statement contains a magic number: if (Thread.CurrentThread != Volatile.Read(ref _ownerThread))              {                  var check = Interlocked.CompareExchange(ref _master' -1' 0);                  while (true)                  {                      switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is another writer                              // Go to wait                              _freeToWrite.Wait();                              check = Interlocked.CompareExchange(ref _master' -1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToRead.Reset();                              if (Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null) == null)                              {                                  // Success                                  Interlocked.Increment(ref _writeCount);                                  return;                              }                              // It was reserved by another thread                              break;                            case 1:                              // There are readers currently                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }                  }              }
Magic Number,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitCanWrite,The following statement contains a magic number: if (Thread.CurrentThread != Volatile.Read(ref _ownerThread))              {                  var check = Interlocked.CompareExchange(ref _master' -1' 0);                  while (true)                  {                      switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is another writer                              // Go to wait                              _freeToWrite.Wait();                              check = Interlocked.CompareExchange(ref _master' -1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToRead.Reset();                              if (Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null) == null)                              {                                  // Success                                  Interlocked.Increment(ref _writeCount);                                  return;                              }                              // It was reserved by another thread                              break;                            case 1:                              // There are readers currently                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }                  }              }
Magic Number,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitCanWrite,The following statement contains a magic number: if (Thread.CurrentThread != Volatile.Read(ref _ownerThread))              {                  var check = Interlocked.CompareExchange(ref _master' -1' 0);                  while (true)                  {                      switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is another writer                              // Go to wait                              _freeToWrite.Wait();                              check = Interlocked.CompareExchange(ref _master' -1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToRead.Reset();                              if (Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null) == null)                              {                                  // Success                                  Interlocked.Increment(ref _writeCount);                                  return;                              }                              // It was reserved by another thread                              break;                            case 1:                              // There are readers currently                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }                  }              }
Magic Number,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitUpgrade,The following statement contains a magic number: if (owner == null || owner == Thread.CurrentThread)              {                  var check = 1;                  while (true)                  {                      switch (check)                      {                          case -2:                              // Write mode already requested                              // We are going to steal it                              // Reserve the lock - so no other writer can take it                              owner = Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null);                              if (owner == null || owner == Thread.CurrentThread)                              {                                  // Set the edge                                  Volatile.Write(ref _edge' _currentReadingCount.Value);                              }                              else                              {                                  // It was reserved by another thread - abort mission                                  return false;                              }                              if (Volatile.Read(ref _readCount) > Volatile.Read(ref _edge))                              {                                  // We still need every other reader to finish                                  _freeToWrite.Wait();                                  check = Interlocked.CompareExchange(ref _master' -1' 0);                              }                              else                              {                                  // None to wait                                  Volatile.Write(ref _master' -1);                                  check = -1;                              }                              break;                            case -1:                              // There is a writer                              // Abort mission                              _freeToRead.Reset();                              Interlocked.Increment(ref _writeCount);                              return true;                            case 0:                              // Free to proceed                              return true;                            case 1:                              // There are readers currently - of course' current thread is a reader                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }                  }              }
Magic Number,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitUpgrade,The following statement contains a magic number: if (owner == null || owner == Thread.CurrentThread)              {                  var check = 1;                  while (true)                  {                      switch (check)                      {                          case -2:                              // Write mode already requested                              // We are going to steal it                              // Reserve the lock - so no other writer can take it                              owner = Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null);                              if (owner == null || owner == Thread.CurrentThread)                              {                                  // Set the edge                                  Volatile.Write(ref _edge' _currentReadingCount.Value);                              }                              else                              {                                  // It was reserved by another thread - abort mission                                  return false;                              }                              if (Volatile.Read(ref _readCount) > Volatile.Read(ref _edge))                              {                                  // We still need every other reader to finish                                  _freeToWrite.Wait();                                  check = Interlocked.CompareExchange(ref _master' -1' 0);                              }                              else                              {                                  // None to wait                                  Volatile.Write(ref _master' -1);                                  check = -1;                              }                              break;                            case -1:                              // There is a writer                              // Abort mission                              _freeToRead.Reset();                              Interlocked.Increment(ref _writeCount);                              return true;                            case 0:                              // Free to proceed                              return true;                            case 1:                              // There are readers currently - of course' current thread is a reader                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }                  }              }
Magic Number,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitUpgrade,The following statement contains a magic number: if (owner == null || owner == Thread.CurrentThread)              {                  var check = 1;                  while (true)                  {                      switch (check)                      {                          case -2:                              // Write mode already requested                              // We are going to steal it                              // Reserve the lock - so no other writer can take it                              owner = Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null);                              if (owner == null || owner == Thread.CurrentThread)                              {                                  // Set the edge                                  Volatile.Write(ref _edge' _currentReadingCount.Value);                              }                              else                              {                                  // It was reserved by another thread - abort mission                                  return false;                              }                              if (Volatile.Read(ref _readCount) > Volatile.Read(ref _edge))                              {                                  // We still need every other reader to finish                                  _freeToWrite.Wait();                                  check = Interlocked.CompareExchange(ref _master' -1' 0);                              }                              else                              {                                  // None to wait                                  Volatile.Write(ref _master' -1);                                  check = -1;                              }                              break;                            case -1:                              // There is a writer                              // Abort mission                              _freeToRead.Reset();                              Interlocked.Increment(ref _writeCount);                              return true;                            case 0:                              // Free to proceed                              return true;                            case 1:                              // There are readers currently - of course' current thread is a reader                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }                  }              }
Missing Default,Theraot.Threading,GCMonitor,C:\repos\theraot_Theraot\Core\Theraot\Threading\GCMonitor.cs,Initialize,The following switch statement is missing a default case: switch (check)              {                  case _statusNotReady:                      GC.KeepAlive(new GCProbe());                      Volatile.Write(ref _status' _statusReady);                      break;                    case _statusPending:                      ThreadingHelper.SpinWaitUntil(ref _status' _statusReady);                      break;              }
Missing Default,Theraot.Threading,NoReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\NoReentrantReadWriteLock.cs,WaitCanRead,The following switch statement is missing a default case: switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is a writer                              // Go to wait                              _freeToRead.Wait();                              check = Interlocked.CompareExchange(ref _master' 1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToWrite.Reset();                              goto case 1;                            case 1:                              // There are readers currently                              // GO!                              Interlocked.Increment(ref _readCount);                              return;                      }
Missing Default,Theraot.Threading,NoReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\NoReentrantReadWriteLock.cs,WaitCanWrite,The following switch statement is missing a default case: switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is another writer                              // Go to wait                              _freeToWrite.Wait();                              check = Interlocked.CompareExchange(ref _master' -1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToRead.Reset();                              if (Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null) == null)                              {                                  // Success                                  Interlocked.Increment(ref _writeCount);                                  return;                              }                              else                              {                                  // It was reserved by another thread                                  break;                              }                            case 1:                              // There are readers currently                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }
Missing Default,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitCanRead,The following switch statement is missing a default case: switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is a writer                              // Go to wait                              _freeToRead.Wait();                              check = Interlocked.CompareExchange(ref _master' 1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToWrite.Reset();                              goto case 1;                            case 1:                              // There are readers currently                              // GO!                              Interlocked.Increment(ref _readCount);                              _currentReadingCount.Value++;                              return;                      }
Missing Default,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitCanWrite,The following switch statement is missing a default case: switch (check)                      {                          case -2:                          // Write mode already requested                          case -1:                              // There is another writer                              // Go to wait                              _freeToWrite.Wait();                              check = Interlocked.CompareExchange(ref _master' -1' 0);                              break;                            case 0:                              // Free to proceed                              // GO!                              _freeToRead.Reset();                              if (Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null) == null)                              {                                  // Success                                  Interlocked.Increment(ref _writeCount);                                  return;                              }                              // It was reserved by another thread                              break;                            case 1:                              // There are readers currently                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }
Missing Default,Theraot.Threading,ReentrantReadWriteLock,C:\repos\theraot_Theraot\Core\Theraot\Threading\ReentrantReadWriteLock.cs,WaitUpgrade,The following switch statement is missing a default case: switch (check)                      {                          case -2:                              // Write mode already requested                              // We are going to steal it                              // Reserve the lock - so no other writer can take it                              owner = Interlocked.CompareExchange(ref _ownerThread' Thread.CurrentThread' null);                              if (owner == null || owner == Thread.CurrentThread)                              {                                  // Set the edge                                  Volatile.Write(ref _edge' _currentReadingCount.Value);                              }                              else                              {                                  // It was reserved by another thread - abort mission                                  return false;                              }                              if (Volatile.Read(ref _readCount) > Volatile.Read(ref _edge))                              {                                  // We still need every other reader to finish                                  _freeToWrite.Wait();                                  check = Interlocked.CompareExchange(ref _master' -1' 0);                              }                              else                              {                                  // None to wait                                  Volatile.Write(ref _master' -1);                                  check = -1;                              }                              break;                            case -1:                              // There is a writer                              // Abort mission                              _freeToRead.Reset();                              Interlocked.Increment(ref _writeCount);                              return true;                            case 0:                              // Free to proceed                              return true;                            case 1:                              // There are readers currently - of course' current thread is a reader                              // Requesting write mode                              check = Interlocked.CompareExchange(ref _master' -2' 1);                              if (check == 1)                              {                                  _freeToRead.Reset();                                  check = -2;                              }                              break;                      }
