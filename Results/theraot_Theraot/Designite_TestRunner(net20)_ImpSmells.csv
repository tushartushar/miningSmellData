Implementation smell,Namespace,Class,File,Method,Description
Long Method,TestRunner,AvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\AvailabilityTests.cs,TypeAvailability,The method has 207 lines of code.
Long Identifier,TestRunner,InterfaceTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\InterfaceTests.cs,,The length of the parameter DictionaryExAsIReadOnlyDictionary is 33.
Long Identifier,TestRunner,InterfaceTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\InterfaceTests.cs,,The length of the parameter EmptyCollectionAsIReadOnlyCollection is 36.
Long Identifier,TestRunner,InterfaceTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\InterfaceTests.cs,,The length of the parameter HashSetExAsIReadOnlyCollection is 30.
Long Identifier,TestRunner,InterfaceTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\InterfaceTests.cs,,The length of the parameter ListExAsReadOnlyAsIReadOnlyCollection is 37.
Long Identifier,TestRunner,InterfaceTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\InterfaceTests.cs,,The length of the parameter ListExAsReadOnlyAsIReadOnlyList is 31.
Long Identifier,TestRunner,InterfaceTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\InterfaceTests.cs,,The length of the parameter ReadOnlyCollectionExAsIReadOnlyList is 35.
Long Statement,TestRunner,Assert,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Assert.cs,AreNotEqual,The length of the statement  "            throw new AssertionFailedException($"Unexpected: {typeof(T).Name}({found}){(message == null ? string.Empty : $" - Message: {message}")}"); " is 138.
Long Statement,TestRunner,Assert,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Assert.cs,CollectionEquals,The length of the statement  "                throw new AssertionFailedException($"Expected Count: {expectedCollection.Count} - Found: {foundCollection.Count}{(message == null ? string.Empty : $" - Message: {message}")}"); " is 176.
Long Statement,TestRunner,Assert,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Assert.cs,CollectionEquals,The length of the statement  "                    throw new AssertionFailedException($"Expected Item#{index}: {typeof(T).Name}({expectedItem}) - Found: {typeof(T).Name}({foundItem}){(message == null ? string.Empty : $" - Message: {message}")}"); " is 195.
Long Statement,TestRunner,Assert,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Assert.cs,BuildMessage,The length of the statement  "            return $"Expected: {typeof(TException).Name} - Found: {exception.GetType().Name}{(message == null ? string.Empty : $" - Message: {message}")}"; " is 143.
Long Statement,TestRunner,Assert,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Assert.cs,BuildMessage,The length of the statement  "            return $"Expected: {typeof(TException).Name} - Found value: {typeof(TFound).Name}({found}){(message == null ? string.Empty : $" - Message: {message}")}"; " is 153.
Long Statement,TestRunner,Assert,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Assert.cs,BuildMessage,The length of the statement  "            return $"Expected: {typeof(TExpected).Name}({expected}) - Found value: {typeof(TFound).Name}({found}){(message == null ? string.Empty : $" - Message: {message}")}"; " is 164.
Long Statement,TestRunner,DataGenerator,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\DataGenerator.cs,IsGeneratorMethod,The length of the statement  "            return methodInfo.HasAttribute<DataGeneratorAttribute>() && methodInfo.DeclaringType != null && methodInfo.GetParameters().Length == 0; " is 135.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<TAccumulate' Func<TAccumulate' TSource' TAccumulate>' Func<TAccumulate' TResult>' TResult>>(enumerable.Aggregate); " is 125.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<Func<TSource' TKey>' Func<TKey' IEnumerable<TSource>' TResult>' IEqualityComparer<TKey>' IEnumerable<TResult>>>(enumerable.GroupBy); " is 143.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<Func<TSource' TKey>' Func<TSource' TElement>' IEqualityComparer<TKey>' IEnumerable<IGrouping<TKey' TElement>>>>(enumerable.GroupBy); " is 143.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<Func<TSource' TKey>' Func<TSource' TElement>' Func<TKey' IEnumerable<TElement>' TResult>' IEnumerable<TResult>>>(enumerable.GroupBy); " is 144.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<Func<TSource' TKey>' Func<TSource' TElement>' Func<TKey' IEnumerable<TElement>' TResult>' IEqualityComparer<TKey>' IEnumerable<TResult>>>(enumerable.GroupBy); " is 169.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<IEnumerable<TInner>' Func<TSource' TKey>' Func<TInner' TKey>' Func<TSource' IEnumerable<TInner>' TResult>' IEnumerable<TResult>>>(enumerable.GroupJoin); " is 163.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<IEnumerable<TInner>' Func<TSource' TKey>' Func<TInner' TKey>' Func<TSource' IEnumerable<TInner>' TResult>' IEqualityComparer<TKey>' IEnumerable<TResult>>>(enumerable.GroupJoin); " is 188.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<IEnumerable<TInner>' Func<TSource' TKey>' Func<TInner' TKey>' Func<TSource' TInner' TResult>' IEnumerable<TResult>>>(enumerable.Join); " is 145.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<IEnumerable<TInner>' Func<TSource' TKey>' Func<TInner' TKey>' Func<TSource' TInner' TResult>' IEqualityComparer<TKey>' IEnumerable<TResult>>>(enumerable.Join); " is 170.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<Func<TSource' IEnumerable<TCollection>>' Func<TSource' TCollection' TResult>' IEnumerable<TResult>>>(enumerable.SelectMany); " is 135.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<Func<TSource' int' IEnumerable<TCollection>>' Func<TSource' TCollection' TResult>' IEnumerable<TResult>>>(enumerable.SelectMany); " is 140.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<Func<TSource' TKey>' Func<TSource' TElement>' IEqualityComparer<TKey>' Dictionary<TKey' TElement>>>(enumerable.ToDictionary); " is 136.
Long Statement,TestRunner,LinqAvailabilityTests,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\LinqAvailabilityTests.cs,EnumerableExtensionMethodAvailability,The length of the statement  "            No.Op<Func<Func<TSource' TKey>' Func<TSource' TElement>' IEqualityComparer<TKey>' ILookup<TKey' TElement>>>(enumerable.ToLookup); " is 129.
Long Statement,TestRunner,Program,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Program.cs,ExceptionReport,The length of the statement  "                report.Append(StringEx.Join("\r\n\r\n"' "== Exception Type =="' current.GetType().Name' "== Exception Message =="' current.Message' "== Source =="' current.Source' "== Stacktrace =="' current.StackTrace)); " is 205.
Long Statement,TestRunner,Program,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Program.cs,GetAllTests,The length of the statement  "            return TypeDiscoverer.GetAllTypes().Where(type => type.HasAttribute<TestFixtureAttribute>()).Select(type => new TestFixture(type)).Where(testFixture => testFixture.TestFixtureAttribute != null && !testFixture.Categories.Overlaps(ignoredCategories)).SelectMany(testFixture => testFixture.Type.GetMethods()).Select(method => new TestMethod(method)).Where(testMethod => testMethod.TestAttribute != null && !testMethod.Categories.Overlaps(ignoredCategories)).Select(testMethod => new Test(testMethod)); " is 498.
Magic Number,TestRunner,NumericGenerator,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\DataGenerator.cs,GenerateInt,The following statement contains a magic number: var buffer = new byte[4];
Magic Number,TestRunner,SmallPositiveNumericGenerator,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\DataGenerator.cs,GenerateInt,The following statement contains a magic number: return _random.Next(0' 2000);
Magic Number,TestRunner,StringGenerator,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\DataGenerator.cs,GenerateString,The following statement contains a magic number: var length = _random.Next(1' 16);
Magic Number,TestRunner.System.Threading,BasicAsyncTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\BasicAsyncTest.cs,SlowOperationAsync,The following statement contains a magic number: return TaskEx.FromResult(7);
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,LongWait,The following statement contains a magic number: var semaphore = new SemaphoreSlim[3];
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,LongWait,The following statement contains a magic number: semaphore[2] = new SemaphoreSlim(0);
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,LongWait,The following statement contains a magic number: var thread = new Thread              (                  () =>                  {                      Thread.Sleep(5000);                      semaphore[0].Release();                      Thread.Sleep(5000);                      semaphore[1].Release();                  }                );
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,LongWait,The following statement contains a magic number: var thread = new Thread              (                  () =>                  {                      Thread.Sleep(5000);                      semaphore[0].Release();                      Thread.Sleep(5000);                      semaphore[1].Release();                  }                );
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,LongWait,The following statement contains a magic number: source1.CancelAfter(10000);
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,LongWait,The following statement contains a magic number: source2.CancelAfter(10);
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,LongWait,The following statement contains a magic number: semaphore[2].Wait(source2.Token);
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectly,The following statement contains a magic number: var maxTasks = 3 + count;
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectly,The following statement contains a magic number: !WaitAsyncWaitCorrectlyExtractedExtracted(3' maxTasks)
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectly,The following statement contains a magic number: count < 10
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectlyExtractedExtracted,The following statement contains a magic number: var log = new CircularBucket<string>((maxTasks * 4) + 2);
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectlyExtractedExtracted,The following statement contains a magic number: var log = new CircularBucket<string>((maxTasks * 4) + 2);
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectlyExtractedExtracted,The following statement contains a magic number: var logCount = new CircularBucket<int>((maxTasks * 2) + 2);
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectlyExtractedExtracted,The following statement contains a magic number: var logCount = new CircularBucket<int>((maxTasks * 2) + 2);
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectlyExtractedExtracted,The following statement contains a magic number: source[0].CancelAfter(TimeSpan.FromSeconds(100));
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectlyExtractedExtracted,The following statement contains a magic number: var tasks = Enumerable.Range(0' maxTasks)                          .Select                          (                              _ =>                              {                                  return Task.Factory.StartNew                                  (                                      async () =>                                      {                                          log.Add("a");                                          await semaphore[0].WaitAsync                                          (                                              source[0].Token                                          ).ConfigureAwait(false);                                          Interlocked.Add(ref padding' 100);                                          logCount.Add(-1);                                          log.Add("b");                                          Thread.Sleep(1000 + padding);                                            // Calling release should give increasing results per chunk                                          log.Add("c");                                          var count = semaphore[0].Release();                                          logCount.Add(count);                                          log.Add("d");                                      }                                    ).Unwrap();                              }                            ).ToArray();
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectlyExtractedExtracted,The following statement contains a magic number: var tasks = Enumerable.Range(0' maxTasks)                          .Select                          (                              _ =>                              {                                  return Task.Factory.StartNew                                  (                                      async () =>                                      {                                          log.Add("a");                                          await semaphore[0].WaitAsync                                          (                                              source[0].Token                                          ).ConfigureAwait(false);                                          Interlocked.Add(ref padding' 100);                                          logCount.Add(-1);                                          log.Add("b");                                          Thread.Sleep(1000 + padding);                                            // Calling release should give increasing results per chunk                                          log.Add("c");                                          var count = semaphore[0].Release();                                          logCount.Add(count);                                          log.Add("d");                                      }                                    ).Unwrap();                              }                            ).ToArray();
Magic Number,TestRunner.System.Threading,SemaphoreSlimTestsEx,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\SemaphoreSlimTestsEx.cs,WaitAsyncWaitCorrectlyExtractedExtracted,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromMilliseconds(500));
Magic Number,TestRunner.System.Threading,TaskPerfTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TaskPerfTest.cs,RunAsync,The following statement contains a magic number: var tasks = Enumerable.Range(0' 10).Select              (                  _ =>                  TaskEx.Run                  (                      async () =>                      {                          var guid = Guid.NewGuid();                          var id1 = Thread.CurrentThread.ManagedThreadId;                          Console.WriteLine($"enter {id1}");                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id2 = Thread.CurrentThread.ManagedThreadId;                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id3 = Thread.CurrentThread.ManagedThreadId;                          var result = new { guid' id1' id2' id3 };                          Console.WriteLine(result);                          return result;                      }                    )              ).ToArray();
Magic Number,TestRunner.System.Threading,TaskPerfTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TaskPerfTest.cs,RunAsync,The following statement contains a magic number: var tasks = Enumerable.Range(0' 10).Select              (                  _ =>                  TaskEx.Run                  (                      async () =>                      {                          var guid = Guid.NewGuid();                          var id1 = Thread.CurrentThread.ManagedThreadId;                          Console.WriteLine($"enter {id1}");                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id2 = Thread.CurrentThread.ManagedThreadId;                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id3 = Thread.CurrentThread.ManagedThreadId;                          var result = new { guid' id1' id2' id3 };                          Console.WriteLine(result);                          return result;                      }                    )              ).ToArray();
Magic Number,TestRunner.System.Threading,TaskPerfTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TaskPerfTest.cs,RunAsync,The following statement contains a magic number: var tasks = Enumerable.Range(0' 10).Select              (                  _ =>                  TaskEx.Run                  (                      async () =>                      {                          var guid = Guid.NewGuid();                          var id1 = Thread.CurrentThread.ManagedThreadId;                          Console.WriteLine($"enter {id1}");                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id2 = Thread.CurrentThread.ManagedThreadId;                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id3 = Thread.CurrentThread.ManagedThreadId;                          var result = new { guid' id1' id2' id3 };                          Console.WriteLine(result);                          return result;                      }                    )              ).ToArray();
Magic Number,TestRunner.System.Threading,TaskPerfTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TaskPerfTest.cs,RunAsync,The following statement contains a magic number: var tasks = Enumerable.Range(0' 10).Select              (                  _ =>                  TaskEx.Run                  (                      async () =>                      {                          var guid = Guid.NewGuid();                          var id1 = Thread.CurrentThread.ManagedThreadId;                          Console.WriteLine($"enter {id1}");                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id2 = Thread.CurrentThread.ManagedThreadId;                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id3 = Thread.CurrentThread.ManagedThreadId;                          var result = new { guid' id1' id2' id3 };                          Console.WriteLine(result);                          return result;                      }                    )              ).ToArray();
Magic Number,TestRunner.System.Threading,TaskPerfTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TaskPerfTest.cs,RunAsync,The following statement contains a magic number: var tasks = Enumerable.Range(0' 10).Select              (                  _ =>                  TaskEx.Run                  (                      async () =>                      {                          var guid = Guid.NewGuid();                          var id1 = Thread.CurrentThread.ManagedThreadId;                          Console.WriteLine($"enter {id1}");                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id2 = Thread.CurrentThread.ManagedThreadId;                          await TaskEx.Delay(5 * 1000).ConfigureAwait(false);                          var id3 = Thread.CurrentThread.ManagedThreadId;                          var result = new { guid' id1' id2' id3 };                          Console.WriteLine(result);                          return result;                      }                    )              ).ToArray();
Magic Number,TestRunner.System.Threading,ThreadTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\ThreadTest.cs,SimpleSync,The following statement contains a magic number: var control = new int[3];
Magic Number,TestRunner.System.Threading,ThreadTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\ThreadTest.cs,SimpleSync,The following statement contains a magic number: var thread = new Thread              (                  () =>                  {                      var spinWait = new SpinWait();                      Volatile.Write(ref control[0]' 1);                      while (Volatile.Read(ref control[1]) == 0)                      {                          spinWait.SpinOnce();                      }                        Volatile.Write(ref control[2]' 1);                  }                );
Magic Number,TestRunner.System.Threading,ThreadTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\ThreadTest.cs,SimpleSync,The following statement contains a magic number: Assert.AreEqual(1' Volatile.Read(ref control[2]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRespectsState,The following statement contains a magic number: var timer = new Timer(input => Volatile.Write(ref data[0]' (int)input)' value' 700' Timeout.Infinite);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRespectsState,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRuns,The following statement contains a magic number: var timer = new Timer(_ => Volatile.Write(ref data[0]' 1)' null' 700' Timeout.Infinite);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRuns,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRunsMultipleTimesAccordingPeriod,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRunsMultipleTimesAccordingPeriod,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRunsMultipleTimesAccordingPeriod,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRunsMultipleTimesAccordingPeriod,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRunsMultipleTimesAccordingPeriod,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRunsMultipleTimesAccordingPeriod,The following statement contains a magic number: Assert.AreEqual(6' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRunsOnceWithTimeoutInfinite,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' Timeout.Infinite);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRunsOnceWithTimeoutInfinite,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCallbackRunsOnceWithTimeoutInfinite,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeChanged,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeChanged,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeChanged,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeChanged,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeChanged,The following statement contains a magic number: timer.Change(700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeChanged,The following statement contains a magic number: timer.Change(700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeChanged,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeChanged,The following statement contains a magic number: Assert.AreEqual(4' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStopped,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStopped,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStopped,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStopped,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStopped,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStopped,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStoppedIgnoringPeriod,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStoppedIgnoringPeriod,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStoppedIgnoringPeriod,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStoppedIgnoringPeriod,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStoppedIgnoringPeriod,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerCanBeStoppedIgnoringPeriod,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithDueTimeBelowNegativeOneThrows,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithDueTimeBelowNegativeOneThrows,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithDueTimeBelowNegativeOneThrows,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithDueTimeBelowNegativeOneThrows,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithDueTimeBelowNegativeOneThrows,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => timer.Change(-2 - dueTime' Timeout.Infinite));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithPeriodBelowNegativeOneThrows,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithPeriodBelowNegativeOneThrows,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithPeriodBelowNegativeOneThrows,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithPeriodBelowNegativeOneThrows,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerChangeWithPeriodBelowNegativeOneThrows,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => timer.Change(Timeout.Infinite' -2 - period));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerDueTimeBelowMinusOneThrows,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException' Timer>(() => new Timer(_ => { }' null' -2 - dueTime' Timeout.Infinite));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerDueTimeCanBeChanged,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerDueTimeCanBeChanged,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerDueTimeCanBeChanged,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerDueTimeCanBeChanged,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerDueTimeCanBeChanged,The following statement contains a magic number: timer.Change(700' Timeout.Infinite);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerDueTimeCanBeChanged,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerDueTimeCanBeChanged,The following statement contains a magic number: Assert.AreEqual(3' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerInfiniteDueTimeIgnoresPositivePeriod,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerPeriodBelowMinusOneThrows,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException' Timer>(() => new Timer(_ => { }' null' Timeout.Infinite' -2 - period));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerPeriodCanBeChanged,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerPeriodCanBeChanged,The following statement contains a magic number: var timer = new Timer(_ => Interlocked.Increment(ref data[0])' null' 700' 217);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerPeriodCanBeChanged,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerPeriodCanBeChanged,The following statement contains a magic number: Assert.AreEqual(2' Volatile.Read(ref data[0]));
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerPeriodCanBeChanged,The following statement contains a magic number: timer.Change(0' 285);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerPeriodCanBeChanged,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TestRunner.System.Threading,TimerTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\System\Threading\TimerTest.cs,TimerPeriodCanBeChanged,The following statement contains a magic number: Assert.AreEqual(6' Volatile.Read(ref data[0]));
Magic Number,TestRunner.Theraot.Core,ReverseStringBuilderTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Theraot\Core\ReverseStringBuilderTest.cs,LengthIncreasesOnPrepend,The following statement contains a magic number: var builder = new ReverseStringBuilder(100);
Magic Number,TestRunner.Theraot.Core,ReverseStringBuilderTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Theraot\Core\ReverseStringBuilderTest.cs,LengthStartsAtZero,The following statement contains a magic number: var builder = new ReverseStringBuilder(10);
Magic Number,TestRunner.Theraot.Core,ReverseStringBuilderTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Theraot\Core\ReverseStringBuilderTest.cs,ToStringTakesRange,The following statement contains a magic number: var builder = new ReverseStringBuilder(100);
Magic Number,TestRunner.Theraot.Core,ReverseStringBuilderTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Theraot\Core\ReverseStringBuilderTest.cs,ToStringTakesRange,The following statement contains a magic number: Assert.AreEqual("12345"' builder.ToString(builder.Length - 1' 5));
Magic Number,TestRunner.Theraot.Core,ReverseStringBuilderTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Theraot\Core\ReverseStringBuilderTest.cs,ToStringWithBackIndexBeyondCapacityThrows,The following statement contains a magic number: var builder = new ReverseStringBuilder(10);
Magic Number,TestRunner.Theraot.Core,ReverseStringBuilderTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Theraot\Core\ReverseStringBuilderTest.cs,ToStringWithBackIndexBeyondLengthReturnsNullChars,The following statement contains a magic number: var builder = new ReverseStringBuilder(20);
Magic Number,TestRunner.Theraot.Core,ReverseStringBuilderTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Theraot\Core\ReverseStringBuilderTest.cs,ToStringWithNegativeBackIndexThrows,The following statement contains a magic number: var builder = new ReverseStringBuilder(10);
Magic Number,TestRunner.Theraot.Core,ReverseStringBuilderTest,D:\research\architectureSmells\repos1\theraot_Theraot\TestRunner\Theraot\Core\ReverseStringBuilderTest.cs,ToStringWithNegativeBackIndexThrowsEvenWithCapacity,The following statement contains a magic number: var builder = new ReverseStringBuilder(20);
